{"version":3,"sources":["auth.ts","dataProvider.ts","authProvider.ts","layout/Logo.tsx","layout/AppBar.tsx","layout/SubMenu.tsx","companies/sectors.ts","companies/CompanyAvatar.tsx","companies/CountryField.tsx","companies/CompanyCard.tsx","companies/GridList.tsx","companies/relations.ts","tags/TagChip.tsx","companies/CompanyListFilter.tsx","companies/SelectAllButton.tsx","companies/CompanyList.tsx","companies/sizes.ts","companies/DistributorInput.tsx","companies/CompanyCreate.tsx","contacts/Avatar.tsx","misc/Status.tsx","tags/TagsList.tsx","companies/LogoField.tsx","tags/colors.ts","tags/TagsListEdit.tsx","companies/CompanyAside.tsx","deals/stages.ts","notes/StatusSelector.tsx","notes/NewNote.tsx","notes/Note.tsx","notes/NotesIterator.tsx","companies/CompanyShow.tsx","companies/CompanyEdit.tsx","companies/index.ts","contacts/ContactAside.tsx","contacts/ContactShow.tsx","contacts/ContactListFilter.tsx","contacts/ContactList.tsx","contacts/ContactEdit.tsx","contacts/ContactCreate.tsx","contacts/index.tsx","tasks/TaskAside.tsx","tasks/TaskShow.tsx","tasks/TaskListFilter.tsx","tasks/MarkDoneButton.tsx","tasks/TaskList.tsx","tasks/status.ts","tasks/TaskEdit.tsx","tasks/TaskCreate.tsx","tasks/index.ts","products/ProductAvatar.tsx","products/ProductCard.tsx","products/ProductGridList.tsx","products/ProductListFilter.tsx","products/ProductList.tsx","products/CreatePropertyType.tsx","products/ProductCreate.tsx","products/ProductImageField.tsx","products/ProductAside.tsx","products/ProductShow.tsx","products/ProductEdit.tsx","products/index.ts","productFamilies/Avatar.tsx","productFamilies/ProductFamilyListFilter.tsx","productFamilies/ProductFamilyList.tsx","productFamilies/CreateCategory.tsx","productFamilies/ProductFamilyCreate.tsx","productFamilies/ProductFamilyAside.tsx","productFamilies/ProductFamilyEdit.tsx","productFamilies/ProductFamilyShow.tsx","productFamilies/index.ts","layout/Menu.tsx","layout/themes.ts","layout/Layout.tsx","layout/Login.tsx","deals/DealCard.tsx","deals/DealColumn.tsx","deals/DealListContent.tsx","deals/types.ts","deals/DealCreate.tsx","deals/ContactList.tsx","deals/DealShow.tsx","deals/OnlyMineInput.tsx","deals/DealList.tsx","deals/index.ts","dashboard/HotContacts.tsx","dashboard/LatestNotes.tsx","dashboard/DealsPipeline.tsx","dashboard/CompaniesMap.tsx","dashboard/Dashboard.tsx","auth/RegisterForm.tsx","auth/RegisterPage.tsx","configuration/actions.ts","configuration/Configuration.tsx","customRoutes.tsx","i18n/en.ts","App.tsx","reportWebVitals.js","index.tsx"],"names":["CREDENTIALS_LOCAL_STORAGE_ITEM","setCredentials","credentials","localStorage","setItem","JSON","stringify","getCredentials","raw","getItem","parse","getList","resource","params","a","token","access_token","config","headers","Authorization","axios","get","response","Promise","resolve","data","reject","message","status","getOne","getMany","getManyReference","create","post","update","put","updateMany","deleteOne","delete","deleteMany","dataProvider","baseURL","refreshToken","refresh_token","undefined","login","username","password","decodedToken","decodeJwt","permissions","register","first_name","last_name","email","getIdentity","id","fullName","avatar","checkError","authProvider","checkAuth","Boolean","logout","removeItem","getPermissions","useStyles","makeStyles","theme","root","display","breakpoints","down","spacing","logoIcon","color","palette","secondary","light","logoText","primary","Logo","classes","className","Typography","variant","title","flex","textOverflow","whiteSpace","overflow","spacer","ConfigurationMenu","forwardRef","props","ref","useTranslate","MenuItemLink","to","primaryText","leftIcon","onClick","sidebarIsOpen","CustomUserMenu","UserMenu","CustomAppBar","AppBar","elevation","userMenu","icon","minWidth","transition","paddingLeft","sidebarIsClosed","SubMenu","handleToggle","isOpen","name","children","dense","translate","useSelector","state","admin","ui","sidebarOpen","header","MenuItem","button","ListItemIcon","Tooltip","placement","Collapse","in","timeout","unmountOnExit","List","component","disablePadding","sectors","map","sector","width","height","backgroundColor","img","objectFit","small","large","CompanyAvatar","record","size","logo","src","process","alt","imgProps","clsx","image","sizeInPixel","medium","CountryField","source","ImageField","paper","flexDirection","justifyContent","padding","position","identity","alignItems","textAlign","marginTop","stats","singleStat","statIcon","marginRight","checkbox","top","right","identifier","lrft","CompanyCard","useState","setElevation","useListContext","onToggleItem","ids","loaded","selectedIds","Link","linkToRecord","underline","onMouseEnter","onMouseLeave","Paper","Checkbox","edge","checked","includes","tabIndex","disableRipple","e","stopPropagation","Box","ReferenceField","reference","link","relation","Chip","label","SelectField","choices","style","marginBottom","nb_contacts","nb_notes","gridList","flexWrap","gap","grey","LoadingGridList","nbChildren","fn","key","Array","from","length","_","LoadedGridList","GridList","relations","TagChip","border","cursor","container","order","marginLeft","CompanyListFilter","useGetIdentity","useGetList","page","perPage","field","FilterLiveSearch","FilterList","FilterListItem","value","tags","sales_id","SelectAllButton","onSelect","Button","useActionStyles","createButton","importOptions","parseConfig","dynamicTyping","CompanyListActions","TopToolbar","SortButton","fields","ExportButton","CreateButton","basePath","sizes","DistributorInput","AutocompleteInput","optionText","country_iso","allowEmpty","resettable","inline","CustomLayout","CardContent","paddingTop","ml","maxWidth","CustomDivider","mb","Divider","Avatar","charAt","getColorFromStatus","Status","borderRadius","bgcolor","ColoredChipField","ChipField","TagsList","ReferenceArrayField","SingleFieldList","linkType","LogoField","colors","TagsListEdit","open","setOpen","newTagName","setNewTagName","newTagColor","setNewTagColor","anchorEl","setAnchorEl","version","setVersion","disabled","setDisabled","allTags","useGetMany","enabled","useUpdate","useCreate","unselectedTagIds","filter","handleAddTag","handleOpenCreateDialog","tag","mt","onDelete","tagId","handleDeleteTag","event","currentTarget","onClose","Dialog","onSubmit","preventDefault","onSuccess","v","DialogTitle","DialogContent","autoFocus","fullWidth","onChange","target","selected","handleClick","DialogActions","type","margin","RoundButton","CompanyAside","EditButton","ShowButton","href","website","rel","linkedIn","TextField","distributor_id","phone_number","DateField","options","year","month","day","FunctionField","render","stages","stageNames","opportunity","won","lost","delayed","stageChoices","StatusSelector","setStatus","select","toolbar","NewNote","showStatus","useRecordContext","useResourceContext","text","setText","getCurrentDate","date","setDate","loading","refresh","useRefresh","notify","useNotify","foreignKeyMapping","last_seen","multiline","rows","now","Date","setMinutes","getMinutes","getTimezoneOffset","toISOString","slice","contacts","deals","companies","products","metadata","textarea","paddingRight","paddingBottom","lineHeight","buttons","cancel","content","paragraph","fontFamily","typography","fontSize","body1","visibility","Note","note","isLast","isHover","setHover","isEditing","setEditing","noteText","setNoteText","useDelete","mutationMode","handleDelete","showTime","locales","dateStyle","timeStyle","FilledInput","split","index","IconButton","NotesIterator","CompanyShowContent","useShowContext","setValue","Card","gridGap","Tabs","indicatorColor","textColor","newValue","Tab","nb_deals","ReferenceManyField","sort","TabPanel","other","role","hidden","ContactsIterator","contact","ListItem","RouterLink","ListItemAvatar","ListItemText","ListItemSecondaryAction","formatDistance","CreateRelatedContactButton","pathname","company_id","startIcon","DealsIterator","deal","stage","amount","toLocaleString","notation","currency","currencyDisplay","minimumSignificantDigits","updated_at","list","actions","aside","filterDefaultValues","pagination","Pagination","rowsPerPageOptions","Create","SimpleForm","initialValues","redirect","TextInput","validate","required","SelectInput","formClassName","FormDataConsumer","formData","ReferenceInput","ReferenceArrayInput","AutocompleteArrayInput","helperText","sales","edit","show","ShowBase","BusinessIcon","ContactAside","EmailField","gender","background","TasksIterator","task","disableGutters","ContactShowContent","ContactListFilter","last_seen_gte","endOfYesterday","last_seen_lte","startOfWeek","startOfMonth","subMonths","ContactListContent","SimpleListLoading","hasLeftAvatarOrIcon","hasSecondaryText","ContactListActions","Spacer","ContactEditContent","useEditContext","save","FormWithRedirect","formProps","mr","BooleanInput","Toolbar","omit","EditBase","transform","ContactsIcon","TaskAside","TaskShowContent","TaskListFilter","due_date_gte","due_date_lte","doneState","MarkDoneButton","BulkUpdateButton","TaskListContent","Task","due_date","TaskListActions","TaskBulkActionButtons","BulkDeleteButton","statuses","TaskEditContent","DateInput","bulkActionButtons","FormatListBulletedIcon","ProductAvatar","console","log","model","family","ProductCard","nb_properties","Skeleton","animation","ProductGridList","ProductListFilter","familyData","familyIds","family_id","ProductListActions","CreatePropertyType","useCreateSuggestionContext","onCancel","onCreate","setName","unit","setUnit","synonyms","setSynonyms","payload","propertyContainer","ProductImageField","ProductAside","ProductShowContent","addLabel","Datagrid","useTheme","TabbedForm","FormTab","ArrayInput","SimpleFormIterator","FiberManualRecordIcon","ProductFamilyListFilter","ProductFamilyListContent","ProductFamilyListActions","CreateCategory","ProductFamilyAside","ListButton","ProductFamilyEditContent","ProductFamilyShowContent","p","CategoryIcon","transitions","easing","sharp","duration","leavingScreen","closed","Menu","menuCrm","menuProduct","menuCustomers","setState","menu","classnames","DashboardMenuItem","_scrollToTop","tasks","productFamilies","darkTheme","main","sidebar","overrides","MuiAppBar","colorSecondary","MuiButtonBase","opacity","lightTheme","dark","contrastText","default","shape","RaMenuItemLink","borderLeft","active","MuiPaper","elevation1","boxShadow","backgroundClip","MuiButton","contained","MuiLinearProgress","colorPrimary","barColorPrimary","MuiFilledInput","MuiSnackbarContent","Layout","appBar","minHeight","backgroundImage","backgroundRepeat","backgroundSize","card","hint","form","input","renderInput","meta","touched","error","inputProps","Form","withTypes","Login","setLoading","useLogin","location","useLocation","auth","nextPathname","catch","values","errors","handleSubmit","noValidate","CardActions","CircularProgress","thickness","Notification","LoginWithTheme","ThemeProvider","createTheme","cardContent","cardText","DealCard","useRedirect","draggableId","String","provided","snapshot","draggableProps","dragHandleProps","innerRef","isDragging","gutterBottom","borderTopLeftRadius","borderTopRightRadius","droppable","DealColumn","dealIds","align","droppableId","droppableProvided","droppableProps","isDraggingOver","placeholder","initialDeals","reduce","obj","getDealsByColumn","columns","acc","push","forEach","b","DealListContent","currentSort","filterValues","setDeals","useContext","DataProviderContext","useMutation","useEffect","newDeals","isEqual","onDragEnd","result","destination","column","sourceDeal","destinationDeal","splice","Number","columnDeals","all","previousData","sourceColumn","destinationColumn","sourceDeals","destinationDeals","pop","typeChoices","DealCreate","useDataProvider","then","oldDeal","defaultValue","NumberInput","ul","listStyle","li","ContactList","dialog","DealShow","DealShowContent","format","start_at","description","OnlyMineInput","alwaysOn","useListFilterContext","displayedFilters","setFilters","FormControlLabel","control","Switch","newFilterValues","defaultProps","dealFilters","SearchInput","DealActions","FilterButton","filters","path","match","MonetizationOnIcon","HotContacts","isInteger","contactData","contactIds","contactTotal","total","contactsLoaded","SimpleList","secondaryText","addSuffix","leftAvatar","noteTextText","LatestNotes","contactNotesData","contactNotesIds","contactNotesLoaded","dealNotesData","dealNotesIds","dealNotesLoaded","companyNotesData","companyNotesIds","companyNotesLoaded","allNotes","concat","valueOf","NoteSource","Deal","Contact","Company","DealsPipeline","unorderedIds","setIds","orderedIds","Map","memo","setTooltipContent","colorScale","scaleQuantile","domain","max","nb_companies","range","projection","projectionConfig","rotate","scale","center","zoom","geography","geographies","geo","ISO_A3","properties","cur","find","iso3","fill","stroke","NAME","POP_EST","rsmKey","CompaniesMap","setContent","Dashboard","Input","RegisterForm","redirectTo","useSafeSetState","submit","confirm","Container","Grid","item","xs","sm","autoComplete","Register","RegisterWithTheme","changeTheme","Configuration","locale","useLocale","setLocale","useSetLocale","dispatch","useDispatch","Title","customRoutes","RouteWithoutLayout","exact","customEnglishMessages","englishMessages","defaultTheme","i18nProvider","polyglotI18nProvider","messages","App","Admin","loginPage","layout","dashboard","Resource","ListGuesser","EditGuesser","ShowGuesser","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","CssBaseline","document","getElementById"],"mappings":"wSAMMA,EAAiC,cAMhC,SAASC,EAAeC,GAC7BC,aAAaC,QACXJ,EACAK,KAAKC,UAAUJ,IAIZ,SAASK,IACd,IAAMC,EAAML,aAAaM,QAAQT,GACjC,OAAY,OAARQ,EACK,KAEFH,KAAKK,MAAMF,GCNpB,IAAMG,EAAO,uCAAG,WAAOC,EAAkBC,GAAzB,uBAAAC,EAAA,sEAEFZ,EAAcK,IACdQ,EAHE,OAGMb,QAHN,IAGMA,OAHN,EAGMA,EAAac,aACrBC,EAAS,CACXC,QAAS,CAAEC,cAAc,UAAD,OAAYJ,IACpCF,UANI,SAQeO,IAAMC,IAAN,WAAkCT,EAAlC,SAAmDK,GARlE,cAQFK,EARE,yBASDC,QAAQC,QAAQF,EAASG,OATxB,yCAWFH,EAAW,KAAMA,SAXf,kBAYDC,QAAQG,OAAO,CAACC,QAASL,EAASG,KAAMG,OAAQN,EAASM,UAZxD,0DAAH,wDAgBPC,EAAM,uCAAG,WAAOjB,EAAkBC,GAAzB,uBAAAC,EAAA,sEAEDZ,EAAcK,IACdQ,EAHC,OAGOb,QAHP,IAGOA,OAHP,EAGOA,EAAac,aACrBC,EAAS,CACXC,QAAS,CAAEC,cAAc,UAAD,OAAYJ,IACpCF,UANG,SAQgBO,IAAMC,IAAN,WAAiCT,EAAjC,SAAkDK,GARlE,cAQDK,EARC,yBASAC,QAAQC,QAAQF,EAASG,OATzB,yCAWDH,EAAW,KAAMA,SAXhB,kBAYAC,QAAQG,OAAO,CAACC,QAASL,EAASG,KAAMG,OAAQN,EAASM,UAZzD,0DAAH,wDAgBNE,EAAO,uCAAG,WAAOlB,EAAkBC,GAAzB,uBAAAC,EAAA,sEAEFZ,EAAcK,IACdQ,EAHE,OAGMb,QAHN,IAGMA,OAHN,EAGMA,EAAac,aACrBC,EAAS,CACXC,QAAS,CAAEC,cAAc,UAAD,OAAYJ,IACpCF,UANI,SAQeO,IAAMC,IAAN,WAAkCT,EAAlC,UAAoDK,GARnE,cAQFK,EARE,yBASDC,QAAQC,QAAQF,EAASG,OATxB,yCAWFH,EAAW,KAAMA,SAXf,kBAYDC,QAAQG,OAAO,CAACC,QAASL,EAASG,KAAMG,OAAQN,EAASM,UAZxD,0DAAH,wDAgBPG,EAAgB,uCAAG,WAAOnB,EAAkBC,GAAzB,uBAAAC,EAAA,sEAEXZ,EAAcK,IACdQ,EAHW,OAGHb,QAHG,IAGHA,OAHG,EAGHA,EAAac,aACrBC,EAAS,CACXC,QAAS,CAAEC,cAAc,UAAD,OAAYJ,IACpCF,UANa,SAQMO,IAAMC,IAAN,WAA2CT,EAA3C,SAA4DK,GARlE,cAQXK,EARW,yBASVC,QAAQC,QAAQF,EAASG,OATf,yCAWXH,EAAW,KAAMA,SAXN,kBAYVC,QAAQG,OAAO,CAACC,QAASL,EAASG,KAAMG,OAAQN,EAASM,UAZ/C,0DAAH,wDAgBhBI,EAAM,uCAAG,WAAOpB,EAAkBC,GAAzB,uBAAAC,EAAA,sEAEDZ,EAAcK,IACdQ,EAHC,OAGOb,QAHP,IAGOA,OAHP,EAGOA,EAAac,aACrBC,EAAS,CACXC,QAAS,CAAEC,cAAc,UAAD,OAAYJ,KALjC,SAOgBK,IAAMa,KAAN,WAAkCrB,EAAlC,SAAmDC,EAAQI,GAP3E,cAODK,EAPC,yBAQAC,QAAQC,QAAQF,EAASG,OARzB,yCAUDH,EAAW,KAAMA,SAVhB,kBAWAC,QAAQG,OAAO,CAACC,QAASL,EAASG,KAAMG,OAAQN,EAASM,UAXzD,0DAAH,wDAeNM,EAAM,uCAAG,WAAOtB,EAAkBC,GAAzB,uBAAAC,EAAA,sEAEDZ,EAAcK,IACdQ,EAHC,OAGOb,QAHP,IAGOA,OAHP,EAGOA,EAAac,aACrBC,EAAS,CACXC,QAAS,CAAEC,cAAc,UAAD,OAAYJ,KALjC,SAOgBK,IAAMe,IAAN,WAAiCvB,EAAjC,SAAkDC,EAAQI,GAP1E,cAODK,EAPC,yBAQAC,QAAQC,QAAQF,EAASG,OARzB,yCAUDH,EAAW,KAAMA,SAVhB,kBAWAC,QAAQG,OAAO,CAACC,QAASL,EAASG,KAAMG,OAAQN,EAASM,UAXzD,0DAAH,wDAeNQ,EAAU,uCAAG,WAAOxB,EAAkBC,GAAzB,uBAAAC,EAAA,sEAELZ,EAAcK,IACdQ,EAHK,OAGGb,QAHH,IAGGA,OAHH,EAGGA,EAAac,aACrBC,EAAS,CACXC,QAAS,CAAEC,cAAc,UAAD,OAAYJ,KAL7B,SAOYK,IAAMe,IAAN,WAAgCvB,EAAhC,UAAkDC,EAAQI,GAPtE,cAOLK,EAPK,yBAQJC,QAAQC,QAAQF,EAASG,OARrB,yCAULH,EAAW,KAAMA,SAVZ,kBAWJC,QAAQG,OAAO,CAACC,QAASL,EAASG,KAAMG,OAAQN,EAASM,UAXrD,0DAAH,wDAeVS,EAAS,uCAAG,WAAOzB,EAAkBC,GAAzB,uBAAAC,EAAA,sEAEJZ,EAAcK,IACdQ,EAHI,OAGIb,QAHJ,IAGIA,OAHJ,EAGIA,EAAac,aACrBC,EAAS,CACXC,QAAS,CAAEC,cAAc,UAAD,OAAYJ,IACpCF,UANM,SAQaO,IAAMkB,OAAN,WAAoC1B,EAApC,SAAqDK,GARlE,cAQJK,EARI,yBASHC,QAAQC,QAAQF,EAASG,OATtB,yCAWJH,EAAW,KAAMA,SAXb,kBAYHC,QAAQG,OAAO,CAACC,QAASL,EAASG,KAAMG,OAAQN,EAASM,UAZtD,0DAAH,wDAgBTW,EAAU,uCAAG,WAAO3B,EAAkBC,GAAzB,uBAAAC,EAAA,sEAELZ,EAAcK,IACdQ,EAHK,OAGGb,QAHH,IAGGA,OAHH,EAGGA,EAAac,aACrBC,EAAS,CACXC,QAAS,CAAEC,cAAc,UAAD,OAAYJ,IACpCF,UANO,SAQYO,IAAMkB,OAAN,WAAmC1B,EAAnC,UAAqDK,GARjE,cAQLK,EARK,yBASJC,QAAQC,QAAQF,EAASG,OATrB,yCAWLH,EAAW,KAAMA,SAXZ,kBAYJC,QAAQG,OAAO,CAACC,QAASL,EAASG,KAAMG,OAAQN,EAASM,UAZrD,0DAAH,wDAgBHY,EAAe,CACxB7B,QAAYA,EACZkB,OAAYA,EACZC,QAAYA,EACZC,iBAAkBA,EAClBC,OAAYA,EACZE,OAAYA,EACZE,WAAYA,EACZE,OAAYD,EACZE,WAAYA,G,SC9JVE,EAAU,QAqBVC,EAAY,uCAAG,oCAAA5B,EAAA,yDACXZ,EAAcK,IADH,wDAIXQ,EAJW,OAIHb,QAJG,IAIHA,OAJG,EAIHA,EAAayC,cAErB1B,EAAS,CACXC,QAAS,CAAEC,cAAc,UAAD,OAAYJ,KAPvB,SASIK,IAAMa,KAAN,UAA4BQ,EAA5B,iBAA+CG,EAAW3B,GAT9D,OASbK,EATa,OAUTN,EAAiBM,EAASG,KAA1BT,aACRf,EAAe,2BACRC,GADO,IAEVc,aAAcA,KAbD,4CAAH,qDAiBZ6B,EAAK,uCAAG,2CAAA/B,EAAA,6DAASgC,EAAT,EAASA,SAAUC,EAAnB,EAAmBA,SAAnB,kBAEiB3B,IAAMa,KAAN,UAA0BQ,EAA1B,UAA2C,CAAEK,WAAUC,aAFxE,cAEAzB,EAFA,SAGkCA,EAASG,KAAzCT,EAHF,EAGEA,aAAc2B,EAHhB,EAGgBA,cAChBK,EAAeC,YAAsBjC,GAC3Cf,EAAe,CACXe,eACA2B,gBACAO,YAAaF,EAAaE,cARxB,kBAUC3B,QAAQC,WAVT,yCAYAF,EAAW,KAAMA,SAZjB,kBAaCC,QAAQG,OAAO,CAACC,QAASL,EAASG,KAAMG,OAAQN,EAASM,UAb1D,0DAAH,sDAiBLuB,EAAQ,uCAAG,uCAAArC,EAAA,6DACbsC,EADa,EACbA,WACAC,EAFa,EAEbA,UACAC,EAHa,EAGbA,MACAR,EAJa,EAIbA,SACAC,EALa,EAKbA,SALa,kBAcU3B,IAAMa,KAAN,UAA4BQ,EAA5B,aAAgD,CAC/DW,aACAC,YACAC,QACAR,WACAC,aAnBK,qEAuBHzB,EAAW,KAAMA,SAvBd,kBAwBFC,QAAQG,OAAO,CAACC,QAASL,EAASG,KAAMG,OAAQN,EAASM,UAxBvD,yDAAH,sDA4BR2B,EAAW,uCAAG,0CAAAzC,EAAA,sEAEZ4B,IACMxC,EAAcK,IACdQ,EAJM,OAIEb,QAJF,IAIEA,OAJF,EAIEA,EAAac,aACrBC,EAAS,CACXC,QAAS,CAAEC,cAAc,UAAD,OAAYJ,KAN5B,SAQSK,IAAMC,IAAN,UAA2BoB,EAA3B,SAA2CxB,GARpD,cAQRK,EARQ,SASqBA,EAASG,KAAlC+B,EATI,EASJA,GAAIC,EATA,EASAA,SAAUC,EATV,EASUA,OATV,kBAWLnC,QAAQC,QAAQ,CAAEgC,KAAIC,WAAUC,YAX3B,2DAiBLnC,QAAQG,OAAR,OAjBK,0DAAH,qDAqBViC,EAAU,uCAAG,6BAAA7C,EAAA,yDACD,OADUc,EAAT,EAASA,SACQ,MAAXA,GAA6B,MAAXA,EADxB,yBAGRc,IAHQ,wEAKDnB,QAAQG,UALP,gCAQTH,QAAQC,WARC,yDAAH,sDAWJoC,EAA8B,CACvCf,MAAOA,EACPc,WAAYA,EACZE,UAAW,kBFvHNC,QAAQvD,KEuHyBgB,QAAQC,UAAYD,QAAQG,UAClEqC,OAAO,WAAD,4BAAE,sBAAAjD,EAAA,sEACEM,IAAMC,IAAN,UAAaoB,EAAb,YADF,cFrGVtC,aAAa6D,WAAWhE,GEqGd,kBAGGuB,QAAQC,WAHX,2CAAF,kDAAC,GAKP+B,YAAaA,EACbU,eAAgB,WACZ,IAAM/D,EAAcK,IACd2C,EAAW,OAAGhD,QAAH,IAAGA,OAAH,EAAGA,EAAagD,YACjC,OAAOA,EAAc3B,QAAQC,QAAQ0B,GAAe3B,QAAQG,UAEhEyB,SAAUA,G,uGCtIRe,GAAYC,aAAW,SAAAC,GAAK,YAAK,CACnCC,MAAI,GACAC,QAAS,QADT,cAECF,EAAMG,YAAYC,KAAK,MAAQ,CAC5BF,QAAS,SAHb,2BAKW,UALX,oBAMKF,EAAMK,QAAQ,IANnB,GAQJC,SAAU,CACNC,MAAOP,EAAMQ,QAAQC,UAAUC,OAEnCC,SAAU,CACNJ,MAAOP,EAAMQ,QAAQI,QAAQF,WAgBtBG,GAZF,WACT,IAAMC,EAAUhB,KAChB,OACI,uBAAKiB,UAAWD,EAAQb,KAAxB,UACI,eAAC,IAAD,CAA0Bc,UAAWD,EAAQR,WAC7C,eAACU,EAAA,EAAD,CAAYC,QAAQ,KAAKF,UAAWD,EAAQH,SAA5C,0BCnBNb,GAAYC,YAAW,CACzBmB,MAAO,CACHC,KAAM,EACNC,aAAc,WACdC,WAAY,SACZC,SAAU,UAEdC,OAAQ,CACJJ,KAAM,KAIRK,GAAoBC,sBAAqB,SAACC,EAAOC,GACjCC,cAClB,OACI,eAACC,EAAA,EAAD,CACIF,IAAKA,EACLG,GAAG,iBACHC,YAAY,gBACZC,SAAU,eAAC,IAAD,IACVC,QAASP,EAAMO,QACfC,eAAa,OAKnBC,GAAiB,SAACT,GAAD,OACnB,eAACU,EAAA,EAAD,2BAAcV,GAAd,aACI,eAACF,GAAD,QAoBOa,GAhBM,SAACX,GAClB,IAAMZ,EAAUhB,KAChB,OACI,gBAACwC,EAAA,EAAD,2BAAYZ,GAAZ,IAAmBa,UAAW,EAAGC,SAAU,eAAC,GAAD,IAA3C,UACI,eAACxB,EAAA,EAAD,CACIC,QAAQ,KACRV,MAAM,UACNQ,UAAWD,EAAQI,MACnB9B,GAAG,sBAEP,eAAC,GAAD,IACA,uBAAM2B,UAAWD,EAAQS,c,kICrC/BzB,GAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCyC,KAAM,CAAEC,SAAU1C,EAAMK,QAAQ,IAChC6B,cAAe,CACX,MAAO,CACHS,WAAY,sDACZC,YAAa5C,EAAMK,QAAQ,KAGnCwC,gBAAiB,CACb,MAAO,CACHF,WAAY,sDACZC,YAAa5C,EAAMK,QAAQ,SA4DxByC,GA9CC,SAACpB,GACb,IAAQqB,EAAsDrB,EAAtDqB,aAAcC,EAAwCtB,EAAxCsB,OAAQC,EAAgCvB,EAAhCuB,KAAMR,EAA0Bf,EAA1Be,KAAMS,EAAoBxB,EAApBwB,SAAUC,EAAUzB,EAAVyB,MAC9CC,EAAYxB,cACZd,EAAUhB,KACVoC,EAAgBmB,cAClB,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,GAAGC,eAGtBC,EACF,gBAACC,GAAA,EAAD,CAAUR,MAAOA,EAAOS,QAAM,EAAC3B,QAASc,EAAxC,UACI,eAACc,GAAA,EAAD,CAAc9C,UAAWD,EAAQ2B,KAAjC,SACKO,EAAS,eAAC,KAAD,IAAiBP,IAE/B,eAACzB,EAAA,EAAD,CAAYC,QAAQ,UAAUV,MAAM,gBAApC,SACK6C,EAAUH,QAKvB,OACI,gBAAC,WAAD,WACKf,GAAiBc,EACdU,EAEA,eAACI,GAAA,EAAD,CAAS5C,MAAOkC,EAAUH,GAAOc,UAAU,QAA3C,SACKL,IAGT,eAACM,GAAA,EAAD,CAAUC,GAAIjB,EAAQkB,QAAQ,OAAOC,eAAa,EAAlD,SACI,eAACC,GAAA,EAAD,CACIjB,MAAOA,EACPkB,UAAU,MACVC,gBAAc,EACdvD,UACImB,EACMpB,EAAQoB,cACRpB,EAAQ+B,gBAPtB,SAUKK,U,mNC/ERqB,GAAU,CACnB,qBACA,uBACA,uBACA,4BACFC,KAAI,SAAAC,GAAM,MAAK,CAAErF,GAAIqF,EAAQxB,KAAMwB,M,uCCG/B3E,GAAYC,YAAW,CACzBT,OAAQ,CACJoF,MAAO,GACPC,OAAQ,GACRC,gBAAiB,aAErBC,IAAK,CACDC,UAAW,WAEfC,MAAO,CACHL,MAAO,GACPC,OAAQ,IAEZK,MAAO,CACHN,MAAO,GACPC,OAAQ,MAIHM,GAAgB,SAAC,GAMvB,IALHC,EAKE,EALFA,OAKE,IAJFC,YAIE,MAJK,QAIL,EACIrE,EAAUhB,KAChB,OAAKoF,EACDA,EAAOE,KASP,eAAC,KAAD,CACIC,IAAKC,GAAyBJ,EAAOE,KACrCG,IAAKL,EAAOjC,KACZlC,UAAWD,EAAQxB,OACnBkG,SAAU,CAAEzE,UAAW0E,aAAK3E,EAAQ+D,IAAK/D,EAAQqE,OAZrD,eAAC,KAAD,CACII,IAAKL,EAAOjC,KACZlC,UAAWD,EAAQxB,OAFvB,SAII,eAAC,KAAD,MANY,M,UCzBlBQ,GAAYC,aAA8B,SAAAC,GAAK,MAAK,CACtD0F,MAAO,CACHhB,MAAO,SAAAhD,GAAK,OAAIA,EAAMgD,YAIxBiB,GAAc,CAChBC,OAAQ,GACRb,MAAO,IAGEc,GAAe,SAAC,GAUtB,IATHX,EASE,EATFA,OASE,IARFY,cAQE,MARK,MAQL,MAPF5E,aAOE,MAPI,WAOJ,MANFiE,KAOMrE,EAAUhB,GAAU,CAAC4E,MAAOiB,QADhC,MANK,SAML,KAEF,OAAKT,EAGD,eAACa,GAAA,EAAD,CACIb,OAAQA,EACRY,OAAQA,EACR5E,MAAOA,EACPJ,QAASA,IAPG,MClBlBhB,GAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCgG,MAAO,CACHrB,OAAQ,IACRD,MAAO,IACPxE,QAAS,OACT+F,cAAe,SACfC,eAAgB,gBAChBC,QAAS,MACTC,SAAU,YAEdC,SAAU,CACNnG,QAAS,OACT+F,cAAe,SACfK,WAAY,UAEhBrD,KAAM,CACFsD,UAAW,SACXC,UAAWxG,EAAMK,QAAQ,IAE7BoG,MAAO,CACHvG,QAAS,OACTgG,eAAgB,eAChBxB,MAAO,QAEXgC,WAAY,CACRxG,QAAS,OACToG,WAAY,UAEhBK,SAAU,CACNC,YAAa5G,EAAMK,QAAQ,IAE/BwG,SAAU,CACNT,SAAU,WACVU,IAAK,EACLC,MAAO,GAEXC,WAAY,CACRZ,SAAU,WACVU,IAAK9G,EAAMK,QAAQ,GACnB4G,KAAM,OAIDC,GAAc,SAAC,GAAqC,IAAnChC,EAAkC,EAAlCA,OACpBpE,EAAUhB,KAChB,EAAkCqH,mBAAS,GAA3C,oBAAO5E,EAAP,KAAkB6E,EAAlB,KACA,EAAyDC,eAA9BC,GAA3B,EAAQjK,KAAR,EAAckK,IAAd,EAAmBC,OAAnB,EAA2BF,cAAcG,EAAzC,EAAyCA,YACzC,OACI,eAAC,KAAD,CACIpD,UAAWqD,KACX5F,GAAI6F,aAAa,aAAczC,EAAO9F,GAAI,QAC1CwI,UAAU,OACVC,aAAc,kBAAMT,EAAa,IACjCU,aAAc,kBAAMV,EAAa,IALrC,SAOI,gBAACW,GAAA,EAAD,CAAOhH,UAAWD,EAAQkF,MAAOzD,UAAWA,EAA5C,UACI,eAACyF,GAAA,EAAD,CACIC,KAAK,QACLC,QAAST,EAAYU,SAASjD,EAAO9F,IACrCgJ,UAAW,EACXC,eAAa,EACbtH,UAAWD,EAAQ+F,SACnB5E,QAAS,SAACqG,GACNA,EAAEC,kBACFjB,EAAapC,EAAO9F,OAG5B,eAAC4B,EAAA,EAAD,CACIC,QAAQ,QACRV,MAAM,gBACNQ,UAAWD,EAAQkG,WAHvB,oBAKS9B,EAAO9F,MAEhB,uBAAK2B,UAAWD,EAAQuF,SAAxB,UACI,eAAC,GAAD,CAAenB,OAAQA,IACvB,uBAAKnE,UAAWD,EAAQmC,KAAxB,UACI,gBAACuF,GAAA,EAAD,CAAKtI,QAAQ,OAAOoG,WAAW,SAA/B,UACA,eAACtF,EAAA,EAAD,CAAYC,QAAQ,YAApB,SACKiE,EAAOjC,OAEZ,eAACwF,GAAA,EAAD,CACIvD,OAAQA,EACRY,OAAO,aACP4C,UAAU,YACVC,MAAM,EAJV,SAMI,eAAC,GAAD,CAAcxD,KAAK,eAGtBD,EAAO0D,UACJ,eAACC,GAAA,EAAD,CACIC,MAAO5D,EAAO0D,SACd3H,QAAQ,WACRkE,KAAK,UAGb,eAAC4D,GAAA,EAAD,CACIxI,MAAM,gBACNuF,OAAO,SACPkD,QAASzE,GACTW,OAAQA,UAIpB,uBAAKnE,UAAWD,EAAQ2F,MAAxB,UACI,uBAAK1F,UAAWD,EAAQ4F,WAAxB,UACI,eAAC,KAAD,CACInG,MAAM,WACNQ,UAAWD,EAAQ6F,WAEvB,iCACI,eAAC3F,EAAA,EAAD,CACIC,QAAQ,YACRgI,MAAO,CAAEC,cAAe,GAF5B,SAIKhE,EAAOiE,cAEZ,eAACnI,EAAA,EAAD,CAAYC,QAAQ,UAAUV,MAAM,gBAApC,SACK2E,EAAOiE,YAAc,EAChB,WACA,kBAIlB,uBAAKpI,UAAWD,EAAQ4F,WAAxB,UACI,eAAC,KAAD,CACInG,MAAM,WACNQ,UAAWD,EAAQ6F,WAEvB,iCACI,eAAC3F,EAAA,EAAD,CACIC,QAAQ,YACRgI,MAAO,CAAEC,cAAe,GAF5B,SAIKhE,EAAOkE,WAEZ,eAACpI,EAAA,EAAD,CAAYC,QAAQ,UAAUV,MAAM,gBAApC,SACK2E,EAAOkE,SAAW,EAAI,QAAU,wBCjJ3DtJ,GAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCqJ,SAAU,CACNnJ,QAAS,OACToJ,SAAU,OACV5E,MAAQ,OACR6E,IAAK,OAETvD,MAAO,CACHrB,OAAQ,IACRD,MAAO,IACPxE,QAAS,OACT+F,cAAe,SACfrB,gBAAiB5E,EAAMQ,QAAQgJ,KAAK,UAOtCC,GAAkB,WACpB,IAJWC,EAAoBC,EAIzB7I,EAAUhB,KAChB,OACI,eAAC0I,GAAA,EAAD,CAAKzH,UAAWD,EAAQuI,SAAxB,UANOK,EAOI,GAPgBC,EAOZ,SAAAC,GAAG,OACV,eAAC7B,GAAA,EAAD,CAAOhH,UAAWD,EAAQkF,OAAY4D,IAPlDC,MAAMC,KAAK,CAAEC,OAAQL,IAAc,SAACM,EAAGJ,GAAJ,OAAYD,EAAGC,UAahDK,GAAiB,WACnB,MAAsB5C,eAAdE,EAAR,EAAQA,IAAKlK,EAAb,EAAaA,KACPyD,EAAUhB,KAEhB,OAAKyH,GAAQlK,EAGT,eAACmL,GAAA,EAAD,CAAKzH,UAAWD,EAAQuI,SAAxB,SACK9B,EAAI/C,KAAI,SAACpF,GAAD,OACL,eAAC,GAAD,CAAsB8F,OAAQ7H,EAAK+B,IAAjBA,QALJ,MAWjB8K,GAAW,WAEpB,OADmB7C,eAAXG,OACQ,eAAC,GAAD,IAAqB,eAAC,GAAD,K,uGCvD5B2C,GAAY,CACrB,cACA,eACA,WACA,qBACF3F,KAAI,SAAA2F,GAAS,MAAK,CAAE/K,GAAI+K,EAAWlH,KAAMkH,MCF9BC,GAAU,SAAC,GAAD,IAAGlF,EAAH,EAAGA,OAAH,OACnB,qCACMA,GACM,eAAC2D,GAAA,EAAD,CACAC,MAAO5D,EAAOjC,KACdkC,KAAK,QACL8D,MAAO,CACHrE,gBAAiBM,EAAO3E,MACxB8J,OAAQ,EACRC,OAAQ,gBCUtBxK,GAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCuK,UAAU,aACNC,OAAQ,EACRC,WAAYzK,EAAMK,QAAQ,GAC1BuG,YAAa5G,EAAMK,QAAQ,GAC3BqC,SAAU,QACT1C,EAAMG,YAAYC,KAAK,MAAQ,CAC5BF,QAAS,aAKRwK,GAAoB,WAC7B,IAAM5J,EAAUhB,KACRuG,EAAasE,eAAbtE,SACR,EAAsBuE,aAClB,OACA,CAAEC,KAAM,EAAGC,QAAS,IACpB,CAAEC,MAAO,OAAQP,MAAO,QAHpBnN,EAAR,EAAQA,KAAMkK,EAAd,EAAcA,IAKd,OACI,uBAAKxG,UAAWD,EAAQyJ,UAAxB,UACI,eAACS,GAAA,EAAD,IAEA,eAACC,GAAA,EAAD,CAAYnC,MAAM,WAAWrG,KAAM,eAAC,KAAD,IAAnC,SACK0H,GAAU3F,KAAI,SAAAoE,GAAQ,OACnB,eAACsC,GAAA,EAAD,CAEIpC,MAAOF,EAAS3F,KAChBkI,MAAO,CAAEvC,SAAUA,EAASxJ,KAFvBwJ,EAASxJ,SAO1B,eAAC6L,GAAA,EAAD,CAAYnC,MAAM,OAAOrG,KAAM,eAAC,KAAD,IAA/B,SACK8E,GACGlK,GACAkK,EAAI/C,KAAI,SAAApF,GAAE,OACN,eAAC8L,GAAA,EAAD,CAEIpC,MAAO,eAAC,GAAD,CAAS5D,OAAQ7H,EAAK+B,KAC7B+L,MAAO,CAAEC,KAAM,CAAChM,KAFXA,QAOrB,eAAC6L,GAAA,EAAD,CAAYnC,MAAM,SAASrG,KAAM,eAAC,KAAD,IAAjC,SACK8B,GAAQC,KAAI,SAAAC,GAAM,OACf,eAACyG,GAAA,EAAD,CAEIpC,MAAOrE,EAAOxB,KACdkI,MAAO,CAAE1G,OAAQA,EAAOrF,KAFnBqF,EAAOrF,SAOxB,eAAC6L,GAAA,EAAD,CACInC,MAAM,kBACNrG,KAAM,eAAC,KAAD,IAFV,SAII,eAACyI,GAAA,EAAD,CACIpC,MAAM,KACNqC,MAAO,CACHE,SAAUhF,GAAYA,EAASjH,Y,wCC9DxCkM,GAfS,WACpB,MAAgCjE,eAAxBE,EAAR,EAAQA,IAAWgE,GAAnB,EAAalO,KAAb,EAAmBkO,UACnB,OACI,eAACC,GAAA,EAAD,CACIvJ,QAAS,SAACqG,GACNA,EAAEC,kBACFgD,EAAShE,IAEbuB,MAAM,aALV,SAOI,eAAC,KAAD,OCmBN2C,GAAkB1L,aAAW,SAAAC,GAAK,MAAK,CACzC0L,aAAc,CACVjB,WAAYzK,EAAMK,QAAQ,QAI5BsL,GAAgB,CAClBC,YAAa,CAETC,eAAe,IAIjBC,GAAqB,SAACpK,GACxB,IAAMZ,EAAU2K,KAChB,OACI,gBAACM,GAAA,EAAD,WACI,eAACC,GAAA,EAAD,CAAYC,OAAQ,CAAC,KAAM,UAC3B,eAAC,GAAD,IACA,eAACC,GAAA,EAAD,IACA,eAAC,KAAD,2BAAkBxK,GAAWiK,KAC7B,eAACQ,GAAA,EAAD,CACIC,SAAS,aACTnL,QAAQ,YACR6H,MAAM,cACN/H,UAAWD,EAAQ4K,mB,iIC9DtBW,GAAQ,CACjB,CAAEjN,GAAI,EAAG6D,KAAM,cACf,CAAE7D,GAAI,GAAI6D,KAAM,iBAChB,CAAE7D,GAAI,GAAI6D,KAAM,mBAChB,CAAE7D,GAAI,IAAK6D,KAAM,oBACjB,CAAE7D,GAAI,IAAK6D,KAAM,0BCMNqJ,GATU,SAAC5K,GAAD,OACrB,eAAC6K,GAAA,EAAD,2BACQ7K,GADR,IAEI8K,WAAY,SAAAtH,GAAM,OAAIA,EAASA,EAAOuH,YAAP,UAAwBvH,EAAOjC,KAA/B,aAAwCiC,EAAOuH,YAA/C,eAAmEvH,EAAOjC,MAAS,IAClHyJ,YAAU,EACVC,YAAU,M,gBCkBZ7M,GAAYC,YAAW,CACzB6M,OAAQ,CACJ1M,QAAS,eACTuK,WAAY,MACZ,gBAAiB,CACbA,WAAY,MA6FlBoC,GAAe,SAAC,GAAD,IAAG3J,EAAH,EAAGA,SAAH,OAEjB,eAAC4J,GAAA,EAAD,UACI,gBAACtE,GAAA,EAAD,CAAKtI,QAAQ,OAAb,UACI,eAACsI,GAAA,EAAD,CAAKuE,WAAY,EAAjB,SACI,eAAC,KAAD,UACI,eAAC,KAAD,QAGR,eAACvE,GAAA,EAAD,CAAKwE,GAAI,EAAG7L,KAAK,IAAI8L,SAAU,IAA/B,SACK/J,UAMXgK,GAAgB,kBAClB,eAAC1E,GAAA,EAAD,CAAK2E,GAAI,EAAT,SACI,eAACC,GAAA,EAAD,O,gKCxIKC,GAAS,SAAC,GAAD,IAAGnI,EAAH,EAAGA,OAAH,OAClB,gBAAC,KAAD,CAAWG,IAAKH,EAAO5F,OAAvB,UACK4F,EAAOlG,WAAWsO,OAAO,GACzBpI,EAAOjG,UAAUqO,OAAO,OCL3BC,GAAqB,SAAC/P,GAAD,MACZ,SAAXA,EACM,UACW,SAAXA,EACA,UACW,QAAXA,EACA,UACW,gBAAXA,EACA,UACA,QAEGgQ,GAAS,SAAC,GAAD,IAAGhQ,EAAH,EAAGA,OAAH,OAClB,eAACgL,GAAA,EAAD,CACI9D,MAAO,GACPC,OAAQ,GACRzE,QAAQ,eACRuN,aAAc,EACdC,QAASH,GAAmB/P,GAC5B6G,UAAU,U,4CCfZsJ,GAAmB,SAAC,GAAD,IAAGzI,EAAH,EAAGA,OAAWxD,EAAd,0BACrBwD,EACI,eAAC0I,GAAA,EAAD,yBACI1I,OAAQA,GACJxD,GAFR,IAGIuH,MAAO,CAAErE,gBAAiBM,EAAO3E,MAAO8J,OAAQ,GAChDhG,UAAU,UAEd,MAEFvE,GAAYC,YAAW,CACzBE,KAAM,CACFC,QAAS,kBAIJ2N,GAAW,SAAC,GAAqC,IAAnC3I,EAAkC,EAAlCA,OACjBpE,EAAUhB,KAChB,OAAKoF,EAED,eAAC4I,GAAA,EAAD,CACI5I,OAAQA,EACRkH,SAAS,YACT5P,SAAS,WACTsJ,OAAO,OACP4C,UAAU,OACV3H,UAAWD,EAAQb,KANvB,SAQI,eAAC8N,GAAA,EAAD,CAAiBC,UAAU,EAAO3J,UAAU,OAA5C,SACI,eAAC,GAAD,CACIyB,OAAO,OACP7E,QAAQ,WACRkE,KAAK,cAdD,MCnBlBrF,GAAYC,YAAW,CACzB2F,MAAO,CACHZ,UAAW,aAIba,GAAc,CAChBC,OAAQ,GACRb,MAAO,IAGEkJ,GAAY,SAAC,GAQnB,IAPH/I,EAOE,EAPFA,OAOE,KANFY,OAME,EALFX,aAKE,MALK,SAKL,EACIrE,EAAUhB,KAChB,OAAKoF,EACDA,EAAOE,KAMP,sBACIC,IAAKC,GAAyBJ,EAAOE,KACrCG,IAAKL,EAAOjC,KACZ/B,MAAOgE,EAAOjC,KACdyB,MAAOiB,GAAYR,GACnBR,OAAQgB,GAAYR,GACpBpE,UAAWD,EAAQ4E,QAXvB,eAAC,KAAD,UACI,eAAC,KAAD,MAHY,M,sLC1BXwI,GAAS,CAClB,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WCmBSC,GAAe,SAAC,GAMtB,IALHjJ,EAKE,EALFA,OACAwD,EAIE,EAJFA,UAKA,EAAwBvB,oBAAS,GAAjC,oBAAOiH,EAAP,KAAaC,EAAb,KACA,EAAoClH,mBAAS,IAA7C,oBAAOmH,EAAP,KAAmBC,EAAnB,KACA,EAAsCpH,mBAAS+G,GAAO,IAAtD,oBAAOM,EAAP,KAAoBC,EAApB,KACA,EAAgCtH,mBAA6B,MAA7D,oBAAOuH,EAAP,KAAiBC,EAAjB,KACA,EAA8BxH,mBAAS,GAAvC,oBAAOyH,EAAP,KAAgBC,EAAhB,KACA,EAAgC1H,oBAAS,GAAzC,oBAAO2H,EAAP,KAAiBC,EAAjB,KAEA,EAA+BnE,aAC3B,OACA,CAAEC,KAAM,EAAGC,QAAS,IACpB,CAAEC,MAAO,OAAQP,MAAO,OACxB,GACA,CAAEoE,YALQI,EAAd,EAAQ3R,KAAekK,EAAvB,EAAuBA,IAOvB,EAA+B0H,aAAW,OAAQ/J,EAAOkG,KAAM,CAC3D8D,QAAShK,EAAOkG,MAAQlG,EAAOkG,KAAKrB,OAAS,IADnCqB,EAAd,EAAQ/N,KAGR,GAHA,EAAoBmK,OAGH2H,gBAAVrR,EAAP,qBACA,EAAiBsR,eAAVxR,EAAP,qBAEMyR,EAAmB9H,GAAOA,EAAI+H,QAAO,SAAAlQ,GAAE,OAAK8F,EAAOkG,KAAKjD,SAAS/I,MAiBjEmQ,EAAe,SAACnQ,GAClB,IAAMgM,EAAkB,uBAAOlG,EAAOkG,MAAd,CAAoBhM,IAC5CtB,EAAO4K,EAAWxD,EAAO9F,GAAI,CAAEgM,QAAQlG,GACvCyJ,EAAY,OAGVa,EAAyB,WAC3BnB,GAAQ,GACRM,EAAY,MACZI,GAAY,IAsChB,OACI,uCACK3D,EAAK5G,KAAI,SAAAiL,GAAG,OACT,eAACjH,GAAA,EAAD,CAAKkH,GAAI,EAAGvC,GAAI,EAAhB,SACI,eAACtE,GAAA,EAAD,CACI1D,KAAK,QACLlE,QAAQ,WACR0O,SAAU,kBA7DN,SAACvQ,GACrB,IAAMgM,EAAqBlG,EAAOkG,KAAKkE,QACnC,SAACM,GAAD,OAAuBA,IAAUxQ,KAErCtB,EAAO4K,EAAWxD,EAAO9F,GAAI,CAAEgM,QAAQlG,GAyDP2K,CAAgBJ,EAAIrQ,KACpC0J,MAAO2G,EAAIxM,KACXgG,MAAO,CAAErE,gBAAiB6K,EAAIlP,MAAO8J,OAAQ,MAN7BoF,EAAIrQ,OAUhC,eAACoJ,GAAA,EAAD,CAAKkH,GAAI,EAAT,SACI,eAAC7G,GAAA,EAAD,CACIpG,KAAM,eAAC,KAAD,IACN0C,KAAK,QACLlE,QAAQ,WACRgB,QAhFG,SAAC6N,GAChBnB,EAAYmB,EAAMC,gBAgFNjH,MAAM,UACNvI,MAAM,cAGd,gBAAC,KAAD,CACI6N,KAAM1O,QAAQgP,GACdsB,QAnFQ,WAChBrB,EAAY,OAmFJD,SAAUA,EAHd,iBAKKW,QALL,IAKKA,OALL,EAKKA,EAAkB7K,KAAI,SAAApF,GAAE,OACrB,eAACuE,GAAA,EAAD,CAAmB1B,QAAS,kBAAMsN,EAAanQ,IAA/C,SACI,eAACyJ,GAAA,EAAD,CACI1D,KAAK,QACLlE,QAAQ,WACR6H,MAAOkG,GAAWA,EAAQ5P,GAAI6D,KAC9BgG,MAAO,CACHrE,gBAAiBoK,GAAWA,EAAQ5P,GAAImB,MACxC8J,OAAQ,GAEZpI,QAAS,kBAAMsN,EAAanQ,OATrBA,MAanB,eAACuE,GAAA,EAAD,CAAU1B,QAASuN,EAAnB,SACI,eAAC3G,GAAA,EAAD,CACIpG,KAAM,eAAC,KAAD,IACN0C,KAAK,QACLlE,QAAQ,WACRgB,QAASuN,EACTjP,MAAM,UACNuI,MAAM,wBAIlB,eAACmH,GAAA,EAAD,CACI7B,KAAMA,EACN4B,QAAS,kBAAM3B,GAAQ,IACvB,kBAAgB,oBAHpB,SAKI,wBAAM6B,SAvFM,SAACJ,GACrBA,EAAMK,iBACNpB,GAAY,GACZnR,EACI,OACA,CAAEqF,KAAMqL,EAAY/N,MAAOiO,GAC3B,CACI4B,UAAW,YAAe,IAAZ/S,EAAW,EAAXA,KACVS,EACI4K,EACAxD,EAAO9F,GACP,CAAEgM,KAAK,GAAD,oBAAMlG,EAAOkG,MAAb,CAAmB/N,EAAK+B,MAC9B8F,EACA,CACIkL,UAAW,WACP7B,EAAc,IACdE,EAAeP,GAAO,IACtBG,GAAQ,GAERQ,GAAW,SAAAwB,GAAC,OAAIA,EAAI,YAoEpC,UACI,eAACC,GAAA,EAAD,CAAalR,GAAG,oBAAhB,8BAGA,gBAACmR,GAAA,EAAD,WACI,eAAC,KAAD,CACIC,WAAS,EACT1H,MAAM,WACN2H,WAAS,EACTtF,MAAOmD,EACPoC,SAvGO,SAC3BZ,GAEAvB,EAAcuB,EAAMa,OAAOxF,UAsGX,eAAC3C,GAAA,EAAD,CAAKtI,QAAQ,OAAOoJ,SAAS,OAAO5E,MAAO,IAAKgL,GAAI,EAApD,SACKxB,GAAO1J,KAAI,SAAAjE,GAAK,OACb,eAAC,GAAD,CAEIA,MAAOA,EACPqQ,SAAUrQ,IAAUiO,EACpBqC,YAAa,WACTpC,EAAelO,KAJdA,WAUrB,gBAACuQ,GAAA,EAAD,WACI,eAAC,KAAD,CAAQ7O,QAAS,kBAAMoM,GAAQ,IAAQ9N,MAAM,UAA7C,oBAGA,eAAC,KAAD,CACIwQ,KAAK,SACLxQ,MAAM,UACNuO,SAAUA,EAHd,iCAclBhP,GAAYC,YAAW,CACzBE,KAAM,CACFyE,MAAO,GACPC,OAAQ,GACR8I,aAAc,GACdvN,QAAS,eACT8Q,OAAQ,KAIVC,GAAc,SAAC,GAA2C,IAAzC1Q,EAAwC,EAAxCA,MAAOsQ,EAAiC,EAAjCA,YAAaD,EAAoB,EAApBA,SACjC9P,EAAUhB,KAChB,OACI,yBACIiR,KAAK,SACLhQ,UAAWD,EAAQb,KACnBgJ,MAAO,CACHrE,gBAAiBrE,EACjB8J,OAAQuG,EAAW,iBAAmB,QAE1C3O,QAAS4O,KC/NRK,GAAe,SAAC,GAAD,IACxBhM,EADwB,EACxBA,OADwB,IAExByD,YAFwB,MAEjB,OAFiB,SAOxBzD,EACI,gBAACsD,GAAA,EAAD,CAAKwE,GAAI,EAAGtI,MAAO,IAAKhC,SAAU,IAAlC,UACI,eAAC8F,GAAA,EAAD,CAAKjC,UAAU,SAAS4G,GAAI,EAA5B,SACc,SAATxE,EACG,eAACwI,GAAA,EAAD,CACI/E,SAAS,aACTlH,OAAQA,EACR4D,MAAM,iBAGV,eAACsI,GAAA,EAAD,CACIhF,SAAS,aACTlH,OAAQA,EACR4D,MAAM,mBAKlB,eAAC9H,EAAA,EAAD,CAAYC,QAAQ,YAApB,0BACA,eAACmM,GAAA,EAAD,IAEA,gBAAC5E,GAAA,EAAD,CAAKkH,GAAI,EAAT,sBACa,eAAChI,GAAA,EAAD,CAAM2J,KAAMnM,EAAOoM,QAASX,OAAO,SAASY,IAAI,aAAhD,SAA8DrM,EAAOoM,UAC9E,wBAFJ,aAGc,eAAC5J,GAAA,EAAD,CAAM2J,KAAMnM,EAAOsM,SAAUb,OAAO,SAASY,IAAI,aAAjD,yBAEd,gBAAC/I,GAAA,EAAD,CAAKkH,GAAI,EAAT,uBACc,eAAC+B,GAAA,EAAD,CAAW3L,OAAO,WAAWZ,OAAQA,OAElDA,EAAOwM,gBACJ,gBAAClJ,GAAA,EAAD,CAAKkH,GAAI,EAAT,0BACiB,eAACjH,GAAA,EAAD,CACLvD,OAAQA,EACRY,OAAO,iBACP4C,UAAU,YAHL,SAKL,eAAC+I,GAAA,EAAD,CAAW3L,OAAO,OAAOZ,OAAQA,SAKhDA,EAAOyM,cACJ,gBAACnJ,GAAA,EAAD,CAAKkH,GAAI,EAAT,UACI,eAAC+B,GAAA,EAAD,CAAW3L,OAAO,eAAeZ,OAAQA,IAAW,IACpD,eAAClE,EAAA,EAAD,CAAYC,QAAQ,QAAQV,MAAM,gBAAgB8D,UAAU,OAA5D,qBAIR,gBAACmE,GAAA,EAAD,CAAKkH,GAAI,EAAGvC,GAAI,EAAhB,UACI,eAACsE,GAAA,EAAD,CAAW3L,OAAO,YAClB,wBACA,eAAC2L,GAAA,EAAD,CAAW3L,OAAO,SAHtB,IAGgC,eAAC2L,GAAA,EAAD,CAAW3L,OAAO,YAAa,IAC3D,eAAC2L,GAAA,EAAD,CAAW3L,OAAO,iBAGtB,eAAC9E,EAAA,EAAD,CAAYC,QAAQ,YAApB,wBACA,eAACmM,GAAA,EAAD,IAEA,gBAAC5E,GAAA,EAAD,CAAKkH,GAAI,EAAT,UACI,eAAC1O,EAAA,EAAD,CACIC,QAAQ,QACRV,MAAM,gBACN8D,UAAU,OAHd,sBAMc,IACd,eAACuN,GAAA,EAAD,CACI9L,OAAO,aACP+L,QAAS,CAAEC,KAAM,UAAWC,MAAO,OAAQC,IAAK,WAChDzR,MAAM,kBAEV,wBACA,eAACS,EAAA,EAAD,CACIqD,UAAU,OACVpD,QAAQ,QACRV,MAAM,gBAHV,yBAMc,IACd,eAACkI,GAAA,EAAD,CACIjM,SAAS,YACTsJ,OAAO,WACP4C,UAAU,QAHd,SAKI,eAACuJ,GAAA,EAAD,CACInM,OAAO,YACPoM,OAAQ,SAAAhN,GAAM,OACVA,EAAM,UACGA,EAAOlG,WADV,YACwBkG,EAAOjG,WAC/B,WAMtB,gBAACuJ,GAAA,EAAD,CAAK2E,GAAI,EAAT,UACI,eAACnM,EAAA,EAAD,CAAYC,QAAQ,YAApB,kBACA,eAACmM,GAAA,EAAD,IACA,eAAC,GAAD,CAAclI,OAAQA,EAAQwD,UAAU,iBAG5C,gBAACF,GAAA,EAAD,CAAK2E,GAAI,EAAT,UACI,eAACnM,EAAA,EAAD,CAAYC,QAAQ,YAApB,0BACA,eAACmM,GAAA,EAAD,IAEA,eAAC5E,GAAA,EAAD,CAAKkH,GAAI,EAAT,SACI,eAAC5B,GAAA,EAAD,CAAqBhF,MAAM,OAAOJ,UAAU,WAAW5C,OAAO,eAA9D,SACI,eAACiI,GAAA,EAAD,UACI,eAACH,GAAA,EAAD,CACI9H,OAAO,QACP7E,QAAQ,WACRV,MAAM,YACN4E,KAAK,sBAO7B,MChJKgN,GAAS,CAClB,cACA,gBACA,iBACA,MACA,OACA,WAGSC,GAAa,CACtBC,YAAa,cACb,gBAAiB,gBACjB,iBAAkB,iBAClBC,IAAK,MACLC,KAAM,OACNC,QAAS,WAGAC,GAAeN,GAAO3N,KAAI,SAAAuM,GAAI,MAAK,CAC5C3R,GAAI2R,EAEJ9N,KAAMmP,GAAWrB,O,8BCdfjR,GAAYC,YAAW,CACzBE,KAAM,CACFyE,MAAO,OAIFgO,GAAiB,SAAC,GAAgD,IAA9ClV,EAA6C,EAA7CA,OAAQmV,EAAqC,EAArCA,UAAqC,IAA1B5R,iBAA0B,MAAd,GAAc,EACpED,EAAUhB,KAChB,OACI,gBAAC,KAAD,CACI8S,QAAM,EACNzH,MAAO3N,EACPkT,SAAU,SAACZ,GACP6C,EAAU7C,EAAMa,OAAOxF,QAE3BlK,QAAQ,SACR6H,OAAO,EACPkI,OAAO,OACP7L,KAAK,QACLpE,UAAW0E,aAAK1E,EAAWD,EAAQb,MAVvC,UAYI,gBAAC0D,GAAA,EAAD,CAAUwH,MAAM,OAAhB,kBACS,eAAC,GAAD,CAAQ3N,OAAO,YAExB,gBAACmG,GAAA,EAAD,CAAUwH,MAAM,OAAhB,kBACS,eAAC,GAAD,CAAQ3N,OAAO,YAExB,gBAACmG,GAAA,EAAD,CAAUwH,MAAM,MAAhB,iBACQ,eAAC,GAAD,CAAQ3N,OAAO,WAEvB,gBAACmG,GAAA,EAAD,CAAUwH,MAAM,cAAhB,yBACgB,eAAC,GAAD,CAAQ3N,OAAO,uBCrBrCsC,GAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,KAAM,CACFuG,UAAWxG,EAAMK,QAAQ,GACzB6I,aAAclJ,EAAMK,QAAQ,IAEhCwS,QAAS,CACL3S,QAAS,OACTgG,eAAgB,gBAChBM,UAAWxG,EAAMK,QAAQ,IAE7B0E,MAAO,CACH6B,YAAa,MACb,0BAA2B,CACvBmG,WAAY,SAKX+F,GAAU,SAAC,GAMjB,IALHC,EAKE,EALFA,WACArK,EAIE,EAJFA,UAKM5H,EAAUhB,KACVoF,EAAS8N,eACTxW,EAAWyW,eACjB,EAAwB9L,mBAAS,IAAjC,oBAAO+L,EAAP,KAAaC,EAAb,KACA,EAA4BhM,mBAASjC,GAAUA,EAAO1H,QAAtD,oBAAOA,EAAP,KAAemV,EAAf,KACA,EAAwBxL,mBAASiM,MAAjC,oBAAOC,EAAP,KAAaC,EAAb,KACA,EAA8BlE,eAA9B,oBAAOxR,EAAP,KAAiB2V,EAAjB,KAAiBA,QACjB,EAAiBpE,eAAVrR,EAAP,qBAEM0V,EAAUC,eACVC,EAASC,eACPtN,EAAasE,eAAbtE,SACR,IAAKnB,IAAWmB,EAAU,OAAO,KA+BjC,OACI,sBAAKtF,UAAWD,EAAQb,KAAxB,SACI,wBAAMiQ,SA/BO,SAACJ,GAAuC,IAAD,EACxDA,EAAMK,iBACN,IAAM9S,GAAS,mBACVuW,GAAkBlL,GAAaxD,EAAO9F,IAD5B,yBAEDiH,EAASjH,IAFR,qBAGXiU,GAHW,qBAIXH,GAJW,GAyBf,OAnBIH,IACA1V,EAAKG,OAASA,GAElBM,EACI4K,EACExD,GAAUA,EAAO9F,GACnB,CACIyU,UAAWR,EACX7V,UAEJ0H,GAEJtH,EAAOpB,EAAUa,EAAM,CACnB+S,UAAW,WACP+C,EAAQ,IACRO,EAAO,0BAA2B,QAClCF,QAGD,GAIH,UACI,eAAC,KAAD,CACI1K,MAAM,aACN7H,QAAQ,SACRkE,KAAK,QACLsL,WAAS,EACTqD,WAAS,EACT3I,MAAO+H,EACPxC,SAAU,SAACZ,GAAD,OACNqD,EAAQrD,EAAMa,OAAOxF,QAEzB4I,KAAM,IAEV,uBAAKhT,UAAWD,EAAQ+R,QAAxB,UACI,gCACKK,EACG,uCACKH,GACG,eAAC,GAAD,CACIvV,OAAQA,EACRmV,UAAWA,EACX5R,UAAWD,EAAQiE,QAG3B,eAAC,KAAD,CACIgM,KAAK,iBACL9P,QAAQ,SACRkE,KAAK,QACLgG,MAAOkI,EACP3C,SAAU,SAACZ,GACPwD,EAAQxD,EAAMa,OAAOxF,QAEzBpK,UAAWD,EAAQiE,WAG3B,OAER,eAAC,KAAD,CACIgM,KAAK,SACL9P,QAAQ,YACRV,MAAM,UACNuO,UAAWoE,GAAQK,EAJvB,oCAcdH,GAAiB,WACnB,IAAMY,EAAM,IAAIC,KAEhB,OADAD,EAAIE,WAAWF,EAAIG,aAAeH,EAAII,qBAC/BJ,EAAIK,cAAcC,MAAM,GAAI,IAGjCV,GAAoB,CACtBW,SAAU,aACVC,MAAO,UACPC,UAAW,aACXC,SAAU,c,mDC3HR5U,GAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,KAAM,CACFiJ,aAAclJ,EAAMK,QAAQ,IAEhCsU,SAAU,CACNzL,aAAclJ,EAAMK,QAAQ,GAC5BE,MAAOP,EAAMQ,QAAQ0S,KAAKzS,WAE9BmU,SAAU,CACN7H,WAAY,GACZnK,YAAa,GACbiS,aAAc,GACdC,cAAe,GACfC,WAAY,KAEhBC,QAAS,CACL9U,QAAS,OACTgG,eAAgB,WAChBM,UAAWxG,EAAMK,QAAQ,IAE7B4U,OAAQ,CACJrO,YAAa5G,EAAMK,QAAQ,IAE/B6U,QAAS,CACLtQ,gBAAiB5E,EAAMQ,QAAQgJ,KAAK,KACpCrD,QAAS,QACTsH,aAAc,GACdvN,QAAS,OACToG,WAAY,UACZ4C,aAAclJ,EAAMK,QAAQ,IAEhC6S,KAAM,CACF/R,KAAM,EACNqF,UAAWxG,EAAMK,QAAQ,GACzB6I,aAAclJ,EAAMK,QAAQ,IAEhC8U,UAAW,CACPC,WAAYpV,EAAMqV,WAAWD,WAC7BE,SAAUtV,EAAMqV,WAAWE,MAAMD,SACjCP,WAAY,EACZvO,UAAWxG,EAAMK,QAAQ,GACzB6I,aAAclJ,EAAMK,QAAQ,IAEhCwS,QAAS,CACLpI,WAAYzK,EAAMK,QAAQ,GAC1BmV,WAAY,SACZtV,QAAS,OACT+F,cAAe,SACfC,eAAgB,oBAIXuP,GAAO,SAAC,GAUd,IATH1C,EASE,EATFA,WACA2C,EAQE,EARFA,KAEAhN,GAME,EAPFiN,OAOE,EANFjN,WAOA,EAA4BvB,oBAAS,GAArC,oBAAOyO,EAAP,KAAgBC,EAAhB,KACA,EAAgC1O,oBAAS,GAAzC,oBAAO2O,EAAP,KAAkBC,EAAlB,KACA,EAAgC5O,mBAASuO,EAAKxC,MAA9C,oBAAO8C,EAAP,KAAiBC,EAAjB,KACMzZ,EAAWyW,eACX/N,EAAS8N,eACTU,EAASC,eACT7S,EAAUhB,KAChB,EAA8BqP,eAA9B,oBAAOrR,EAAP,KAAiByV,EAAjB,KAAiBA,QAEjB,EAAuB2C,aAAU1Z,EAAUkZ,EAAKtW,GAAIsW,EAAM,CACtDS,aAAc,WACd/F,UAAW,WACPsD,EAAO,eAAgB,YAAQlV,GAAW,GAC1CV,EACI4K,EACAxD,EAAO9F,GACP,CAAEgK,SAAUlE,EAAOkE,SAAW,GAC9BlE,MARLkR,EAAP,qBAsCA,OACI,uBACIrV,UAAWD,EAAQb,KACnB4H,aAAc,kBAAMgO,GAAS,IAC7B/N,aAAc,kBAAM+N,GAAS,IAHjC,UAKI,uBAAK9U,UAAWD,EAAQ6T,SAAxB,UACI,eAAClM,GAAA,EAAD,CACIvD,OAAQwQ,EACRlZ,SAAS,eACTsJ,OAAO,WACP4C,UAAU,QACV0D,SAAS,gBALb,SAOI,eAACqF,GAAA,EAAD,CAAW3L,OAAO,aAAa7E,QAAQ,YACzB,IAClB,gBAACD,EAAA,EAAD,CAAYqD,UAAU,OAAOpD,QAAQ,QAArC,4BACoB,OAEpB,eAAC2Q,GAAA,EAAD,CACI9L,OAAO,OACPZ,OAAQwQ,EACRzU,QAAQ,QACRoV,UAAQ,EACRC,QAAQ,KACRzE,QAAS,CACL0E,UAAW,OACXC,UAAW,WAEhB,IACFzD,GAAc,eAAC,GAAD,CAAQvV,OAAQkY,EAAKlY,YAEvCsY,EACG,wBAAM5F,SA5CO,SAACJ,GACtBA,EAAMK,iBACNrS,EAAOtB,EAAUkZ,EAAKtW,GAAI,CAAE8T,KAAM8C,GAAYN,EAAM,CAChDtF,UAAW,WACP2F,GAAW,GACXE,EAAYP,EAAKxC,MACjB2C,GAAS,OAsCT,UACI,eAACY,GAAA,EAAD,CACItL,MAAO6K,EACPtF,SAnDK,SAACZ,GACtBmG,EAAYnG,EAAMa,OAAOxF,QAmDTsF,WAAS,EACTqD,WAAS,EACT/S,UAAWD,EAAQ8T,SACnBpE,WAAS,IAEb,uBAAKzP,UAAWD,EAAQkU,QAAxB,UACI,eAAC,KAAD,CACIjU,UAAWD,EAAQmU,OACnBhT,QAlEC,WACrB8T,GAAW,GACXE,EAAYP,EAAKxC,MACjB2C,GAAS,IAgEWtV,MAAM,UAHV,oBAOA,eAAC,KAAD,CACIwQ,KAAK,SACLxQ,MAAM,UACNU,QAAQ,YACR6N,SAAUyE,EAJd,+BAWR,uBAAKxS,UAAWD,EAAQoU,QAAxB,UACI,sBAAKnU,UAAWD,EAAQoS,KAAxB,SACKwC,EAAKxC,KACDwD,MAAM,MACNlS,KAAI,SAAC2Q,EAAmBwB,GAApB,OACD,oBAAG5V,UAAWD,EAAQqU,UAAtB,SACKA,GADiCwB,QAKlD,uBACI5V,UAAWD,EAAQ+R,QACnB5J,MAAO,CAAEuM,WAAYI,EAAU,UAAY,UAF/C,UAII,eAAC9R,GAAA,EAAD,CAAS5C,MAAM,YAAf,SACI,eAAC0V,GAAA,EAAD,CACIzR,KAAK,QACLlD,QAvGA,WACxB8T,GAAW,IAoGS,SAII,eAAC,KAAD,QAGR,eAACjS,GAAA,EAAD,CAAS5C,MAAM,cAAf,SACI,eAAC0V,GAAA,EAAD,CAAYzR,KAAK,QAAQlD,QAASmU,EAAlC,SACI,eAAC,KAAD,kBCrN1BtW,GAAYC,YAAW,CACzBE,KAAM,CACFuG,UAAW,WAINqQ,GAAgB,SAAC,GAMvB,IALH9D,EAKE,EALFA,WACArK,EAIE,EAJFA,UAKM5H,EAAUhB,KAChB,EAA8BuH,eAAtBhK,EAAR,EAAQA,KAAMkK,EAAd,EAAcA,IACd,OADA,EAAmBC,OAGf,uCACI,eAAC,GAAD,CAASuL,WAAYA,EAAYrK,UAAWA,IAC5C,sBAAK3H,UAAWD,EAAQb,KAAxB,SACKsH,EAAI/C,KAAI,SAACpF,EAAIuX,GAAL,OACL,eAAC,GAAD,CACIjB,KAAMrY,EAAK+B,GACXuW,OAAQgB,IAAUpP,EAAIwC,OAAS,EAC/BgJ,WAAYA,EACZrK,UAAWA,GACNiO,WAXL,M,gCC+BlBG,GAAqB,WACvB,MAA2BC,eAAnB7R,EAAR,EAAQA,OAAQsC,EAAhB,EAAgBA,OAChB,EAA0BL,mBAAS,GAAnC,oBAAOgE,EAAP,KAAc6L,EAAd,KAIA,OAAKxP,GAAWtC,EAEZ,gBAACsD,GAAA,EAAD,CAAKkH,GAAI,EAAGxP,QAAQ,OAApB,UACI,eAACsI,GAAA,EAAD,CAAKrH,KAAK,IAAV,SACI,eAAC8V,GAAA,EAAD,UACI,gBAACnK,GAAA,EAAD,WACI,gBAACtE,GAAA,EAAD,CAAKtI,QAAQ,OAAOiN,GAAI,EAAxB,UACI,eAAC,GAAD,CAAWjI,OAAQA,IACnB,gBAACsD,GAAA,EAAD,CAAKwE,GAAI,EAAG7L,KAAK,IAAjB,UACI,gBAACqH,GAAA,EAAD,CAAKtI,QAAQ,OAAOgX,QAAS,EAA7B,UACI,eAAClW,EAAA,EAAD,CAAYC,QAAQ,KAApB,SAA0BiE,EAAOjC,OAChCiC,EAAO0D,UACJ,eAACC,GAAA,EAAD,CACIC,MAAO5D,EAAO0D,SACd3H,QAAQ,WACRkE,KAAK,aAIjB,eAACnE,EAAA,EAAD,CACIC,QAAQ,QACRV,MAAM,gBAFV,oBAIS2E,EAAO9F,GAJhB,SAMC8F,EAAOT,QACA,gBAACzD,EAAA,EAAD,CAAYC,QAAQ,QAApB,UACI,eAACwQ,GAAA,EAAD,CAAW3L,OAAO,WADtB,IACmC,IAC/B,eAACiD,GAAA,EAAD,CACIjD,OAAO,OACPkD,QAASqD,WAK7B,eAAC7D,GAAA,EAAD,UACI,eAACC,GAAA,EAAD,CACI3C,OAAO,aACP4C,UAAU,YACVC,MAAM,EAHV,SAKI,eAAC,GAAD,WAIZ,gBAACwO,GAAA,EAAD,CACIhM,MAAOA,EACPiM,eAAe,UACfC,UAAU,UACV3G,SApDH,SAACZ,EAAwBwH,GAC1CN,EAASM,IA+CO,UAMI,eAACC,GAAA,EAAD,CACIzO,MACwB,IAApB5D,EAAOkE,SACD,SADN,UAESlE,EAAOkE,SAFhB,YAKR,eAACmO,GAAA,EAAD,CACIzO,MAC2B,IAAvB5D,EAAOiE,YACD,YADN,UAESjE,EAAOiE,YAFhB,eAKPjE,EAAOsS,UACJ,eAACD,GAAA,EAAD,CACIzO,MACwB,IAApB5D,EAAOsS,SACD,SADN,UAEStS,EAAOsS,SAFhB,eAOhB,eAACpK,GAAA,EAAD,IACA,eAAC,GAAD,CAAUjC,MAAOA,EAAOwL,MAAO,EAA/B,SACI,eAACc,GAAA,EAAD,CACI/O,UAAU,eACViI,OAAO,aACP+G,KAAM,CAAE3M,MAAO,OAAQP,MAAO,QAHlC,SAKK,eAAC,GAAD,CAAe9B,UAAU,kBAGlC,eAAC,GAAD,CAAUyC,MAAOA,EAAOwL,MAAO,EAA/B,SACI,eAACc,GAAA,EAAD,CACI/O,UAAU,WACViI,OAAO,aACP+G,KAAM,CAAE3M,MAAO,YAAaP,MAAO,OAHvC,SAKI,eAAC,GAAD,QAGR,eAAC,GAAD,CAAUW,MAAOA,EAAOwL,MAAO,EAA/B,SACI,eAACc,GAAA,EAAD,CACI/O,UAAU,QACViI,OAAO,aACP+G,KAAM,CAAE3M,MAAO,OAAQP,MAAO,OAHlC,SAKI,eAAC,GAAD,eAMpB,eAAC,GAAD,CAActF,OAAQA,OA1GC,MAqH7ByS,GAAW,SAACjW,GACd,IAAQwB,EAAqCxB,EAArCwB,SAAUiI,EAA2BzJ,EAA3ByJ,MAAOwL,EAAoBjV,EAApBiV,MAAUiB,EAAnC,aAA6ClW,EAA7C,IAEA,OACI,8CACImW,KAAK,WACLC,OAAQ3M,IAAUwL,EAClBvX,GAAE,2BAAsBuX,GACxB,wCAAgCA,IAC5BiB,GALR,aAOK1U,MAKP6U,GAAmB,WACrB,MAA8B1Q,eAAtBhK,EAAR,EAAQA,KAAMkK,EAAd,EAAcA,IAAKC,EAAnB,EAAmBA,OACbtC,EAAS8N,eAETgB,EAAMC,KAAKD,MACjB,OAAKxM,EAED,gBAACgB,GAAA,EAAD,WACI,eAACpE,GAAA,EAAD,UACKmD,EAAI/C,KAAI,SAAApF,GACL,IAAM4Y,EAAU3a,EAAK+B,GACrB,OACI,gBAAC6Y,GAAA,EAAD,CACIrU,QAAM,EAENS,UAAW6T,KACXpW,GAAE,oBAAe1C,EAAf,SAJN,UAMI,eAAC+Y,GAAA,EAAD,UACI,eAAC,GAAD,CAAQjT,OAAQ8S,MAEpB,eAACI,GAAA,EAAD,CACIxX,QAAO,UAAKoX,EAAQhZ,WAAb,YAA2BgZ,EAAQ/Y,WAC1CwB,UACI,uCACKuX,EAAQ9W,MAAO,IADpB,YAEU8W,EAAQ5O,SAFlB,WAGI,eAAC,GAAD,CAAUlE,OAAQ8S,SAI9B,eAACK,GAAA,EAAD,UACI,gBAACrX,EAAA,EAAD,CAAYC,QAAQ,QAAQV,MAAM,gBAAlC,0BACkB,IACb+X,aACG,IAAIrE,KAAK+D,EAAQnE,WACjBG,GACD,IALP,OAMQ,eAAC,GAAD,CAAQxW,OAAQwa,EAAQxa,gBAxB/B4B,QA+BrB,eAACoJ,GAAA,EAAD,CAAKjC,UAAU,SAASmJ,GAAI,EAA5B,SACI,eAAC,GAAD,CAA4BxK,OAAQA,SAzC5B,MA+ClBqT,GAA6B,SAAC,GAAD,IAAGrT,EAAH,EAAGA,OAAH,OAC/B,eAAC,KAAD,CACIb,UAAW6T,KACXpW,GAAI,CACA0W,SAAU,mBACVlV,MAAO,CAAE4B,OAAQ,CAAEuT,WAAYvT,EAAO9F,MAE1CmB,MAAM,UACNU,QAAQ,YACRkE,KAAK,QACLuT,UAAW,eAAC,KAAD,IATf,0BAeEC,GAAgB,WAClB,MAA8BtR,eAAtBhK,EAAR,EAAQA,KAAMkK,EAAd,EAAcA,IAAKC,EAAnB,EAAmBA,OAEbwM,EAAMC,KAAKD,MACjB,OAAKxM,EAED,eAACgB,GAAA,EAAD,UACI,eAACpE,GAAA,EAAD,UACKmD,EAAI/C,KAAI,SAAApF,GACL,IAAMwZ,EAAOvb,EAAK+B,GAClB,OACI,gBAAC6Y,GAAA,EAAD,CACIrU,QAAM,EAENS,UAAW6T,KACXpW,GAAE,iBAAY1C,EAAZ,SAJN,UAMI,eAACgZ,GAAA,EAAD,CACIxX,QAASgY,EAAK3V,KACdxC,UACI,uCAEK2R,GAAWwG,EAAKC,OAFrB,IAE8B,IACzBD,EAAKE,OAAOC,eAAe,QAAS,CACjCC,SAAU,UACV/P,MAAO,WACPgQ,SAAU,MACVC,gBAAiB,eACjBC,yBAA0B,IARlC,KAUOP,EAAK7H,UAIpB,eAACsH,GAAA,EAAD,UACI,gBAACrX,EAAA,EAAD,CACIC,QAAQ,QACRV,MAAM,gBACN8D,UAAU,OAHd,0BAKkB,IACbiU,aACG,IAAIrE,KAAK2E,EAAKQ,YACdpF,GACD,IATP,MAUQ,WAhCP5U,UATT,M,0BC9OlBU,GAAYC,YAAW,CACzB6M,OAAQ,CACJ1M,QAAS,eACTuK,WAAY,MACZ,gBAAiB,CACbA,WAAY,MAuFlBoC,GAAe,SAACnL,GAClB,IAAMwD,EAAS8N,aAAiBtR,GAChC,OACI,eAACoL,GAAA,EAAD,UACI,gBAACtE,GAAA,EAAD,CAAKtI,QAAQ,OAAb,UACI,eAAC,GAAD,CAAWgF,OAAQA,IACnB,eAACsD,GAAA,EAAD,CAAKwE,GAAI,EAAG7L,KAAK,IAAI8L,SAAU,IAA/B,SACKvL,EAAMwB,iBAOrBgK,GAAgB,kBAClB,eAAC1E,GAAA,EAAD,CAAK2E,GAAI,EAAT,SACI,eAACC,GAAA,EAAD,OC/HO,IACXiM,KlBWuB,SAAC3X,GACxB,IAAQ2E,EAAasE,eAAbtE,SACR,OAAOA,EACH,eAAC,KAAD,2BACQ3E,GADR,IAEI4X,QAAS,eAAC,GAAD,IACTC,MAAO,eAAC,GAAD,IACPC,oBAAqB,CAAEnO,SAAQ,OAAEhF,QAAF,IAAEA,OAAF,EAAEA,EAAUjH,IAC3Cqa,WAAY,eAACC,GAAA,EAAD,CAAYC,mBAAoB,CAAC,GAAI,GAAI,GAAI,IAAK,OAC9D7O,QAAS,GACT4M,KAAM,CAAE3M,MAAO,OAAQP,MAAO,OAC9BnG,UAAU,MARd,SAUI,eAAC,GAAD,OAEJ,MkBzBJzG,Of0ByB,SAAC8D,GAC1B,IAAMZ,EAAUhB,KACRuG,EAAasE,eAAbtE,SAER,IAAKA,EAAU,OAAO,KAItB,OACI,eAACuT,GAAA,EAAD,2BAAYlY,GAAZ,IAAmB4X,SAAS,EAA5B,SACI,gBAACO,GAAA,EAAD,CACIxV,UAAWwI,GACXiN,cANgB,iBAAO,CAAEzO,SAAUhF,IAAQ,OAAIA,QAAJ,IAAIA,OAAJ,EAAIA,EAAUjH,MAOzD2a,SAAS,OAHb,UAKI,eAACC,GAAA,EAAD,CAAWlU,OAAO,OAAOmU,SAAUC,eAAYzJ,WAAS,IACxD,eAAC0J,GAAA,EAAD,CACIrU,OAAO,SACPkD,QAASzE,GACT6V,cAAe3U,aAAK3E,EAAQ8L,OAAQ,iBAExC,eAACuN,GAAA,EAAD,CACIrU,OAAO,OACPkD,QAASqD,GACT+N,cAAetZ,EAAQ8L,SAE3B,eAACuN,GAAA,EAAD,CACIrU,OAAO,WACPkD,QAASmB,GACTiQ,cAAetZ,EAAQ8L,SAE3B,eAACyN,GAAA,EAAD,UACK,gBAAGC,EAAH,EAAGA,SAAH,yBAAgD,eAArBA,EAAS1R,UACjC,eAAC2R,GAAA,EAAD,CACIzU,OAAO,iBACP4C,UAAU,YAFd,SAII,eAAC,GAAD,SAKZ,eAAC8R,GAAA,EAAD,CAAqB1U,OAAO,eAAe4C,UAAU,WAArD,SACI,eAAC+R,GAAA,EAAD,CAAwB3U,OAAO,YAGnC,eAAC,GAAD,IACA,eAACkU,GAAA,EAAD,CAAWlU,OAAO,UAAU2K,WAAS,EAACiK,YAAY,IAClD,eAACV,GAAA,EAAD,CACIlU,OAAO,OACPsU,cAAe3U,aAAK3E,EAAQ8L,OAAQ,iBAExC,eAACoN,GAAA,EAAD,CAAWlU,OAAO,UAAUsU,cAAetZ,EAAQ8L,SACnD,eAACoN,GAAA,EAAD,CAAWlU,OAAO,YAAYsU,cAAetZ,EAAQ8L,SACrD,eAAC2N,GAAA,EAAD,CACIzU,OAAO,aACP4C,UAAU,YAFd,SAII,eAAC6D,GAAA,EAAD,CAAmBC,WAAW,eAElC,eAAC,GAAD,IACA,eAACwN,GAAA,EAAD,CAAWlU,OAAO,UAAU2K,WAAS,EAACiK,YAAY,IAClD,eAACV,GAAA,EAAD,CAAWlU,OAAO,WAAW2K,WAAS,EAACiK,YAAY,IACnD,eAACV,GAAA,EAAD,CAAWlU,OAAO,OAAO2K,WAAS,IAClC,eAAC,GAAD,IACA,eAACuJ,GAAA,EAAD,CACIlU,OAAO,eACPsU,cAAe3U,aAAK3E,EAAQ8L,OAAQ,eACpC8N,YAAY,IAEhB,eAACH,GAAA,EAAD,CACIzU,OAAO,WACP4C,UAAU,QACVI,MAAM,kBACNsR,cAAetZ,EAAQ8L,OACvB8N,YAAY,EALhB,SAOI,eAACP,GAAA,EAAD,CACI3N,WAAY,SAACmO,GAAD,gBACLA,EAAM3b,WADD,YACe2b,EAAM1b,uBexGrD2b,KD8BuB,SAAClZ,GACxB,IAAMZ,EAAUhB,KAChB,OACI,eAAC,KAAD,2BAAU4B,GAAV,IAAiB6X,MAAO,eAAC,GAAD,CAAc5Q,KAAK,SAAW2Q,SAAS,EAA/D,SACI,gBAACO,GAAA,EAAD,CAAYxV,UAAWwI,GAAckN,SAAS,OAA9C,UACI,eAACC,GAAA,EAAD,CAAWlU,OAAO,OAAOmU,SAAUC,eAAYzJ,WAAS,IACxD,eAAC0J,GAAA,EAAD,CACIrU,OAAO,SACPkD,QAASzE,GACT6V,cAAe3U,aAAK3E,EAAQ8L,OAAQ,iBAExC,eAACuN,GAAA,EAAD,CACIrU,OAAO,OACPkD,QAASqD,GACT+N,cAAetZ,EAAQ8L,SAE3B,eAACuN,GAAA,EAAD,CACIrU,OAAO,WACPkD,QAASmB,GACTiQ,cAAetZ,EAAQ8L,SAE3B,eAACyN,GAAA,EAAD,UACK,gBAAGC,EAAH,EAAGA,SAAH,yBAAgD,eAArBA,EAAS1R,UACjC,eAAC2R,GAAA,EAAD,CACIzU,OAAO,iBACP4C,UAAU,YAFd,SAII,eAAC,GAAD,SAKZ,eAAC8R,GAAA,EAAD,CAAqB1U,OAAO,eAAe4C,UAAU,WAArD,SACI,eAAC+R,GAAA,EAAD,CAAwBjO,WAAW,YAGvC,eAAC,GAAD,IACA,eAACwN,GAAA,EAAD,CAAWlU,OAAO,UAAU2K,WAAS,EAACiK,YAAY,IAClD,eAACV,GAAA,EAAD,CACIlU,OAAO,OACPsU,cAAe3U,aAAK3E,EAAQ8L,OAAQ,iBAExC,eAACoN,GAAA,EAAD,CAAWlU,OAAO,UAAUsU,cAAetZ,EAAQ8L,SACnD,eAACoN,GAAA,EAAD,CAAWlU,OAAO,YAAYsU,cAAetZ,EAAQ8L,SACrD,eAAC2N,GAAA,EAAD,CACIzU,OAAO,aACP4C,UAAU,YAFd,SAII,eAAC6D,GAAA,EAAD,CAAmBC,WAAW,eAElC,eAAC,GAAD,IACA,eAACwN,GAAA,EAAD,CAAWlU,OAAO,UAAU2K,WAAS,EAACiK,YAAY,IAClD,eAACV,GAAA,EAAD,CAAWlU,OAAO,WAAW2K,WAAS,EAACiK,YAAY,IACnD,eAACV,GAAA,EAAD,CAAWlU,OAAO,OAAO2K,WAAS,IAClC,eAAC,GAAD,IACA,eAACuJ,GAAA,EAAD,CACIlU,OAAO,eACPsU,cAAe3U,aAAK3E,EAAQ8L,OAAQ,eACpC8N,YAAY,IAEhB,eAACH,GAAA,EAAD,CACIzU,OAAO,WACP4C,UAAU,QACVI,MAAM,kBACNsR,cAAetZ,EAAQ8L,OACvB8N,YAAY,EALhB,SAOI,eAACP,GAAA,EAAD,CACI3N,WAAY,SAACmO,GAAD,gBACLA,EAAM3b,WADD,YACe2b,EAAM1b,uBClGrD4b,KFoCuB,SAACnZ,GAAD,OACvB,eAACoZ,GAAA,EAAD,2BAAcpZ,GAAd,aACI,eAAC,GAAD,QErCJe,KAAMsY,M,UCKGC,GAAe,SAAC,GAAD,IAAG9V,EAAH,EAAGA,OAAH,IAAWyD,YAAX,MAAkB,OAAlB,SACxB,gBAACH,GAAA,EAAD,CAAKwE,GAAI,EAAGtI,MAAO,IAAKhC,SAAU,IAAlC,UACI,eAAC8F,GAAA,EAAD,CAAKjC,UAAU,SAAS4G,GAAI,EAA5B,SACc,SAATxE,EACG,eAACwI,GAAA,EAAD,CACI/E,SAAS,YACTlH,OAAQA,EACR4D,MAAM,iBAGV,eAACsI,GAAA,EAAD,CACIhF,SAAS,YACTlH,OAAQA,EACR4D,MAAM,mBAKlB,eAAC9H,EAAA,EAAD,CAAYC,QAAQ,YAApB,2BACA,eAACmM,GAAA,EAAD,IAEA,eAAC5E,GAAA,EAAD,CAAKkH,GAAI,EAAT,SACI,eAACuL,GAAA,EAAD,CAAYnV,OAAO,YAGvB,gBAAC0C,GAAA,EAAD,CAAKkH,GAAI,EAAT,UACI,eAAC+B,GAAA,EAAD,CAAW3L,OAAO,kBAAmB,IACrC,eAAC9E,EAAA,EAAD,CAAYC,QAAQ,QAAQV,MAAM,gBAAgB8D,UAAU,OAA5D,qBAKJ,gBAACmE,GAAA,EAAD,CAAK2E,GAAI,EAAT,UACI,eAACsE,GAAA,EAAD,CAAW3L,OAAO,kBAAmB,IACrC,eAAC9E,EAAA,EAAD,CAAYC,QAAQ,QAAQV,MAAM,gBAAgB8D,UAAU,OAA5D,qBAKJ,eAACmE,GAAA,EAAD,CAAK2E,GAAI,EAAT,SACI,eAACnM,EAAA,EAAD,CAAYC,QAAQ,QAApB,SACuB,SAAlBiE,EAAOgW,OAAoB,SAAW,cAI/C,eAACla,EAAA,EAAD,CAAYC,QAAQ,YAApB,wBACA,eAACmM,GAAA,EAAD,IAEA,eAAC5E,GAAA,EAAD,CAAKkH,GAAI,EAAT,SAAaxK,GAAUA,EAAOiW,aAC9B,gBAAC3S,GAAA,EAAD,CAAKkH,GAAI,EAAGvC,GAAI,EAAhB,UACI,eAACnM,EAAA,EAAD,CAAYqD,UAAU,OAAOpD,QAAQ,QAAQV,MAAM,gBAAnD,sBAEc,IACd,eAACqR,GAAA,EAAD,CACI9L,OAAO,aACP+L,QAAS,CAAEC,KAAM,UAAWC,MAAO,OAAQC,IAAK,WAChDzR,MAAM,kBAEV,wBACA,eAACS,EAAA,EAAD,CAAYqD,UAAU,OAAOpD,QAAQ,QAAQV,MAAM,gBAAnD,0BAEc,IACd,eAACqR,GAAA,EAAD,CACI9L,OAAO,YACP+L,QAAS,CAAEC,KAAM,UAAWC,MAAO,OAAQC,IAAK,WAChDzR,MAAM,kBAEV,wBACA,eAACS,EAAA,EAAD,CAAYqD,UAAU,OAAOpD,QAAQ,QAAQV,MAAM,gBAAnD,yBAEc,IACd,eAACkI,GAAA,EAAD,CACIjM,SAAS,WACTsJ,OAAO,WACP4C,UAAU,QAHd,SAKI,eAACuJ,GAAA,EAAD,CACInM,OAAO,YACPoM,OAAQ,SAAAhN,GAAM,OACVA,EAAM,UAAMA,EAAOlG,WAAb,YAA2BkG,EAAOjG,WAAc,WAMtE,gBAACuJ,GAAA,EAAD,CAAK2E,GAAI,EAAT,UACI,eAACnM,EAAA,EAAD,CAAYC,QAAQ,YAApB,kBACA,eAACmM,GAAA,EAAD,IACA,eAAC,GAAD,CAAclI,OAAQA,EAAQwD,UAAU,gBAG5C,gBAACF,GAAA,EAAD,WACI,eAACxH,EAAA,EAAD,CAAYC,QAAQ,YAApB,mBACA,eAACmM,GAAA,EAAD,IACA,eAACqK,GAAA,EAAD,CACIjb,SAAS,WACTmU,OAAO,aACPjI,UAAU,QAHd,SAKI,eAAC,GAAD,aAMV0S,GAAgB,WAClB,MAA+B/T,eAAvBhK,EAAR,EAAQA,KAAMkK,EAAd,EAAcA,IACd,OADA,EAAmBgM,SACW,IAAfhM,EAAIwC,OAAqB,KAIhC,eAAC3F,GAAA,EAAD,UACKmD,EAAI/C,KAAI,SAAApF,GACL,IAAMic,EAAOhe,EAAK+B,GAClB,OACI,eAAC6Y,GAAA,EAAD,CAAmBqD,gBAAc,EAAjC,SACI,gBAAC9S,GAAA,EAAD,WACI,eAACxH,EAAA,EAAD,CAAYC,QAAQ,QAApB,SACKoa,EAAKnI,OAEV,gBAAClS,EAAA,EAAD,CACIC,QAAQ,QACRV,MAAM,gBAFV,gBAIQ,IACJ,eAACqR,GAAA,EAAD,CACI9L,OAAO,WACPZ,OAAQmW,WAZTjc,SC7GjCmc,GAAqB,WACvB,MAA2BxE,eAAnB7R,EAAR,EAAQA,OACR,OADA,EAAgBsC,QACAtC,EAEZ,gBAACsD,GAAA,EAAD,CAAKkH,GAAI,EAAGxP,QAAQ,OAApB,UACI,eAACsI,GAAA,EAAD,CAAKrH,KAAK,IAAV,SACI,eAAC8V,GAAA,EAAD,UACI,gBAACnK,GAAA,EAAD,WACI,gBAACtE,GAAA,EAAD,CAAKtI,QAAQ,OAAb,UACI,eAAC,GAAD,CAAQgF,OAAQA,IAChB,gBAACsD,GAAA,EAAD,CAAKwE,GAAI,EAAG7L,KAAK,IAAjB,UACI,gBAACH,EAAA,EAAD,CAAYC,QAAQ,KAApB,UACKiE,EAAOlG,WADZ,IACyBkG,EAAOjG,aAEhC,gBAAC+B,EAAA,EAAD,CAAYC,QAAQ,QAApB,qBACSiE,EAAO9F,GADhB,OAEK8F,EAAOhE,MAFZ,MAEsB,IAClB,eAACuH,GAAA,EAAD,CACI3C,OAAO,aACP4C,UAAU,YACVC,KAAK,OAHT,SAKI,eAAC8I,GAAA,EAAD,CAAW3L,OAAO,iBAI9B,eAAC0C,GAAA,EAAD,UACI,eAACC,GAAA,EAAD,CACI3C,OAAO,aACP4C,UAAU,YACVC,KAAK,OAHT,SAKI,eAAC,GAAD,WAIZ,eAAC8O,GAAA,EAAD,CACI9G,OAAO,aACPjI,UAAU,eACVgP,KAAM,CAAE3M,MAAO,OAAQP,MAAO,QAHlC,SAKI,eAAC,GAAD,CAAeuI,YAAU,EAACrK,UAAU,sBAKpD,eAAC,GAAD,CAAcxD,OAAQA,OA5CC,M,4FCJ7BpF,GAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCuK,UAAU,aACNC,OAAQ,EACRC,WAAYzK,EAAMK,QAAQ,GAC1BuG,YAAa5G,EAAMK,QAAQ,GAC3BqC,SAAU,QACT1C,EAAMG,YAAYC,KAAK,MAAQ,CAC5BF,QAAS,aAKRsb,GAAoB,WAC7B,IAAM1a,EAAUhB,KACRuG,EAAasE,eAAbtE,SACR,EAAsBuE,aAClB,OACA,CAAEC,KAAM,EAAGC,QAAS,IACpB,CAAEC,MAAO,OAAQP,MAAO,QAHpBnN,EAAR,EAAQA,KAAMkK,EAAd,EAAcA,IAKd,OACI,uBAAKxG,UAAWD,EAAQyJ,UAAxB,UACI,eAACS,GAAA,EAAD,IACA,gBAACC,GAAA,EAAD,CAAYnC,MAAM,YAAYrG,KAAM,eAAC,KAAD,IAApC,UACI,eAACyI,GAAA,EAAD,CACIpC,MAAM,QACNqC,MAAO,CACHsQ,cAAeC,eAAiBrH,cAChCsH,mBAAend,KAGvB,eAAC0M,GAAA,EAAD,CACIpC,MAAM,YACNqC,MAAO,CACHsQ,cAAeG,aAAY,IAAI3H,MAAQI,cACvCsH,mBAAend,KAGvB,eAAC0M,GAAA,EAAD,CACIpC,MAAM,mBACNqC,MAAO,CACHsQ,mBAAejd,EACfmd,cAAeC,aAAY,IAAI3H,MAAQI,iBAG/C,eAACnJ,GAAA,EAAD,CACIpC,MAAM,oBACNqC,MAAO,CACHsQ,mBAAejd,EACfmd,cAAeE,aAAa,IAAI5H,MAAQI,iBAGhD,eAACnJ,GAAA,EAAD,CACIpC,MAAM,oBACNqC,MAAO,CACHsQ,mBAAejd,EACfmd,cAAeG,aACXD,aAAa,IAAI5H,MACjB,GACFI,oBAId,gBAACpJ,GAAA,EAAD,CAAYnC,MAAM,SAASrG,KAAM,eAAC,KAAD,IAAjC,UACI,eAACyI,GAAA,EAAD,CACIpC,MACI,+CACS,eAAC,GAAD,CAAQtL,OAAO,YAG5B2N,MAAO,CACH3N,OAAQ,UAGhB,eAAC0N,GAAA,EAAD,CACIpC,MACI,+CACS,eAAC,GAAD,CAAQtL,OAAO,YAG5B2N,MAAO,CACH3N,OAAQ,UAGhB,eAAC0N,GAAA,EAAD,CACIpC,MACI,8CACQ,eAAC,GAAD,CAAQtL,OAAO,WAG3B2N,MAAO,CACH3N,OAAQ,SAGhB,eAAC0N,GAAA,EAAD,CACIpC,MACI,sDACgB,eAAC,GAAD,CAAQtL,OAAO,mBAGnC2N,MAAO,CACH3N,OAAQ,oBAIpB,eAACyN,GAAA,EAAD,CAAYnC,MAAM,OAAOrG,KAAM,eAAC,KAAD,IAA/B,SACK8E,GACGlK,GACAkK,EAAI/C,KAAI,SAAApF,GAAE,OACN,eAAC8L,GAAA,EAAD,CAEIpC,MAAO,eAAC,GAAD,CAAS5D,OAAQ7H,EAAK+B,KAC7B+L,MAAO,CAAEC,KAAM,CAAChM,KAFXA,QAMrB,eAAC6L,GAAA,EAAD,CACInC,MAAM,kBACNrG,KAAM,eAAC,KAAD,IAFV,SAII,eAACyI,GAAA,EAAD,CACIpC,MAAM,KACNqC,MAAO,CACHE,SAAUhF,GAAYA,EAASjH,YCzGjD2c,GAAqB,WACvB,MAAyD1U,eAAjDhK,EAAR,EAAQA,KAAMkK,EAAd,EAAcA,IAAKC,EAAnB,EAAmBA,OAAQF,EAA3B,EAA2BA,aAAcG,EAAzC,EAAyCA,YAGnCuM,EAAMC,KAAKD,MACjB,OAAe,IAAXxM,EACO,eAACwU,GAAA,EAAD,CAAmBC,qBAAmB,EAACC,kBAAgB,IAI9D,eAAC9X,GAAA,EAAD,UACKmD,EAAI/C,KAAI,SAAApF,GACL,IAAM4Y,EAAU3a,EAAK+B,GACrB,OACI,gBAAC6Y,GAAA,EAAD,CACIrU,QAAM,EAENS,UAAWqD,KACX5F,GAAE,oBAAe1C,EAAf,SAJN,UAMI,eAACyE,GAAA,EAAD,UACI,eAACmE,GAAA,EAAD,CACIC,KAAK,QACLC,QAAST,EAAYU,SAAS/I,GAC9BgJ,UAAW,EACXC,eAAa,EACbpG,QAAS,SAAAqG,GACLA,EAAEC,kBACFjB,EAAalI,QAIzB,eAAC+Y,GAAA,EAAD,UACI,eAAC,GAAD,CAAQjT,OAAQ8S,MAEpB,eAACI,GAAA,EAAD,CACIxX,QAAO,UAAKoX,EAAQhZ,WAAb,YAA2BgZ,EAAQ/Y,WAC1CwB,UACI,kDACSuX,EAAQ5Y,GADjB,OAEK4Y,EAAQ9W,MAFb,MAEuB,IACnB,eAACuH,GAAA,EAAD,CACIvD,OAAQ8S,EACRlS,OAAO,aACP4C,UAAU,YACV0D,SAAS,aACTzD,MAAM,EALV,SAOI,eAAC8I,GAAA,EAAD,CAAW3L,OAAO,WACJ,MACfkS,EAAQ5O,UAAV,YACQ4O,EAAQ5O,SADhB,WAED,eAAC,GAAD,CAAUlE,OAAQ8S,SAI9B,eAACK,GAAA,EAAD,UACI,gBAACrX,EAAA,EAAD,CAAYC,QAAQ,QAAQV,MAAM,gBAAlC,0BACkB,IACb+X,aACG,IAAIrE,KAAK+D,EAAQnE,WACjBG,GACD,IALP,OAMQ,eAAC,GAAD,CAAQxW,OAAQwa,EAAQxa,gBA/C/B4B,SAyDvBqM,GAAkB1L,aAAW,SAAAC,GAAK,MAAK,CACzC0L,aAAc,CACVjB,WAAYzK,EAAMK,QAAQ,QAG5B8b,GAAqB,SAACza,GACxB,IAAMZ,EAAU2K,KAChB,OACI,gBAACM,GAAA,EAAD,WACI,eAACC,GAAA,EAAD,CAAYC,OAAQ,CAAC,KAAM,YAAa,aAAc,eACtD,eAACC,GAAA,EAAD,IACA,eAAC,KAAD,eAAkBxK,IAClB,eAACyK,GAAA,EAAD,CACIC,SAAS,YACTnL,QAAQ,YACR6H,MAAM,cACN/H,UAAWD,EAAQ4K,mB,uEC7G7B0Q,GAAS,kBAAM,eAAC5T,GAAA,EAAD,CAAK9D,MAAO,GAAIL,UAAU,UAEzCgY,GAAqB,WACvB,MAAiCC,eAAzBpX,EAAR,EAAQA,OAAQsC,EAAhB,EAAgBA,OAAQ+U,EAAxB,EAAwBA,KACxB,OAAK/U,GAAWtC,EAEZ,gBAACsD,GAAA,EAAD,CAAKkH,GAAI,EAAGxP,QAAQ,OAApB,UACI,eAACsI,GAAA,EAAD,CAAKrH,KAAK,IAAV,SACI,eAACqb,GAAA,EAAD,CACItX,OAAQA,EACR6U,SAAS,OACTwC,KAAMA,EACNrK,OAAQ,SAAAuK,GAAS,OACb,gBAACxF,GAAA,EAAD,WACI,eAACnK,GAAA,EAAD,UACI,eAACtE,GAAA,EAAD,UACI,gBAACA,GAAA,EAAD,CAAKtI,QAAQ,OAAb,UACI,eAACsI,GAAA,EAAD,CAAKkU,GAAI,EAAT,SACI,eAAC,GAAD,CAAQxX,OAAQA,MAEpB,gBAACsD,GAAA,EAAD,CAAKrH,KAAK,IAAIuO,IAAK,EAAnB,UACI,gBAAClH,GAAA,EAAD,CAAKtI,QAAQ,OAAb,UACI,eAAC8Z,GAAA,EAAD,CAAWlU,OAAO,eAClB,eAAC,GAAD,IACA,eAACkU,GAAA,EAAD,CAAWlU,OAAO,iBAEtB,gBAAC0C,GAAA,EAAD,CAAKtI,QAAQ,OAAb,UACI,eAAC8Z,GAAA,EAAD,CAAWlU,OAAO,UAClB,eAAC,GAAD,IACA,eAACyU,GAAA,EAAD,CACIzU,OAAO,aACP4C,UAAU,YAFd,SAII,eAAC6D,GAAA,EAAD,CAAmBC,WAAW,cAGtC,eAACY,GAAA,EAAD,IACA,eAAC5E,GAAA,EAAD,CAAKkH,GAAI,EAAGhL,MAAO,IAAnB,SACI,eAACsV,GAAA,EAAD,CACIlU,OAAO,QACP2K,WAAS,MAGjB,gBAACjI,GAAA,EAAD,CAAKtI,QAAQ,OAAb,UACI,eAAC8Z,GAAA,EAAD,CAAWlU,OAAO,kBAClB,eAAC,GAAD,IACA,eAACkU,GAAA,EAAD,CAAWlU,OAAO,qBAEtB,eAACsH,GAAA,EAAD,IACA,gBAAC5E,GAAA,EAAD,CAAKkH,GAAI,EAAGhL,MAAO,IAAnB,UACI,eAACsV,GAAA,EAAD,CACIlU,OAAO,aACPgO,WAAS,EACTrD,WAAS,IAEb,eAACuJ,GAAA,EAAD,CACIlU,OAAO,SACP2K,WAAS,IAEb,eAACkM,GAAA,EAAD,CAAc7W,OAAO,gCAMzC,eAAC8W,GAAA,EAAD,eACQC,KAAKJ,EAAW,CAEhB,cACA,6BACA,uBACA,kBACA,sBACA,gBACA,0BACA,cACA,eACA,eACA,kBACA,aACA,oBAOxB,eAAC,GAAD,CAAcvX,OAAQA,EAAQyD,KAAK,YAnFZ,MCF7B7I,GAAYC,YAAW,CACzB6M,OAAQ,CACJ1M,QAAS,eACTuK,WAAY,MACZ,gBAAiB,CACbA,WAAY,MAuFlBoC,GAAe,SAAC,GAAD,IAAG3J,EAAH,EAAGA,SAAH,OAEjB,eAAC4J,GAAA,EAAD,UACI,gBAACtE,GAAA,EAAD,CAAKtI,QAAQ,OAAb,UACI,eAACsI,GAAA,EAAD,CAAKuE,WAAY,EAAjB,SACI,eAAC,KAAD,MAEJ,eAACvE,GAAA,EAAD,CAAKwE,GAAI,EAAG7L,KAAK,IAAI8L,SAAU,IAA/B,SACK/J,UAMXgK,GAAgB,kBAClB,eAAC1E,GAAA,EAAD,CAAK2E,GAAI,EAAT,SACI,eAACC,GAAA,EAAD,O,qBC1HO,IACXiM,KH8HuB,SAAC3X,GACxB,IAAQ2E,EAAasE,eAAbtE,SACR,OAAOA,EACH,eAAC,KAAD,2BACQ3E,GADR,IAEI4X,QAAS,eAAC,GAAD,IACTC,MAAO,eAAC,GAAD,IACPzO,QAAS,GACT2O,WAAY,eAACC,GAAA,EAAD,CAAYC,mBAAoB,CAAC,GAAI,GAAI,GAAI,OACzDH,oBAAqB,CAAEnO,SAAQ,OAAEhF,QAAF,IAAEA,OAAF,EAAEA,EAAUjH,IAC3CsY,KAAM,CAAE3M,MAAO,YAAaP,MAAO,QAPvC,SASI,eAAC,GAAD,OAEJ,MG3IJqQ,KLQuB,SAACnZ,GAAD,OACvB,eAACoZ,GAAA,EAAD,2BAAcpZ,GAAd,aACI,eAAC,GAAD,QKTJkZ,KFqGuB,SAAClZ,GAAD,OACvB,eAACob,GAAA,EAAD,2BAAcpb,GAAd,aACI,eAAC,GAAD,QEtGJ9D,ODqByB,SAAC8D,GAC1B,IAAMZ,EAAUhB,KACRuG,EAAasE,eAAbtE,SAER,IAAKA,EAAU,OAAO,KAStB,OACI,eAACuT,GAAA,EAAD,2BAAYlY,GAAZ,IAAmB4X,SAAS,EAA5B,SACI,gBAACO,GAAA,EAAD,CACIxV,UAAWwI,GACXkN,SAAS,OACTD,cAZgB,iBAAO,CAAEzO,SAAUhF,IAAQ,OAAIA,QAAJ,IAAIA,OAAJ,EAAIA,EAAUjH,MAazD2d,UAZM,SAAC1f,GAAD,mBAAC,eACZA,GADW,IAEdwW,UAAW,IAAII,KACf7I,KAAM,MAKF,UAMI,eAAC4O,GAAA,EAAD,CACIlU,OAAO,aACPmU,SAAU,CAACC,gBACXE,cAAe3U,aAAK3E,EAAQ8L,OAAQ,iBAExC,eAACoN,GAAA,EAAD,CACIlU,OAAO,YACPmU,SAAU,CAACC,gBACXE,cAAetZ,EAAQ8L,SAE3B,eAAC,GAAD,IACA,eAACoN,GAAA,EAAD,CACIlU,OAAO,QACPsU,cAAe3U,aAAK3E,EAAQ8L,OAAQ,iBAExC,eAAC2N,GAAA,EAAD,CACIzU,OAAO,aACP4C,UAAU,YACV0R,cAAetZ,EAAQ8L,OAH3B,SAKI,eAACL,GAAA,EAAD,CAAmBC,WAAW,WAElC,eAAC,GAAD,IACA,eAACwN,GAAA,EAAD,CACIlU,OAAO,QACP2K,WAAS,IAEb,eAACuJ,GAAA,EAAD,CAAWlU,OAAO,gBACdsU,cAAe3U,aAAK3E,EAAQ8L,OAAQ,iBACxC,eAACoN,GAAA,EAAD,CAAWlU,OAAO,gBACdsU,cAAetZ,EAAQ8L,SAC3B,eAAC,GAAD,IACA,eAACoN,GAAA,EAAD,CACIlU,OAAO,aACPgO,WAAS,EACTrD,WAAS,IAEb,eAACuJ,GAAA,EAAD,CACIlU,OAAO,SACP2K,WAAS,IAEb,eAAC8J,GAAA,EAAD,CACIzU,OAAO,WACP4C,UAAU,QACVI,MAAM,kBACN4R,YAAY,EAJhB,SAMI,eAACP,GAAA,EAAD,CACI3N,WAAY,SAACmO,GAAD,gBACLA,EAAM3b,WADD,YACe2b,EAAM1b,gBAIzC,eAAC0d,GAAA,EAAD,CAAc7W,OAAO,0BC9FjCrD,KAAMua,MCKGC,GAAY,SAAC,GAAD,IAAG/X,EAAH,EAAGA,OAAH,IAAWyD,YAAX,MAAkB,OAAlB,SACrB,eAACH,GAAA,EAAD,CAAKwE,GAAI,EAAGtI,MAAO,IAAKhC,SAAU,IAAlC,SACI,eAAC8F,GAAA,EAAD,CAAKjC,UAAU,SAAS4G,GAAI,EAA5B,SACc,SAATxE,EACG,eAACwI,GAAA,EAAD,CACI/E,SAAS,SACTlH,OAAQA,EACR4D,MAAM,cAGV,eAACsI,GAAA,EAAD,CACIhF,SAAS,SACTlH,OAAQA,EACR4D,MAAM,mBCRpBoU,GAAkB,WACpB,MAA2BnG,eAAnB7R,EAAR,EAAQA,OACR,OADA,EAAgBsC,QACAtC,EAEZ,gBAACsD,GAAA,EAAD,CAAKkH,GAAI,EAAGxP,QAAQ,OAApB,UACI,eAACsI,GAAA,EAAD,CAAKrH,KAAK,IAAV,SACI,eAAC8V,GAAA,EAAD,UACI,eAACnK,GAAA,EAAD,UACI,gBAACtE,GAAA,EAAD,CAAKtI,QAAQ,OAAb,UACI,gBAACsI,GAAA,EAAD,CAAKwE,GAAI,EAAG7L,KAAK,IAAjB,UACI,gBAACH,EAAA,EAAD,CAAYC,QAAQ,KAApB,UACKiE,EAAOlG,WADZ,IACyBkG,EAAOjG,aAEhC,gBAAC+B,EAAA,EAAD,CAAYC,QAAQ,QAApB,UACKiE,EAAOhE,MADZ,MACsB,IAClB,eAACuH,GAAA,EAAD,CACI3C,OAAO,aACP4C,UAAU,YACVC,KAAK,OAHT,SAKI,eAAC8I,GAAA,EAAD,CAAW3L,OAAO,iBAI9B,eAAC0C,GAAA,EAAD,UACI,eAACC,GAAA,EAAD,CACI3C,OAAO,aACP4C,UAAU,YACVC,KAAK,OAHT,SAKI,eAAC,GAAD,iBAOxB,eAAC,GAAD,CAAWzD,OAAQA,OAnCI,M,+BCJtBiY,GAAiB,WAC1B,IAAQ9W,EAAasE,eAAbtE,SACR,OACI,gBAACmC,GAAA,EAAD,CAAK9D,MAAM,OAAO8F,MAAM,KAAK5D,YAAY,MAAzC,UACI,eAACoE,GAAA,EAAD,IACA,gBAACC,GAAA,EAAD,CAAYnC,MAAM,WAAWrG,KAAM,eAAC,KAAD,IAAnC,UACI,eAACyI,GAAA,EAAD,CACIpC,MAAM,QACNqC,MAAO,CACHiS,aAAc1B,eAAiBrH,cAC/BgJ,kBAAc7e,KAGtB,eAAC0M,GAAA,EAAD,CACIpC,MAAM,YACNqC,MAAO,CACHiS,aAAcxB,aAAY,IAAI3H,MAAQI,cACtCgJ,kBAAc7e,KAGtB,eAAC0M,GAAA,EAAD,CACIpC,MAAM,mBACNqC,MAAO,CACHiS,kBAAc5e,EACd6e,aAAczB,aAAY,IAAI3H,MAAQI,iBAG9C,eAACnJ,GAAA,EAAD,CACIpC,MAAM,oBACNqC,MAAO,CACHiS,kBAAc5e,EACd6e,aAAcxB,aAAa,IAAI5H,MAAQI,iBAG/C,eAACnJ,GAAA,EAAD,CACIpC,MAAM,oBACNqC,MAAO,CACHiS,kBAAc5e,EACd6e,aAAcvB,aACVD,aAAa,IAAI5H,MACjB,GACFI,oBAId,eAACpJ,GAAA,EAAD,CACInC,MAAM,kBACNrG,KAAM,eAAC,KAAD,IAFV,SAII,eAACyI,GAAA,EAAD,CACIpC,MAAM,KACNqC,MAAO,CACHE,SAAUhF,GAAYA,EAASjH,Y,+BCnEjDke,GAAY,CAAE9f,OAAQ,QAYb+f,GAVQ,SAAC7b,GAAD,OACnB,eAAC8b,GAAA,EAAD,2BACQ9b,GADR,IAEIoH,MAAM,eACNzL,KAAMigB,GACN7a,KAAM,eAAC,KAAD,IACN0T,aAAa,kBC8BfsH,GAAkB,WACpB,MAAyDpW,eAAjDhK,EAAR,EAAQA,KAAMkK,EAAd,EAAcA,IAAKC,EAAnB,EAAmBA,OAAQF,EAA3B,EAA2BA,aAAcG,EAAzC,EAAyCA,YAGnCuM,EAAMC,KAAKD,MACjB,OAAe,IAAXxM,EACO,eAACwU,GAAA,EAAD,CAAmBC,qBAAmB,EAACC,kBAAgB,IAI9D,eAAC9X,GAAA,EAAD,UACKmD,EAAI/C,KAAI,SAAApF,GACL,IAAMse,EAAOrgB,EAAK+B,GAClB,OACI,gBAAC6Y,GAAA,EAAD,CACIrU,QAAM,EAENS,UAAWqD,KACX5F,GAAE,iBAAY1C,GAJlB,UAMI,eAACyE,GAAA,EAAD,UACI,eAACmE,GAAA,EAAD,CACIC,KAAK,QACLC,QAAST,EAAYU,SAAS/I,GAC9BgJ,UAAW,EACXC,eAAa,EACbpG,QAAS,SAAAqG,GACLA,EAAEC,kBACFjB,EAAalI,QAIzB,eAAC+Y,GAAA,EAAD,UACI,eAAC,KAAD,UACI,eAAC,KAAD,QAGR,eAACC,GAAA,EAAD,CACIxX,QAAS8c,EAAKxK,OAElB,eAACmF,GAAA,EAAD,UACI,gBAACrX,EAAA,EAAD,CAAYC,QAAQ,QAAQV,MAAM,gBAAlC,mBACW,IACN+X,aACG,IAAIrE,KAAKyJ,EAAKC,UACd3J,UA7BP5U,SAwCvBqM,GAAkB1L,aAAW,SAAAC,GAAK,MAAK,CACzC0L,aAAc,CACVjB,WAAYzK,EAAMK,QAAQ,QAG5Bud,GAAkB,SAAClc,GACrB,IAAMZ,EAAU2K,KAChB,OACI,gBAACM,GAAA,EAAD,WACI,eAACC,GAAA,EAAD,CAAYC,OAAQ,CAAC,cACrB,eAACC,GAAA,EAAD,IACA,eAAC,KAAD,eAAkBxK,IAClB,eAACyK,GAAA,EAAD,CACIC,SAAS,SACTnL,QAAQ,YACR6H,MAAM,WACN/H,UAAWD,EAAQ4K,mBAM7BmS,GAAwB,SAACnc,GAAD,OAC1B,gBAAC,WAAD,WACI,eAAC,GAAD,eAAoBA,IAEpB,eAACoc,GAAA,EAAD,eAAsBpc,Q,UC7HjBqc,GAAW,CACpB,UACA,OACA,aACFvZ,KAAI,SAAAhH,GAAM,MAAK,CAAE4B,GAAI5B,EAAQyF,KAAMzF,MCsB/BsC,GAAYC,YAAW,CACzB6M,OAAQ,CACJ1M,QAAS,eACTuK,WAAY,MACZ,gBAAiB,CACbA,WAAY,MAKlBuT,GAAkB,WACpB,IAAMld,EAAUhB,KAChB,EAAiCwc,eAAzBpX,EAAR,EAAQA,OAAQsC,EAAhB,EAAgBA,OAAQ+U,EAAxB,EAAwBA,KACxB,OAAK/U,GAAWtC,EAEZ,gBAACsD,GAAA,EAAD,CAAKkH,GAAI,EAAGxP,QAAQ,OAApB,UACI,eAACsI,GAAA,EAAD,CAAKrH,KAAK,IAAV,SACI,eAACqb,GAAA,EAAD,CACItX,OAAQA,EACR6U,SAAS,OACTwC,KAAMA,EACNrK,OAAQ,SAAAuK,GAAS,OACb,gBAACxF,GAAA,EAAD,WACI,eAACnK,GAAA,EAAD,UACI,eAACtE,GAAA,EAAD,UACI,gBAACA,GAAA,EAAD,CAAKtI,QAAQ,OAAb,UACI,eAACsI,GAAA,EAAD,CAAKkU,GAAI,EAAT,SACA,eAAC,KAAD,UACI,eAAC,KAAD,QAGJ,gBAAClU,GAAA,EAAD,CAAKrH,KAAK,IAAIuO,IAAK,EAAnB,UACI,eAACsK,GAAA,EAAD,CACIlU,OAAO,OACPgD,MAAM,OACNmR,SAAU,CAACC,gBACXzJ,WAAS,IAEb,eAACwN,GAAA,EAAD,CACInY,OAAO,WACPsU,cAAe3U,aAAK3E,EAAQ8L,OAAQ,iBAExC,eAACuN,GAAA,EAAD,CACIrU,OAAO,SACPkD,QAAS+U,GACT3D,cAAetZ,EAAQ8L,SAE3B,eAAC2N,GAAA,EAAD,CACIzU,OAAO,WACP4C,UAAU,QACVI,MAAM,kBACN4R,YAAY,EACZN,cAAetZ,EAAQ8L,OAL3B,SAOI,eAACuN,GAAA,EAAD,CACI3N,WAAY,SAACmO,GAAD,gBACLA,EAAM3b,WADD,YACe2b,EAAM1b,0BAQzD,eAAC2d,GAAA,EAAD,eACQC,KAAKJ,EAAW,CAEhB,cACA,6BACA,uBACA,kBACA,sBACA,gBACA,0BACA,cACA,eACA,eACA,kBACA,aACA,oBAOxB,eAAC,GAAD,CAAWvX,OAAQA,EAAQyD,KAAK,YAzET,MCb7B7I,GAAYC,YAAW,CACzB6M,OAAQ,CACJ1M,QAAS,eACTuK,WAAY,MACZ,gBAAiB,CACbA,WAAY,MA+DlBoC,GAAe,SAAC,GAAD,IAAG3J,EAAH,EAAGA,SAAH,OAEjB,eAAC4J,GAAA,EAAD,UACI,gBAACtE,GAAA,EAAD,CAAKtI,QAAQ,OAAb,UACI,eAACsI,GAAA,EAAD,CAAKuE,WAAY,EAAjB,SACI,eAAC,KAAD,UACI,eAAC,KAAD,QAGR,eAACvE,GAAA,EAAD,CAAKwE,GAAI,EAAG7L,KAAK,IAAI8L,SAAU,IAA/B,SACK/J,U,UCjGF,IACXmW,KJyHoB,SAAC3X,GACrB,IAAQ2E,EAAasE,eAAbtE,SACR,OAAOA,EACH,eAAC,KAAD,2BACQ3E,GADR,IAEI4X,QAAS,eAAC,GAAD,IACTC,MAAO,eAAC,GAAD,IACP2E,kBAAmB,eAAC,GAAD,IACnBpT,QAAS,GACT2O,WAAY,eAACC,GAAA,EAAD,CAAYC,mBAAoB,CAAC,GAAI,GAAI,GAAI,OACzDH,oBAAqB,CAAEnO,SAAQ,OAAEhF,QAAF,IAAEA,OAAF,EAAEA,EAAUjH,IAC3CsY,KAAM,CAAE3M,MAAO,WAAYP,MAAO,QARtC,SAUI,eAAC,GAAD,OAEJ,MIvIJqQ,KPOoB,SAACnZ,GAAD,OACpB,eAACoZ,GAAA,EAAD,2BAAcpZ,GAAd,aACI,eAAC,GAAD,QORJkZ,KF2GoB,SAAClZ,GAAD,OACpB,eAACob,GAAA,EAAD,2BAAcpb,GAAd,aACI,eAAC,GAAD,QE5GJ9D,OD0BsB,SAAC8D,GACvB,IAAMZ,EAAUhB,KACRuG,EAAasE,eAAbtE,SAER,IAAKA,EAAU,OAAO,KAWtB,OACI,eAACuT,GAAA,EAAD,2BAAYlY,GAAZ,IAAmB4X,SAAS,EAA5B,SACI,gBAACO,GAAA,EAAD,CACIxV,UAAWwI,GACXkN,SAAS,OACTD,cAdS,iBAAO,CACxBzO,SAAUhF,IAAQ,OAAIA,QAAJ,IAAIA,OAAJ,EAAIA,EAAUjH,IAChCue,SAAU,IAAI1J,KACdzW,OAAQ,YAYAuf,UAVM,SAAC1f,GAAD,sBACXA,IAKC,UAMI,eAAC2c,GAAA,EAAD,CACIlU,OAAO,OACPgD,MAAM,OACNmR,SAAU,CAACC,gBACXzJ,WAAS,IAEb,eAACwN,GAAA,EAAD,CACInY,OAAO,WACPsU,cAAe3U,aAAK3E,EAAQ8L,OAAQ,iBAExC,eAACuN,GAAA,EAAD,CACIrU,OAAO,SACPkD,QAAS+U,GACT3D,cAAetZ,EAAQ8L,SAE3B,eAAC2N,GAAA,EAAD,CACIzU,OAAO,WACP4C,UAAU,QACVI,MAAM,kBACN4R,YAAY,EACZN,cAAetZ,EAAQ8L,OAL3B,SAOI,eAACuN,GAAA,EAAD,CACI3N,WAAY,SAACmO,GAAD,gBACLA,EAAM3b,WADD,YACe2b,EAAM1b,uBCxErDwD,K,QAAM0b,G,oDCHJre,GAAYC,YAAW,CACzBT,OAAQ,CACJoF,MAAO,GACPC,OAAQ,IAGZE,IAAK,CACDC,UAAW,WAEfC,MAAO,CACHL,MAAO,GACPC,OAAQ,IAEZK,MAAO,CACHN,MAAO,GACPC,OAAQ,MAIHyZ,GAAgB,SAAC,GAMvB,IALHlZ,EAKE,EALFA,OAKE,IAJFC,YAIE,MAJK,QAIL,EACIrE,EAAUhB,KAChB,OAAKoF,GACLmZ,QAAQC,IAAIpZ,EAAOQ,OACfR,EAAOQ,MASP,eAAC,KAAD,CACIL,IAAKC,GAAyBJ,EAAOQ,MACrCH,IAAKL,EAAOqZ,MACZxd,UAAWD,EAAQxB,OACnBkG,SAAU,CAAEzE,UAAW0E,aAAK3E,EAAQ+D,IAAK/D,EAAQqE,OAZrD,eAAC,KAAD,CACII,IAAKL,EAAOqZ,MACZxd,UAAWD,EAAQxB,OAFvB,SAII,eAAC,KAAD,OAPY,MCxBlBQ,GAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCgG,MAAO,CACHrB,OAAQ,IACRD,MAAO,IACPxE,QAAS,OACT+F,cAAe,SACfC,eAAgB,gBAChBC,QAAS,MACTC,SAAU,YAEdC,SAAU,CACNnG,QAAS,OACT+F,cAAe,SACfK,WAAY,UAEhBrD,KAAM,CACFsD,UAAW,SACXC,UAAWxG,EAAMK,QAAQ,IAE7Bme,OAAQ,CACJjY,UAAW,SACXC,UAAWxG,EAAMK,QAAQ,IAE7BoG,MAAO,CACHvG,QAAS,OACTgG,eAAgB,eAChBxB,MAAO,QAEXgC,WAAY,CACRxG,QAAS,OACToG,WAAY,UAEhBK,SAAU,CACNC,YAAa5G,EAAMK,QAAQ,IAE/BqF,MAAO,CACHhB,MAAO,GACPC,OAAQ,QAIH8Z,GAAc,SAAC,GAAqC,IAAnCvZ,EAAkC,EAAlCA,OACpBpE,EAAUhB,KAChB,EAAkCqH,mBAAS,GAA3C,oBAAO5E,EAAP,KAAkB6E,EAAlB,KACA,OACI,eAAC,KAAD,CACI/C,UAAWqD,KACX5F,GAAI6F,aAAa,YAAazC,EAAO9F,GAAI,QACzCwI,UAAU,OACVC,aAAc,kBAAMT,EAAa,IACjCU,aAAc,kBAAMV,EAAa,IALrC,SAOI,gBAACW,GAAA,EAAD,CAAOhH,UAAWD,EAAQkF,MAAOzD,UAAWA,EAA5C,UACI,eAACiG,GAAA,EAAD,CAAKpC,SAAS,WAAWU,IAAK,GAAIC,MAAO,GAAzC,SACI,eAAC0B,GAAA,EAAD,CACIvD,OAAQA,EACRY,OAAO,aACP4C,UAAU,YACVC,KAAK,OAJT,SAMI,eAAC5C,GAAA,EAAD,CACID,OAAO,OACP5E,MAAM,QACNJ,QAASA,QAIrB,uBAAKC,UAAWD,EAAQuF,SAAxB,UACI,eAAC,GAAD,CAAenB,OAAQA,IACvB,sBAAKnE,UAAWD,EAAQmC,KAAxB,SACI,eAACuF,GAAA,EAAD,CAAKtI,QAAQ,OAAOoG,WAAW,SAA/B,SACA,eAACtF,EAAA,EAAD,CAAYC,QAAQ,YAApB,SACKiE,EAAOqZ,YAKhB,sBAAKxd,UAAWD,EAAQ0d,OAAxB,SACI,gBAACxd,EAAA,EAAD,CAAYC,QAAQ,QAApB,sBACc,IACV,eAACwH,GAAA,EAAD,CACIvD,OAAQA,EACRY,OAAO,YACP4C,UAAU,kBACVC,KAAK,OAJT,SAMI,eAAC8I,GAAA,EAAD,CAAW3L,OAAO,mBAMlC,uBAAK/E,UAAWD,EAAQ2F,MAAxB,UACI,uBAAK1F,UAAWD,EAAQ4F,WAAxB,UACI,eAAC,KAAD,CACInG,MAAM,WACNQ,UAAWD,EAAQ6F,WAEvB,iCACI,eAAC3F,EAAA,EAAD,CACIC,QAAQ,YACRgI,MAAO,CAAEC,cAAe,GAF5B,SAIKhE,EAAOkE,WAEZ,eAACpI,EAAA,EAAD,CAAYC,QAAQ,UAAUV,MAAM,gBAApC,SACK2E,EAAOkE,SAAW,EAAI,QAAU,eAI7C,uBAAKrI,UAAWD,EAAQ4F,WAAxB,UACI,eAAC,KAAD,CACInG,MAAM,WACNQ,UAAWD,EAAQ6F,WAEvB,iCACI,eAAC3F,EAAA,EAAD,CACIC,QAAQ,YACRgI,MAAO,CAAEC,cAAe,GAF5B,SAIKhE,EAAOwZ,gBAEZ,eAAC1d,EAAA,EAAD,CAAYC,QAAQ,UAAUV,MAAM,gBAApC,SACK2E,EAAOwZ,cAAgB,EAAI,aAAe,4BC9HrE5e,GAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCqJ,SAAU,CACNnJ,QAAS,OACToJ,SAAU,OACV5E,MAAQ,OACR6E,IAAK,OAETvD,MAAO,CACHrB,OAAQ,IACRD,MAAO,IACPxE,QAAS,OACT+F,cAAe,SACfC,eAAgB,gBAChBI,WAAY,SACZH,QAAS,MACTvB,gBAAiB5E,EAAMQ,QAAQgJ,KAAK,UAOtCC,GAAkB,WACpB,IAJWC,EAAoBC,EAIzB7I,EAAUhB,KAChB,OACI,eAAC0I,GAAA,EAAD,CAAKzH,UAAWD,EAAQuI,SAAxB,UANOK,EAOI,GAPgBC,EAOZ,SAAAC,GAAG,OACV,gBAAC7B,GAAA,EAAD,CAAOhH,UAAWD,EAAQkF,MAA1B,UACA,eAAC2Y,GAAA,EAAD,CAAU1d,QAAQ,SAASyD,MAAO,GAAIC,OAAQ,GAAKia,UAAU,SAC7D,eAACD,GAAA,EAAD,CAAU1d,QAAQ,OAAO2d,UAAU,OAAOla,MAAO,MACjD,eAACia,GAAA,EAAD,CAAU1d,QAAQ,OAAO2d,UAAU,OAAOla,MAAO,MACjD,eAACia,GAAA,EAAD,CAAU1d,QAAQ,OAAOyD,MAAO,IAAKC,OAAQ,OAJPiF,IAPlDC,MAAMC,KAAK,CAAEC,OAAQL,IAAc,SAACM,EAAGJ,GAAJ,OAAYD,EAAGC,UAkBhDK,GAAiB,WACnB,MAAsB5C,eAAdE,EAAR,EAAQA,IAAKlK,EAAb,EAAaA,KACPyD,EAAUhB,KAEhB,OAAKyH,GAAQlK,EAGT,eAACmL,GAAA,EAAD,CAAKzH,UAAWD,EAAQuI,SAAxB,SACK9B,EAAI/C,KAAI,SAACpF,GAAD,OACL,eAAC,GAAD,CAAsB8F,OAAQ7H,EAAK+B,IAAjBA,QALJ,MAWjByf,GAAkB,WAC3B,MAA4BxX,eAA5B,EAAQG,OACR,OADA,EAAgB+L,QACC,eAAC,GAAD,IAAsB,eAAC,GAAD,K,qBClD9BuL,GAAoB,WACRnU,eAAbtE,SAAR,IACA,EAA6CuE,aACzC,kBACA,CAAEC,KAAM,EAAGC,QAAS,IACpB,CAAEC,MAAO,OAAQP,MAAO,QAHduU,EAAd,EAAQ1hB,KAAuB2hB,EAA/B,EAA0BzX,IAK1B,OACI,gBAACiB,GAAA,EAAD,CAAK9D,MAAM,OAAO8F,MAAM,KAAK5D,YAAY,MAAMuG,GAAI,EAAnD,UACI,eAACnC,GAAA,EAAD,IAEA,eAACC,GAAA,EAAD,CAAYnC,MAAM,WAAWrG,KAAM,eAAC,KAAD,IAAnC,SACKuc,GACGD,GACAC,EAAUxa,KAAI,SAAApF,GAAE,OACZ,eAAC8L,GAAA,EAAD,CAEIpC,MAAO,eAACD,GAAA,EAAD,CAAMC,MAAOiW,EAAW3f,GAAI6D,KAAMkC,KAAK,UAC9CgG,MAAO,CAAE8T,UAAW7f,IAFfA,YCK3BqM,GAAkB1L,aAAW,SAAAC,GAAK,MAAK,CACzC0L,aAAc,CACVjB,WAAYzK,EAAMK,QAAQ,QAI5B6e,GAAqB,SAACxd,GACxB,IAAMZ,EAAU2K,KAChB,OACI,gBAACM,GAAA,EAAD,WACI,eAACG,GAAA,EAAD,IACA,eAAC,KAAD,eAAkBxK,IAClB,eAACyK,GAAA,EAAD,CACIC,SAAS,YACTnL,QAAQ,YACR6H,MAAM,cACN/H,UAAWD,EAAQ4K,mB,2DClC7B5L,GAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,KAAM,CACFC,QAAS,OACT+F,cAAe,cAIVkZ,GAAqB,WAC9B,IAAMre,EAAUhB,KAChB,EAAuCsf,eAA/B9P,EAAR,EAAQA,OAAQ+P,EAAhB,EAAgBA,SAAUC,EAA1B,EAA0BA,SAC1B,EAAwBnY,mBAASmI,GAAU,IAA3C,oBAAOrM,EAAP,KAAasc,EAAb,KACA,EAAwBpY,mBAAS,IAAjC,oBAAOqY,EAAP,KAAaC,EAAb,KACA,EAAgCtY,mBAAS,IAAzC,oBAAOuY,EAAP,KAAiBC,EAAjB,KACA,EAAiBvQ,aAAU,iBAApBxR,EAAP,qBAyBA,OACI,gBAACqS,GAAA,EAAD,CAAQ7B,MAAI,EAAC4B,QAASqP,EAAtB,UACI,eAAC/O,GAAA,EAAD,4CACA,wBAAMJ,SA1BO,SAACJ,GAClBA,EAAMK,iBACNvS,EACI,CACIgiB,QAAS,CACLviB,KAAM,CACF4F,KAAMA,EACNuc,KAAMA,EACNE,SAAUA,KAItB,CACItP,UAAW,YAAwC,IAArC/S,EAAoC,EAApCA,KACVkiB,EAAQ,IACRE,EAAQ,IACRE,EAAY,IACZL,EAASjiB,OASjB,UACI,eAACkT,GAAA,EAAD,UACI,uBAAKxP,UAAWD,EAAQb,KAAxB,UACI,eAAC,KAAD,CACI6I,MAAM,gBACNqC,MAAOlI,EACPyN,SAAU,SAAAZ,GAAK,OAAIyP,EAAQzP,EAAMa,OAAOxF,QACxCqF,WAAS,EACT0J,UAAQ,IAEZ,eAAC,KAAD,CACIpR,MAAM,OACNqC,MAAOqU,EACP9O,SAAU,SAAAZ,GAAK,OAAI2P,EAAQ3P,EAAMa,OAAOxF,UAE5C,eAAC,KAAD,CACIrC,MAAM,4BACNqC,MAAOuU,EACPhP,SAAU,SAAAZ,GAAK,OAAI6P,EAAY7P,EAAMa,OAAOxF,eAIxD,gBAAC2F,GAAA,EAAD,WACI,eAAC,KAAD,CAAQC,KAAK,SAASjC,UAAW7L,EAAjC,iBACA,eAAC,KAAD,CAAQhB,QAASod,EAAjB,8BC1Ddvf,GAAYC,aAAW,SAAAC,GAAK,MAAK,CACnC4M,OAAQ,CACJ1M,QAAS,eACTuK,WAAY,MACZ,gBAAiB,CACbA,WAAY,IAGpBoV,kBAAmB,CACf3f,QAAS,OACTqJ,IAAKvJ,EAAMK,QAAQ,GACnBqC,SAAU,a,UC5BZ5C,GAAYC,YAAW,CACzB2F,MAAO,CACHZ,UAAW,aAIba,GAAc,CAChBC,OAAQ,GACRb,MAAO,IAGE+a,GAAoB,SAAC,GAQ3B,IAPH5a,EAOE,EAPFA,OAOE,KANFY,OAME,EALFX,aAKE,MALK,SAKL,EACIrE,EAAUhB,KAChB,OAAKoF,EACDA,EAAOQ,MAMP,sBACIL,IAAKC,GAAyBJ,EAAOQ,MACrCH,IAAKL,EAAOqZ,MACZrd,MAAOgE,EAAOqZ,MACd7Z,MAAOiB,GAAYR,GACnBR,OAAQgB,GAAYR,GACpBpE,UAAWD,EAAQ4E,QAXvB,eAAC,KAAD,UACI,eAAC,KAAD,MAHY,MCbXqa,GAAe,SAAC,GAAD,IACxB7a,EADwB,EACxBA,OADwB,IAExByD,YAFwB,MAEjB,OAFiB,SAOxBzD,EACI,gBAACsD,GAAA,EAAD,CAAKwE,GAAI,EAAGtI,MAAO,IAAKhC,SAAU,IAAlC,UACI,eAAC8F,GAAA,EAAD,CAAKjC,UAAU,SAAS4G,GAAI,EAA5B,SACc,SAATxE,EACG,eAACwI,GAAA,EAAD,CACI/E,SAAS,YACTlH,OAAQA,EACR4D,MAAM,iBAGV,eAACsI,GAAA,EAAD,CACIhF,SAAS,YACTlH,OAAQA,EACR4D,MAAM,mBAKlB,eAAC9H,EAAA,EAAD,CAAYC,QAAQ,YAApB,0BACA,eAACmM,GAAA,EAAD,IAEA,gBAAC5E,GAAA,EAAD,CAAKkH,GAAI,EAAGxP,QAAQ,OAAOgX,QAAS,EAApC,qBAEI,eAACzO,GAAA,EAAD,CACIvD,OAAQA,EACRY,OAAO,aACP4C,UAAU,YACVC,KAAK,OAJT,SAMI,eAAC8I,GAAA,EAAD,CAAW3L,OAAO,cAI1B,gBAAC0C,GAAA,EAAD,CAAKkH,GAAI,EAAGxP,QAAQ,OAAOgX,QAAS,EAApC,oBAEI,eAACzO,GAAA,EAAD,CACIvD,OAAQA,EACRY,OAAO,YACP4C,UAAU,kBACVC,KAAK,OAJT,SAMI,eAAC8I,GAAA,EAAD,CAAW3L,OAAO,cAI1B,gBAAC0C,GAAA,EAAD,CAAKkH,GAAI,EAAT,mBACU,eAAC+B,GAAA,EAAD,CAAW3L,OAAO,OAAOZ,OAAQA,OAE1CA,EAAOoM,SACJ,gBAAC9I,GAAA,EAAD,CAAKkH,GAAI,EAAT,sBACa,eAAChI,GAAA,EAAD,CAAM2J,KAAMnM,EAAOoM,QAASX,OAAO,SAASY,IAAI,aAAhD,qBAIjB,gBAAC/I,GAAA,EAAD,CAAKkH,GAAI,EAAT,UACI,eAAC1O,EAAA,EAAD,CAAYC,QAAQ,YAApB,yBACA,eAACmM,GAAA,EAAD,IAEA,eAAC5E,GAAA,EAAD,CAAKkH,GAAI,EAAT,SACI,eAAC+B,GAAA,EAAD,CAAW3L,OAAO,wBAK9B,M,gCCtCFka,GAAqB,WACvB,MAA2BjJ,eAAnB7R,EAAR,EAAQA,OAAQsC,EAAhB,EAAgBA,OAChB,EAA0BL,mBAAS,GAAnC,oBAAOgE,EAAP,KAAc6L,EAAd,KAIA,OAAKxP,GAAWtC,EAEZ,gBAACsD,GAAA,EAAD,CAAKkH,GAAI,EAAGxP,QAAQ,OAApB,UACI,eAACsI,GAAA,EAAD,CAAKrH,KAAK,IAAV,SACI,eAAC8V,GAAA,EAAD,UACI,gBAACnK,GAAA,EAAD,WACI,gBAACtE,GAAA,EAAD,CAAKtI,QAAQ,OAAOiN,GAAI,EAAxB,UACI,eAAC,GAAD,CAAmBjI,OAAQA,IAC3B,eAACsD,GAAA,EAAD,CAAKwE,GAAI,EAAG7L,KAAK,IAAjB,SACI,eAACqH,GAAA,EAAD,CAAKtI,QAAQ,OAAOgX,QAAS,EAA7B,SACI,eAAClW,EAAA,EAAD,CAAYC,QAAQ,KAApB,SAA0BiE,EAAOqZ,eAI7C,gBAACpH,GAAA,EAAD,CACIhM,MAAOA,EACPiM,eAAe,UACfC,UAAU,UACV3G,SArBH,SAACZ,EAAwBwH,GAC1CN,EAASM,IAgBO,UAMI,eAACC,GAAA,EAAD,CACIzO,MACI5D,EAAOkE,SAAW,EAAlB,UACSlE,EAAOkE,SADhB,oBAESlE,EAAOkE,SAFhB,WAKR,eAACmO,GAAA,EAAD,CACIzO,MACI5D,EAAOwZ,cAAgB,EAAvB,UACSxZ,EAAOwZ,cADhB,yBAESxZ,EAAOwZ,cAFhB,kBAMZ,eAACtR,GAAA,EAAD,IACA,eAAC,GAAD,CAAUjC,MAAOA,EAAOwL,MAAO,EAA/B,SACI,eAACc,GAAA,EAAD,CACI/O,UAAU,eACViI,OAAO,aAFX,SAIK,eAAC,GAAD,CAAejI,UAAU,iBAGlC,eAAC,GAAD,CAAUyC,MAAOA,EAAOwL,MAAO,EAA/B,SACI,eAACc,GAAA,EAAD,CAAoB/O,UAAU,oBAAoBiI,OAAO,aAAasP,UAAU,EAAhF,SACI,gBAACC,GAAA,EAAD,WACI,eAACzX,GAAA,EAAD,CACQ3C,OAAO,UACP4C,UAAU,gBACVC,MAAM,EAHd,SAKI,eAAC8I,GAAA,EAAD,CAAW3L,OAAO,WAEtB,eAAC2L,GAAA,EAAD,CAAW3L,OAAO,mBAClB,eAAC2C,GAAA,EAAD,CACQ3C,OAAO,UACP4C,UAAU,gBACVC,MAAM,EAHd,SAKI,eAAC8I,GAAA,EAAD,CAAW3L,OAAO,WAEtB,eAAC2L,GAAA,EAAD,CAAW3L,OAAO,4BAQ1C,eAAC,GAAD,CAAcZ,OAAQA,OAtEC,MAiF7ByS,GAAW,SAACjW,GACd,IAAQwB,EAAqCxB,EAArCwB,SAAUiI,EAA2BzJ,EAA3ByJ,MAAOwL,EAAoBjV,EAApBiV,MAAUiB,EAAnC,aAA6ClW,EAA7C,IAEA,OACI,8CACImW,KAAK,WACLC,OAAQ3M,IAAUwL,EAClBvX,GAAE,2BAAsBuX,GACxB,wCAAgCA,IAC5BiB,GALR,aAOK1U,MC3HPpD,GAAYC,YAAW,CACzB6M,OAAQ,CACJ1M,QAAS,eACTuK,WAAY,MACZ,gBAAiB,CACbA,WAAY,M,UCrBT,IACX4O,KPSuB,SAAC3X,GAExB,OADqBiJ,eAAbtE,SAEJ,eAAC,KAAD,2BACQ3E,GADR,IAEI4X,QAAS,eAAC,GAAD,IACTC,MAAO,eAAC,GAAD,IACPC,oBAAqB,GACrBC,WAAY,eAACC,GAAA,EAAD,CAAYC,mBAAoB,CAAC,GAAI,GAAI,GAAI,OACzD7O,QAAS,GACT4M,KAAM,CAAE3M,MAAO,QAASP,MAAO,OAC/BnG,UAAU,MARd,SAUI,eAAC,GAAD,OAEJ,MOvBJzG,OL8ByB,SAAC8D,GACV5B,KACK6K,eAAbtE,SACM8Z,eAId,OACI,eAACvG,GAAA,EAAD,2BAAYlY,GAAZ,IAAmB4X,SAAS,EAA5B,SACI,gBAAC8G,GAAA,EAAD,WACI,gBAACC,GAAA,EAAD,CAASvX,MAAM,UAAf,UACI,eAACyR,GAAA,EAAD,CACIzR,MAAM,UACNhD,OAAO,aACP4C,UAAU,YACV+H,WAAS,EAJb,SAMI,eAAClE,GAAA,EAAD,CAAmBC,WAAW,WAElC,eAAC+N,GAAA,EAAD,CACIzR,MAAM,iBACNhD,OAAO,YACP4C,UAAU,kBACV+H,WAAS,EAJb,SAMI,eAAClE,GAAA,EAAD,CAAmBC,WAAW,WAElC,eAACwN,GAAA,EAAD,CAAWlU,OAAO,QAAQmU,SAAUC,eAAYzJ,WAAS,IACzD,eAACuJ,GAAA,EAAD,CAAWlU,OAAO,OAAO2K,WAAS,IAClC,eAACuJ,GAAA,EAAD,CAAWlU,OAAO,UAAU2K,WAAS,IACrC,eAACuJ,GAAA,EAAD,CAAWlU,OAAO,QAAQ2K,WAAS,IACnC,eAACuJ,GAAA,EAAD,CACIlU,OAAO,cACPgO,WAAS,EACTC,KAAM,EACNtD,WAAS,OAGjB,eAAC4P,GAAA,EAAD,CAASvX,MAAM,aAAf,SACI,eAACwX,GAAA,EAAD,CACIxa,OAAO,aADX,SAGI,gBAACya,GAAA,EAAD,WACQ,eAAChG,GAAA,EAAD,CACIzU,OAAO,UACP4C,UAAU,gBACVI,MAAM,OAHV,SAKI,eAACyD,GAAA,EAAD,CACIC,WAAW,OACX5O,OAAQ,eAAC,GAAD,QAGhB,eAACoc,GAAA,EAAD,CAAWlU,OAAO,iBAAiBgD,MAAM,UACzC,eAACkR,GAAA,EAAD,CAAWlU,OAAO,YAAagD,MAAM,4BKnFjE8R,KD2BuB,SAAClZ,GACR5B,KAChB,OACI,eAAC,KAAD,2BACQ4B,GADR,IAEI6X,MAAO,eAAC,GAAD,CAAc5Q,KAAK,SAC1B2Q,SAAS,EAHb,SAKI,gBAAC8G,GAAA,EAAD,CACIrG,SAAS,OADb,UAGI,gBAACsG,GAAA,EAAD,CAASvX,MAAM,UAAf,UACI,eAACyR,GAAA,EAAD,CACIzR,MAAM,UACNhD,OAAO,aACP4C,UAAU,YACV+H,WAAS,EAJb,SAMI,eAAClE,GAAA,EAAD,CAAmBC,WAAW,WAElC,eAAC+N,GAAA,EAAD,CACIzR,MAAM,iBACNhD,OAAO,YACP4C,UAAU,kBACV+H,WAAS,EAJb,SAMI,eAAClE,GAAA,EAAD,CAAmBC,WAAW,WAElC,eAACwN,GAAA,EAAD,CAAWlU,OAAO,QAAQmU,SAAUC,eAAYzJ,WAAS,IACzD,eAACuJ,GAAA,EAAD,CAAWlU,OAAO,OAAO2K,WAAS,IAClC,eAACuJ,GAAA,EAAD,CAAWlU,OAAO,UAAU2K,WAAS,IACrC,eAACuJ,GAAA,EAAD,CAAWlU,OAAO,QAAQ2K,WAAS,IACnC,eAACuJ,GAAA,EAAD,CACIlU,OAAO,cACPgO,WAAS,EACTC,KAAM,EACNtD,WAAS,OAGjB,eAAC4P,GAAA,EAAD,CAASvX,MAAM,aAAf,SACI,eAACwX,GAAA,EAAD,CACIxa,OAAO,aADX,SAGI,gBAACya,GAAA,EAAD,WACQ,eAAChG,GAAA,EAAD,CACIzU,OAAO,UACP4C,UAAU,gBACVI,MAAM,OAHV,SAKI,eAACyD,GAAA,EAAD,CACIC,WAAW,OACX5O,OAAQ,eAAC,GAAD,QAGhB,eAACoc,GAAA,EAAD,CAAWlU,OAAO,iBAAiBgD,MAAM,UACzC,eAACkR,GAAA,EAAD,CAAWlU,OAAO,YAAagD,MAAM,4BCjFjE+R,KF+BuB,SAACnZ,GAAD,OACvB,eAACoZ,GAAA,EAAD,2BAAcpZ,GAAd,aACI,eAAC,GAAD,QEhCJe,K,QAAM+d,GCPGnT,GAAS,SAAC,GAAD,IAAGnI,EAAH,EAAGA,OAAH,OAClB,eAAC,KAAD,CAAWG,IAAKH,EAAOQ,MAAvB,SACKR,EAAOjC,QCIHwd,GAA0B,WAEnC,OACI,eAACjY,GAAA,EAAD,CAAK9D,MAAM,OAAO8F,MAAM,KAAK5D,YAAY,MAAzC,SACI,eAACoE,GAAA,EAAD,OCqBN0V,GAA2B,WAC7B,MAAyDrZ,eAAjDhK,EAAR,EAAQA,KAAMkK,EAAd,EAAcA,IAAKC,EAAnB,EAAmBA,OAAQF,EAA3B,EAA2BA,aAAcG,EAAzC,EAAyCA,YAG7BwM,KAAKD,MACjB,OAAe,IAAXxM,EACO,eAACwU,GAAA,EAAD,CAAmBC,qBAAmB,EAACC,kBAAgB,IAI9D,eAAC9X,GAAA,EAAD,UACKmD,EAAI/C,KAAI,SAAApF,GACL,IAAM8F,EAAS7H,EAAK+B,GACpB,OACI,gBAAC6Y,GAAA,EAAD,CACIrU,QAAM,EAENS,UAAWqD,KACX5F,GAAE,2BAAsB1C,EAAtB,SAJN,UAMI,eAACyE,GAAA,EAAD,UACI,eAACmE,GAAA,EAAD,CACIC,KAAK,QACLC,QAAST,EAAYU,SAAS/I,GAC9BgJ,UAAW,EACXC,eAAa,EACbpG,QAAS,SAAAqG,GACLA,EAAEC,kBACFjB,EAAalI,QAIzB,eAAC+Y,GAAA,EAAD,UACI,eAAC,GAAD,CAAQjT,OAAQA,MAEpB,eAACkT,GAAA,EAAD,CACIxX,QAAO,UAAKsE,EAAOjC,MACnBxC,UACI,uCACKyE,EAAOjC,KADZ,MACqB,IACjB,eAACwF,GAAA,EAAD,CACIvD,OAAQA,EACRY,OAAO,cACP4C,UAAU,mBACV0D,SAAS,oBACTzD,MAAM,EALV,SAOI,eAAC8I,GAAA,EAAD,CAAW3L,OAAO,gBAKlC,eAACuS,GAAA,EAAD,MApCKjZ,SA8CvBqM,GAAkB1L,aAAW,SAAAC,GAAK,MAAK,CACzC0L,aAAc,CACVjB,WAAYzK,EAAMK,QAAQ,QAG5BsgB,GAA2B,WAC7B,IAAM7f,EAAU2K,KAChB,OACI,gBAACM,GAAA,EAAD,WACI,eAACC,GAAA,EAAD,CAAYC,OAAQ,CAAC,YAAa,aAAc,eAChD,eAACC,GAAA,EAAD,IACA,eAACC,GAAA,EAAD,CACIC,SAAS,mBACTnL,QAAQ,YACR6H,MAAM,UACN/H,UAAWD,EAAQ4K,mBCnGtBkV,GAAiB,WAC1B,MAAuCxB,eAA/B9P,EAAR,EAAQA,OAAQ+P,EAAhB,EAAgBA,SAAUC,EAA1B,EAA0BA,SAC1B,EAAyBnY,mBAASmI,GAAU,IAA5C,oBAAOrM,EAAP,KAAa+T,EAAb,KACA,EAAiB5H,aAAU,oBAApBxR,EAAP,qBAqBA,OACI,eAACqS,GAAA,EAAD,CAAQ7B,MAAI,EAAC4B,QAASqP,EAAtB,SACI,wBAAMnP,SArBO,SAACJ,GAClBA,EAAMK,iBACNvS,EACI,CACIgiB,QAAS,CACLviB,KAAM,CACF4F,KAAMA,KAIlB,CACImN,UAAW,YAAwC,IAArC/S,EAAoC,EAApCA,KACV2Z,EAAS,IACTsI,EAASjiB,OAQjB,UACI,eAACkT,GAAA,EAAD,UACI,eAAC,KAAD,CACIzH,MAAM,oBACNqC,MAAOlI,EACPyN,SAAU,SAAAZ,GAAK,OAAIkH,EAASlH,EAAMa,OAAOxF,QACzCqF,WAAS,MAGjB,gBAACM,GAAA,EAAD,WACI,eAAC,KAAD,CAAQC,KAAK,SAAb,kBACA,eAAC,KAAD,CAAQ9O,QAASod,EAAjB,6BChBdvf,GAAYC,YAAW,CACzB6M,OAAQ,CACJ1M,QAAS,eACTuK,WAAY,MACZ,gBAAiB,CACbA,WAAY,MA+ClBoC,GAAe,SAAC,GAAD,IAAG3J,EAAH,EAAGA,SAAH,OAEjB,eAAC4J,GAAA,EAAD,UACI,gBAACtE,GAAA,EAAD,CAAKtI,QAAQ,OAAb,UACI,eAACsI,GAAA,EAAD,CAAKuE,WAAY,EAAjB,SACI,eAAC,KAAD,MAEJ,eAACvE,GAAA,EAAD,CAAKwE,GAAI,EAAG7L,KAAK,IAAI8L,SAAU,IAA/B,SACK/J,U,UCvEJ2d,GAAqB,SAAC,GAAD,IAC9B3b,EAD8B,EAC9BA,OAD8B,IAE9ByD,YAF8B,MAEvB,OAFuB,SAO9BzD,EACI,gBAACsD,GAAA,EAAD,CAAKwE,GAAI,EAAGtI,MAAO,IAAKhC,SAAU,IAAlC,UACI,eAAC8F,GAAA,EAAD,CAAKjC,UAAU,SAAS4G,GAAI,EAA5B,SACc,SAATxE,EACG,gBAACH,GAAA,EAAD,WACI,eAAC2I,GAAA,EAAD,CACI/E,SAAS,mBACTlH,OAAQA,IAEZ,eAAC4b,GAAA,EAAD,CACI1U,SAAS,wBAIjB,eAACgF,GAAA,EAAD,CACIhF,SAAS,mBACTlH,OAAQA,MAKpB,eAAClE,EAAA,EAAD,CAAYC,QAAQ,YAApB,yBACA,eAACmM,GAAA,EAAD,IACA,gBAAC5E,GAAA,EAAD,CAAKkH,GAAI,EAAGxP,QAAQ,OAAOgX,QAAS,EAApC,UACI,eAAClW,EAAA,EAAD,wBACA,eAACyH,GAAA,EAAD,CACIvD,OAAQA,EACRY,OAAO,cACP4C,UAAU,mBACVC,KAAK,OAJT,SAMI,eAAC8I,GAAA,EAAD,CAAW3L,OAAO,cAIzBZ,EAAOoM,SACJ,gBAAC9I,GAAA,EAAD,CAAKkH,GAAI,EAAT,sBACa,eAAChI,GAAA,EAAD,CAAM2J,KAAMnM,EAAOoM,QAASX,OAAO,SAASY,IAAI,aAAhD,wBAKzB,MCnDEwP,GAA2B,WAC7B,MAAiCzE,eAAzBpX,EAAR,EAAQA,OAAQsC,EAAhB,EAAgBA,OAAQ+U,EAAxB,EAAwBA,KACxB,OAAK/U,GAAWtC,EAEZ,gBAACsD,GAAA,EAAD,CAAKkH,GAAI,EAAGxP,QAAQ,OAApB,UACI,eAACsI,GAAA,EAAD,CAAKrH,KAAK,IAAV,SACI,eAACqb,GAAA,EAAD,CACItX,OAAQA,EACR6U,SAAS,OACTwC,KAAMA,EACNrK,OAAQ,SAAAuK,GAAS,OACb,gBAACxF,GAAA,EAAD,WACI,eAACnK,GAAA,EAAD,UACI,eAACtE,GAAA,EAAD,UACI,gBAACA,GAAA,EAAD,CAAKtI,QAAQ,OAAb,UACI,eAACsI,GAAA,EAAD,CAAKkU,GAAI,EAAT,SACI,eAAC,GAAD,CAAQxX,OAAQA,MAEpB,gBAACsD,GAAA,EAAD,CAAKrH,KAAM,EAAX,UACI,eAACoZ,GAAA,EAAD,CACIzU,OAAO,cACP4C,UAAU,mBACV+H,WAAS,EAHb,SAKI,eAAClE,GAAA,EAAD,CACIC,WAAW,OACX5O,OAAQ,eAAC,GAAD,QAGhB,eAACoc,GAAA,EAAD,CAAWlU,OAAO,OAAO2K,WAAS,IAClC,eAACuJ,GAAA,EAAD,CAAWlU,OAAO,UAAU2K,WAAS,IACrC,eAACuJ,GAAA,EAAD,CAAWlU,OAAO,QAAQ2K,WAAS,IACnC,eAACuJ,GAAA,EAAD,CACIlU,OAAO,cACPgO,WAAS,EACTC,KAAM,EACNtD,WAAS,cAO7B,eAACmM,GAAA,EAAD,eACQC,KAAKJ,EAAW,CAEhB,cACA,6BACA,uBACA,kBACA,sBACA,gBACA,0BACA,cACA,eACA,eACA,kBACA,aACA,oBAOxB,eAAC,GAAD,CAAoBvX,OAAQA,EAAQyD,KAAK,YA/DlB,MCA7BqY,GAA2B,WAC7B,MAA2BjK,eAAnB7R,EAAR,EAAQA,OACR,OADA,EAAgBsC,QACAtC,EAEZ,gBAACsD,GAAA,EAAD,CAAKkH,GAAI,EAAGxP,QAAQ,OAApB,UACI,eAACsI,GAAA,EAAD,CAAKrH,KAAK,IAAV,SACI,eAAC8V,GAAA,EAAD,UACI,gBAACnK,GAAA,EAAD,WACI,gBAACtE,GAAA,EAAD,CAAKtI,QAAQ,OAAb,UACI,eAAC,GAAD,CAAQgF,OAAQA,IAChB,gBAACsD,GAAA,EAAD,CAAKwE,GAAI,EAAG7L,KAAK,IAAjB,UACI,eAACH,EAAA,EAAD,CAAYC,QAAQ,KAApB,SACKiE,EAAOjC,OAEZ,gBAACjC,EAAA,EAAD,CAAYC,QAAQ,QAApB,UACKiE,EAAOhE,MADZ,MACsB,IAClB,eAACuH,GAAA,EAAD,CACI3C,OAAO,cACP4C,UAAU,mBACVC,KAAK,OAHT,SAKI,eAAC8I,GAAA,EAAD,CAAW3L,OAAO,oBAKlC,eAAC0C,GAAA,EAAD,CAAKkH,GAAI,EAAGuR,EAAG,EAAf,SACI,eAACxJ,GAAA,EAAD,CACI/O,UAAU,WACViI,OAAO,YACP7H,MAAM,WAHV,SAKI,eAAC,GAAD,eAMpB,eAAC,GAAD,CAAoB5D,OAAQA,OApCL,MCnBpB,IACXmU,KN+G6B,SAAC3X,GAE9B,OADqBiJ,eAAbtE,SAEJ,eAAC,KAAD,2BACQ3E,GADR,IAEI4X,QAAS,eAAC,GAAD,IACTC,MAAO,eAAC,GAAD,IACPzO,QAAS,GACT2O,WAAY,eAACC,GAAA,EAAD,CAAYC,mBAAoB,CAAC,GAAI,GAAI,GAAI,OACzDH,oBAAqB,GANzB,SASI,eAAC,GAAD,OAEJ,MM5HJ5b,OJqC+B,SAAC8D,GAChB5B,KAOhB,OACI,eAAC8Z,GAAA,EAAD,2BAAYlY,GAAZ,IAAmB4X,SAAS,EAA5B,SACI,gBAACO,GAAA,EAAD,CACIxV,UAAWwI,GACXkN,SAAS,OACTD,cAVgB,iBAAO,IAWvBiD,UAVM,SAAC1f,GAAD,sBACXA,IAKC,UAMI,eAACkd,GAAA,EAAD,CACIzU,OAAO,cACP4C,UAAU,mBACV+H,WAAS,EAHb,SAKI,eAAClE,GAAA,EAAD,CACIC,WAAW,OACX5O,OAAQ,eAAC,GAAD,QAGhB,eAACoc,GAAA,EAAD,CAAWlU,OAAO,OAAO2K,WAAS,IAClC,eAACuJ,GAAA,EAAD,CAAWlU,OAAO,UAAU2K,WAAS,IACrC,eAACuJ,GAAA,EAAD,CAAWlU,OAAO,QAAQ2K,WAAS,IACnC,eAACuJ,GAAA,EAAD,CACIlU,OAAO,cACPgO,WAAS,EACTC,KAAM,EACNtD,WAAS,WIrEzBmK,KFkF6B,SAAClZ,GAAD,OAC7B,eAACob,GAAA,EAAD,2BAAcpb,GAAd,aACI,eAAC,GAAD,QEnFJmZ,KDO6B,SAACnZ,GAAD,OAC7B,eAACoZ,GAAA,EAAD,2BAAcpZ,GAAd,aACI,eAAC,GAAD,QCRJe,KAAMye,MCkHJphB,GAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,KAAM,CACFuG,UAAWxG,EAAMK,QAAQ,GACzB6I,aAAclJ,EAAMK,QAAQ,GAC5BsC,WAAY3C,EAAMmhB,YAAYvjB,OAAO,QAAS,CAC1CwjB,OAAQphB,EAAMmhB,YAAYC,OAAOC,MACjCC,SAAUthB,EAAMmhB,YAAYG,SAASC,iBAG7CnT,KAAM,CACF1J,MAAO,KAEX8c,OAAQ,CACJ9c,MAAO,QAIA+c,GAnHF,SAAC,GAAkC,IAAD,MAA/Bte,aAA+B,SAC3C,EAA0BgE,mBAAS,CAC/Bua,SAAS,EACTC,aAAa,EACbC,eAAe,IAHnB,oBAAOte,EAAP,KAAcue,EAAd,KAMMzT,GADYxM,cACLyB,cAAY,SAACC,GAAD,OAAuBA,EAAMC,MAAMC,GAAGC,gBAC/DJ,cAAY,SAACC,GAAD,OAAqBA,EAAMtD,SACvC,IAAMc,EAAUhB,KAEViD,EAAe,SAAC+e,GAClBD,GAAS,SAAAve,GAAK,kCAAUA,GAAV,kBAAkBwe,GAAQxe,EAAMwe,SAGlD,OACI,uBACI/gB,UAAWghB,KAAWjhB,EAAQb,MAAT,mBAChBa,EAAQsN,KAAOA,GADC,cAEhBtN,EAAQ0gB,QAAUpT,GAFF,IADzB,UAMK,IACD,eAAC4T,GAAA,EAAD,IACA,gBAAC,GAAD,CACIjf,aAAc,kBAAMA,EAAa,YACjCC,OAAQM,EAAMoe,QACdze,KAAK,MACLR,KAAM,eAACgS,GAAUhS,KAAX,IACNU,MAAOA,EALX,UAOI,eAACtB,EAAA,EAAD,CACIC,GAAI,CACA0W,SAAU,aACVlV,MAAO,CAAE2e,cAAc,IAE3BlgB,YAAY,YACZC,SAAU,eAACyS,GAAUhS,KAAX,IACVU,MAAOA,IAEX,eAACtB,EAAA,EAAD,CACIC,GAAI,CACA0W,SAAU,YACVlV,MAAO,CAAE2e,cAAc,IAE3BlgB,YAAY,WACZC,SAAU,eAACuS,GAAS9R,KAAV,IACVU,MAAOA,IAEX,eAACtB,EAAA,EAAD,CACIC,GAAI,CACA0W,SAAU,SACVlV,MAAO,CAAE2e,cAAc,IAE3BlgB,YAAY,OACZC,SAAU,eAACkgB,GAAMzf,KAAP,IACVU,MAAOA,OAGf,gBAAC,GAAD,CACIJ,aAAc,kBAAMA,EAAa,gBACjCC,OAAQM,EAAMqe,YACd1e,KAAK,WACLR,KAAM,eAACiS,GAASjS,KAAV,IACNU,MAAOA,EALX,UAOI,eAACtB,EAAA,EAAD,CACIC,GAAI,CACA0W,SAAU,YACVlV,MAAO,CAAE2e,cAAc,IAE3BlgB,YAAY,WACZC,SAAU,eAAC0S,GAASjS,KAAV,IACVU,MAAOA,IAEX,eAACtB,EAAA,EAAD,CACIC,GAAI,CACA0W,SAAU,mBACVlV,MAAO,CAAE2e,cAAc,IAE3BlgB,YAAY,WACZC,SAAU,eAACmgB,GAAgB1f,KAAjB,IACVU,MAAOA,IAEX,eAACtB,EAAA,EAAD,CACIC,GAAI,CACA0W,SAAU,oBACVlV,MAAO,CAAE2e,cAAc,IAE3BlgB,YAAY,aACZC,SAAU,eAACmgB,GAAgB1f,KAAjB,IACVU,MAAOA,WCvHdif,GAAY,CACrB5hB,QAAS,CACLI,QAAS,CACLyhB,KAAM,WAEV5hB,UAAW,CACP4hB,KAAM,WAEVtR,KAAM,QAEVuR,QAAS,CACL5d,MAAO,KAEX6d,UAAW,CACPC,UAAW,CACPC,eAAgB,CACZliB,MAAO,YACPqE,gBAAiB,cAGzB8d,cAAe,CACXziB,KAAM,CACF,wBAAyB,CAKrBiV,QAAS,KACThV,QAAS,QACTwE,MAAO,OACPC,OAAQ,OACRyB,SAAU,WACVU,IAAK,EACLC,MAAO,EACPnC,gBAAiB,eACjB+d,QAAS,GACTlV,aAAc,cAK9B/L,MAAO,CACHghB,cAAe,CAEXra,eAAe,KAKdua,GAAa,CACtBpiB,QAAS,CACLI,QAAS,CACLyhB,KAAM,WAEV5hB,UAAW,CACPC,MAAO,UACP2hB,KAAM,UACNQ,KAAM,UACNC,aAAc,QAElB3H,WAAY,CACR4H,QAAS,WAEbhS,KAAM,SAEViS,MAAO,CACHvV,aAAc,IAElB6U,QAAS,CACL5d,MAAO,KAEX6d,UAAW,CACPU,eAAgB,CACZhjB,KAAM,CACFijB,WAAY,kBAEhBC,OAAQ,CACJD,WAAY,sBAGpBE,SAAU,CACNC,WAAY,CACRC,UAAW,QAEfrjB,KAAM,CACFoK,OAAQ,oBACRkZ,eAAgB,gBAGxBC,UAAW,CACPC,UAAW,CACP7e,gBAAiB,OACjBrE,MAAO,UACP+iB,UAAW,SAGnBZ,cAAe,CACXziB,KAAM,CACF,wBAAyB,CAKrBiV,QAAS,KACThV,QAAS,QACTwE,MAAO,OACPC,OAAQ,OACRyB,SAAU,WACVU,IAAK,EACLC,MAAO,EACPnC,gBAAiB,eACjB+d,QAAS,GACTlV,aAAc,aAI1B+U,UAAW,CACPC,eAAgB,CACZliB,MAAO,UACPqE,gBAAiB,SAGzB8e,kBAAmB,CACfC,aAAc,CACV/e,gBAAiB,WAErBgf,gBAAiB,CACbhf,gBAAiB,YAGzBif,eAAgB,CACZ5jB,KAAM,CACF2E,gBAAiB,sBACjB,aAAc,CACVA,gBAAiB,yBAI7Bkf,mBAAoB,CAChB7jB,KAAM,CACFoK,OAAQ,UAIpB3I,MAAO,CACHghB,cAAe,CAEXra,eAAe,KC3IZ,YAAC3G,GACZ,IAAM1B,EAAQqD,cAAY,SAACC,GAAD,MACN,SAAhBA,EAAMtD,MAAmBoiB,GAAYQ,MAEzC,OAAO,eAACmB,GAAA,EAAD,2BAAYriB,GAAZ,IAAmBsiB,OAAQ1hB,GAAQwf,KAAML,GAAMzhB,MAAOA,M,6GCW3DF,GAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCqiB,KAAM,CACFniB,QAAS,OACT+F,cAAe,SACfge,UAAW,QACX3d,WAAY,SACZJ,eAAgB,aAChBge,gBAAiB,6EACjBC,iBAAkB,YAClBC,eAAgB,SAEpBC,KAAM,CACF3hB,SAAU,IACV8D,UAAW,OAEflH,OAAQ,CACJ0R,OAAQ,MACR9Q,QAAS,OACTgG,eAAgB,UAEpBzD,KAAM,CACFmC,gBAAiB5E,EAAMQ,QAAQC,UAAU4hB,MAE7CiC,KAAM,CACF9d,UAAW,MACXtG,QAAS,OACTgG,eAAgB,SAChB3F,MAAOP,EAAMQ,QAAQgJ,KAAK,MAE9B+a,KAAM,CACFpe,QAAS,iBAEbqe,MAAO,CACHhe,UAAW,OAEf8S,QAAS,CACLnT,QAAS,gBACTjG,QAAS,OACT+F,cAAe,cAIjBwe,GAAc,SAAC,GAAD,QAChBC,KAAQC,GADQ,aACW,CAAEA,SAAS,EAAOC,WAAOpmB,GADpC,GACRmmB,QAASC,EADD,EACCA,MACLC,EAFI,mBAEhBL,OACG9iB,EAHa,0BAKhB,eAAC,KAAD,qCACIkjB,SAAUD,IAAWC,GACrBlK,WAAYiK,GAAWC,GACnBC,GACAnjB,GAJR,IAKI+O,WAAS,MASTqU,GAASC,eAATD,KAEFE,GAAQ,WACV,MAA8B7d,oBAAS,GAAvC,oBAAOoM,EAAP,KAAgB0R,EAAhB,KACM7hB,EAAYxB,cACZd,EAAUhB,KACV4T,EAASC,eACTlV,EAAQymB,eACRC,EAAWC,eAsCjB,OACI,eAACN,GAAD,CACI5U,SAtCa,SAACmV,GAClBJ,GAAW,GACXxmB,EAAM4mB,EAAMF,EAAS7hB,MAAQ6hB,EAAS7hB,MAAMgiB,aAAe,KAAKC,OAC5D,SAACX,GACGK,GAAW,GACXvR,EACqB,kBAAVkR,EACDA,EACiB,qBAAVA,GAA0BA,EAAMrnB,QAEvCqnB,EAAMrnB,QADN,wBAEN,UACA,CACIyM,EACqB,kBAAV4a,EACDA,EACAA,GAASA,EAAMrnB,QACfqnB,EAAMrnB,aACNiB,QAqBtByb,SAdS,SAACuL,GACd,IAAMC,EAAqB,GAO3B,OANKD,EAAO9mB,WACR+mB,EAAO/mB,SAAW0E,EAAU,2BAE3BoiB,EAAO7mB,WACR8mB,EAAO9mB,SAAWyE,EAAU,2BAEzBqiB,GAOHvT,OAAQ,gBAAGwT,EAAH,EAAGA,aAAH,OACJ,uBAAMxV,SAAUwV,EAAcC,YAAU,EAAxC,SACI,uBAAK5kB,UAAWD,EAAQuhB,KAAxB,UACI,gBAACpL,GAAA,EAAD,CAAMlW,UAAWD,EAAQujB,KAAzB,UACI,sBAAKtjB,UAAWD,EAAQxB,OAAxB,SACI,eAAC,KAAD,CAAQyB,UAAWD,EAAQ2B,KAA3B,SACI,eAAC,KAAD,QAGR,sBAAK1B,UAAWD,EAAQwjB,KAAxB,iCAGA,uBAAKvjB,UAAWD,EAAQyjB,KAAxB,UACI,sBAAKxjB,UAAWD,EAAQ0jB,MAAxB,SACI,eAAC,KAAD,CACIhU,WAAS,EACTvN,KAAK,WAELoB,UAAWogB,GACX3b,MAAO1F,EAAU,oBACjB0L,SAAUyE,MAGlB,sBAAKxS,UAAWD,EAAQ0jB,MAAxB,SACI,eAAC,KAAD,CACIvhB,KAAK,WAELoB,UAAWogB,GACX3b,MAAO1F,EAAU,oBACjB2N,KAAK,WACLjC,SAAUyE,SAItB,gBAACqS,GAAA,EAAD,CAAa7kB,UAAWD,EAAQwY,QAAhC,UACI,gBAAC,KAAD,CACIrY,QAAQ,YACR8P,KAAK,SACLxQ,MAAM,UACNuO,SAAUyE,EACV9C,WAAS,EALb,UAOK8C,GACG,eAACsS,GAAA,EAAD,CACI1gB,KAAM,GACN2gB,UAAW,IAGlB1iB,EAAU,sBAEf,eAACpC,EAAA,EAAD,CAAYC,QAAQ,QAApB,gBACA,eAACyG,GAAA,EAAD,CACInH,MAAM,gBACN8D,UAAW6T,KACXpW,GAAG,YACHb,QAAQ,QAJZ,4BAUR,eAAC8kB,GAAA,EAAD,aAsBTC,GANQ,SAACtkB,GAAD,OACnB,eAACukB,GAAA,EAAD,CAAejmB,MAAOkmB,YAAYtD,IAAlC,SACI,eAAC,GAAD,eAAWlhB,O,gFC5Mb5B,GAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,KAAM,CACFiJ,aAAclJ,EAAMK,QAAQ,IAEhC8lB,YAAa,CACThgB,QAASnG,EAAMK,QAAQ,GACvBH,QAAS,QAEbkmB,SAAU,CACN3b,WAAYzK,EAAMK,QAAQ,QAIrBgmB,GAAW,SAAC,GAAoD,IAAlDzN,EAAiD,EAAjDA,KAAMjC,EAA2C,EAA3CA,MACvB7V,EAAUhB,KACVia,EAAWuM,eACjB,IAAK1N,EAAM,OAAO,KAElB,IAAM/H,EAAc,WAChBkJ,EAAS,UAAD,OAAWnB,EAAKxZ,GAAhB,WAEZ,OACI,eAAC,KAAD,CAAWmnB,YAAaC,OAAO5N,EAAKxZ,IAAKuX,MAAOA,EAAhD,SACK,SAAC8P,EAAUC,GAAX,OACG,0DACI3lB,UAAWD,EAAQb,MACfwmB,EAASE,gBACTF,EAASG,iBAHjB,IAIIjlB,IAAK8kB,EAASI,SACd5kB,QAAS4O,EALb,SAOI,eAACoG,GAAA,EAAD,CACIhO,MAAO,CACH0Z,QAAS+D,EAASI,WAAa,GAAM,EACrC/J,UAAW2J,EAASI,WACd,gBACA,IAEVvkB,UAAWmkB,EAASI,WAAa,EAAI,EAPzC,SASI,gBAACte,GAAA,EAAD,CAAKyY,EAAG,EAAG/gB,QAAQ,OAAnB,UACI,eAACuI,GAAA,EAAD,CACI3C,OAAO,aACPZ,OAAQ0T,EACRlQ,UAAU,YACVlM,SAAS,QACT4P,SAAS,SALb,SAOI,eAAC,GAAD,CAAWjH,KAAK,YAEpB,gBAACqD,GAAA,EAAD,CAAKwE,GAAI,EAAT,UACI,eAAChM,EAAA,EAAD,CAAYC,QAAQ,QAAQ8lB,cAAY,EAAxC,SACKnO,EAAK3V,OAEV,gBAACjC,EAAA,EAAD,CACIC,QAAQ,UACRV,MAAM,gBAFV,UAIKqY,EAAKE,OAAOC,eAAe,QAAS,CACjCC,SAAU,UACV/P,MAAO,WACPgQ,SAAU,MACVC,gBAAiB,eACjBC,yBAA0B,IATlC,KAWOP,EAAK7H,uBChEtCjR,GAAYC,YAAW,CACzBE,KAAM,CACFkB,KAAM,EACN4L,WAAY,EACZ+H,cAAe,GACflQ,gBAAiB,UACjB,gBAAiB,CACbhC,YAAa,EACbokB,oBAAqB,GAEzB,eAAgB,CACZnS,aAAc,EACdoS,qBAAsB,IAG9BC,UAAW,CACPhnB,QAAS,OACT+F,cAAe,SACfwH,aAAc,EACdtH,QAAS,EACT,mBAAoB,CAChBvB,gBAAiB,cAKhBuiB,GAAa,SAAC,GAQpB,IAPHtO,EAOE,EAPFA,MACAuO,EAME,EANFA,QACA/pB,EAKE,EALFA,KAMMyD,EAAUhB,KAChB,OACI,uBAAKiB,UAAWD,EAAQb,KAAxB,UACI,eAACe,EAAA,EAAD,CAAYqmB,MAAM,SAASpmB,QAAQ,YAAnC,SAEKmR,GAAWyG,KAEhB,eAAC,KAAD,CAAWyO,YAAazO,EAAxB,SACK,SAAC0O,EAAmBb,GAApB,OACG,+CACI/kB,IAAK4lB,EAAkBV,UACnBU,EAAkBC,gBAF1B,IAGIzmB,UACID,EAAQomB,WACPR,EAASe,eAAiB,kBAAoB,IALvD,UAQKL,EAAQ5iB,KAAI,SAACpF,EAAIuX,GAAL,OACT,eAAC,GAAD,CAAmBA,MAAOA,EAAOiC,KAAMvb,EAAK+B,IAA7BA,MAElBmoB,EAAkBG,uBC5CrCC,GAA8BxV,GAAOyV,QACvC,SAACC,EAAKhP,GAAN,mBAAC,eAAqBgP,GAAtB,kBAA4BhP,EAAQ,OACpC,IAGEiP,GAAmB,SACrBvgB,EACAlK,GAGA,IAAM0qB,EAAUxgB,EAAIqgB,QAChB,SAACI,EAAK5oB,GAEF,OADA4oB,EAAI3qB,EAAK+B,GAAIyZ,OAAOoP,KAAK7oB,GAClB4oB,IAEX7V,GAAOyV,QAAO,SAACC,EAAKhP,GAAN,mBAAC,eAAqBgP,GAAtB,kBAA4BhP,EAAQ,OAAO,KAQ7D,OALA1G,GAAO+V,SAAQ,SAAArP,GACXkP,EAAQlP,GAASkP,EAAQlP,GAAOnB,MAC5B,SAAChb,EAAeyrB,GAAhB,OAAkC9qB,EAAKX,GAAGia,MAAQtZ,EAAK8qB,GAAGxR,YAG3DoR,GAGEK,GAAkB,WAC3B,MAQI/gB,eAPAhK,EADJ,EACIA,KACAkK,EAFJ,EAEIA,IACAC,EAHJ,EAGIA,OACAqD,EAJJ,EAIIA,KACAC,EALJ,EAKIA,QACAud,EANJ,EAMIA,YACAC,EAPJ,EAOIA,aAGJ,EAA0BnhB,mBACtBK,EAASsgB,GAAiBvgB,EAAKlK,GAAQsqB,IAD3C,oBAAOnT,EAAP,KAAc+T,EAAd,KAIMnqB,EAAeoqB,qBAAWC,MAGhC,EAAkBC,aAAY,CAC1BlsB,SAAU,QACVuU,KAAM,UACN6O,QAAS,CACLnG,WAAY,CAAE5O,OAAMC,WACpB4M,KAAM2Q,EACN/Y,OAAQgZ,KANT9U,EAAP,qBAoBA,GATAmV,qBAAU,WACN,GAAKnhB,EAAL,CACA,IAAMohB,EAAWd,GAAiBvgB,EAAKlK,GACnCwrB,KAAQrU,EAAOoU,IAGnBL,EAASK,MACV,CAACvrB,EAAMkK,EAAKC,KAEVA,EAAQ,OAAO,KAEpB,IAAMshB,EAA6B,uCAAG,WAAMC,GAAN,+CAAArsB,EAAA,yDAC1BssB,EAAqCD,EAArCC,YAAaljB,EAAwBijB,EAAxBjjB,OAAQygB,EAAgBwC,EAAhBxC,YAExByC,EAH6B,oDAQ9BA,EAAY1B,cAAgBxhB,EAAOwhB,aACnC0B,EAAYrS,QAAU7Q,EAAO6Q,MATC,oDAc9B7Q,EAAOwhB,cAAgB0B,EAAY1B,YAdL,wBAiBxB2B,EAASpf,MAAMC,KAAK0K,EAAM1O,EAAOwhB,cACjC4B,EAAa7rB,EAAK4rB,EAAOnjB,EAAO6Q,QAChCwS,EAAkB9rB,EAAK4rB,EAAOD,EAAYrS,QAIhDsS,EAAOG,OAAOtjB,EAAO6Q,MAAO,GAE5BsS,EAAOG,OAAOJ,EAAYrS,MAAO,EAAG0S,OAAO9C,IAC3CgC,EAAS,2BACF/T,GADC,kBAEH1O,EAAOwhB,YAAc2B,KA5BI,UAiCM7qB,EAAa7B,QAAQ,QAAS,CAC9Dmb,KAAM,CAAE3M,MAAO,QAASP,MAAO,OAC/BiP,WAAY,CAAE5O,KAAM,EAAGC,QAAS,KAChCwE,OAAQ,CAAEuJ,MAAO/S,EAAOwhB,eApCE,oBAiChBgC,EAjCgB,EAiCtBjsB,OAMJyI,EAAO6Q,MAAQqS,EAAYrS,OAvCD,kCA6CpBxZ,QAAQosB,IAAR,uBAECD,EACEha,QACG,SAAAsJ,GAAI,OACAA,EAAKjC,OAASwS,EAAgBxS,OAC9BiC,EAAKjC,MAAQuS,EAAWvS,SAE/BnS,KAAI,SAAAoU,GAAI,OACLxa,EAAaN,OAAO,QAAS,CACzBsB,GAAIwZ,EAAKxZ,GACT/B,KAAM,CAAEsZ,MAAOiC,EAAKjC,MAAQ,GAC5B6S,aAAc5Q,QAZxB,CAgBFxa,EAAaN,OAAO,QAAS,CACzBsB,GAAI8pB,EAAW9pB,GACf/B,KAAM,CAAEsZ,MAAOwS,EAAgBxS,OAC/B6S,aAAcN,OAhEI,QAoE1B1V,IApE0B,yCA2EpBrW,QAAQosB,IAAR,uBAECD,EACEha,QACG,SAAAsJ,GAAI,OACAA,EAAKjC,OAASwS,EAAgBxS,OAC9BiC,EAAKjC,MAAQuS,EAAWvS,SAE/BnS,KAAI,SAAAoU,GAAI,OACLxa,EAAaN,OAAO,QAAS,CACzBsB,GAAIwZ,EAAKxZ,GACT/B,KAAM,CAAEsZ,MAAOiC,EAAKjC,MAAQ,GAC5B6S,aAAc5Q,QAZxB,CAgBFxa,EAAaN,OAAO,QAAS,CACzBsB,GAAI8pB,EAAW9pB,GACf/B,KAAM,CAAEsZ,MAAOwS,EAAgBxS,OAC/B6S,aAAcN,OA9FI,QAkG1B1V,IAlG0B,uCAuGxBiW,EAAe5f,MAAMC,KAAK0K,EAAM1O,EAAOwhB,cACvCoC,EAAoB7f,MAAMC,KAC5B0K,EAAMwU,EAAY1B,cAEhB4B,EAAa7rB,EAAKosB,EAAa3jB,EAAO6Q,QACtCwS,EAAkB9rB,EAAKqsB,EAAkBV,EAAYrS,QAG3D8S,EAAaL,OAAOtjB,EAAO6Q,MAAO,GAClC+S,EAAkBN,OAAOJ,EAAYrS,MAAO,EAAG4P,GAC/CgC,EAAS,2BACF/T,GADC,uBAEH1O,EAAOwhB,YAAcmC,GAFlB,cAGHT,EAAY1B,YAAcoC,GAHvB,KAjHsB,UA4HpBvsB,QAAQosB,IAAI,CAClBnrB,EAAa7B,QAAQ,QAAS,CAC1Bmb,KAAM,CAAE3M,MAAO,QAASP,MAAO,OAC/BiP,WAAY,CAAE5O,KAAM,EAAGC,QAAS,KAChCwE,OAAQ,CAAEuJ,MAAO/S,EAAOwhB,eAE5BlpB,EAAa7B,QAAQ,QAAS,CAC1Bmb,KAAM,CAAE3M,MAAO,QAASP,MAAO,OAC/BiP,WAAY,CAAE5O,KAAM,EAAGC,QAAS,KAChCwE,OAAQ,CAAEuJ,MAAOmQ,EAAY1B,iBArIP,4CA0HlBqC,EA1HkB,KA0HxBtsB,KACMusB,EA3HkB,KA2HxBvsB,KA3HwB,UAyIxBF,QAAQosB,IAAR,uBAECI,EACEra,QAAO,SAAAsJ,GAAI,OAAIA,EAAKjC,MAAQuS,EAAWvS,SACvCnS,KAAI,SAAAoU,GAAI,OACLxa,EAAaN,OAAO,QAAS,CACzBsB,GAAIwZ,EAAKxZ,GACT/B,KAAM,CAAEsZ,MAAOiC,EAAKjC,MAAQ,GAC5B6S,aAAc5Q,QARxB,aAYCgR,EACEta,QAAO,SAAAsJ,GAAI,QACRuQ,GACMvQ,EAAKjC,OAASwS,EAAgBxS,SAGvCnS,KAAI,SAAAoU,GAAI,OACLxa,EAAaN,OAAO,QAAS,CACzBsB,GAAIwZ,EAAKxZ,GACT/B,KAAM,CAAEsZ,MAAOiC,EAAKjC,MAAQ,GAC5B6S,aAAc5Q,QAtBxB,CA0BFxa,EAAaN,OAAO,QAAS,CACzBsB,GAAI8pB,EAAW9pB,GACf/B,KAAM,CACFsZ,MAAOwS,EACDA,EAAgBxS,MAChBiT,EAAiBC,MAAOlT,MAAQ,EACtCkC,MAAOmQ,EAAY1B,aAEvBkC,aAAcN,OA3KQ,QA+K9B1V,IA/K8B,4CAAH,sDAmLnC,OACI,eAAC,KAAD,CAAiBsV,UAAWA,EAA5B,SACI,eAACtgB,GAAA,EAAD,CAAKtI,QAAQ,OAAb,SACKiS,GAAO3N,KAAI,SAAAqU,GAAK,OACb,eAAC,GAAD,CACIA,MAAOA,EACPuO,QAAS5S,EAAMqE,GACfxb,KAAMA,GACDwb,W,oBC1QhBiR,GARQ,CACjB,QACA,cACA,gBACA,YACA,kBAG6BtlB,KAAI,SAAAuM,GAAI,MAAK,CAAE3R,GAAI2R,EAAM9N,KAAM8N,MCY1DjR,GAAYC,YAAW,CACzBE,KAAM,CACFyE,MAAO,OAIFqlB,GAAa,SAAC,GAAiC,IAA/B3b,EAA8B,EAA9BA,KACnBtN,EAAUhB,KACVia,EAAWuM,eACXloB,EAAe4rB,eA8BrB,OACI,eAAC/Z,GAAA,EAAD,CAAQ7B,KAAMA,EAAM4B,QA7BJ,WAChB+J,EAAS,WA4BT,SACI,eAACH,GAAA,EAAD,CACIpd,SAAS,QACT4P,SAAS,SACTrL,UAAWD,EAAQb,KACnBmQ,UA9BM,SAAC,GAAoC,IAA5BwI,EAA2B,EAAjCvb,KACjB0c,EAAS,UAET3b,EACK7B,QAAQ,QAAS,CACdkd,WAAY,CAAE5O,KAAM,EAAGC,QAAS,IAChC4M,KAAM,CAAE3M,MAAO,KAAMP,MAAO,OAC5B8E,OAAQ,CAAEuJ,MAAOD,EAAKC,SAEzBoR,MAAK,gBAASzV,EAAT,EAAGnX,KAAH,OACFF,QAAQosB,IACJ/U,EACKlF,QAAO,SAAA4a,GAAO,OAAIA,EAAQ9qB,KAAOwZ,EAAKxZ,MACtCoF,KAAI,SAAA0lB,GAAO,OACR9rB,EAAaN,OAAO,QAAS,CACzBsB,GAAI8qB,EAAQ9qB,GACZ/B,KAAM,CAAEsZ,MAAOuT,EAAQvT,MAAQ,GAC/B6S,aAAcU,YASlC,SAMI,gBAACrQ,GAAA,EAAD,CAAYC,cAAe,CAAEnD,MAAO,GAApC,UACI,eAACqD,GAAA,EAAD,CACIlU,OAAO,OACPgD,MAAM,YACN2H,WAAS,EACTwJ,SAAU,CAACC,kBAEf,eAACF,GAAA,EAAD,CACIlU,OAAO,cACPgO,WAAS,EACTC,KAAM,EACNtD,WAAS,IAEb,eAAC8J,GAAA,EAAD,CACIzU,OAAO,aACP4C,UAAU,YACV+H,WAAS,EACTwJ,SAAU,CAACC,gBAJf,SAMI,eAAC3N,GAAA,EAAD,CAAmBC,WAAW,WAElC,eAAC2N,GAAA,EAAD,CACIrU,OAAO,QACPkD,QAASyJ,GACThC,WAAS,EACTwJ,SAAU,CAACC,gBACXiQ,aAAa,gBAEjB,eAAChQ,GAAA,EAAD,CACIrU,OAAO,OACPkD,QAAS8gB,GACTrZ,WAAS,IAEb,eAAC2Z,GAAA,EAAD,CAAatkB,OAAO,SAAS2K,WAAS,EAAC0Z,aAAc,IACrD,eAAC5P,GAAA,EAAD,CACIzU,OAAO,WACP4C,UAAU,QACVI,MAAM,kBACN4R,YAAY,EACZjK,WAAS,EALb,SAOI,eAAC0J,GAAA,EAAD,CACI3N,WAAY,SAACmO,GAAD,gBACLA,EAAM3b,WADD,YACe2b,EAAM1b,wB,UCxGvDa,GAAYC,YAAW,CACzBsqB,GAAI,CACAC,UAAW,OACXnkB,QAAS,EACT6K,OAAQ,EACR9Q,QAAS,gBAEbqqB,GAAI,CACArqB,QAAS,SACT,UAAW,CACPgV,QAAS,QAEb,qBAAsB,CAClBA,QAAS,SAKRsV,GAAc,WACvB,MAA8BnjB,eAAtBE,EAAR,EAAQA,IAAKlK,EAAb,EAAaA,KAAMmK,EAAnB,EAAmBA,OACb1G,EAAUhB,KAChB,OAAK0H,EAED,qBAAIzG,UAAWD,EAAQupB,GAAvB,SACK9iB,EAAI/C,KAAI,SAAApF,GAAE,OACP,qBAAa2B,UAAWD,EAAQypB,GAAhC,SACI,gBAAC7iB,GAAA,EAAD,CACIrD,UAAW6T,KACXpW,GAAE,oBAAe1C,GACjB6B,QAAQ,YAHZ,UAKK5D,EAAK+B,GAAIJ,WALd,IAK2B3B,EAAK+B,GAAIH,cAN/BG,QAJD,sBAAK6J,MAAO,CAAEtE,OAAQ,UCDxC7E,GAAYC,YAAW,CACzB0qB,OAAQ,CACJrkB,SAAU,WACVU,IAAK,MAIA4jB,GAAW,SAAC,GAAqD,IAAnDtc,EAAkD,EAAlDA,KAAMhP,EAA4C,EAA5CA,GACvB2a,EAAWuM,eACXxlB,EAAUhB,KAMhB,OACI,eAACmQ,GAAA,EAAD,CACI7B,KAAMA,EACN4B,QAPY,WAChB+J,EAAS,WAOLtJ,WAAS,EACTxD,SAAS,KACTnM,QAAS,CAAEkF,MAAOlF,EAAQ2pB,QAL9B,SAOI,eAACla,GAAA,EAAD,UACI,eAACuK,GAAA,EAAD,CAAUte,SAAS,QAAQ4P,SAAS,SAAShN,GAAIA,EAAjD,SACI,eAAC,GAAD,WAOdurB,GAAkB,WACpB,IAAMzlB,EAAS8N,eACf,OAAK9N,EAED,qCACI,gBAACsD,GAAA,EAAD,CAAKtI,QAAQ,OAAb,UACI,gBAACsI,GAAA,EAAD,CACI9D,MAAO,IACPxE,QAAQ,OACR+F,cAAc,SACdK,WAAW,SAJf,UAMI,eAACmC,GAAA,EAAD,CACI3C,OAAO,aACP4C,UAAU,YACVC,KAAK,OAHT,SAKI,eAAC,GAAD,MAEJ,eAACF,GAAA,EAAD,CACI3C,OAAO,aACP4C,UAAU,YACVC,KAAK,OAHT,SAKI,eAAC8I,GAAA,EAAD,CACI3L,OAAO,OACPuhB,MAAM,SACNhjB,UAAU,aAItB,gBAACmE,GAAA,EAAD,CAAKwE,GAAI,EAAG7L,KAAK,IAAjB,UACI,eAACH,EAAA,EAAD,CAAYC,QAAQ,KAApB,SAA0BiE,EAAOjC,OAEjC,gBAACuF,GAAA,EAAD,CAAKtI,QAAQ,OAAOwP,GAAI,EAAxB,UACI,gBAAClH,GAAA,EAAD,CAAKtI,QAAQ,OAAOwc,GAAI,EAAGzW,cAAc,SAAzC,UACI,eAACjF,EAAA,EAAD,CAAYT,MAAM,gBAAgBU,QAAQ,QAA1C,mBAGA,eAACD,EAAA,EAAD,CAAYC,QAAQ,YAApB,SACK2pB,aAAO,IAAI3W,KAAK/O,EAAO2lB,UAAW,WAI3C,gBAACriB,GAAA,EAAD,CAAKtI,QAAQ,OAAOwc,GAAI,EAAGzW,cAAc,SAAzC,UACI,eAACjF,EAAA,EAAD,CAAYT,MAAM,gBAAgBU,QAAQ,QAA1C,oBAGA,eAACD,EAAA,EAAD,CAAYC,QAAQ,YAApB,SACKiE,EAAO4T,OAAOC,eAAe,QAAS,CACnCC,SAAU,UACV/P,MAAO,WACPgQ,SAAU,MACVC,gBAAiB,eACjBC,yBAA0B,SAKtC,gBAAC3Q,GAAA,EAAD,CAAKtI,QAAQ,OAAOwc,GAAI,EAAGzW,cAAc,SAAzC,UACI,eAACjF,EAAA,EAAD,CAAYT,MAAM,gBAAgBU,QAAQ,QAA1C,kBAGA,eAACD,EAAA,EAAD,CAAYC,QAAQ,YAApB,SACKiE,EAAO6L,UAIhB,gBAACvI,GAAA,EAAD,CAAKtI,QAAQ,OAAOwc,GAAI,EAAGzW,cAAc,SAAzC,UACI,eAACjF,EAAA,EAAD,CAAYT,MAAM,gBAAgBU,QAAQ,QAA1C,mBAGA,eAACD,EAAA,EAAD,CAAYC,QAAQ,YAApB,SAEKmR,GAAWlN,EAAO2T,eAK/B,eAACrQ,GAAA,EAAD,CAAKkH,GAAI,EAAGvC,GAAI,EAAhB,SACI,gBAAC3E,GAAA,EAAD,CACItI,QAAQ,OACRwc,GAAI,EACJzW,cAAc,SACdge,UAAW,GAJf,UAMI,eAACjjB,EAAA,EAAD,CAAYT,MAAM,gBAAgBU,QAAQ,QAA1C,sBAGA,eAAC6M,GAAA,EAAD,CACIhI,OAAO,cACP4C,UAAU,WAFd,SAII,eAAC,GAAD,WAKZ,gBAACF,GAAA,EAAD,CAAKkH,GAAI,EAAGvC,GAAI,EAAGlE,MAAO,CAAE5H,WAAY,YAAxC,UACI,eAACL,EAAA,EAAD,CAAYT,MAAM,gBAAgBU,QAAQ,QAA1C,yBAGA,eAACD,EAAA,EAAD,UAAakE,EAAO4lB,iBAGxB,eAAC1d,GAAA,EAAD,IAEA,eAAC5E,GAAA,EAAD,CAAKkH,GAAI,EAAT,SACI,eAAC+H,GAAA,EAAD,CACI9G,OAAO,UACPjI,UAAU,YACVgP,KAAM,CAAE3M,MAAO,OAAQP,MAAO,QAHlC,SAKI,eAAC,GAAD,CAAe9B,UAAU,sBA/G7B,M,8BCvDlB5I,GAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,KAAM,CACFiJ,aAAclJ,EAAMK,QAAQ,GAC5BoK,WAAYzK,EAAMK,QAAQ,QAIrB0qB,GAAgB,SAAC,GAAwC,EAAtCC,SAAuC,IACnE,EAIIC,eAHA3C,EADJ,EACIA,aACA4C,EAFJ,EAEIA,iBACAC,EAHJ,EAGIA,WAEI9kB,EAAasE,eAAbtE,SACFvF,EAAUhB,KAUhB,OACI,sBAAKiB,UAAWD,EAAQb,KAAxB,SACI,eAACmrB,GAAA,EAAD,CACIC,QACI,eAACC,GAAA,EAAD,CACIpjB,QAA0C,qBAA1BogB,EAAajd,SAC7BqF,SAfC,WACjB,IAAM6a,EAAe,eAAQjD,GACQ,qBAA1BA,EAAajd,gBACbkgB,EAAgBlgB,SAEvBkgB,EAAgBlgB,SAAWhF,IAAQ,OAAIA,QAAJ,IAAIA,OAAJ,EAAIA,EAAUjH,IAErD+rB,EAAWI,EAAiBL,IASZ3qB,MAAM,UACN0C,KAAK,aAGb6F,MAAM,+BAMtBiiB,GAAcS,aAAe,CAAE1lB,OAAQ,YCzBhC,IA8BD2lB,GAAc,CAChB,eAACC,GAAA,EAAD,CAAa5lB,OAAO,IAAIklB,UAAQ,IAChC,eAAC,GAAD,CAAeA,UAAQ,IACvB,eAAC7Q,GAAA,EAAD,CAAarU,OAAO,OAAOkD,QAAS8gB,MAGlCre,GAAkB1L,aAAW,SAAAC,GAAK,MAAK,CACzC0L,aAAc,CACVjB,WAAYzK,EAAMK,QAAQ,QAG5BsrB,GAAc,WAChB,IAAM7qB,EAAU2K,KAChB,OACI,gBAACM,GAAA,EAAD,WACI,eAAC6f,GAAA,EAAD,IACA,eAAC1f,GAAA,EAAD,IACA,eAACC,GAAA,EAAD,CACIC,SAAS,SACTnL,QAAQ,YACR6H,MAAM,WACN/H,UAAWD,EAAQ4K,mBCpEpB,IACX2N,KDgBoB,SAAC3X,GACrB,IAAQ2E,EAAasE,eAAbtE,SACR,OAAOA,EACH,uCACI,eAAC,KAAD,2BACQ3E,GADR,IAEIoJ,QAAS,IACT4M,KAAM,CAAE3M,MAAO,QAASP,MAAO,OAC/BqhB,QAASJ,GACTjS,oBAAqB,CAAEnO,SAAUhF,IAAQ,OAAIA,QAAJ,IAAIA,OAAJ,EAAIA,EAAUjH,KACvDka,QAAS,eAAC,GAAD,IACTG,YAAY,EACZpV,UAAU,MARd,SAUI,eAAC,GAAD,OAEJ,eAAC,KAAD,CAAOynB,KAAK,gBAAZ,SACK,gBAAGC,EAAH,EAAGA,MAAH,OAAe,eAAC,GAAD,CAAY3d,OAAQ2d,OAExC,eAAC,KAAD,CAAOD,KAAK,kBAAZ,SACK,kBAAGC,EAAH,EAAGA,MAAH,OACKA,EACE,eAAC,GAAD,CAAU3d,OAAQ2d,EAAO3sB,GAAE,OAAE2sB,QAAF,IAAEA,GAAF,UAAEA,EAAOtvB,cAAT,aAAE,EAAe2C,KAC5C,WAIhB,MC1CJqD,KAAMupB,M,UCIGC,GAAc,WACvB,IAAQ5lB,EAAasE,eAAbtE,SACR,EAKIuE,aACA,WACA,CAAEC,KAAM,EAAGC,QAAS,IACpB,CAAEC,MAAO,YAAaP,MAAO,QAC7B,CAAEhN,OAAQ,MAAO6N,SAAQ,OAAEhF,QAAF,IAAEA,OAAF,EAAEA,EAAUjH,IACrC,CAAE8P,QAASma,OAAO6C,UAAP,OAAiB7lB,QAAjB,IAAiBA,OAAjB,EAAiBA,EAAUjH,MAThC+sB,EADV,EACI9uB,KACK+uB,EAFT,EAEI7kB,IACO8kB,EAHX,EAGIC,MACQC,EAJZ,EAII/kB,OAQJ,OACI,uCACI,gBAACgB,GAAA,EAAD,CAAKtI,QAAQ,OAAOoG,WAAW,SAAS4C,aAAa,MAArD,UACI,eAACV,GAAA,EAAD,CAAKwE,GAAI,EAAG0P,GAAI,EAAGxc,QAAQ,OAA3B,SACI,eAAC,KAAD,CAAcK,MAAM,WAAW+U,SAAS,YAE5C,eAAC5N,GAAA,EAAD,CACIE,UAAU,OACV3G,QAAQ,KACRV,MAAM,gBACN8D,UAAW6T,KACXpW,GAAG,YALP,6BAUJ,eAACmV,GAAA,EAAD,UACI,eAACuV,GAAA,EAAD,CACIpgB,SAAS,YACT4B,SAAS,OACTzG,IAAK6kB,EACL/uB,KAAM8uB,EACNG,MAAOD,EACP7kB,OAAQ+kB,EACRxqB,YAAa,SAAAiW,GAAO,gBACbA,EAAQhZ,WADK,YACSgZ,EAAQ/Y,YAErCwtB,cAAe,SAAAzU,GAAO,OAClBM,aACI,IAAIrE,KAAK+D,EAAQnE,WACjB,IAAII,KACJ,CACIyY,WAAW,KAIvBC,WAAY,SAAA3U,GAAO,OAAI,eAAC,GAAD,CAAQ9S,OAAQ8S,aC7CrDlY,GAAYC,aAAW,SAAAC,GAAK,MAAK,CACnC0V,KAAM,CACFxM,aAAclJ,EAAMK,QAAQ,IAEhC2V,SAAU,CACNpR,gBAAiB5E,EAAMQ,QAAQgJ,KAAK,KACpCrD,QAASnG,EAAMK,QAAQ,GACvBoN,aAAc,IAElBmf,aAAc,CACV1sB,QAAS,cACT,qBAAsB,EACtB,qBAAsB,WACtBoB,SAAU,cAILurB,GAAc,WACvB,IAAM/rB,EAAUhB,KACRuG,EAAasE,eAAbtE,SACR,EAIIuE,aACA,eACA,CAAEC,KAAM,EAAGC,QAAS,GACpB,CAAEC,MAAO,OAAQP,MAAO,QACxB,CAAEa,SAAQ,OAAEhF,QAAF,IAAEA,OAAF,EAAEA,EAAUjH,IACtB,CAAE8P,QAASma,OAAO6C,UAAP,OAAiB7lB,QAAjB,IAAiBA,OAAjB,EAAiBA,EAAUjH,MARhC0tB,EADV,EACIzvB,KACK0vB,EAFT,EAEIxlB,IACQylB,EAHZ,EAGIxlB,OAQJ,EAIIoD,aACA,YACA,CAAEC,KAAM,EAAGC,QAAS,GACpB,CAAEC,MAAO,OAAQP,MAAO,QACxB,CAAEa,SAAQ,OAAEhF,QAAF,IAAEA,OAAF,EAAEA,EAAUjH,IACtB,CAAE8P,QAASma,OAAO6C,UAAP,OAAiB7lB,QAAjB,IAAiBA,OAAjB,EAAiBA,EAAUjH,MARhC6tB,EADV,EACI5vB,KACK6vB,EAFT,EAEI3lB,IACQ4lB,EAHZ,EAGI3lB,OAQJ,EAIIoD,aACA,eACA,CAAEC,KAAM,EAAGC,QAAS,GACpB,CAAEC,MAAO,OAAQP,MAAO,QACxB,CAAEa,SAAQ,OAAEhF,QAAF,IAAEA,OAAF,EAAEA,EAAUjH,IACtB,CAAE8P,QAASma,OAAO6C,UAAP,OAAiB7lB,QAAjB,IAAiBA,OAAjB,EAAiBA,EAAUjH,MARhCguB,EADV,EACI/vB,KACKgwB,EAFT,EAEI9lB,IACQ+lB,EAHZ,EAGI9lB,OAQJ,IAAKwlB,IAAuBG,IAAoBG,EAC5C,OAAO,KAGX,IACKP,IACAD,IACAI,IACAD,IACAI,IACAD,EAED,OAAO,KAGX,IAAMG,EAAY,GACbC,OACGT,EAAgBvoB,KAAI,SAAApF,GAAE,kCACf0tB,EAAiB1tB,IADF,IAElB2R,KAAM,mBAEVmc,EAAa1oB,KAAI,SAAApF,GAAE,kCACZ6tB,EAAc7tB,IADF,IAEf2R,KAAM,gBAEVsc,EAAgB7oB,KAAI,SAAApF,GAAE,kCACfguB,EAAiBhuB,IADF,IAElB2R,KAAM,oBAGb2G,MAAK,SAAChb,EAAGyrB,GAAJ,OAAU,IAAIlU,KAAKkU,EAAE9U,MAAMoa,UAAY,IAAIxZ,KAAKvX,EAAE2W,MAAMoa,aAC7DnZ,MAAM,EAAG,GAEd,OACI,uCACI,gBAAC9L,GAAA,EAAD,CAAKtI,QAAQ,OAAOoG,WAAW,SAAS4C,aAAa,MAArD,UACI,eAACV,GAAA,EAAD,CAAKwE,GAAI,EAAG0P,GAAI,EAAGxc,QAAQ,OAA3B,SACI,eAAC,KAAD,CAAUK,MAAM,WAAW+U,SAAS,YAExC,eAACtU,EAAA,EAAD,CAAYC,QAAQ,KAAKV,MAAM,gBAA/B,gCAIJ,eAAC0W,GAAA,EAAD,UACI,eAACnK,GAAA,EAAD,UACKygB,EAAS/oB,KAAI,SAAAkR,GAAI,OACd,uBACItW,GAAE,UAAKsW,EAAK3E,KAAV,YAAkB2E,EAAKtW,IAEzB2B,UAAWD,EAAQ4U,KAHvB,UAKI,gBAAC1U,EAAA,EAAD,CAAYT,MAAM,gBAAgBwmB,cAAY,EAA9C,eACO,IACH,eAAC,GAAD,CAAYrR,KAAMA,IAFtB,UAGY,IACP4C,aACG,IAAIrE,KAAKyB,EAAKrC,MACd,IAAIY,KACJ,CACIyY,WAAW,OAIvB,sBAAK3rB,UAAWD,EAAQkV,SAAxB,SACI,eAAChV,EAAA,EAAD,CAAYD,UAAWD,EAAQ8rB,aAA/B,SACKlX,EAAKxC,WAnBlB,UAEYwC,EAAK3E,KAFjB,YAEyB2E,EAAKtW,gBA4BhDsuB,GAAa,SAAC,GAAmB,IAAjBhY,EAAgB,EAAhBA,KAClB,MAAkB,aAAdA,EAAK3E,KACE,eAAC,GAAD,CAAM2E,KAAMA,IAEA,gBAAdA,EAAK3E,KACH,eAAC,GAAD,CAAS2E,KAAMA,IAEH,gBAAdA,EAAK3E,KACH,eAAC,GAAD,CAAS2E,KAAMA,IAEnB,MAGLiY,GAAO,SAAC,GAAD,IAAGjY,EAAH,EAAGA,KAAH,OACT,8CACS,IACL,eAACjN,GAAA,EAAD,CACIvD,OAAQwQ,EACR5P,OAAO,UACP4C,UAAU,QACV0D,SAAS,SACTzD,KAAK,OALT,SAOI,eAAC8I,GAAA,EAAD,CAAW3L,OAAO,OAAO7E,QAAQ,gBAKvC2sB,GAAU,SAAC,GAAD,IAAGlY,EAAH,EAAGA,KAAH,OACZ,iDACY,IACR,eAACjN,GAAA,EAAD,CACIvD,OAAQwQ,EACR5P,OAAO,aACP4C,UAAU,WACV0D,SAAS,YACTzD,KAAK,OALT,SAOI,eAACsJ,GAAA,EAAD,CACIhR,QAAQ,QACRiR,OAAQ,SAAA8F,GAAO,OACXA,EAAO,UAAMA,EAAQhZ,WAAd,YAA4BgZ,EAAQ/Y,WAAc,YAOvE4uB,GAAU,SAAC,GAAD,IAAGnY,EAAH,EAAGA,KAAH,OACZ,iDACY,IACR,eAACjN,GAAA,EAAD,CACIvD,OAAQwQ,EACR5P,OAAO,aACP4C,UAAU,YACV0D,SAAS,aACTzD,KAAK,OALT,SAOI,eAAC8I,GAAA,EAAD,CAAW3L,OAAO,OAAO7E,QAAQ,gBCzLhC6sB,GAAgB,WACzB,IAAQznB,EAAasE,eAAbtE,SACR,EAAmDuE,aAC/C,QACA,CAAEC,KAAM,EAAGC,QAAS,IACpB,CAAEC,MAAO,QAASP,MAAO,QACzB,CAAEqO,MAAO,OAAQxN,SAAQ,OAAEhF,QAAF,IAAEA,OAAF,EAAEA,EAAUjH,IACrC,CAAE8P,QAASma,OAAO6C,UAAP,OAAiB7lB,QAAjB,IAAiBA,OAAjB,EAAiBA,EAAUjH,MALlC/B,EAAR,EAAQA,KAAW0wB,EAAnB,EAAcxmB,IAAmB+kB,EAAjC,EAAiCA,MAAO9kB,EAAxC,EAAwCA,OAOxC,EAAsBL,mBAAS4mB,GAA/B,oBAAOxmB,EAAP,KAAYymB,EAAZ,KAaA,OAZArF,qBAAU,WACN,IAAMnU,EAAQuZ,EAAavpB,KAAI,SAAApF,GAAE,OAAI/B,EAAK+B,MACpC6uB,EAA2B,GACjC9b,GACK7C,QAAO,SAAAuJ,GAAK,MAAc,QAAVA,KAChBqP,SAAQ,SAAArP,GAAK,OACVrE,EACKlF,QAAO,SAAAsJ,GAAI,OAAIA,EAAKC,QAAUA,KAC9BqP,SAAQ,SAAAtP,GAAI,OAAIqV,EAAWhG,KAAKrP,EAAKxZ,UAElD4uB,EAAOC,KACR,CAACF,EAAc1wB,IAEd,uCACI,gBAACmL,GAAA,EAAD,CAAKtI,QAAQ,OAAOoG,WAAW,SAAS4C,aAAa,MAArD,UACI,eAACV,GAAA,EAAD,CAAKwE,GAAI,EAAG0P,GAAI,EAAGxc,QAAQ,OAA3B,SACI,eAAC,KAAD,CAAoBK,MAAM,WAAW+U,SAAS,YAElD,eAAC5N,GAAA,EAAD,CACIE,UAAU,OACV3G,QAAQ,KACRV,MAAM,gBACN8D,UAAW6T,KACXpW,GAAG,SALP,+BAUJ,eAACmV,GAAA,EAAD,UACI,eAACuV,GAAA,EAAD,CACIpgB,SAAS,SACT4B,SAAS,OACTzG,IAAKA,EACLlK,KAAMA,EACNivB,MAAOA,EACP9kB,OAAQA,EACRzF,YAAa,SAAA6W,GAAI,OAAIA,EAAK3V,MAC1BwpB,cAAe,SAAA7T,GAAI,gBACZA,EAAKE,OAAOC,eAAe,QAAS,CACnCC,SAAU,UACV/P,MAAO,WACPgQ,SAAU,MACVC,gBAAiB,eACjBC,yBAA0B,IANf,cAQP/G,GAAWwG,EAAKC,SAE5B8T,WAAY,SAAA/T,GAAI,OACZ,eAACnQ,GAAA,EAAD,CACI3C,OAAO,aACPZ,OAAQ0T,EACRlQ,UAAU,YACVlM,SAAS,QACT4P,SAAS,SACTzD,MAAM,EANV,SAQI,eAAC,GAAD,CAAexD,KAAK,qB,wCCzD1C+oB,GAAMC,gBAAK,YAA+B,IAA7BC,EAA4B,EAA5BA,kBACf,EAA8BxjB,aAC1B,YACA,CAAEE,QAAS,IAAMD,KAAM,IAFnBxN,EAAR,EAAQA,KAAMkK,EAAd,EAAcA,IAId,IAJA,EAAmBC,OAIN,OAAO,KAEpB,IAAM6mB,EAAaC,eACdC,OAAO,CAAC,EAAGC,aAAIjnB,EAAI/C,KAAI,SAAApF,GAAE,OAAI/B,EAAK+B,GAAIqvB,mBACtCC,MAAM,CACH,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGR,OACI,eAAC,iBAAD,CACI,WAAS,GACTC,WAAW,wBACXC,iBAAkB,CACdC,OAAQ,EAAE,IAAO,GAAM,GACvBC,MAAO,KALf,SAQI,eAAC,iBAAD,CACIC,OAAQ,CAAC,EAAG,GACZC,KAAM,EAFV,SAII,eAAC,eAAD,CAAaC,UApC3B,yGAoCc,SACK,gBAAGC,EAAH,EAAGA,YAAH,OACG,qCACKA,EACA1qB,KAAI,SAAA2qB,GACD,IAAQC,EAAWD,EAAIE,WAAfD,OACFE,EAAM/nB,EAAIgoB,MAAK,SAAAnwB,GAAE,OAAI/B,EAAK+B,GAAIowB,OAASJ,KAC7C,OACI,eAAC,aAAD,CAEQH,UAAWE,EACXM,KAAMH,EAAMjB,EAAWhxB,EAAKiyB,GAAKb,cAAgB,UACjDiB,OAAO,UACP7nB,aAAc,WACV,MAA0BsnB,EAAIE,WAAtBM,EAAR,EAAQA,KACFlB,GADN,EAAcmB,QACON,EAAMjyB,EAAKiyB,GAAKb,aAAe,GACpDL,EAAkB,GAAD,OAAIuB,EAAJ,cAAclB,KAEnC3mB,aAAc,WACVsmB,EAAkB,MAVjBe,EAAIU,uBAuCxCC,GAAe,WACxB,MAA8B3oB,mBAAS,IAAvC,oBAAO+N,EAAP,KAAgB6a,EAAhB,KAEA,OACI,iCACI,eAAC7B,GAAD,CAAKE,kBAAmB2B,IACxB,eAAC,KAAD,UAAe7a,QCxGd8a,GAAY,WACrB,OACI,uCAUI,gBAACxnB,GAAA,EAAD,CAAKtI,QAAQ,OAAOwP,GAAG,MAAvB,UACI,eAAClH,GAAA,EAAD,CAAKrH,KAAK,IAAIub,GAAG,MAAjB,SACI,eAAC,GAAD,MAEJ,eAAClU,GAAA,EAAD,CAAKrH,KAAK,IAAIub,GAAG,MAAjB,SACI,eAAC,GAAD,SAIR,gBAAClU,GAAA,EAAD,CAAKtI,QAAQ,OAAOwP,GAAG,MAAvB,UACI,eAAClH,GAAA,EAAD,CAAKrH,KAAK,IAAIub,GAAG,MAAjB,SACI,eAAC,GAAD,MAEJ,gBAAClU,GAAA,EAAD,CAAKrH,KAAK,IAAIjB,QAAQ,OAAtB,UACI,eAACsI,GAAA,EAAD,CAAKrH,KAAK,IAAIub,GAAG,MAAjB,SACI,eAAC,GAAD,MAEJ,eAAClU,GAAA,EAAD,CAAKrH,KAAK,IAAV,SACI,eAAC,GAAD,gB,gFCVlBrB,GAAYC,aAAW,SAACC,GAAD,MAAmB,CAC5CukB,KAAM,CACFpe,QAAS,iBAEbqe,MAAO,CACHhe,UAAW,OAEf5C,OAAQ,CACJc,MAAO,QAEXjC,KAAM,CACFmE,YAAa5G,EAAMK,QAAQ,IAE/BiZ,QAAS,CACLnT,QAAS,gBACTjG,QAAS,OACT+F,cAAe,cAIjBgqB,GAAQ,SAAC,GAAD,QACVvL,KAAQC,EADE,EACFA,QAASC,EADP,EACOA,MACVC,EAFG,EAEVL,MACG9iB,EAHO,0BAQV,eAAC,KAAD,qCACIkjB,SAAUD,IAAWC,GACrBlK,WAAYiK,GAAWC,GACnBC,GACAnjB,GAJR,IAKI+O,WAAS,MAoNFyf,GAhNM,SAAC,GACsB,IADpBC,EACmB,EADnBA,WAEpB,EAA8BC,cAAgB,GAA9C,oBAAO7c,EAAP,KAAgB0R,EAAhB,KACM7hB,EAAYxB,cACZnD,EAAQymB,eACRxR,EAASC,eAET7S,GADWwlB,eACDxmB,MAiCVuwB,EAAM,uCAAG,uCAAA3zB,EAAA,6DACXsC,EADW,EACXA,WACAC,EAFW,EAEXA,UACAC,EAHW,EAGXA,MACAR,EAJW,EAIXA,SACAC,EALW,EAKXA,SALW,EAMX2xB,QASArL,GAAW,GAfA,kBAiBYjoB,IAAMa,KAAN,UAjGf,QAiGe,aAAgD,CAC/DmB,aACAC,YACAC,QACAR,WACAC,aAtBG,cAyBXsmB,GAAW,GACXxmB,EAAM,CAAEC,WAAUC,YAAYwxB,GA1BnB,qDA4BPlL,GAAW,GAEY,KADN,KAAM/nB,SACVM,OA9BN,wBA+BKD,EAAY,KAAML,SAASG,KAA3BE,QACRmW,EAAO,SAAD,OAAUnW,GAAW,WAhCxB,kBAiCIJ,QAAQG,OAAOC,IAjCnB,iCAmCAJ,QAAQG,OAAR,OAnCA,0DAAH,sDAuCZ,OACI,eAAC,KAAD,CACI4S,SAAUmgB,EACVpW,SAzES,SAAC,GAeX,IAdHjb,EAcE,EAdFA,WACAC,EAaE,EAbFA,UACAC,EAYE,EAZFA,MACAR,EAWE,EAXFA,SACAC,EAUE,EAVFA,SACA2xB,EASE,EATFA,QAkBA,MARe,CACXtxB,WAAaA,OAAmDR,EAAtC4E,EAAU,0BACpCnE,UAAYA,OAAkDT,EAAtC4E,EAAU,0BAClClE,MAAQA,OAA8CV,EAAtC4E,EAAU,0BAC1B1E,SAAWA,OAAiDF,EAAtC4E,EAAU,0BAChCzE,SAAWA,OAAiDH,EAAtC4E,EAAU,0BAChCktB,QAAS3xB,IAAa2xB,EAAU,0CAAsC9xB,IAoDtE0T,OAAQ,gBAAGwT,EAAH,EAAGA,aAAH,OACJ,wBAAM3kB,UAAWD,EAAQyjB,KAAMrU,SAAUwV,EAAcC,YAAU,EAAjE,UACI,eAAC7Y,GAAA,EAAD,UACI,eAACyjB,GAAA,EAAD,CAAWtjB,SAAS,KAApB,SACA,gBAACujB,GAAA,EAAD,CAAMjmB,WAAS,EAAClK,QAAS,EAAzB,UACI,eAACmwB,GAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAvB,SACI,sBAAK5vB,UAAWD,EAAQ0jB,MAAxB,SACI,eAAC,KAAD,CACIhU,WAAS,EACTpR,GAAG,aACH6D,KAAK,aACLoB,UAAW4rB,GACXnnB,MAAM,aACNgG,SAAUyE,EACV2G,UAAQ,QAIpB,eAACsW,GAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAvB,SACI,sBAAK5vB,UAAWD,EAAQ0jB,MAAxB,SACI,eAAC,KAAD,CACIhU,WAAS,EACTpR,GAAG,YACH6D,KAAK,YACLoB,UAAW4rB,GACXnnB,MAAM,YACNgG,SAAUyE,EACV2G,UAAQ,QAIpB,eAACsW,GAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAf,SACI,sBAAK3vB,UAAWD,EAAQ0jB,MAAxB,SACI,eAAC,KAAD,CACIhU,WAAS,EACTpR,GAAG,QACH6D,KAAK,QACLoB,UAAW4rB,GACXnnB,MAAM,gBACNgG,SAAUyE,EACV2G,UAAQ,QAIpB,eAACsW,GAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAf,SACI,sBAAK3vB,UAAWD,EAAQ0jB,MAAxB,SACI,eAAC,KAAD,CACIhU,WAAS,EACTpR,GAAG,WACH6D,KAAK,WACLoB,UAAW4rB,GACXnnB,MAAO1F,EAAU,oBACjB0L,SAAUyE,EACV2G,UAAQ,QAIpB,eAACsW,GAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAf,SACI,sBAAK3vB,UAAWD,EAAQ0jB,MAAxB,SACI,eAAC,KAAD,CACIplB,GAAG,WACH6D,KAAK,WACLoB,UAAW4rB,GACXnnB,MAAO1F,EAAU,oBACjB2N,KAAK,WACLjC,SAAUyE,EACVqd,aAAa,mBACb1W,UAAQ,QAIpB,eAACsW,GAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAf,SACI,sBAAK3vB,UAAWD,EAAQ0jB,MAAxB,SACI,eAAC,KAAD,CACIplB,GAAG,UACH6D,KAAK,UACLoB,UAAW4rB,GACXnnB,MAAM,mBACNiI,KAAK,WACLjC,SAAUyE,EACVqd,aAAa,mBACb1W,UAAQ,eAO5B,gBAAC0L,GAAA,EAAD,CAAa7kB,UAAWD,EAAQwY,QAAhC,UACI,gBAAC,KAAD,CACIrY,QAAQ,YACR8P,KAAK,SACLxQ,MAAM,UACNuO,SAAUyE,EACVxS,UAAWD,EAAQ8C,OACnB6M,WAAS,EANb,UAQK8C,GACG,eAACsS,GAAA,EAAD,CACI1gB,KAAM,GACN2gB,UAAW,IAXvB,cAgBA,eAAC9kB,EAAA,EAAD,CAAYC,QAAQ,QAApB,gBACA,eAACyG,GAAA,EAAD,CACInH,MAAM,gBACN8D,UAAW6T,KACXpW,GAAG,SACHb,QAAQ,QAJZ,6BC3OlBnB,GAAYC,aAAW,SAACC,GAAD,MAAmB,CACxCqiB,KAAM,CACFniB,QAAS,OACT+F,cAAe,SACfge,UAAW,QACXtf,OAAQ,MACR2B,WAAY,SACZJ,eAAgB,aAChBie,iBAAkB,YAClBC,eAAgB,QAChBF,gBACI,8EAERG,KAAM,CACF3hB,SAAU,IACV8D,UAAW,OAEflH,OAAQ,CACJ0R,OAAQ,MACR9Q,QAAS,OACTgG,eAAgB,UAEpBzD,KAAM,CACFmC,gBAAiB5E,EAAMQ,QAAQC,UAAU4hB,SAGjD,CAAEpf,KAAM,aAGN4tB,GAAW,WACb,IAAM/vB,EAAUhB,KAChB,OACQ,uBAAKiB,UAAWD,EAAQuhB,KAAxB,UACI,gBAACpL,GAAA,EAAD,CAAMlW,UAAWD,EAAQujB,KAAzB,UACI,sBAAKtjB,UAAWD,EAAQxB,OAAxB,SACI,eAAC,KAAD,CAAQyB,UAAWD,EAAQ2B,KAA3B,SACI,eAAC,KAAD,QAGR,eAAC,GAAD,OAEJ,eAACsjB,GAAA,EAAD,QAWD+K,GANW,SAACpvB,GAAD,OACtB,eAACukB,GAAA,EAAD,CAAejmB,MAAOkmB,YAAYtD,IAAlC,SACI,eAAC,GAAD,eAAclhB,O,6BCjETqvB,GAAc,SAAC/wB,GAAD,MAAuB,CAC9C+Q,KAHwB,eAIxB6O,QAAS5f,ICIPF,GAAYC,YAAW,CACzB+I,MAAO,CAAEpE,MAAO,OAAQxE,QAAS,gBACjC0D,OAAQ,CAAEoN,OAAQ,SAiEPggB,GA9DO,WAClB,IAAM5tB,EAAYxB,cACZqvB,EAASC,eACTC,EAAYC,eACZtwB,EAAUhB,KACVE,EAAQqD,cAAY,SAACC,GAAD,OAAqBA,EAAMtD,SAC/CqxB,EAAWC,eACjB,OACI,gBAACra,GAAA,EAAD,WACI,eAACsa,GAAA,EAAD,CAAOrwB,MAAOkC,EAAU,uBACxB,gBAAC0J,GAAA,EAAD,WACI,sBAAK/L,UAAWD,EAAQgI,MAAxB,SACK1F,EAAU,oBAEf,eAAC,KAAD,CACInC,QAAQ,YACRF,UAAWD,EAAQ8C,OACnBrD,MAAiB,UAAVP,EAAoB,UAAY,UACvCiC,QAAS,kBAAMovB,EAASN,GAAY,WAJxC,SAMK3tB,EAAU,qBAEf,eAAC,KAAD,CACInC,QAAQ,YACRF,UAAWD,EAAQ8C,OACnBrD,MAAiB,SAAVP,EAAmB,UAAY,UACtCiC,QAAS,kBAAMovB,EAASN,GAAY,UAJxC,SAMK3tB,EAAU,uBAGnB,gBAAC0J,GAAA,EAAD,WACI,sBAAK/L,UAAWD,EAAQgI,MAAxB,SAAgC1F,EAAU,kBAC1C,eAAC,KAAD,CACInC,QAAQ,YACRF,UAAWD,EAAQ8C,OACnBrD,MAAkB,OAAX0wB,EAAkB,UAAY,UACrChvB,QAAS,kBAAMkvB,EAAU,OAJ7B,gBAQA,eAAC,KAAD,CACIlwB,QAAQ,YACRF,UAAWD,EAAQ8C,OACnBrD,MAAkB,OAAX0wB,EAAkB,UAAY,UACrChvB,QAAS,kBAAMkvB,EAAU,OAJ7B,gBAQA,eAAC,KAAD,CACIlwB,QAAQ,YACRF,UAAWD,EAAQ8C,OACnBrD,MAAkB,OAAX0wB,EAAkB,UAAY,UACrChvB,QAAS,kBAAMkvB,EAAU,OAJ7B,uBC1DHK,GAAe,CACxB,eAACC,GAAA,EAAD,CAAoBC,OAAK,EAAC5F,KAAK,YAAYznB,UAAWwsB,KACtD,eAAC,KAAD,CAAOa,OAAK,EAAC5F,KAAK,iBAAiB5Z,OAAQ,kBAAM,eAAC,GAAD,Q,UCAtCyf,GALiC,eACzCC,MCoBD5xB,GAGIkmB,YAAY2L,KAEhBC,GAAeC,aAAqB,SAAAd,GACtC,MAAe,OAAXA,EACO,8BAAoBhH,MAAK,SAAA+H,GAAQ,OAAIA,EAASjP,YAEzD1E,QAAQC,IAAI2S,GACG,OAAXA,EACO,8BAAoBhH,MAAK,SAAA+H,GAAQ,OAAIA,EAASjP,WAIlD6O,MACR,MAgCYK,GA9BH,kBACR,gBAACC,EAAA,EAAD,CACIV,aAAcA,GACdpzB,aAAcA,EACdoB,aAAcA,EACd2yB,UAAWnN,GACXoN,OAAQrO,GACRsO,UAAWrC,GACXhwB,MAAOA,GACP8xB,aAAcA,GARlB,UAUI,eAACQ,EAAA,EAAD,aAAUrvB,KAAK,SAAYuR,KAC3B,eAAC8d,EAAA,EAAD,aAAUrvB,KAAK,YAAesR,KAC9B,eAAC+d,EAAA,EAAD,aAAUrvB,KAAK,aAAgBwR,KAC/B,eAAC6d,EAAA,EAAD,aAAUrvB,KAAK,YAAeyR,KAC9B,eAAC4d,EAAA,EAAD,CAAUrvB,KAAK,sBACf,eAACqvB,EAAA,EAAD,CAAUrvB,KAAK,kBACf,eAACqvB,EAAA,EAAD,CAAUrvB,KAAK,iBACf,eAACqvB,EAAA,EAAD,CAAUrvB,KAAK,iBACf,eAACqvB,EAAA,EAAD,CAAUrvB,KAAK,iBACf,eAACqvB,EAAA,EAAD,CAAUrvB,KAAK,cACf,eAACqvB,EAAA,EAAD,aAAUrvB,KAAK,mBAAsBkf,KACrC,eAACmQ,EAAA,EAAD,CAAUrvB,KAAK,mBAAmBoW,KAAMkZ,IAAa3X,KAAM4X,IAAa3X,KAAM4X,MAC9E,eAACH,EAAA,EAAD,aAAUrvB,KAAK,SAAYif,KAC3B,eAACoQ,EAAA,EAAD,CAAUrvB,KAAK,QAAQoW,KAAMkZ,MAC7B,eAACD,EAAA,EAAD,CAAUrvB,KAAK,OAAOoW,KAAMkZ,MAC5B,eAACD,EAAA,EAAD,CAAUrvB,KAAK,YAAYoW,KAAMkZ,UCtD1BG,GAdS,SAAAC,GAChBA,GAAeA,aAAuBC,UACtC,8BAAqB3I,MACjB,YAAkD,IAA/C4I,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC/BJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFxBO,IAAShhB,OACL,gBAAC,IAAMihB,WAAP,WACI,eAACC,EAAA,EAAD,IACA,eAAC,GAAD,OAEJC,SAASC,eAAe,SAM5BZ,O","file":"static/js/main.95e6f408.chunk.js","sourcesContent":["export type Credentials = {\n  access_token: string;\n  refresh_token: string;\n  permissions: string;\n};\n\nconst CREDENTIALS_LOCAL_STORAGE_ITEM = \"credentials\";\n\nexport function isAuthenticated(): boolean {\n  return Boolean(getCredentials());\n}\n\nexport function setCredentials(credentials: Credentials) {\n  localStorage.setItem(\n    CREDENTIALS_LOCAL_STORAGE_ITEM,\n    JSON.stringify(credentials)\n  );\n}\n\nexport function getCredentials(): Credentials | null {\n  const raw = localStorage.getItem(CREDENTIALS_LOCAL_STORAGE_ITEM);\n  if (raw === null) {\n    return null;\n  }\n  return JSON.parse(raw);\n}\n\nexport function removeCredentials(): void {\n  localStorage.removeItem(CREDENTIALS_LOCAL_STORAGE_ITEM);\n}","import axios, { AxiosError } from 'axios';\nimport { \n    GetListResult,\n    GetOneResult,\n    GetManyResult,\n    GetManyReferenceResult,\n    CreateResult,\n    UpdateResult,\n    UpdateManyResult,\n    DeleteResult,\n    DeleteManyResult,\n}  from 'react-admin'\n\nimport {\n    getCredentials,\n} from \"./auth\"\n\n\nconst getList = async (resource: string, params: any): Promise<GetListResult<any>> => {\n    try{\n        const credentials = getCredentials();\n        const token = credentials?.access_token;\n        const config = {\n            headers: { Authorization: `Bearer ${token}` },\n            params,\n        };\n        const response = await axios.get<GetListResult<any>>(`/${resource}/list`, config)\n        return Promise.resolve(response.data);\n    } catch (error: any) {\n        const response = error.response;\n        return Promise.reject({message: response.data, status: response.status});\n    }\n};\n\nconst getOne = async (resource: string, params: any): Promise<GetOneResult<any>> => {\n    try{\n        const credentials = getCredentials();\n        const token = credentials?.access_token;\n        const config = {\n            headers: { Authorization: `Bearer ${token}` },\n            params,\n        };\n        const response = await axios.get<GetOneResult<any>>(`/${resource}/item`, config)\n        return Promise.resolve(response.data);\n    } catch (error: any) {\n        const response = error.response;\n        return Promise.reject({message: response.data, status: response.status});\n    }\n};\n\nconst getMany = async (resource: string, params: any): Promise<GetManyResult<any>> => {\n    try{\n        const credentials = getCredentials();\n        const token = credentials?.access_token;\n        const config = {\n            headers: { Authorization: `Bearer ${token}` },\n            params,\n        };\n        const response = await axios.get<GetManyResult<any>>(`/${resource}/items`, config)\n        return Promise.resolve(response.data);\n    } catch (error: any) {\n        const response = error.response;\n        return Promise.reject({message: response.data, status: response.status});\n    }\n};\n\nconst getManyReference = async (resource: string, params: any): Promise<GetManyReferenceResult<any>>  => {\n    try{\n        const credentials = getCredentials();\n        const token = credentials?.access_token;\n        const config = {\n            headers: { Authorization: `Bearer ${token}` },\n            params,\n        };\n        const response = await axios.get<GetManyReferenceResult<any>>(`/${resource}/refs`, config)\n        return Promise.resolve(response.data);\n    } catch (error: any) {\n        const response = error.response;\n        return Promise.reject({message: response.data, status: response.status});\n    }\n};\n\nconst create = async (resource: string, params: any): Promise<CreateResult<any>> => {\n    try{\n        const credentials = getCredentials();\n        const token = credentials?.access_token;\n        const config = {\n            headers: { Authorization: `Bearer ${token}` },\n        };\n        const response = await axios.post<CreateResult<any>>(`/${resource}/item`, params, config)\n        return Promise.resolve(response.data);\n    } catch (error: any) {\n        const response = error.response;\n        return Promise.reject({message: response.data, status: response.status});\n    }\n};\n\nconst update = async (resource: string, params: any): Promise<UpdateResult<any>> => {\n    try{\n        const credentials = getCredentials();\n        const token = credentials?.access_token;\n        const config = {\n            headers: { Authorization: `Bearer ${token}` },\n        };\n        const response = await axios.put<UpdateResult<any>>(`/${resource}/item`, params, config)\n        return Promise.resolve(response.data);\n    } catch (error: any) {\n        const response = error.response;\n        return Promise.reject({message: response.data, status: response.status});\n    }\n};\n\nconst updateMany = async (resource: string, params: any): Promise<UpdateManyResult> => {\n    try{\n        const credentials = getCredentials();\n        const token = credentials?.access_token;\n        const config = {\n            headers: { Authorization: `Bearer ${token}` },\n        };\n        const response = await axios.put<UpdateManyResult>(`/${resource}/items`, params, config)\n        return Promise.resolve(response.data);\n    } catch (error: any) {\n        const response = error.response;\n        return Promise.reject({message: response.data, status: response.status});\n    }\n};\n\nconst deleteOne = async (resource: string, params: any): Promise<DeleteResult<any>> => {\n    try{\n        const credentials = getCredentials();\n        const token = credentials?.access_token;\n        const config = {\n            headers: { Authorization: `Bearer ${token}` },\n            params,\n        };\n        const response = await axios.delete<DeleteResult<any>>(`/${resource}/item`, config)\n        return Promise.resolve(response.data);\n    } catch (error: any) {\n        const response = error.response;\n        return Promise.reject({message: response.data, status: response.status});\n    }\n};\n\nconst deleteMany = async (resource: string, params: any): Promise<DeleteManyResult> => {\n    try{\n        const credentials = getCredentials();\n        const token = credentials?.access_token;\n        const config = {\n            headers: { Authorization: `Bearer ${token}` },\n            params,\n        };\n        const response = await axios.delete<DeleteManyResult>(`/${resource}/items`, config)\n        return Promise.resolve(response.data);\n    } catch (error: any) {\n        const response = error.response;\n        return Promise.reject({message: response.data, status: response.status});\n    }\n};\n\nexport const dataProvider = {\n    getList:    getList,\n    getOne:     getOne,\n    getMany:    getMany,\n    getManyReference: getManyReference,\n    create:     create,\n    update:     update,\n    updateMany: updateMany,\n    delete:     deleteOne,\n    deleteMany: deleteMany,\n}\n","import { AuthProvider } from 'react-admin';\nimport decodeJwt, { JwtPayload } from 'jwt-decode';\nimport axios, { AxiosError } from 'axios';\nimport {\n    isAuthenticated,\n    setCredentials,\n    getCredentials,\n    removeCredentials,\n} from \"./auth\"\n\nconst baseURL = \"/auth\";\n\ninterface Permission {\n    permissions: string;\n}\n\ninterface LoginToken {\n    access_token: string;\n    refresh_token: string;\n}\n\ninterface RefreshToken {\n    access_token: string;\n}\n\ninterface UserIdentity {\n    id: number;\n    fullName: string;\n    avatar: string;\n}\n\nconst refreshToken = async () => {\n    const credentials = getCredentials();\n    if(!credentials) return;\n\n    const token = credentials?.refresh_token;\n\n    const config = {\n        headers: { Authorization: `Bearer ${token}` }\n    };\n    let response = await axios.post<RefreshToken>(`${baseURL}/refresh`, undefined, config)\n    const { access_token } = response.data;\n    setCredentials({\n        ...credentials,\n        access_token: access_token,\n    });\n}\n\nconst login = async ({ username, password }: {username: string; password:string;}) => {\n    try{\n        const response = await axios.post<LoginToken>(`${baseURL}/login`, { username, password })\n        const { access_token, refresh_token } = response.data;\n        const decodedToken = decodeJwt<Permission>(access_token);\n        setCredentials({\n            access_token,\n            refresh_token,\n            permissions: decodedToken.permissions,\n        });\n        return Promise.resolve();\n    } catch (error: any) {\n        const response = error.response;\n        return Promise.reject({message: response.data, status: response.status});\n    }\n};\n\nconst register = async ({ \n    first_name,\n    last_name,\n    email,\n    username, \n    password\n}: { \n    first_name: string;\n    last_name: string;\n    email: string;\n    username: string;\n    password: string;\n}) => {\n    try{\n    const response = await axios.post<ResponseType>(`${baseURL}/register`, { \n            first_name,\n            last_name,\n            email,\n            username, \n            password\n        })\n\n    } catch (error: any) {\n        const response = error.response;\n        return Promise.reject({message: response.data, status: response.status});\n    }\n}\n\nconst getIdentity = async () => { \n    try{\n        refreshToken();\n        const credentials = getCredentials();\n        const token = credentials?.access_token;\n        const config = {\n            headers: { Authorization: `Bearer ${token}` }\n        };\n        let response = await axios.get<UserIdentity>(`${baseURL}/user`, config)\n        const { id, fullName, avatar } = response.data;\n        \n        return Promise.resolve({ id, fullName, avatar });\n    } catch (error: any) {\n        // const response = error.response;\n        // removeCredentials();\n        // return Promise.reject({message: response.data, status: response.status});\n\n        return Promise.reject(error);\n    }\n };\n\n const checkError = async ({ status }: any) => {\n    if (status === 401 || status === 403 || status === 422) {\n        try{\n            refreshToken();\n        } catch (error: any) {\n            return Promise.reject();\n        }\n    }\n    return Promise.resolve();\n};\n\nexport const authProvider: AuthProvider =  {\n    login: login,\n    checkError: checkError,\n    checkAuth: () => (isAuthenticated() ? Promise.resolve() : Promise.reject()),\n    logout: async () => {\n        await axios.get(`${baseURL}/logout`)\n        removeCredentials();\n        return Promise.resolve();\n    },\n    getIdentity: getIdentity,\n    getPermissions: () => {\n        const credentials = getCredentials();\n        const permissions = credentials?.permissions;\n        return permissions ? Promise.resolve(permissions) : Promise.reject();\n    },\n    register: register,\n};","import * as React from 'react';\nimport { Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AccountBalanceWalletIcon from '@material-ui/icons/AccountBalanceWallet';\nimport classNames from 'classnames';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        display: \"flex\",\n        [theme.breakpoints.down(\"xs\")]: {\n            display: \"none\",\n        },\n        alignItems:\"center\",\n        gap: theme.spacing(1)\n    },\n    logoIcon: {\n        color: theme.palette.secondary.light,\n    },\n    logoText: {\n        color: theme.palette.primary.light,\n    }\n}));\n\nconst Logo = () => {\n    const classes = useStyles();\n    return (\n        <div className={classes.root}>\n            <AccountBalanceWalletIcon className={classes.logoIcon} />\n            <Typography variant=\"h6\" className={classes.logoText} >\n                Assistor\n            </Typography>\n        </div>\n    );\n};\n\nexport default Logo;\n","import * as React from 'react';\nimport { forwardRef } from 'react';\nimport { AppBar, UserMenu, MenuItemLink, useTranslate } from 'react-admin';\nimport Typography from '@material-ui/core/Typography';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport Logo from './Logo';\n\nconst useStyles = makeStyles({\n    title: {\n        flex: 1,\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n        overflow: 'hidden',\n    },\n    spacer: {\n        flex: 1,\n    },\n});\n\nconst ConfigurationMenu = forwardRef<any, any>((props, ref) => {\n    const translate = useTranslate();\n    return (\n        <MenuItemLink\n            ref={ref}\n            to=\"/configuration\"\n            primaryText=\"Configuration\"\n            leftIcon={<SettingsIcon />}\n            onClick={props.onClick}\n            sidebarIsOpen\n        />\n    );\n});\n\nconst CustomUserMenu = (props: any) => (\n    <UserMenu {...props}>\n        <ConfigurationMenu />\n    </UserMenu>\n);\n\nconst CustomAppBar = (props: any) => {\n    const classes = useStyles();\n    return (\n        <AppBar {...props} elevation={1} userMenu={<CustomUserMenu />}>\n            <Typography\n                variant=\"h6\"\n                color=\"inherit\"\n                className={classes.title}\n                id=\"react-admin-title\"\n            />\n            <Logo />\n            <span className={classes.spacer} />\n        </AppBar>\n    );\n};\n\nexport default CustomAppBar;\n","import * as React from 'react';\nimport { Fragment, ReactElement, ReactNode } from 'react';\nimport { useSelector } from 'react-redux';\nimport {\n    List,\n    MenuItem,\n    ListItemIcon,\n    Typography,\n    Collapse,\n    Tooltip,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport { useTranslate, ReduxState } from 'react-admin';\n\nconst useStyles = makeStyles(theme => ({\n    icon: { minWidth: theme.spacing(5) },\n    sidebarIsOpen: {\n        '& a': {\n            transition: 'padding-left 195ms cubic-bezier(0.4, 0, 0.6, 1) 0ms',\n            paddingLeft: theme.spacing(4),\n        },\n    },\n    sidebarIsClosed: {\n        '& a': {\n            transition: 'padding-left 195ms cubic-bezier(0.4, 0, 0.6, 1) 0ms',\n            paddingLeft: theme.spacing(2),\n        },\n    },\n}));\n\ninterface Props {\n    dense: boolean;\n    handleToggle: () => void;\n    icon: ReactElement;\n    isOpen: boolean;\n    name: string;\n    children: ReactNode;\n}\n\nconst SubMenu = (props: Props) => {\n    const { handleToggle, isOpen, name, icon, children, dense } = props;\n    const translate = useTranslate();\n    const classes = useStyles();\n    const sidebarIsOpen = useSelector<ReduxState, boolean>(\n        state => state.admin.ui.sidebarOpen\n    );\n\n    const header = (\n        <MenuItem dense={dense} button onClick={handleToggle}>\n            <ListItemIcon className={classes.icon}>\n                {isOpen ? <ExpandMore /> : icon}\n            </ListItemIcon>\n            <Typography variant=\"inherit\" color=\"textSecondary\">\n                {translate(name)}\n            </Typography>\n        </MenuItem>\n    );\n\n    return (\n        <Fragment>\n            {sidebarIsOpen || isOpen ? (\n                header\n            ) : (\n                <Tooltip title={translate(name)} placement=\"right\">\n                    {header}\n                </Tooltip>\n            )}\n            <Collapse in={isOpen} timeout=\"auto\" unmountOnExit>\n                <List\n                    dense={dense}\n                    component=\"div\"\n                    disablePadding\n                    className={\n                        sidebarIsOpen\n                            ? classes.sidebarIsOpen\n                            : classes.sidebarIsClosed\n                    }\n                >\n                    {children}\n                </List>\n            </Collapse>\n        </Fragment>\n    );\n};\n\nexport default SubMenu;\n","export const sectors = [\n    'Factory Automation',\n    'Logistics Automation',\n    'Warehouse Automation',\n    'Consulting & Development',\n].map(sector => ({ id: sector, name: sector }));\n","import * as React from 'react';\nimport { Avatar } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport BusinessIcon from '@material-ui/icons/Business';\nimport clsx from 'clsx';\n\nimport { Company } from '../types';\n\nconst useStyles = makeStyles({\n    avatar: {\n        width: 60,\n        height: 60,\n        backgroundColor: 'aliceblue',\n    },\n    img: {\n        objectFit: 'contain',\n    },\n    small: {\n        width: 20,\n        height: 20,\n    },\n    large: {\n        width: 40,\n        height: 40,\n    },\n});\n\nexport const CompanyAvatar = ({\n    record,\n    size = 'large',\n}: {\n    record?: Company;\n    size?: 'small' | 'large';\n}) => {\n    const classes = useStyles();\n    if (!record) return null;\n    if(!record.logo) return (\n        <Avatar\n            alt={record.name}\n            className={classes.avatar}\n        >\n            <BusinessIcon />\n        </Avatar>\n    )\n    return (\n        <Avatar\n            src={process.env.PUBLIC_URL + record.logo}\n            alt={record.name}\n            className={classes.avatar}\n            imgProps={{ className: clsx(classes.img, classes[size]) }}\n        />\n    );\n};\n","import * as React from 'react';\nimport { Theme } from '@material-ui/core';\nimport BusinessIcon from '@material-ui/icons/Business';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { ImageField } from 'react-admin';\n\nexport interface StyleProps {\n    width: number;\n}\n\nconst useStyles = makeStyles<Theme, StyleProps>(theme => ({\n    image: {\n        width: props => props.width\n    },\n}));\n\nconst sizeInPixel = {\n    medium: 42,\n    small: 20,\n};\n\nexport const CountryField = ({\n    record,\n    source=\"url\",\n    title=\"nicename\",\n    size = 'medium',\n}: {\n    record?: { logo: string; name: string };\n    source?: string;\n    title?: string;\n    size?: 'small' | 'medium';\n}) => {\n    const classes = useStyles({width: sizeInPixel[size]});\n    if (!record) return null;\n\n    return (\n        <ImageField \n            record={record as any}\n            source={source} \n            title={title}\n            classes={classes}\n        />\n    );\n};\n","import * as React from 'react';\nimport { useState } from 'react';\nimport { Paper, Typography, Link as MuiLink, Box, Chip, Checkbox } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ContactsIcon from '@material-ui/icons/AccountCircle';\nimport DealIcon from '@material-ui/icons/MonetizationOn';\nimport NoteIcon from '@material-ui/icons/Note';\nimport { linkToRecord, SelectField, ReferenceField, useListContext } from 'react-admin';\nimport { Link } from 'react-router-dom';\n\nimport { sectors } from './sectors';\nimport { CompanyAvatar } from './CompanyAvatar';\nimport { Company } from '../types';\nimport { CountryField } from './CountryField';\n\nconst useStyles = makeStyles(theme => ({\n    paper: {\n        height: 200,\n        width: 185,\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-between',\n        padding: '1em',\n        position: 'relative',\n    },\n    identity: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    name: {\n        textAlign: 'center',\n        marginTop: theme.spacing(1),\n    },\n    stats: {\n        display: 'flex',\n        justifyContent: 'space-around',\n        width: '100%',\n    },\n    singleStat: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    statIcon: {\n        marginRight: theme.spacing(1),\n    },\n    checkbox: {\n        position: 'absolute',\n        top: 0,\n        right: 0,\n    },\n    identifier: {\n        position: 'absolute',\n        top: theme.spacing(1),\n        lrft: 0,\n    }\n}));\n\nexport const CompanyCard = ({ record }: { record: Company }) => {\n    const classes = useStyles();\n    const [elevation, setElevation] = useState(1);\n    const { data, ids, loaded, onToggleItem, selectedIds } = useListContext<Company>();\n    return (\n        <MuiLink\n            component={Link}\n            to={linkToRecord('/companies', record.id, 'show')}\n            underline=\"none\"\n            onMouseEnter={() => setElevation(3)}\n            onMouseLeave={() => setElevation(1)}\n        >\n            <Paper className={classes.paper} elevation={elevation}>\n                <Checkbox\n                    edge=\"start\"\n                    checked={selectedIds.includes(record.id)}\n                    tabIndex={-1}\n                    disableRipple\n                    className={classes.checkbox}\n                    onClick={(e: any )=> {\n                        e.stopPropagation();\n                        onToggleItem(record.id);\n                    }}\n                />\n                <Typography \n                    variant=\"body2\" \n                    color=\"textSecondary\"\n                    className={classes.identifier}\n                >\n                    {`#${record.id}`}\n                </Typography>\n                <div className={classes.identity}>\n                    <CompanyAvatar record={record} />\n                    <div className={classes.name}>\n                        <Box display=\"flex\" alignItems=\"center\">\n                        <Typography variant=\"subtitle2\">\n                            {record.name}\n                        </Typography>\n                        <ReferenceField\n                            record={record}\n                            source=\"country_id\"\n                            reference=\"countries\"\n                            link={false}\n                        >\n                            <CountryField size='small' />\n                        </ReferenceField>\n                        </Box>\n                        {record.relation && (\n                            <Chip \n                                label={record.relation} \n                                variant=\"outlined\" \n                                size=\"small\"\n                            />\n                        )}\n                        <SelectField\n                            color=\"textSecondary\"\n                            source=\"sector\"\n                            choices={sectors}\n                            record={record}\n                        />\n                    </div>\n                </div>\n                <div className={classes.stats}>\n                    <div className={classes.singleStat}>\n                        <ContactsIcon\n                            color=\"disabled\"\n                            className={classes.statIcon}\n                        />\n                        <div>\n                            <Typography\n                                variant=\"subtitle2\"\n                                style={{ marginBottom: -8 }}\n                            >\n                                {record.nb_contacts}\n                            </Typography>\n                            <Typography variant=\"caption\" color=\"textSecondary\">\n                                {record.nb_contacts > 1\n                                    ? 'contacts'\n                                    : 'contact'}\n                            </Typography>\n                        </div>\n                    </div>\n                    <div className={classes.singleStat}>\n                        <NoteIcon\n                            color=\"disabled\"\n                            className={classes.statIcon}\n                        />\n                        <div>\n                            <Typography\n                                variant=\"subtitle2\"\n                                style={{ marginBottom: -8 }}\n                            >\n                                {record.nb_notes}\n                            </Typography>\n                            <Typography variant=\"caption\" color=\"textSecondary\">\n                                {record.nb_notes > 1 ? 'notes' : 'note'}\n                            </Typography>\n                        </div>\n                    </div>\n                </div>\n            </Paper>\n        </MuiLink>\n    );\n};\n","import * as React from 'react';\nimport { Box, Paper } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useListContext, Identifier } from 'react-admin';\n\nimport { CompanyCard } from './CompanyCard';\nimport { Company } from '../types';\n\nconst useStyles = makeStyles(theme => ({\n    gridList: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        width:  '100%',\n        gap: '5px',\n    },\n    paper: {\n        height: 200,\n        width: 194,\n        display: 'flex',\n        flexDirection: 'column',\n        backgroundColor: theme.palette.grey[200],\n    },\n}));\n\nconst times = (nbChildren: number, fn: (key: number) => any) =>\n    Array.from({ length: nbChildren }, (_, key) => fn(key));\n\nconst LoadingGridList = () => {\n    const classes = useStyles();\n    return (\n        <Box className={classes.gridList}>\n            {times(15, key => (\n                <Paper className={classes.paper} key={key} />\n            ))}\n        </Box>\n    );\n};\n\nconst LoadedGridList = () => {\n    const { ids, data } = useListContext<Company>();\n    const classes = useStyles();\n\n    if (!ids || !data) return null;\n\n    return (\n        <Box className={classes.gridList}>\n            {ids.map((id: Identifier) => (\n                <CompanyCard key={id} record={data[id]} />\n            ))}\n        </Box>\n    );\n};\n\nexport const GridList = () => {\n    const { loaded } = useListContext();\n    return loaded ? <LoadedGridList /> : <LoadingGridList />;\n};\n","export const relations = [\n    'Distributor',\n    'End-customer',\n    'Prospect',\n    'System Integrator'\n].map(relations => ({ id: relations, name: relations }));","import { Box, Chip } from '@material-ui/core';\nimport { Tag } from '../types'\n\nexport const TagChip = ({ record }: { record: Tag; }) => (\n    <>\n        { record && (\n                <Chip\n                label={record.name}\n                size=\"small\"\n                style={{\n                    backgroundColor: record.color,\n                    border: 0,\n                    cursor: 'pointer',\n                }}\n            />\n        )}\n    </>\n);","/* eslint-disable import/no-anonymous-default-export */\nimport * as React from 'react';\nimport {\n    FilterList,\n    FilterLiveSearch,\n    FilterListItem,\n    useGetIdentity,\n    useGetList,\n} from 'react-admin';\nimport { Box, Chip } from '@material-ui/core';\nimport BusinessIcon from '@material-ui/icons/Business';\nimport LocalShippingIcon from '@material-ui/icons/LocalShipping';\nimport SupervisorAccountIcon from '@material-ui/icons/SupervisorAccount';\nimport LocalOfferIcon from '@material-ui/icons/LocalOffer';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { sizes } from './sizes';\nimport { sectors } from './sectors';\nimport { relations } from './relations';\nimport { TagChip } from '../tags/TagChip';\nimport { Tag } from '../types';\n\nconst useStyles = makeStyles(theme => ({\n    container: {\n        order: -1,\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n        minWidth: '13em',\n        [theme.breakpoints.down('xs')]: {\n            display: 'none',\n        }\n    },\n}));\n\nexport const CompanyListFilter = () => {\n    const classes = useStyles();\n    const { identity } = useGetIdentity();\n    const { data, ids } = useGetList<Tag>(\n        'tags',\n        { page: 1, perPage: 10 },\n        { field: 'name', order: 'ASC' }\n    );\n    return (\n        <div className={classes.container}>\n            <FilterLiveSearch />\n\n            <FilterList label=\"Relation\" icon={<BusinessIcon />}>\n                {relations.map(relation => (\n                    <FilterListItem\n                        key={relation.id}\n                        label={relation.name}\n                        value={{ relation: relation.id }}\n                    />\n                ))}\n            </FilterList>\n\n            <FilterList label=\"Tags\" icon={<LocalOfferIcon />}>\n                {ids &&\n                    data &&\n                    ids.map(id => (\n                        <FilterListItem\n                            key={id}\n                            label={<TagChip record={data[id]}/>}\n                            value={{ tags: [id] }}\n                        />\n                    ))}\n            </FilterList>\n\n            <FilterList label=\"Sector\" icon={<LocalShippingIcon />}>\n                {sectors.map(sector => (\n                    <FilterListItem\n                        key={sector.id}\n                        label={sector.name}\n                        value={{ sector: sector.id }}\n                    />\n                ))}\n            </FilterList>\n\n            <FilterList\n                label=\"Account manager\"\n                icon={<SupervisorAccountIcon />}\n            >\n                <FilterListItem\n                    label=\"Me\"\n                    value={{\n                        sales_id: identity && identity.id,\n                    }}\n                />\n            </FilterList>\n        </div>\n    );\n};\n","// in ./MarkDoneButton.js\nimport * as React from 'react';\nimport { Button, useListContext } from 'react-admin';\nimport DoneAllIcon from '@material-ui/icons/DoneAll';\nimport { Company } from '../types';\n\nconst doneState = { status: 'Done' };\n\nconst SelectAllButton = () => {\n    const { ids, data, onSelect } = useListContext<Company>();\n    return (\n        <Button\n            onClick={(e:any) =>{\n                e.stopPropagation();\n                onSelect(ids);\n            }}\n            label=\"Select All\"\n        >\n            <DoneAllIcon />\n        </Button>\n    );\n};\n\nexport default SelectAllButton;","import * as React from 'react';\nimport {\n    List,\n    ListProps,\n    TopToolbar,\n    ExportButton,\n    CreateButton,\n    Pagination,\n    useGetIdentity,\n    ListActionsProps,\n    SortButton,\n} from 'react-admin';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { GridList } from './GridList';\nimport { CompanyListFilter } from './CompanyListFilter';\nimport { ImportButton } from 'react-admin-import-csv';\nimport SelectAllButton from './SelectAllButton';\n\nexport const CompanyList = (props: ListProps) => {\n    const { identity } = useGetIdentity();\n    return identity ? (\n        <List\n            {...props}\n            actions={<CompanyListActions />}\n            aside={<CompanyListFilter />}\n            filterDefaultValues={{ sales_id: identity?.id }}\n            pagination={<Pagination rowsPerPageOptions={[15, 25, 50, 100, 1000]} />}\n            perPage={25}\n            sort={{ field: 'name', order: 'ASC' }}\n            component=\"div\"\n        >\n            <GridList />\n        </List>\n    ) : null;\n};\n\nconst useActionStyles = makeStyles(theme => ({\n    createButton: {\n        marginLeft: theme.spacing(2),\n    },\n}));\n\nconst importOptions = {\n    parseConfig: {\n        // For all options see: https://www.papaparse.com/docs#config\n        dynamicTyping: true\n    }\n}\n\nconst CompanyListActions = (props: ListActionsProps) => {\n    const classes = useActionStyles();\n    return (\n        <TopToolbar>\n            <SortButton fields={['id', 'name']} />\n            <SelectAllButton />\n            <ExportButton />\n            <ImportButton {...props} {...importOptions}/>\n            <CreateButton\n                basePath=\"/companies\"\n                variant=\"contained\"\n                label=\"New Company\"\n                className={classes.createButton}\n            />\n        </TopToolbar>\n    );\n};\n","export const sizes = [\n    { id: 1, name: '1 employee' },\n    { id: 10, name: '2-9 employees' },\n    { id: 50, name: '10-49 employees' },\n    { id: 250, name: '50-249 employees' },\n    { id: 500, name: '250 or more employees' },\n];\n","import { AutocompleteInput, AutocompleteInputProps } from 'react-admin';\n\nconst DistributorInput = (props: AutocompleteInputProps) => (\n    <AutocompleteInput \n        {...props}\n        optionText={record => record ? record.country_iso ? `${record.name} (${record.country_iso})` : `${record.name}` : ''} \n        allowEmpty\n        resettable\n    />\n);\n\nexport default DistributorInput;","import * as React from 'react';\nimport {\n    Create,\n    CreateProps,\n    ReferenceInput,\n    SimpleForm,\n    TextInput,\n    SelectInput,\n    required,\n    AutocompleteInput,\n    useGetIdentity,\n    FormDataConsumer,\n    ReferenceArrayInput,\n    AutocompleteArrayInput,\n} from 'react-admin';\nimport { Box, CardContent, Divider, Avatar } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport BusinessIcon from '@material-ui/icons/Business';\nimport clsx from 'clsx';\n\nimport { sectors } from './sectors';\nimport { sizes } from './sizes';\nimport { relations } from './relations';\nimport DistributorInput from './DistributorInput';\n\nconst useStyles = makeStyles({\n    inline: {\n        display: 'inline-block',\n        marginLeft: '1em',\n        '&.first-child': {\n            marginLeft: 0,\n        },\n    },\n});\n\nexport const CompanyCreate = (props: CreateProps) => {\n    const classes = useStyles();\n    const { identity } = useGetIdentity();\n\n    if (!identity) return null;\n\n    const companyDefaultValue = () => ({ sales_id: identity && identity?.id });\n\n    return (\n        <Create {...props} actions={false}>\n            <SimpleForm \n                component={CustomLayout} \n                initialValues={companyDefaultValue}\n                redirect=\"show\"\n            >\n                <TextInput source=\"name\" validate={required()} fullWidth />\n                <SelectInput\n                    source=\"sector\"\n                    choices={sectors}\n                    formClassName={clsx(classes.inline, 'first-child')}\n                />\n                <SelectInput\n                    source=\"size\"\n                    choices={sizes}\n                    formClassName={classes.inline}\n                />\n                <SelectInput\n                    source=\"relation\"\n                    choices={relations}\n                    formClassName={classes.inline}\n                />\n                <FormDataConsumer>\n                    {({ formData, ...rest }) => formData.relation != 'Distributor' &&\n                        <ReferenceInput\n                            source=\"distributor_id\"\n                            reference=\"companies\"\n                        >\n                            <DistributorInput />\n                        </ReferenceInput>\n                    }\n                </FormDataConsumer>\n\n                <ReferenceArrayInput source=\"use_products\" reference=\"products\">\n                    <AutocompleteArrayInput source=\"model\" />\n                </ReferenceArrayInput>\n\n                <CustomDivider />\n                <TextInput source=\"address\" fullWidth helperText={false} />\n                <TextInput\n                    source=\"city\"\n                    formClassName={clsx(classes.inline, 'first-child')}\n                />\n                <TextInput source=\"zipcode\" formClassName={classes.inline} />\n                <TextInput source=\"stateAbbr\" formClassName={classes.inline} />\n                <ReferenceInput\n                    source=\"country_id\"\n                    reference=\"countries\"\n                >\n                    <AutocompleteInput optionText=\"nicename\" />\n                </ReferenceInput>\n                <CustomDivider />\n                <TextInput source=\"website\" fullWidth helperText={false} />\n                <TextInput source=\"linkedIn\" fullWidth helperText={false} />\n                <TextInput source=\"logo\" fullWidth />\n                <CustomDivider />\n                <TextInput\n                    source=\"phone_number\"\n                    formClassName={clsx(classes.inline, 'first-child')}\n                    helperText={false}\n                />\n                <ReferenceInput\n                    source=\"sales_id\"\n                    reference=\"sales\"\n                    label=\"Account manager\"\n                    formClassName={classes.inline}\n                    helperText={false}\n                >\n                    <SelectInput\n                        optionText={(sales: any) =>\n                            `${sales.first_name} ${sales.last_name}`\n                        }\n                    />\n                </ReferenceInput>\n            </SimpleForm>\n        </Create>\n    );\n};\n\nconst CustomLayout = ({ children }: \n    {children: any;}) => (\n    <CardContent>\n        <Box display=\"flex\">\n            <Box paddingTop={1}>\n                <Avatar>\n                    <BusinessIcon />\n                </Avatar>\n            </Box>\n            <Box ml={2} flex=\"1\" maxWidth={796}>\n                {children}\n            </Box>\n        </Box>\n    </CardContent>\n);\n\nconst CustomDivider = () => (\n    <Box mb={2}>\n        <Divider />\n    </Box>\n);\n","import * as React from 'react';\nimport { Avatar as MuiAvatar } from '@material-ui/core';\n\nimport { Contact } from '../types';\n\nexport const Avatar = ({ record }: { record: Contact }) => (\n    <MuiAvatar src={record.avatar}>\n        {record.first_name.charAt(0)}\n        {record.last_name.charAt(0)}\n    </MuiAvatar>\n);\n","import * as React from 'react';\nimport { Box } from '@material-ui/core';\n\nconst getColorFromStatus = (status: string) =>\n    status === 'cold'\n        ? '#7dbde8'\n        : status === 'warm'\n        ? '#e8cb7d'\n        : status === 'hot'\n        ? '#e88b7d'\n        : status === 'in-contract'\n        ? '#a4e87d'\n        : '#000';\n\nexport const Status = ({ status }: { status: string }) => (\n    <Box\n        width={10}\n        height={10}\n        display=\"inline-block\"\n        borderRadius={5}\n        bgcolor={getColorFromStatus(status)}\n        component=\"span\"\n    />\n);\n","import * as React from 'react';\nimport { ReferenceArrayField, SingleFieldList, ChipField } from 'react-admin';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { Contact } from '../types';\n\nconst ColoredChipField = ({ record, ...props }: any) =>\n    record ? (\n        <ChipField\n            record={record}\n            {...props}\n            style={{ backgroundColor: record.color, border: 0 }}\n            component=\"span\"\n        />\n    ) : null;\n\nconst useStyles = makeStyles({\n    root: {\n        display: 'inline-block',\n    },\n});\n\nexport const TagsList = ({ record }: { record: Contact }) => {\n    const classes = useStyles();\n    if (!record) return null;\n    return (\n        <ReferenceArrayField\n            record={record}\n            basePath=\"/contacts\"\n            resource=\"contacts\"\n            source=\"tags\"\n            reference=\"tags\"\n            className={classes.root}\n        >\n            <SingleFieldList linkType={false} component=\"span\">\n                <ColoredChipField\n                    source=\"name\"\n                    variant=\"outlined\"\n                    size=\"small\"\n                />\n            </SingleFieldList>\n        </ReferenceArrayField>\n    );\n};\n","import * as React from 'react';\nimport { Avatar } from '@material-ui/core';\nimport BusinessIcon from '@material-ui/icons/Business';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n    image: {\n        objectFit: 'contain',\n    },\n});\n\nconst sizeInPixel = {\n    medium: 42,\n    small: 20,\n};\n\nexport const LogoField = ({\n    record,\n    source,\n    size = 'medium',\n}: {\n    record?: { logo: string; name: string };\n    source?: string;\n    size?: 'small' | 'medium';\n}) => {\n    const classes = useStyles();\n    if (!record) return null;\n    if(!record.logo) return (\n        <Avatar>\n            <BusinessIcon />\n        </Avatar>\n    )\n    return (\n        <img\n            src={process.env.PUBLIC_URL + record.logo}\n            alt={record.name}\n            title={record.name}\n            width={sizeInPixel[size]}\n            height={sizeInPixel[size]}\n            className={classes.image}\n        />\n    );\n};\n","export const colors = [\n    '#eddcd2',\n    '#fff1e6',\n    '#fde2e4',\n    '#fad2e1',\n    '#c5dedd',\n    '#dbe7e4',\n    '#f0efeb',\n    '#d6e2e9',\n    '#bcd4e6',\n    '#99c1de',\n];\n","import * as React from 'react';\nimport { useState, FormEvent } from 'react';\nimport {\n    useGetMany,\n    useCreate,\n    useUpdate,\n    useGetList,\n    Identifier,\n} from 'react-admin';\nimport {\n    Chip,\n    Box,\n    Button,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    TextField,\n    MenuItem,\n    Menu,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ControlPointIcon from '@material-ui/icons/ControlPoint';\nimport EditIcon from '@material-ui/icons/Edit';\n\nimport { colors } from './colors';\nimport { Contact, Company, Product } from '../types';\nimport { Tag } from '../types';\n\nexport const TagsListEdit = ({ \n    record,\n    reference, \n}: { \n    record: Contact | Company | Product;\n    reference: 'companies' | 'contacts' | 'products';\n}) => {\n    const [open, setOpen] = useState(false);\n    const [newTagName, setNewTagName] = useState('');\n    const [newTagColor, setNewTagColor] = useState(colors[0]);\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n    const [version, setVersion] = useState(0); // used to force the refresh of useGetList without refreshing the whole page\n    const [disabled, setDisabled] = useState(false);\n\n    const { data: allTags, ids } = useGetList<Tag>(\n        'tags',\n        { page: 1, perPage: 10 },\n        { field: 'name', order: 'ASC' },\n        {},\n        { version } as any // FIXME UseDataProviderOptions don't allow [key: string]: any\n    );\n    const { data: tags, loaded } = useGetMany('tags', record.tags, {\n        enabled: record.tags && record.tags.length > 0,\n    });\n    const [update] = useUpdate();\n    const [create] = useCreate();\n\n    const unselectedTagIds = ids && ids.filter(id => !record.tags.includes(id));\n\n    const handleOpen = (event: React.MouseEvent<HTMLDivElement>) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    const handleDeleteTag = (id: Identifier) => {\n        const tags: Identifier[] = record.tags.filter(\n            (tagId: Identifier) => tagId !== id\n        );\n        update(reference, record.id, { tags }, record);\n    };\n\n    const handleAddTag = (id: Identifier) => {\n        const tags: Identifier[] = [...record.tags, id];\n        update(reference, record.id, { tags }, record);\n        setAnchorEl(null);\n    };\n\n    const handleOpenCreateDialog = () => {\n        setOpen(true);\n        setAnchorEl(null);\n        setDisabled(false);\n    };\n\n    const handleNewTagNameChange = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        setNewTagName(event.target.value);\n    };\n\n    const handleCreateTag = (event: FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        setDisabled(true);\n        create(\n            'tags',\n            { name: newTagName, color: newTagColor },\n            {\n                onSuccess: ({ data }) => {\n                    update(\n                        reference,\n                        record.id,\n                        { tags: [...record.tags, data.id] },\n                        record,\n                        {\n                            onSuccess: () => {\n                                setNewTagName('');\n                                setNewTagColor(colors[0]);\n                                setOpen(false);\n\n                                setVersion(v => v + 1);\n                            },\n                        }\n                    );\n                },\n            }\n        );\n    };\n\n    // if (!loaded || !tags) return null;\n    return (\n        <>\n            {tags.map(tag => (\n                <Box mt={1} mb={1} key={tag.id}>\n                    <Chip\n                        size=\"small\"\n                        variant=\"outlined\"\n                        onDelete={() => handleDeleteTag(tag.id)}\n                        label={tag.name}\n                        style={{ backgroundColor: tag.color, border: 0 }}\n                    />\n                </Box>\n            ))}\n            <Box mt={1}>\n                <Chip\n                    icon={<ControlPointIcon />}\n                    size=\"small\"\n                    variant=\"outlined\"\n                    onClick={handleOpen}\n                    label=\"Add tag\"\n                    color=\"primary\"\n                />\n            </Box>\n            <Menu\n                open={Boolean(anchorEl)}\n                onClose={handleClose}\n                anchorEl={anchorEl}\n            >\n                {unselectedTagIds?.map(id => (\n                    <MenuItem key={id} onClick={() => handleAddTag(id)}>\n                        <Chip\n                            size=\"small\"\n                            variant=\"outlined\"\n                            label={allTags && allTags[id].name}\n                            style={{\n                                backgroundColor: allTags && allTags[id].color,\n                                border: 0,\n                            }}\n                            onClick={() => handleAddTag(id)}\n                        />\n                    </MenuItem>\n                ))}\n                <MenuItem onClick={handleOpenCreateDialog}>\n                    <Chip\n                        icon={<EditIcon />}\n                        size=\"small\"\n                        variant=\"outlined\"\n                        onClick={handleOpenCreateDialog}\n                        color=\"primary\"\n                        label=\"Create new tag\"\n                    />\n                </MenuItem>\n            </Menu>\n            <Dialog\n                open={open}\n                onClose={() => setOpen(false)}\n                aria-labelledby=\"form-dialog-title\"\n            >\n                <form onSubmit={handleCreateTag}>\n                    <DialogTitle id=\"form-dialog-title\">\n                        Create a new tag\n                    </DialogTitle>\n                    <DialogContent>\n                        <TextField\n                            autoFocus\n                            label=\"Tag name\"\n                            fullWidth\n                            value={newTagName}\n                            onChange={handleNewTagNameChange}\n                        />\n                        <Box display=\"flex\" flexWrap=\"wrap\" width={230} mt={2}>\n                            {colors.map(color => (\n                                <RoundButton\n                                    key={color}\n                                    color={color}\n                                    selected={color === newTagColor}\n                                    handleClick={() => {\n                                        setNewTagColor(color);\n                                    }}\n                                />\n                            ))}\n                        </Box>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={() => setOpen(false)} color=\"primary\">\n                            Cancel\n                        </Button>\n                        <Button\n                            type=\"submit\"\n                            color=\"primary\"\n                            disabled={disabled}\n                        >\n                            Add tag\n                        </Button>\n                    </DialogActions>\n                </form>\n            </Dialog>\n        </>\n    );\n};\n\nconst useStyles = makeStyles({\n    root: {\n        width: 30,\n        height: 30,\n        borderRadius: 15,\n        display: 'inline-block',\n        margin: 8,\n    },\n});\n\nconst RoundButton = ({ color, handleClick, selected }: any) => {\n    const classes = useStyles();\n    return (\n        <button\n            type=\"button\"\n            className={classes.root}\n            style={{\n                backgroundColor: color,\n                border: selected ? '2px solid grey' : 'none',\n            }}\n            onClick={handleClick}\n        />\n    );\n};\n","import * as React from 'react';\nimport {\n    TextField,\n    DateField,\n    FunctionField,\n    ReferenceField,\n    EditButton,\n    DeleteButton,\n    ReferenceArrayField,\n    SingleFieldList,\n    ChipField,\n    ShowButton,\n} from 'react-admin';\nimport { Box, Typography, Divider, Link } from '@material-ui/core';\n\nimport { Company, Sale } from '../types';\nimport { TagsListEdit } from '../tags/TagsListEdit';\n\nexport const CompanyAside = ({\n    record,\n    link = 'edit',\n}: {\n    record?: Company;\n    link?: string;\n}) =>\n    record ? (\n        <Box ml={4} width={250} minWidth={250}>\n            <Box textAlign=\"center\" mb={2}>\n                {link === 'edit' ? (\n                    <EditButton\n                        basePath=\"/companies\"\n                        record={record}\n                        label=\"Edit Company\"\n                    />\n                ) : (\n                    <ShowButton\n                        basePath=\"/companies\"\n                        record={record}\n                        label=\"Show Company\"\n                    />\n                )}\n            </Box>\n\n            <Typography variant=\"subtitle2\">Company info</Typography>\n            <Divider />\n\n            <Box mt={2}>\n                Website: <Link href={record.website} target=\"_blank\" rel=\"noreferrer\">{record.website}</Link>\n                <br />\n                LinkedIn: <Link href={record.linkedIn} target=\"_blank\" rel=\"noreferrer\">LinkedIn</Link>\n            </Box>\n            <Box mt={1}>\n                Relation: <TextField source=\"relation\" record={record} />\n            </Box>\n            {record.distributor_id && (\n                <Box mt={1}>\n                    Distributor: <ReferenceField\n                            record={record}\n                            source=\"distributor_id\"\n                            reference=\"companies\"\n                        >\n                            <TextField source=\"name\" record={record} />\n                        </ReferenceField>\n                </Box>\n            )}\n\n            {record.phone_number && (\n                <Box mt={1}>\n                    <TextField source=\"phone_number\" record={record} />{' '}\n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"span\">Main</Typography>\n                </Box>\n            )}\n\n            <Box mt={1} mb={3}>\n                <TextField source=\"address\" />\n                <br />\n                <TextField source=\"city\" /> <TextField source=\"zipcode\" />{' '}\n                <TextField source=\"stateAbbr\" />\n            </Box>\n\n            <Typography variant=\"subtitle2\">Background</Typography>\n            <Divider />\n\n            <Box mt={3}>\n                <Typography\n                    variant=\"body2\"\n                    color=\"textSecondary\"\n                    component=\"span\"\n                >\n                    Added on\n                </Typography>{' '}\n                <DateField\n                    source=\"created_at\"\n                    options={{ year: 'numeric', month: 'long', day: 'numeric' }}\n                    color=\"textSecondary\"\n                />\n                <br />\n                <Typography\n                    component=\"span\"\n                    variant=\"body2\"\n                    color=\"textSecondary\"\n                >\n                    Followed by\n                </Typography>{' '}\n                <ReferenceField\n                    resource=\"companies\"\n                    source=\"sales_id\"\n                    reference=\"sales\"\n                >\n                    <FunctionField<Sale>\n                        source=\"last_name\"\n                        render={record =>\n                            record\n                                ? `${record.first_name} ${record.last_name}`\n                                : ''\n                        }\n                    />\n                </ReferenceField>\n            </Box>\n\n            <Box mb={3}>\n                <Typography variant=\"subtitle2\">Tags</Typography>\n                <Divider />\n                <TagsListEdit record={record} reference=\"companies\" />\n            </Box>\n\n            <Box mb={3}>\n                <Typography variant=\"subtitle2\">Use Products</Typography>\n                <Divider />\n\n                <Box mt={1}>\n                    <ReferenceArrayField label=\"Tags\" reference=\"products\" source=\"use_products\">\n                        <SingleFieldList>\n                            <ChipField \n                                source=\"model\" \n                                variant=\"outlined\" \n                                color=\"secondary\"\n                                size=\"small\"\n                            />\n                        </SingleFieldList>\n                    </ReferenceArrayField>\n                </Box>\n            </Box>\n        </Box>\n    ) : null;\n","export const stages = [\n    'opportunity',\n    'proposal-sent',\n    'in-negociation',\n    'won',\n    'lost',\n    'delayed',\n];\n\nexport const stageNames = {\n    opportunity: 'Opportunity',\n    'proposal-sent': 'Proposal Sent',\n    'in-negociation': 'In Negociation',\n    won: 'Won',\n    lost: 'Lost',\n    delayed: 'Delayed',\n};\n\nexport const stageChoices = stages.map(type => ({\n    id: type,\n    /* @ts-ignore */\n    name: stageNames[type],\n}));\n","import * as React from 'react';\nimport { TextField, MenuItem } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\n\nimport { Status } from '../misc/Status';\n\nconst useStyles = makeStyles({\n    root: {\n        width: 150,\n    },\n});\n\nexport const StatusSelector = ({ status, setStatus, className = '' }: any) => {\n    const classes = useStyles();\n    return (\n        <TextField\n            select\n            value={status}\n            onChange={(event: React.ChangeEvent<{ value: unknown }>) => {\n                setStatus(event.target.value);\n            }}\n            variant=\"filled\"\n            label={false}\n            margin=\"none\"\n            size=\"small\"\n            className={clsx(className, classes.root)}\n        >\n            <MenuItem value=\"cold\">\n                Cold <Status status=\"cold\" />\n            </MenuItem>\n            <MenuItem value=\"warm\">\n                Warm <Status status=\"warm\" />\n            </MenuItem>\n            <MenuItem value=\"hot\">\n                Hot <Status status=\"hot\" />\n            </MenuItem>\n            <MenuItem value=\"in-contract\">\n                In Contract <Status status=\"in-contract\" />\n            </MenuItem>\n        </TextField>\n    );\n};\n","import * as React from 'react';\nimport { useState, FormEvent } from 'react';\nimport {\n    useRecordContext,\n    useCreate,\n    useUpdate,\n    useRefresh,\n    useNotify,\n    useGetIdentity,\n    Identifier,\n    useResourceContext,\n} from 'react-admin';\nimport { TextField as TextInput, Button } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { StatusSelector } from './StatusSelector';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        marginTop: theme.spacing(4),\n        marginBottom: theme.spacing(1),\n    },\n    toolbar: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        marginTop: theme.spacing(1),\n    },\n    small: {\n        marginRight: '1em',\n        '& .MuiFilledInput-input': {\n            paddingTop: 10,\n        },\n    },\n}));\n\nexport const NewNote = ({\n    showStatus,\n    reference,\n}: {\n    showStatus?: boolean;\n    reference: 'companies' | 'contacts' | 'deals' | 'products';\n}) => {\n    const classes = useStyles();\n    const record = useRecordContext();\n    const resource = useResourceContext();\n    const [text, setText] = useState('');\n    const [status, setStatus] = useState(record && record.status);\n    const [date, setDate] = useState(getCurrentDate());\n    const [create, { loading }] = useCreate();\n    const [update] = useUpdate();\n    // FIXME: use refetch instead when ReferenceManyField exposes it in the ListContext\n    const refresh = useRefresh();\n    const notify = useNotify();\n    const { identity } = useGetIdentity();\n    if (!record || !identity) return null;\n\n    const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        const data: any = {\n            [foreignKeyMapping[reference]]: record.id,\n            sales_id: identity.id,\n            date,\n            text,\n        };\n        if (showStatus) {\n            data.status = status;\n        }\n        update(\n            reference,\n            ((record && record.id) as unknown) as Identifier,\n            {\n                last_seen: date,\n                status,\n            },\n            record\n        );\n        create(resource, data, {\n            onSuccess: () => {\n                setText('');\n                notify('Note added successfully', 'info');\n                refresh();\n            },\n        });\n        return false;\n    };\n    return (\n        <div className={classes.root}>\n            <form onSubmit={handleSubmit}>\n                <TextInput\n                    label=\"Add a note\"\n                    variant=\"filled\"\n                    size=\"small\"\n                    fullWidth\n                    multiline\n                    value={text}\n                    onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n                        setText(event.target.value)\n                    }\n                    rows={3}\n                />\n                <div className={classes.toolbar}>\n                    <span>\n                        {text ? (\n                            <>\n                                {showStatus && (\n                                    <StatusSelector\n                                        status={status}\n                                        setStatus={setStatus}\n                                        className={classes.small}\n                                    />\n                                )}\n                                <TextInput\n                                    type=\"datetime-local\"\n                                    variant=\"filled\"\n                                    size=\"small\"\n                                    value={date}\n                                    onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                                        setDate(event.target.value);\n                                    }}\n                                    className={classes.small}\n                                />\n                            </>\n                        ) : null}\n                    </span>\n                    <Button\n                        type=\"submit\"\n                        variant=\"contained\"\n                        color=\"primary\"\n                        disabled={!text || loading}\n                    >\n                        Add this note\n                    </Button>\n                </div>\n            </form>\n        </div>\n    );\n};\n\nconst getCurrentDate = () => {\n    const now = new Date();\n    now.setMinutes(now.getMinutes() - now.getTimezoneOffset());\n    return now.toISOString().slice(0, -8);\n};\n\nconst foreignKeyMapping = {\n    contacts: 'contact_id',\n    deals: 'deal_id',\n    companies: 'company_id',\n    products: 'product_id',\n};\n","import * as React from 'react';\nimport { useState, FormEvent, ChangeEvent } from 'react';\nimport {\n    TextField,\n    ReferenceField,\n    DateField,\n    useResourceContext,\n    useDelete,\n    useUpdate,\n    useNotify,\n    useRecordContext,\n} from 'react-admin';\nimport {\n    Typography,\n    Tooltip,\n    IconButton,\n    FilledInput,\n    Button,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport EditIcon from '@material-ui/icons/Edit';\nimport TrashIcon from '@material-ui/icons/Delete';\n\nimport { Status } from '../misc/Status';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        marginBottom: theme.spacing(2),\n    },\n    metadata: {\n        marginBottom: theme.spacing(1),\n        color: theme.palette.text.secondary,\n    },\n    textarea: {\n        paddingTop: 16,\n        paddingLeft: 14,\n        paddingRight: 60,\n        paddingBottom: 14,\n        lineHeight: 1.3,\n    },\n    buttons: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        marginTop: theme.spacing(1),\n    },\n    cancel: {\n        marginRight: theme.spacing(1),\n    },\n    content: {\n        backgroundColor: theme.palette.grey[200],\n        padding: '0 1em',\n        borderRadius: 10,\n        display: 'flex',\n        alignItems: 'stretch',\n        marginBottom: theme.spacing(1),\n    },\n    text: {\n        flex: 1,\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1)\n    },\n    paragraph: {\n        fontFamily: theme.typography.fontFamily,\n        fontSize: theme.typography.body1.fontSize,\n        lineHeight: 1,\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n    },\n    toolbar: {\n        marginLeft: theme.spacing(2),\n        visibility: 'hidden',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-around',\n    },\n}));\n\nexport const Note = ({\n    showStatus,\n    note,\n    isLast,\n    reference,\n}: {\n    showStatus?: boolean;\n    note: any;\n    isLast: boolean;\n    reference: string;\n}) => {\n    const [isHover, setHover] = useState(false);\n    const [isEditing, setEditing] = useState(false);\n    const [noteText, setNoteText] = useState(note.text);\n    const resource = useResourceContext();\n    const record = useRecordContext();\n    const notify = useNotify();\n    const classes = useStyles();\n    const [update, { loading }] = useUpdate();\n\n    const [handleDelete] = useDelete(resource, note.id, note, {\n        mutationMode: 'undoable',\n        onSuccess: () => {\n            notify('Note deleted', 'info', undefined, true);\n            update(\n                reference,\n                record.id,\n                { nb_notes: record.nb_notes - 1 },\n                record\n            );\n        },\n    });\n\n    const handleEnterEditMode = () => {\n        setEditing(true);\n    };\n\n    const handleCancelEdit = () => {\n        setEditing(false);\n        setNoteText(note.text);\n        setHover(false);\n    };\n\n    const handleTextChange = (event: ChangeEvent<HTMLInputElement>) => {\n        setNoteText(event.target.value);\n    };\n\n    const handleNoteUpdate = (event: FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        update(resource, note.id, { text: noteText }, note, {\n            onSuccess: () => {\n                setEditing(false);\n                setNoteText(note.text);\n                setHover(false);\n            },\n        });\n    };\n\n    return (\n        <div\n            className={classes.root}\n            onMouseEnter={() => setHover(true)}\n            onMouseLeave={() => setHover(false)}\n        >\n            <div className={classes.metadata}>\n                <ReferenceField\n                    record={note}\n                    resource=\"contactNotes\"\n                    source=\"sales_id\"\n                    reference=\"sales\"\n                    basePath=\"/contactNotes\"\n                >\n                    <TextField source=\"first_name\" variant=\"body1\" />\n                </ReferenceField>{' '}\n                <Typography component=\"span\" variant=\"body1\">\n                    added a note on{' '}\n                </Typography>\n                <DateField\n                    source=\"date\"\n                    record={note}\n                    variant=\"body1\"\n                    showTime\n                    locales=\"en\"\n                    options={{\n                        dateStyle: 'full',\n                        timeStyle: 'short',\n                    }}\n                />{' '}\n                {showStatus && <Status status={note.status} />}\n            </div>\n            {isEditing ? (\n                <form onSubmit={handleNoteUpdate}>\n                    <FilledInput\n                        value={noteText}\n                        onChange={handleTextChange}\n                        fullWidth\n                        multiline\n                        className={classes.textarea}\n                        autoFocus\n                    />\n                    <div className={classes.buttons}>\n                        <Button\n                            className={classes.cancel}\n                            onClick={handleCancelEdit}\n                            color=\"primary\"\n                        >\n                            Cancel\n                        </Button>\n                        <Button\n                            type=\"submit\"\n                            color=\"primary\"\n                            variant=\"contained\"\n                            disabled={loading}\n                        >\n                            Update Note\n                        </Button>\n                    </div>\n                </form>\n            ) : (\n                <div className={classes.content}>\n                    <div className={classes.text}>\n                        {note.text\n                            .split('\\n')\n                            .map((paragraph: string, index: number) => (\n                                <p className={classes.paragraph} key={index}>\n                                    {paragraph}\n                                </p>\n                            ))}\n                    </div>\n                    <div\n                        className={classes.toolbar}\n                        style={{ visibility: isHover ? 'visible' : 'hidden' }}\n                    >\n                        <Tooltip title=\"Edit note\">\n                            <IconButton\n                                size=\"small\"\n                                onClick={handleEnterEditMode}\n                            >\n                                <EditIcon />\n                            </IconButton>\n                        </Tooltip>\n                        <Tooltip title=\"Delete note\">\n                            <IconButton size=\"small\" onClick={handleDelete}>\n                                <TrashIcon />\n                            </IconButton>\n                        </Tooltip>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\n","import * as React from 'react';\nimport { useListContext } from 'react-admin';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { Note } from './Note';\nimport { NewNote } from './NewNote';\n\nconst useStyles = makeStyles({\n    root: {\n        marginTop: '0.5em',\n    },\n});\n\nexport const NotesIterator = ({\n    showStatus,\n    reference,\n}: {\n    showStatus?: boolean;\n    reference: 'companies' | 'contacts' | 'deals' | 'products';\n}) => {\n    const classes = useStyles();\n    const { data, ids, loaded } = useListContext();\n    if (!loaded) return null;\n    return (\n        <>\n            <NewNote showStatus={showStatus} reference={reference} />\n            <div className={classes.root}>\n                {ids.map((id, index) => (\n                    <Note\n                        note={data[id]}\n                        isLast={index === ids.length - 1}\n                        showStatus={showStatus}\n                        reference={reference}\n                        key={index}\n                    />\n                ))}\n            </div>\n        </>\n    );\n};\n","import * as React from 'react';\nimport { useState, ChangeEvent } from 'react';\nimport {\n    ShowBase,\n    ShowProps,\n    TextField,\n    ReferenceManyField,\n    SelectField,\n    ReferenceField,\n    ImageField,\n    useShowContext,\n    useRecordContext,\n    useListContext,\n} from 'react-admin';\nimport {\n    Avatar as MuiAvatar,\n    Box,\n    Button,\n    Card,\n    CardContent,\n    Typography,\n    List,\n    ListItem,\n    ListItemAvatar,\n    ListItemText,\n    ListItemSecondaryAction,\n    Tabs,\n    Tab,\n    Chip,\n    Divider,\n} from '@material-ui/core';\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { formatDistance } from 'date-fns';\nimport BusinessIcon from '@material-ui/icons/Business';\n\nimport { Avatar } from '../contacts/Avatar';\nimport { Status } from '../misc/Status';\nimport { TagsList } from '../tags/TagsList';\nimport { sizes } from './sizes';\nimport { LogoField } from './LogoField';\nimport { CompanyAside } from './CompanyAside';\nimport { Company, Deal, Contact } from '../types';\nimport { stageNames } from '../deals/stages';\nimport { NotesIterator } from '../notes';\nimport { CountryField } from './CountryField';\n\nexport const CompanyShow = (props: ShowProps) => (\n    <ShowBase {...props}>\n        <CompanyShowContent />\n    </ShowBase>\n);\n\nconst CompanyShowContent = () => {\n    const { record, loaded } = useShowContext<Company>();\n    const [value, setValue] = useState(0);\n    const handleChange = (event: ChangeEvent<{}>, newValue: number) => {\n        setValue(newValue);\n    };\n    if (!loaded || !record) return null;\n    return (\n        <Box mt={2} display=\"flex\">\n            <Box flex=\"1\">\n                <Card>\n                    <CardContent>\n                        <Box display=\"flex\" mb={1}>\n                            <LogoField record={record as any} />\n                            <Box ml={2} flex=\"1\">\n                                <Box display=\"flex\" gridGap={4}>\n                                    <Typography variant=\"h5\">{record.name}</Typography>\n                                    {record.relation && (\n                                        <Chip \n                                            label={record.relation} \n                                            variant=\"outlined\" \n                                            size=\"small\"\n                                        />\n                                    )}\n                                </Box>\n                                <Typography \n                                    variant=\"body2\" \n                                    color=\"textSecondary\"\n                                >\n                                    {`#${record.id} - `}\n                                </Typography>\n                                {record.sector && (\n                                        <Typography variant=\"body2\">\n                                            <TextField source=\"sector\" />,{' '}\n                                            <SelectField\n                                                source=\"size\"\n                                                choices={sizes}\n                                            />\n                                        </Typography>\n                                )}\n                            </Box>\n                            <Box>\n                                <ReferenceField\n                                    source=\"country_id\"\n                                    reference=\"countries\"\n                                    link={false}\n                                >\n                                    <CountryField />\n                                </ReferenceField>\n                            </Box>\n                        </Box>\n                        <Tabs\n                            value={value}\n                            indicatorColor=\"primary\"\n                            textColor=\"primary\"\n                            onChange={handleChange}\n                        >\n                            <Tab\n                                label={\n                                    record.nb_notes === 1\n                                        ? '1 Note'\n                                        : `${record.nb_notes} Notes`\n                                }\n                            />\n                            <Tab\n                                label={\n                                    record.nb_contacts === 1\n                                        ? '1 Contact'\n                                        : `${record.nb_contacts} Contacts`\n                                }\n                            />\n                            {record.nb_deals && (\n                                <Tab\n                                    label={\n                                        record.nb_deals === 1\n                                            ? '1 deal'\n                                            : `${record.nb_deals} Deals`\n                                    }\n                                />\n                            )}\n                        </Tabs>\n                        <Divider />\n                        <TabPanel value={value} index={0}>\n                            <ReferenceManyField\n                                reference=\"companyNotes\"\n                                target=\"company_id\"\n                                sort={{ field: 'date', order: 'DESC' }}\n                            >\n                                 <NotesIterator reference=\"companies\" />\n                            </ReferenceManyField>\n                        </TabPanel>\n                        <TabPanel value={value} index={1}>\n                            <ReferenceManyField\n                                reference=\"contacts\"\n                                target=\"company_id\"\n                                sort={{ field: 'last_name', order: 'ASC' }}\n                            >\n                                <ContactsIterator />\n                            </ReferenceManyField>\n                        </TabPanel>\n                        <TabPanel value={value} index={2}>\n                            <ReferenceManyField\n                                reference=\"deals\"\n                                target=\"company_id\"\n                                sort={{ field: 'name', order: 'ASC' }}\n                            >\n                                <DealsIterator />\n                            </ReferenceManyField>\n                        </TabPanel>\n                    </CardContent>\n                </Card>\n            </Box>\n            <CompanyAside record={record} />\n        </Box>\n    );\n};\n\ninterface TabPanelProps {\n    children?: React.ReactNode;\n    index: any;\n    value: any;\n}\n\nconst TabPanel = (props: TabPanelProps) => {\n    const { children, value, index, ...other } = props;\n\n    return (\n        <div\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`wrapped-tabpanel-${index}`}\n            aria-labelledby={`wrapped-tab-${index}`}\n            {...other}\n        >\n            {children}\n        </div>\n    );\n};\n\nconst ContactsIterator = () => {\n    const { data, ids, loaded } = useListContext<Contact>();\n    const record = useRecordContext();\n\n    const now = Date.now();\n    if (!loaded) return null;\n    return (\n        <Box>\n            <List>\n                {ids.map(id => {\n                    const contact = data[id];\n                    return (\n                        <ListItem\n                            button\n                            key={id}\n                            component={RouterLink}\n                            to={`/contacts/${id}/show`}\n                        >\n                            <ListItemAvatar>\n                                <Avatar record={contact} />\n                            </ListItemAvatar>\n                            <ListItemText\n                                primary={`${contact.first_name} ${contact.last_name}`}\n                                secondary={\n                                    <>\n                                        {contact.title}{' '}\n                                        {`- ${contact.nb_notes} notes `}\n                                        <TagsList record={contact} />\n                                    </>\n                                }\n                            />\n                            <ListItemSecondaryAction>\n                                <Typography variant=\"body2\" color=\"textSecondary\">\n                                    last activity{' '}\n                                    {formatDistance(\n                                        new Date(contact.last_seen),\n                                        now\n                                    )}{' '}\n                                    ago <Status status={contact.status} />\n                                </Typography>\n                            </ListItemSecondaryAction>\n                        </ListItem>\n                    );\n                })}\n            </List>\n            <Box textAlign=\"center\" mt={1}>\n                <CreateRelatedContactButton record={record} />\n            </Box>\n        </Box>\n    );\n};\n\nconst CreateRelatedContactButton = ({ record }: any) => (\n    <Button\n        component={RouterLink}\n        to={{\n            pathname: '/contacts/create',\n            state: { record: { company_id: record.id } },\n        }}\n        color=\"primary\"\n        variant=\"contained\"\n        size=\"small\"\n        startIcon={<PersonAddIcon />}\n    >\n        Add contact\n    </Button>\n);\n\nconst DealsIterator = () => {\n    const { data, ids, loaded } = useListContext<Deal>();\n\n    const now = Date.now();\n    if (!loaded) return null;\n    return (\n        <Box>\n            <List>\n                {ids.map(id => {\n                    const deal = data[id];\n                    return (\n                        <ListItem\n                            button\n                            key={id}\n                            component={RouterLink}\n                            to={`/deals/${id}/show`}\n                        >\n                            <ListItemText\n                                primary={deal.name}\n                                secondary={\n                                    <>\n                                        {/* @ts-ignore */}\n                                        {stageNames[deal.stage]},{' '}\n                                        {deal.amount.toLocaleString('en-US', {\n                                            notation: 'compact',\n                                            style: 'currency',\n                                            currency: 'USD',\n                                            currencyDisplay: 'narrowSymbol',\n                                            minimumSignificantDigits: 3,\n                                        })}\n                                        , {deal.type}\n                                    </>\n                                }\n                            />\n                            <ListItemSecondaryAction>\n                                <Typography\n                                    variant=\"body2\"\n                                    color=\"textSecondary\"\n                                    component=\"span\"\n                                >\n                                    last activity{' '}\n                                    {formatDistance(\n                                        new Date(deal.updated_at),\n                                        now\n                                    )}{' '}\n                                    ago{' '}\n                                </Typography>\n                            </ListItemSecondaryAction>\n                        </ListItem>\n                    );\n                })}\n            </List>\n        </Box>\n    );\n};\n","import * as React from 'react';\nimport {\n    Edit,\n    EditProps,\n    ReferenceInput,\n    SimpleForm,\n    TextInput,\n    SelectInput,\n    useRecordContext,\n    AutocompleteInput,\n    ReferenceArrayInput,\n    AutocompleteArrayInput,\n    FormDataConsumer,\n    required,\n} from 'react-admin';\nimport { Box, CardContent, Divider } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\n\nimport { CompanyAside } from './CompanyAside';\nimport { LogoField } from './LogoField';\nimport { sectors } from './sectors';\nimport { sizes } from './sizes';\nimport { relations } from './relations';\nimport DistributorInput from './DistributorInput';\n\nconst useStyles = makeStyles({\n    inline: {\n        display: 'inline-block',\n        marginLeft: '1em',\n        '&.first-child': {\n            marginLeft: 0,\n        },\n    },\n});\n\nconst renderDistributor = (choice: any) => {\n\n}\n\nexport const CompanyEdit = (props: EditProps) => {\n    const classes = useStyles();\n    return (\n        <Edit {...props} aside={<CompanyAside link=\"show\" />} actions={false}>\n            <SimpleForm component={CustomLayout} redirect=\"show\">\n                <TextInput source=\"name\" validate={required()} fullWidth />\n                <SelectInput\n                    source=\"sector\"\n                    choices={sectors}\n                    formClassName={clsx(classes.inline, 'first-child')}\n                />\n                <SelectInput\n                    source=\"size\"\n                    choices={sizes}\n                    formClassName={classes.inline}\n                />\n                <SelectInput\n                    source=\"relation\"\n                    choices={relations}\n                    formClassName={classes.inline}\n                />\n                <FormDataConsumer>\n                    {({ formData, ...rest }) => formData.relation != 'Distributor' &&\n                        <ReferenceInput\n                            source=\"distributor_id\"\n                            reference=\"companies\"\n                        >\n                            <DistributorInput />\n                        </ReferenceInput>\n                    }\n                </FormDataConsumer>\n\n                <ReferenceArrayInput source=\"use_products\" reference=\"products\">\n                    <AutocompleteArrayInput optionText=\"model\" />\n                </ReferenceArrayInput>\n\n                <CustomDivider />\n                <TextInput source=\"address\" fullWidth helperText={false} />\n                <TextInput\n                    source=\"city\"\n                    formClassName={clsx(classes.inline, 'first-child')}\n                />\n                <TextInput source=\"zipcode\" formClassName={classes.inline} />\n                <TextInput source=\"stateAbbr\" formClassName={classes.inline} />\n                <ReferenceInput\n                    source=\"country_id\"\n                    reference=\"countries\"\n                >\n                    <AutocompleteInput optionText=\"nicename\" />\n                </ReferenceInput>\n                <CustomDivider />\n                <TextInput source=\"website\" fullWidth helperText={false} />\n                <TextInput source=\"linkedIn\" fullWidth helperText={false} />\n                <TextInput source=\"logo\" fullWidth />\n                <CustomDivider />\n                <TextInput\n                    source=\"phone_number\"\n                    formClassName={clsx(classes.inline, 'first-child')}\n                    helperText={false}\n                />\n                <ReferenceInput\n                    source=\"sales_id\"\n                    reference=\"sales\"\n                    label=\"Account manager\"\n                    formClassName={classes.inline}\n                    helperText={false}\n                >\n                    <SelectInput\n                        optionText={(sales: any) =>\n                            `${sales.first_name} ${sales.last_name}`\n                        }\n                    />\n                </ReferenceInput>\n            </SimpleForm>\n        </Edit>\n    );\n};\n\nconst CustomLayout = (props: any) => {\n    const record = useRecordContext(props);\n    return (\n        <CardContent>\n            <Box display=\"flex\">\n                <LogoField record={record as any} />\n                <Box ml={2} flex=\"1\" maxWidth={796}>\n                    {props.children}\n                </Box>\n            </Box>\n        </CardContent>\n    );\n};\n\nconst CustomDivider = () => (\n    <Box mb={2}>\n        <Divider />\n    </Box>\n);\n","/* eslint-disable import/no-anonymous-default-export */\nimport { CompanyList } from './CompanyList';\nimport { CompanyCreate } from './CompanyCreate';\nimport { CompanyShow } from './CompanyShow';\nimport { CompanyEdit } from './CompanyEdit';\nimport BusinessIcon from '@material-ui/icons/Business';\n\nexport default {\n    list: CompanyList,\n    create: CompanyCreate,\n    edit: CompanyEdit,\n    show: CompanyShow,\n    icon: BusinessIcon,\n};\n","import * as React from 'react';\nimport {\n    TextField,\n    EmailField,\n    DateField,\n    ReferenceManyField,\n    EditButton,\n    ShowButton,\n    useListContext,\n    ReferenceField,\n    FunctionField,\n} from 'react-admin';\nimport { Box, Typography, Divider, List, ListItem } from '@material-ui/core';\nimport { TagsListEdit } from '../tags/TagsListEdit';\n\nimport { Sale } from '../types';\n\nexport const ContactAside = ({ record, link = 'edit' }: any) => (\n    <Box ml={4} width={250} minWidth={250}>\n        <Box textAlign=\"center\" mb={2}>\n            {link === 'edit' ? (\n                <EditButton\n                    basePath=\"/contacts\"\n                    record={record}\n                    label=\"Edit Contact\"\n                />\n            ) : (\n                <ShowButton\n                    basePath=\"/contacts\"\n                    record={record}\n                    label=\"Show Contact\"\n                />\n            )}\n        </Box>\n\n        <Typography variant=\"subtitle2\">Personal info</Typography>\n        <Divider />\n\n        <Box mt={2}>\n            <EmailField source=\"email\" />\n        </Box>\n\n        <Box mt={1}>\n            <TextField source=\"phone_number1\" />{' '}\n            <Typography variant=\"body2\" color=\"textSecondary\" component=\"span\">\n                Work\n            </Typography>\n        </Box>\n\n        <Box mb={1}>\n            <TextField source=\"phone_number2\" />{' '}\n            <Typography variant=\"body2\" color=\"textSecondary\" component=\"span\">\n                Home\n            </Typography>\n        </Box>\n\n        <Box mb={3}>\n            <Typography variant=\"body2\">\n                {record.gender === 'male' ? 'He/Him' : 'She/Her'}\n            </Typography>\n        </Box>\n\n        <Typography variant=\"subtitle2\">Background</Typography>\n        <Divider />\n\n        <Box mt={2}>{record && record.background}</Box>\n        <Box mt={1} mb={3}>\n            <Typography component=\"span\" variant=\"body2\" color=\"textSecondary\">\n                Added on\n            </Typography>{' '}\n            <DateField\n                source=\"first_seen\"\n                options={{ year: 'numeric', month: 'long', day: 'numeric' }}\n                color=\"textSecondary\"\n            />\n            <br />\n            <Typography component=\"span\" variant=\"body2\" color=\"textSecondary\">\n                Last seen on\n            </Typography>{' '}\n            <DateField\n                source=\"last_seen\"\n                options={{ year: 'numeric', month: 'long', day: 'numeric' }}\n                color=\"textSecondary\"\n            />\n            <br />\n            <Typography component=\"span\" variant=\"body2\" color=\"textSecondary\">\n                Followed by\n            </Typography>{' '}\n            <ReferenceField\n                resource=\"contacts\"\n                source=\"sales_id\"\n                reference=\"sales\"\n            >\n                <FunctionField<Sale>\n                    source=\"last_name\"\n                    render={record =>\n                        record ? `${record.first_name} ${record.last_name}` : ''\n                    }\n                />\n            </ReferenceField>\n        </Box>\n\n        <Box mb={3}>\n            <Typography variant=\"subtitle2\">Tags</Typography>\n            <Divider />\n            <TagsListEdit record={record} reference=\"contacts\" />\n        </Box>\n\n        <Box>\n            <Typography variant=\"subtitle2\">Tasks</Typography>\n            <Divider />\n            <ReferenceManyField\n                resource=\"contacts\"\n                target=\"contact_id\"\n                reference=\"tasks\"\n            >\n                <TasksIterator />\n            </ReferenceManyField>\n        </Box>\n    </Box>\n);\n\nconst TasksIterator = () => {\n    const { data, ids, loading } = useListContext();\n    if (loading || ids.length === 0) return null;\n    return (\n\n\n            <List>\n                {ids.map(id => {\n                    const task = data[id];\n                    return (\n                        <ListItem key={id} disableGutters>\n                            <Box>\n                                <Typography variant=\"body2\">\n                                    {task.text}\n                                </Typography>\n                                <Typography\n                                    variant=\"body2\"\n                                    color=\"textSecondary\"\n                                >\n                                    due{' '}\n                                    <DateField\n                                        source=\"due_date\"\n                                        record={task}\n                                    />\n                                </Typography>\n                            </Box>\n                        </ListItem>\n                    );\n                })}\n            </List>\n    );\n};\n","import * as React from 'react';\nimport {\n    ShowBase,\n    ShowProps,\n    TextField,\n    ReferenceField,\n    ReferenceManyField,\n    useShowContext,\n} from 'react-admin';\nimport { Box, Card, CardContent, Typography } from '@material-ui/core';\n\nimport { Avatar } from './Avatar';\nimport { ContactAside } from './ContactAside';\nimport { LogoField } from '../companies/LogoField';\nimport { NotesIterator } from '../notes';\nimport { Contact } from '../types';\n\nexport const ContactShow = (props: ShowProps) => (\n    <ShowBase {...props}>\n        <ContactShowContent />\n    </ShowBase>\n);\n\nconst ContactShowContent = () => {\n    const { record, loaded } = useShowContext<Contact>();\n    if (!loaded || !record) return null;\n    return (\n        <Box mt={2} display=\"flex\">\n            <Box flex=\"1\">\n                <Card>\n                    <CardContent>\n                        <Box display=\"flex\">\n                            <Avatar record={record} />\n                            <Box ml={2} flex=\"1\">\n                                <Typography variant=\"h5\">\n                                    {record.first_name} {record.last_name}\n                                </Typography>\n                                <Typography variant=\"body2\">\n                                    {`#${record.id} - `}\n                                    {record.title} at{' '}\n                                    <ReferenceField\n                                        source=\"company_id\"\n                                        reference=\"companies\"\n                                        link=\"show\"\n                                    >\n                                        <TextField source=\"name\" />\n                                    </ReferenceField>\n                                </Typography>\n                            </Box>\n                            <Box>\n                                <ReferenceField\n                                    source=\"company_id\"\n                                    reference=\"companies\"\n                                    link=\"show\"\n                                >\n                                    <LogoField />\n                                </ReferenceField>\n                            </Box>\n                        </Box>\n                        <ReferenceManyField\n                            target=\"contact_id\"\n                            reference=\"contactNotes\"\n                            sort={{ field: 'date', order: 'DESC' }}\n                        >\n                            <NotesIterator showStatus reference=\"contacts\" />\n                        </ReferenceManyField>\n                    </CardContent>\n                </Card>\n            </Box>\n            <ContactAside record={record} />\n        </Box>\n    );\n};\n","/* eslint-disable import/no-anonymous-default-export */\nimport * as React from 'react';\nimport {\n    FilterList,\n    FilterLiveSearch,\n    FilterListItem,\n    useGetIdentity,\n    useGetList,\n} from 'react-admin';\nimport { Box, Chip } from '@material-ui/core';\nimport AccessTimeIcon from '@material-ui/icons/AccessTime';\nimport TrendingUpIcon from '@material-ui/icons/TrendingUp';\nimport LocalOfferIcon from '@material-ui/icons/LocalOffer';\nimport SupervisorAccountIcon from '@material-ui/icons/SupervisorAccount';\nimport { endOfYesterday, startOfWeek, startOfMonth, subMonths } from 'date-fns';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { Status } from '../misc/Status';\nimport { TagChip } from '../tags/TagChip';\nimport { Tag } from '../types';\n\nconst useStyles = makeStyles(theme => ({\n    container: {\n        order: -1,\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n        minWidth: '13em',\n        [theme.breakpoints.down('xs')]: {\n            display: 'none',\n        }\n    },\n}));\n\nexport const ContactListFilter = () => {\n    const classes = useStyles();\n    const { identity } = useGetIdentity();\n    const { data, ids } = useGetList<Tag>(\n        'tags',\n        { page: 1, perPage: 10 },\n        { field: 'name', order: 'ASC' }\n    );\n    return (\n        <div className={classes.container}>\n            <FilterLiveSearch />\n            <FilterList label=\"Last seen\" icon={<AccessTimeIcon />}>\n                <FilterListItem\n                    label=\"Today\"\n                    value={{\n                        last_seen_gte: endOfYesterday().toISOString(),\n                        last_seen_lte: undefined,\n                    }}\n                />\n                <FilterListItem\n                    label=\"This week\"\n                    value={{\n                        last_seen_gte: startOfWeek(new Date()).toISOString(),\n                        last_seen_lte: undefined,\n                    }}\n                />\n                <FilterListItem\n                    label=\"Before this week\"\n                    value={{\n                        last_seen_gte: undefined,\n                        last_seen_lte: startOfWeek(new Date()).toISOString(),\n                    }}\n                />\n                <FilterListItem\n                    label=\"Before this month\"\n                    value={{\n                        last_seen_gte: undefined,\n                        last_seen_lte: startOfMonth(new Date()).toISOString(),\n                    }}\n                />\n                <FilterListItem\n                    label=\"Before last month\"\n                    value={{\n                        last_seen_gte: undefined,\n                        last_seen_lte: subMonths(\n                            startOfMonth(new Date()),\n                            1\n                        ).toISOString(),\n                    }}\n                />\n            </FilterList>\n            <FilterList label=\"Status\" icon={<TrendingUpIcon />}>\n                <FilterListItem\n                    label={\n                        <>\n                            Cold <Status status=\"cold\" />\n                        </>\n                    }\n                    value={{\n                        status: 'cold',\n                    }}\n                />\n                <FilterListItem\n                    label={\n                        <>\n                            Warm <Status status=\"warm\" />\n                        </>\n                    }\n                    value={{\n                        status: 'warm',\n                    }}\n                />\n                <FilterListItem\n                    label={\n                        <>\n                            Hot <Status status=\"hot\" />\n                        </>\n                    }\n                    value={{\n                        status: 'hot',\n                    }}\n                />\n                <FilterListItem\n                    label={\n                        <>\n                            In contract <Status status=\"in-contract\" />\n                        </>\n                    }\n                    value={{\n                        status: 'in-contract',\n                    }}\n                />\n            </FilterList>\n            <FilterList label=\"Tags\" icon={<LocalOfferIcon />}>\n                {ids &&\n                    data &&\n                    ids.map(id => (\n                        <FilterListItem\n                            key={id}\n                            label={<TagChip record={data[id]}/>}\n                            value={{ tags: [id] }}\n                        />\n                    ))}\n            </FilterList>\n            <FilterList\n                label=\"Account manager\"\n                icon={<SupervisorAccountIcon />}\n            >\n                <FilterListItem\n                    label=\"Me\"\n                    value={{\n                        sales_id: identity && identity.id,\n                    }}\n                />\n            </FilterList>\n        </div>\n    );\n};\n","/* eslint-disable import/no-anonymous-default-export */\nimport * as React from 'react';\nimport {\n    List as RaList,\n    ListProps,\n    SimpleListLoading,\n    ReferenceField,\n    TextField,\n    useListContext,\n    ExportButton,\n    SortButton,\n    TopToolbar,\n    CreateButton,\n    Pagination,\n    useGetIdentity,\n    ListActionsProps,\n    FilterLiveSearch,\n} from 'react-admin';\nimport {\n    List,\n    ListItem,\n    ListItemAvatar,\n    ListItemIcon,\n    ListItemSecondaryAction,\n    ListItemText,\n    Checkbox,\n    Typography,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Link } from 'react-router-dom';\nimport { formatDistance } from 'date-fns';\n\nimport { Avatar } from './Avatar';\nimport { Status } from '../misc/Status';\nimport { TagsList } from '../tags/TagsList';\nimport { ContactListFilter } from './ContactListFilter';\nimport { Contact } from '../types';\nimport { ImportButton } from 'react-admin-import-csv';\n\nconst ContactListContent = () => {\n    const { data, ids, loaded, onToggleItem, selectedIds } = useListContext<\n        Contact\n    >();\n    const now = Date.now();\n    if (loaded === false) {\n        return <SimpleListLoading hasLeftAvatarOrIcon hasSecondaryText />;\n    }\n\n    return (\n        <List>\n            {ids.map(id => {\n                const contact = data[id];\n                return (\n                    <ListItem\n                        button\n                        key={id}\n                        component={Link}\n                        to={`/contacts/${id}/show`}\n                    >\n                        <ListItemIcon>\n                            <Checkbox\n                                edge=\"start\"\n                                checked={selectedIds.includes(id)}\n                                tabIndex={-1}\n                                disableRipple\n                                onClick={e => {\n                                    e.stopPropagation();\n                                    onToggleItem(id);\n                                }}\n                            />\n                        </ListItemIcon>\n                        <ListItemAvatar>\n                            <Avatar record={contact} />\n                        </ListItemAvatar>\n                        <ListItemText\n                            primary={`${contact.first_name} ${contact.last_name}`}\n                            secondary={\n                                <>\n                                    {`#${contact.id} - `}\n                                    {contact.title} at{' '}\n                                    <ReferenceField\n                                        record={contact}\n                                        source=\"company_id\"\n                                        reference=\"companies\"\n                                        basePath=\"/companies\"\n                                        link={false}\n                                    >\n                                        <TextField source=\"name\" />\n                                    </ReferenceField>{' '}\n                                    {!!contact.nb_notes &&\n                                        `- ${contact.nb_notes} notes `}\n                                    <TagsList record={contact} />\n                                </>\n                            }\n                        />\n                        <ListItemSecondaryAction>\n                            <Typography variant=\"body2\" color=\"textSecondary\">\n                                last activity{' '}\n                                {formatDistance(\n                                    new Date(contact.last_seen),\n                                    now\n                                )}{' '}\n                                ago <Status status={contact.status} />\n                            </Typography>\n                        </ListItemSecondaryAction>\n                    </ListItem>\n                );\n            })}\n        </List>\n    );\n};\n\nconst useActionStyles = makeStyles(theme => ({\n    createButton: {\n        marginLeft: theme.spacing(2),\n    },\n}));\nconst ContactListActions = (props: ListActionsProps) => {\n    const classes = useActionStyles();\n    return (\n        <TopToolbar>\n            <SortButton fields={['id', 'last_name', 'first_name', 'last_seen']} />\n            <ExportButton />\n            <ImportButton {...props} />\n            <CreateButton\n                basePath=\"/contacts\"\n                variant=\"contained\"\n                label=\"New Contact\"\n                className={classes.createButton}\n            />\n        </TopToolbar>\n    );\n};\n\nexport const ContactList = (props: ListProps) => {\n    const { identity } = useGetIdentity();\n    return identity ? (\n        <RaList\n            {...props}\n            actions={<ContactListActions />}\n            aside={<ContactListFilter />}\n            perPage={25}\n            pagination={<Pagination rowsPerPageOptions={[10, 25, 50, 100]} />}\n            filterDefaultValues={{ sales_id: identity?.id }}\n            sort={{ field: 'last_seen', order: 'DESC' }}\n        >\n            <ContactListContent />\n        </RaList>\n    ) : null;\n};\n","import * as React from 'react';\nimport {\n    EditBase,\n    EditProps,\n    TextInput,\n    ReferenceInput,\n    AutocompleteInput,\n    BooleanInput,\n    FormWithRedirect,\n    Toolbar,\n    useEditContext,\n} from 'react-admin';\nimport { Card, CardContent, Divider, Box } from '@material-ui/core';\nimport omit from 'lodash/omit';\n\nimport { Avatar } from './Avatar';\nimport { ContactAside } from './ContactAside';\nimport { Contact } from '../types';\n\nconst Spacer = () => <Box width={20} component=\"span\" />;\n\nconst ContactEditContent = () => {\n    const { record, loaded, save } = useEditContext<Contact>();\n    if (!loaded || !record) return null;\n    return (\n        <Box mt={2} display=\"flex\">\n            <Box flex=\"1\">\n                <FormWithRedirect\n                    record={record}\n                    redirect=\"show\"\n                    save={save}\n                    render={formProps => (\n                        <Card>\n                            <CardContent>\n                                <Box>\n                                    <Box display=\"flex\">\n                                        <Box mr={2}>\n                                            <Avatar record={record} />\n                                        </Box>\n                                        <Box flex=\"1\" mt={-1}>\n                                            <Box display=\"flex\">\n                                                <TextInput source=\"first_name\" />\n                                                <Spacer />\n                                                <TextInput source=\"last_name\" />\n                                            </Box>\n                                            <Box display=\"flex\">\n                                                <TextInput source=\"title\" />\n                                                <Spacer />\n                                                <ReferenceInput\n                                                    source=\"company_id\"\n                                                    reference=\"companies\"\n                                                >\n                                                    <AutocompleteInput optionText=\"name\" />\n                                                </ReferenceInput>\n                                            </Box>\n                                            <Divider />\n                                            <Box mt={2} width={430}>\n                                                <TextInput\n                                                    source=\"email\"\n                                                    fullWidth\n                                                />\n                                            </Box>\n                                            <Box display=\"flex\">\n                                                <TextInput source=\"phone_number1\" />\n                                                <Spacer />\n                                                <TextInput source=\"phone_number2\" />\n                                            </Box>\n                                            <Divider />\n                                            <Box mt={2} width={430}>\n                                                <TextInput\n                                                    source=\"background\"\n                                                    multiline\n                                                    fullWidth\n                                                />\n                                                <TextInput\n                                                    source=\"avatar\"\n                                                    fullWidth\n                                                />\n                                                <BooleanInput source=\"has_newsletter\" />\n                                            </Box>\n                                        </Box>\n                                    </Box>\n                                </Box>\n                            </CardContent>\n                            <Toolbar\n                                {...omit(formProps, [\n                                    // FIXME Not super user friendly way to remove warnings\n                                    'dirtyFields',\n                                    'dirtyFieldsSinceLastSubmit',\n                                    'dirtySinceLastSubmit',\n                                    'hasSubmitErrors',\n                                    'hasValidationErrors',\n                                    'initialValues',\n                                    'modifiedSinceLastSubmit',\n                                    'submitError',\n                                    'submitErrors',\n                                    'submitFailed',\n                                    'submitSucceeded',\n                                    'submitting',\n                                    'valid',\n                                ])}\n                            />\n                        </Card>\n                    )}\n                />\n            </Box>\n            <ContactAside record={record} link=\"show\" />\n        </Box>\n    );\n};\n\nexport const ContactEdit = (props: EditProps) => (\n    <EditBase {...props}>\n        <ContactEditContent />\n    </EditBase>\n);\n","import * as React from 'react';\nimport {\n    Create,\n    CreateProps,\n    TextInput,\n    ReferenceInput,\n    SelectInput,\n    AutocompleteInput,\n    BooleanInput,\n    SimpleForm,\n    Toolbar,\n    required,\n    useGetIdentity,\n    useCreateContext,\n} from 'react-admin';\nimport { Card, CardContent, Divider, Box, Avatar } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\n\nimport { Contact } from '../types';\n\nconst useStyles = makeStyles({\n    inline: {\n        display: 'inline-block',\n        marginLeft: '1em',\n        '&.first-child': {\n            marginLeft: 0,\n        },\n    },\n});\n\n\nexport const ContactCreate = (props: CreateProps) => {\n    const classes = useStyles();\n    const { identity } = useGetIdentity();\n    \n    if (!identity) return null;\n\n    const contactDefaultValue = () => ({ sales_id: identity && identity?.id });\n    const transform = (data: Contact) => ({\n        ...data,\n        last_seen: new Date(),\n        tags: [],\n    });\n    \n    return (\n        <Create {...props} actions={false}>\n            <SimpleForm \n                component={CustomLayout} \n                redirect=\"show\"\n                initialValues={contactDefaultValue}\n                transform={transform}\n            >\n                <TextInput \n                    source=\"first_name\" \n                    validate={[required()]} \n                    formClassName={clsx(classes.inline, 'first-child')}\n                />\n                <TextInput\n                    source=\"last_name\"\n                    validate={[required()]}\n                    formClassName={classes.inline}\n                />\n                <CustomDivider />\n                <TextInput \n                    source=\"title\"\n                    formClassName={clsx(classes.inline, 'first-child')}\n                />\n                <ReferenceInput\n                    source=\"company_id\"\n                    reference=\"companies\"\n                    formClassName={classes.inline}\n                >\n                    <AutocompleteInput optionText=\"name\" />\n                </ReferenceInput>\n                <CustomDivider />\n                <TextInput\n                    source=\"email\"\n                    fullWidth\n                />\n                <TextInput source=\"phone_number1\"\n                    formClassName={clsx(classes.inline, 'first-child')} />\n                <TextInput source=\"phone_number2\"\n                    formClassName={classes.inline} />\n                <CustomDivider />\n                <TextInput\n                    source=\"background\"\n                    multiline\n                    fullWidth\n                />\n                <TextInput\n                    source=\"avatar\"\n                    fullWidth\n                />\n                <ReferenceInput\n                    source=\"sales_id\"\n                    reference=\"sales\"\n                    label=\"Account manager\"\n                    helperText={false}\n                >\n                    <SelectInput\n                        optionText={(sales: any) =>\n                            `${sales.first_name} ${sales.last_name}`\n                        }\n                    />\n                </ReferenceInput>\n                <BooleanInput source=\"has_newsletter\" />\n            </SimpleForm>\n        </Create>\n    );\n};\n\n\nconst CustomLayout = ({ children }: \n    {children: any;}) => (\n    <CardContent>\n        <Box display=\"flex\">\n            <Box paddingTop={1}>\n                <Avatar />\n            </Box>\n            <Box ml={2} flex=\"1\" maxWidth={796}>\n                {children}\n            </Box>\n        </Box>\n    </CardContent>\n);\n\nconst CustomDivider = () => (\n    <Box mb={2}>\n        <Divider />\n    </Box>\n);","/* eslint-disable import/no-anonymous-default-export */\nimport { ContactShow } from './ContactShow';\nimport { ContactList } from './ContactList';\nimport { ContactEdit } from './ContactEdit';\nimport { ContactCreate } from './ContactCreate';\nimport ContactsIcon from '@material-ui/icons/Contacts';\n\nexport default {\n    list: ContactList,\n    show: ContactShow,\n    edit: ContactEdit,\n    create: ContactCreate,\n    icon: ContactsIcon,\n};\n","import * as React from 'react';\nimport {\n    TextField,\n    EmailField,\n    DateField,\n    ReferenceManyField,\n    EditButton,\n    ShowButton,\n    useListContext,\n    ReferenceField,\n    FunctionField,\n} from 'react-admin';\nimport { Box, Typography, Divider, List, ListItem } from '@material-ui/core';\nimport { TagsListEdit } from '../tags/TagsListEdit';\n\nimport { Sale } from '../types';\n\nexport const TaskAside = ({ record, link = 'edit' }: any) => (\n    <Box ml={4} width={250} minWidth={250}>\n        <Box textAlign=\"center\" mb={2}>\n            {link === 'edit' ? (\n                <EditButton\n                    basePath=\"/Tasks\"\n                    record={record}\n                    label=\"Edit Task\"\n                />\n            ) : (\n                <ShowButton\n                    basePath=\"/Tasks\"\n                    record={record}\n                    label=\"Show Task\"\n                />\n            )}\n        </Box>\n    </Box>\n);\n","import * as React from 'react';\nimport {\n    ShowBase,\n    ShowProps,\n    TextField,\n    ReferenceField,\n    ReferenceManyField,\n    useShowContext,\n} from 'react-admin';\nimport { Box, Card, CardContent, Typography } from '@material-ui/core';\n\nimport { TaskAside } from './TaskAside';\nimport { LogoField } from '../companies/LogoField';\nimport { NotesIterator } from '../notes';\nimport { Task } from '../types';\n\nexport const TaskShow = (props: ShowProps) => (\n    <ShowBase {...props}>\n        <TaskShowContent />\n    </ShowBase>\n);\n\nconst TaskShowContent = () => {\n    const { record, loaded } = useShowContext<Task>();\n    if (!loaded || !record) return null;\n    return (\n        <Box mt={2} display=\"flex\">\n            <Box flex=\"1\">\n                <Card>\n                    <CardContent>\n                        <Box display=\"flex\">\n                            <Box ml={2} flex=\"1\">\n                                <Typography variant=\"h5\">\n                                    {record.first_name} {record.last_name}\n                                </Typography>\n                                <Typography variant=\"body2\">\n                                    {record.title} at{' '}\n                                    <ReferenceField\n                                        source=\"company_id\"\n                                        reference=\"companies\"\n                                        link=\"show\"\n                                    >\n                                        <TextField source=\"name\" />\n                                    </ReferenceField>\n                                </Typography>\n                            </Box>\n                            <Box>\n                                <ReferenceField\n                                    source=\"company_id\"\n                                    reference=\"companies\"\n                                    link=\"show\"\n                                >\n                                    <LogoField />\n                                </ReferenceField>\n                            </Box>\n                        </Box>\n                    </CardContent>\n                </Card>\n            </Box>\n            <TaskAside record={record} />\n        </Box>\n    );\n};\n","/* eslint-disable import/no-anonymous-default-export */\nimport * as React from 'react';\nimport {\n    FilterList,\n    FilterLiveSearch,\n    FilterListItem,\n    useGetIdentity,\n    useGetList,\n} from 'react-admin';\nimport { Box, Chip } from '@material-ui/core';\nimport AccessTimeIcon from '@material-ui/icons/AccessTime';\nimport TrendingUpIcon from '@material-ui/icons/TrendingUp';\nimport LocalOfferIcon from '@material-ui/icons/LocalOffer';\nimport SupervisorAccountIcon from '@material-ui/icons/SupervisorAccount';\nimport { endOfYesterday, startOfWeek, startOfMonth, subMonths } from 'date-fns';\n\nimport { Status } from '../misc/Status';\nimport { TagChip } from '../tags/TagChip';\nimport { Tag } from '../types';\n\nexport const TaskListFilter = () => {\n    const { identity } = useGetIdentity();\n    return (\n        <Box width=\"15em\" order=\"-1\" marginRight=\"1em\">\n            <FilterLiveSearch />\n            <FilterList label=\"Due date\" icon={<AccessTimeIcon />}>\n                <FilterListItem\n                    label=\"Today\"\n                    value={{\n                        due_date_gte: endOfYesterday().toISOString(),\n                        due_date_lte: undefined,\n                    }}\n                />\n                <FilterListItem\n                    label=\"This week\"\n                    value={{\n                        due_date_gte: startOfWeek(new Date()).toISOString(),\n                        due_date_lte: undefined,\n                    }}\n                />\n                <FilterListItem\n                    label=\"Before this week\"\n                    value={{\n                        due_date_gte: undefined,\n                        due_date_lte: startOfWeek(new Date()).toISOString(),\n                    }}\n                />\n                <FilterListItem\n                    label=\"Before this month\"\n                    value={{\n                        due_date_gte: undefined,\n                        due_date_lte: startOfMonth(new Date()).toISOString(),\n                    }}\n                />\n                <FilterListItem\n                    label=\"Before last month\"\n                    value={{\n                        due_date_gte: undefined,\n                        due_date_lte: subMonths(\n                            startOfMonth(new Date()),\n                            1\n                        ).toISOString(),\n                    }}\n                />\n            </FilterList>\n            <FilterList\n                label=\"Account manager\"\n                icon={<SupervisorAccountIcon />}\n            >\n                <FilterListItem\n                    label=\"Me\"\n                    value={{\n                        sales_id: identity && identity.id,\n                    }}\n                />\n            </FilterList>\n        </Box>\n    );\n};\n","// in ./MarkDoneButton.js\nimport * as React from 'react';\nimport { BulkUpdateButton, BulkActionProps } from 'react-admin';\nimport DoneIcon from '@material-ui/icons/Done';\n\nconst doneState = { status: 'Done' };\n\nconst MarkDoneButton = (props: BulkActionProps) => (\n    <BulkUpdateButton\n        {...props}\n        label=\"Mark checked\"\n        data={doneState}\n        icon={<DoneIcon/>}\n        mutationMode=\"pessimistic\"\n    />\n);\n\nexport default MarkDoneButton;","/* eslint-disable import/no-anonymous-default-export */\nimport * as React from 'react';\nimport { Fragment } from 'react';\nimport {\n    List as RaList,\n    ListProps,\n    SimpleListLoading,\n    ReferenceField,\n    TextField,\n    useListContext,\n    ExportButton,\n    SortButton,\n    TopToolbar,\n    CreateButton,\n    Pagination,\n    BulkDeleteButton,\n    useGetIdentity,\n    BulkActionProps,\n    ListActionsProps,\n} from 'react-admin';\nimport {\n    List,\n    ListItem,\n    ListItemAvatar,\n    ListItemIcon,\n    ListItemSecondaryAction,\n    ListItemText,\n    Checkbox,\n    Typography,\n    Avatar,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Link } from 'react-router-dom';\nimport { formatDistance } from 'date-fns';\nimport AssignmentTurnedInIcon from '@material-ui/icons/AssignmentTurnedIn';\nimport { ImportButton } from \"react-admin-import-csv\";\n\nimport { Status } from '../misc/Status';\nimport { TagsList } from '../tags/TagsList';\nimport { TaskListFilter } from './TaskListFilter';\nimport { Task } from '../types';\nimport MarkDoneButton from './MarkDoneButton';\n\nconst TaskListContent = () => {\n    const { data, ids, loaded, onToggleItem, selectedIds } = useListContext<\n        Task\n    >();\n    const now = Date.now();\n    if (loaded === false) {\n        return <SimpleListLoading hasLeftAvatarOrIcon hasSecondaryText />;\n    }\n\n    return (\n        <List>\n            {ids.map(id => {\n                const Task = data[id];\n                return (\n                    <ListItem\n                        button\n                        key={id}\n                        component={Link}\n                        to={`/Tasks/${id}`}\n                    >\n                        <ListItemIcon>\n                            <Checkbox\n                                edge=\"start\"\n                                checked={selectedIds.includes(id)}\n                                tabIndex={-1}\n                                disableRipple\n                                onClick={e => {\n                                    e.stopPropagation();\n                                    onToggleItem(id);\n                                }}\n                            />\n                        </ListItemIcon>\n                        <ListItemAvatar>\n                            <Avatar>\n                                <AssignmentTurnedInIcon />\n                            </Avatar>\n                        </ListItemAvatar>\n                        <ListItemText\n                            primary={Task.text}\n                        />\n                        <ListItemSecondaryAction>\n                            <Typography variant=\"body2\" color=\"textSecondary\">\n                                due in{' '}\n                                {formatDistance(\n                                    new Date(Task.due_date),\n                                    now\n                                )}\n                            </Typography>\n                        </ListItemSecondaryAction>\n                    </ListItem>\n                );\n            })}\n        </List>\n    );\n};\n\nconst useActionStyles = makeStyles(theme => ({\n    createButton: {\n        marginLeft: theme.spacing(2),\n    },\n}));\nconst TaskListActions = (props: ListActionsProps) => {\n    const classes = useActionStyles();\n    return (\n        <TopToolbar>\n            <SortButton fields={['due_date']} />\n            <ExportButton />\n            <ImportButton {...props} />\n            <CreateButton\n                basePath=\"/Tasks\"\n                variant=\"contained\"\n                label=\"New Task\"\n                className={classes.createButton}\n            />\n        </TopToolbar>\n    );\n};\n\nconst TaskBulkActionButtons = (props: BulkActionProps) => (\n    <Fragment>\n        <MarkDoneButton {...props} />\n        {/* default bulk delete action */}\n        <BulkDeleteButton {...props} />\n    </Fragment>\n);\n\nexport const TaskList = (props: ListProps) => {\n    const { identity } = useGetIdentity();\n    return identity ? (\n        <RaList\n            {...props}\n            actions={<TaskListActions />}\n            aside={<TaskListFilter />}\n            bulkActionButtons={<TaskBulkActionButtons />}\n            perPage={25}\n            pagination={<Pagination rowsPerPageOptions={[10, 25, 50, 100]} />}\n            filterDefaultValues={{ sales_id: identity?.id }}\n            sort={{ field: 'due_date', order: 'DESC' }}\n        >\n            <TaskListContent />\n        </RaList>\n    ) : null;\n};\n","export const statuses = [\n    'Pending',\n    'Done',\n    'Postponed',\n].map(status => ({ id: status, name: status }));","import * as React from 'react';\nimport {\n    EditBase,\n    EditProps,\n    TextInput,\n    ReferenceInput,\n    AutocompleteInput,\n    BooleanInput,\n    FormWithRedirect,\n    required,\n    Toolbar,\n    useEditContext,\n    DateInput,\n    SelectInput,\n} from 'react-admin';\nimport { Card, CardContent, Divider, Box, Avatar } from '@material-ui/core';\nimport omit from 'lodash/omit';\nimport AssignmentTurnedInIcon from '@material-ui/icons/AssignmentTurnedIn';\nimport { makeStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\n\nimport { TaskAside } from './TaskAside';\nimport { Task } from '../types';\nimport { statuses } from './status';\n\nconst Spacer = () => <Box width={20} component=\"span\" />;\nconst useStyles = makeStyles({\n    inline: {\n        display: 'inline-block',\n        marginLeft: '1em',\n        '&.first-child': {\n            marginLeft: 0,\n        },\n    },\n});\n\nconst TaskEditContent = () => {\n    const classes = useStyles();\n    const { record, loaded, save } = useEditContext<Task>();\n    if (!loaded || !record) return null;\n    return (\n        <Box mt={2} display=\"flex\">\n            <Box flex=\"1\">\n                <FormWithRedirect\n                    record={record}\n                    redirect=\"show\"\n                    save={save}\n                    render={formProps => (\n                        <Card>\n                            <CardContent>\n                                <Box>\n                                    <Box display=\"flex\">\n                                        <Box mr={2}>\n                                        <Avatar >\n                                            <AssignmentTurnedInIcon />\n                                        </Avatar>\n                                        </Box>\n                                        <Box flex=\"1\" mt={-1}>\n                                            <TextInput \n                                                source=\"text\"\n                                                label=\"Task\"\n                                                validate={[required()]}\n                                                fullWidth\n                                            />\n                                            <DateInput\n                                                source=\"due_date\"\n                                                formClassName={clsx(classes.inline, 'first-child')}\n                                            />\n                                            <SelectInput\n                                                source=\"status\"\n                                                choices={statuses}\n                                                formClassName={classes.inline}\n                                            />\n                                            <ReferenceInput\n                                                source=\"sales_id\"\n                                                reference=\"sales\"\n                                                label=\"Account manager\"\n                                                helperText={false}\n                                                formClassName={classes.inline}\n                                            >\n                                                <SelectInput\n                                                    optionText={(sales: any) =>\n                                                        `${sales.first_name} ${sales.last_name}`\n                                                    }\n                                                />\n                                            </ReferenceInput>\n                                        </Box>\n                                    </Box>\n                                </Box>\n                            </CardContent>\n                            <Toolbar\n                                {...omit(formProps, [\n                                    // FIXME Not super user friendly way to remove warnings\n                                    'dirtyFields',\n                                    'dirtyFieldsSinceLastSubmit',\n                                    'dirtySinceLastSubmit',\n                                    'hasSubmitErrors',\n                                    'hasValidationErrors',\n                                    'initialValues',\n                                    'modifiedSinceLastSubmit',\n                                    'submitError',\n                                    'submitErrors',\n                                    'submitFailed',\n                                    'submitSucceeded',\n                                    'submitting',\n                                    'valid',\n                                ])}\n                            />\n                        </Card>\n                    )}\n                />\n            </Box>\n            <TaskAside record={record} link=\"show\" />\n        </Box>\n    );\n};\n\nexport const TaskEdit = (props: EditProps) => (\n    <EditBase {...props}>\n        <TaskEditContent />\n    </EditBase>\n);\n","import * as React from 'react';\nimport {\n    Create,\n    CreateProps,\n    TextInput,\n    ReferenceInput,\n    SelectInput,\n    AutocompleteInput,\n    BooleanInput,\n    SimpleForm,\n    Toolbar,\n    required,\n    useGetIdentity,\n    DateInput,\n    useCreateContext,\n    SelectField,\n} from 'react-admin';\nimport { Card, CardContent, Divider, Box, Avatar } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\nimport AssignmentTurnedInIcon from '@material-ui/icons/AssignmentTurnedIn';\n\n\nimport { Task } from '../types';\nimport { statuses } from './status';\n\nconst useStyles = makeStyles({\n    inline: {\n        display: 'inline-block',\n        marginLeft: '1em',\n        '&.first-child': {\n            marginLeft: 0,\n        },\n    },\n});\n\n\nexport const TaskCreate = (props: CreateProps) => {\n    const classes = useStyles();\n    const { identity } = useGetIdentity();\n    \n    if (!identity) return null;\n\n    const defaultValue = () => ({ \n        sales_id: identity && identity?.id, \n        due_date: new Date(), \n        status: 'Pending',\n    });\n    const transform = (data: Task) => ({\n        ...data,\n    });\n    \n    return (\n        <Create {...props} actions={false}>\n            <SimpleForm \n                component={CustomLayout} \n                redirect=\"show\"\n                initialValues={defaultValue}\n                transform={transform}\n            >\n                <TextInput \n                    source=\"text\"\n                    label=\"Task\"\n                    validate={[required()]}\n                    fullWidth\n                />\n                <DateInput\n                    source=\"due_date\"\n                    formClassName={clsx(classes.inline, 'first-child')}\n                />\n                <SelectInput\n                    source=\"status\"\n                    choices={statuses}\n                    formClassName={classes.inline}\n                />\n                <ReferenceInput\n                    source=\"sales_id\"\n                    reference=\"sales\"\n                    label=\"Account manager\"\n                    helperText={false}\n                    formClassName={classes.inline}\n                >\n                    <SelectInput\n                        optionText={(sales: any) =>\n                            `${sales.first_name} ${sales.last_name}`\n                        }\n                    />\n                </ReferenceInput>\n            </SimpleForm>\n        </Create>\n    );\n};\n\n\nconst CustomLayout = ({ children }: \n    {children: any;}) => (\n    <CardContent>\n        <Box display=\"flex\">\n            <Box paddingTop={1}>\n                <Avatar >\n                    <AssignmentTurnedInIcon />\n                </Avatar>\n            </Box>\n            <Box ml={2} flex=\"1\" maxWidth={796}>\n                {children}\n            </Box>\n        </Box>\n    </CardContent>\n);\n\nconst CustomDivider = () => (\n    <Box mb={2}>\n        <Divider />\n    </Box>\n);","/* eslint-disable import/no-anonymous-default-export */\nimport { TaskShow } from './TaskShow';\nimport { TaskList } from './TaskList';\nimport { TaskEdit } from './TaskEdit';\nimport { TaskCreate } from './TaskCreate';\nimport FormatListBulletedIcon from '@material-ui/icons/FormatListBulleted';\n\nexport default {\n    list: TaskList,\n    show: TaskShow,\n    edit: TaskEdit,\n    create: TaskCreate,\n    icon: FormatListBulletedIcon,\n};\n","import * as React from 'react';\nimport { Avatar } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport BusinessIcon from '@material-ui/icons/Business';\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\nimport clsx from 'clsx';\n\nimport { Product } from '../types';\n\nconst useStyles = makeStyles({\n    avatar: {\n        width: 60,\n        height: 60,\n        // backgroundColor: 'aliceblue',\n    },\n    img: {\n        objectFit: 'contain',\n    },\n    small: {\n        width: 20,\n        height: 20,\n    },\n    large: {\n        width: 40,\n        height: 40,\n    },\n});\n\nexport const ProductAvatar = ({\n    record,\n    size = 'large',\n}: {\n    record?: Product;\n    size?: 'small' | 'large';\n}) => {\n    const classes = useStyles();\n    if (!record) return null;\n    console.log(record.image);\n    if(!record.image) return (\n        <Avatar\n            alt={record.model}\n            className={classes.avatar}\n        >\n            <ShoppingCartIcon />\n        </Avatar>\n    )\n    return (\n        <Avatar\n            src={process.env.PUBLIC_URL + record.image}\n            alt={record.model}\n            className={classes.avatar}\n            imgProps={{ className: clsx(classes.img, classes[size]) }}\n        />\n    );\n};\n","import * as React from 'react';\nimport { useState } from 'react';\nimport { Paper, Typography, Link as MuiLink, Box, Chip } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ContactsIcon from '@material-ui/icons/AccountCircle';\nimport DealIcon from '@material-ui/icons/MonetizationOn';\nimport { linkToRecord, TextField, ReferenceField, ImageField } from 'react-admin';\nimport { Link } from 'react-router-dom';\n\nimport { ProductAvatar } from './ProductAvatar';\nimport { Product } from '../types';\n\nconst useStyles = makeStyles(theme => ({\n    paper: {\n        height: 200,\n        width: 185,\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-between',\n        padding: '1em',\n        position: 'relative',\n    },\n    identity: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    name: {\n        textAlign: 'center',\n        marginTop: theme.spacing(1),\n    },\n    family: {\n        textAlign: 'center',\n        marginTop: theme.spacing(1),\n    },\n    stats: {\n        display: 'flex',\n        justifyContent: 'space-around',\n        width: '100%',\n    },\n    singleStat: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    statIcon: {\n        marginRight: theme.spacing(1),\n    },\n    image: {\n        width: 28,\n        height: 28,\n    },\n}));\n\nexport const ProductCard = ({ record }: { record: Product }) => {\n    const classes = useStyles();\n    const [elevation, setElevation] = useState(1);\n    return (\n        <MuiLink\n            component={Link}\n            to={linkToRecord('/products', record.id, 'show')}\n            underline=\"none\"\n            onMouseEnter={() => setElevation(3)}\n            onMouseLeave={() => setElevation(1)}\n        >\n            <Paper className={classes.paper} elevation={elevation}>\n                <Box position=\"absolute\" top={10} right={10}>\n                    <ReferenceField\n                        record={record}\n                        source=\"company_id\"\n                        reference=\"companies\"\n                        link=\"show\"\n                    >\n                        <ImageField \n                            source=\"logo\" \n                            title=\"title\"\n                            classes={classes}\n                        />\n                    </ReferenceField>\n                </Box>\n                <div className={classes.identity}>\n                    <ProductAvatar record={record} />\n                    <div className={classes.name}>\n                        <Box display=\"flex\" alignItems=\"center\">\n                        <Typography variant=\"subtitle2\">\n                            {record.model}\n                        </Typography>\n                        </Box>\n                    </div>\n\n                    <div className={classes.family}>\n                        <Typography variant=\"body2\">\n                            in family{' '}\n                            <ReferenceField\n                                record={record}\n                                source=\"family_id\"\n                                reference=\"productFamilies\"\n                                link=\"show\"\n                            >\n                                <TextField source=\"name\" />\n                            </ReferenceField>\n                        </Typography>\n                    </div>\n\n                </div>\n                <div className={classes.stats}>\n                    <div className={classes.singleStat}>\n                        <ContactsIcon\n                            color=\"disabled\"\n                            className={classes.statIcon}\n                        />\n                        <div>\n                            <Typography\n                                variant=\"subtitle2\"\n                                style={{ marginBottom: -8 }}\n                            >\n                                {record.nb_notes}\n                            </Typography>\n                            <Typography variant=\"caption\" color=\"textSecondary\">\n                                {record.nb_notes > 1 ? 'notes' : 'note'}\n                            </Typography>\n                        </div>\n                    </div>\n                    <div className={classes.singleStat}>\n                        <DealIcon\n                            color=\"disabled\"\n                            className={classes.statIcon}\n                        />\n                        <div>\n                            <Typography\n                                variant=\"subtitle2\"\n                                style={{ marginBottom: -8 }}\n                            >\n                                {record.nb_properties}\n                            </Typography>\n                            <Typography variant=\"caption\" color=\"textSecondary\">\n                                {record.nb_properties > 1 ? 'properties' : 'property'}\n                            </Typography>\n                        </div>\n                    </div>\n                </div>\n            </Paper>\n        </MuiLink>\n    );\n};\n","import * as React from 'react';\nimport { Box, Paper } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useListContext, Identifier } from 'react-admin';\nimport Skeleton from '@material-ui/lab/Skeleton';\n\nimport { ProductCard } from './ProductCard';\nimport { Product } from '../types';\n\nconst useStyles = makeStyles(theme => ({\n    gridList: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        width:  '100%',\n        gap: '5px',\n    },\n    paper: {\n        height: 200,\n        width: 194,\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-between',\n        alignItems: \"center\",\n        padding: '1em',\n        backgroundColor: theme.palette.grey[200],\n    },\n}));\n\nconst times = (nbChildren: number, fn: (key: number) => any) =>\n    Array.from({ length: nbChildren }, (_, key) => fn(key));\n\nconst LoadingGridList = () => {\n    const classes = useStyles();\n    return (\n        <Box className={classes.gridList}>\n            {times(15, key => (\n                <Paper className={classes.paper} key={key} >\n                <Skeleton variant=\"circle\" width={60} height={60}  animation=\"wave\"/>\n                <Skeleton variant=\"text\" animation=\"wave\" width={110}/>\n                <Skeleton variant=\"text\" animation=\"wave\" width={150}/>\n                <Skeleton variant=\"rect\" width={180} height={40} />\n                </Paper>\n            ))}\n        </Box>\n    );\n};\n\nconst LoadedGridList = () => {\n    const { ids, data } = useListContext<Product>();\n    const classes = useStyles();\n\n    if (!ids || !data) return null;\n\n    return (\n        <Box className={classes.gridList}>\n            {ids.map((id: Identifier) => (\n                <ProductCard key={id} record={data[id]} />\n            ))}\n        </Box>\n    );\n};\n\nexport const ProductGridList = () => {\n    const { loaded, loading } = useListContext();\n    return loading ? <LoadingGridList /> : <LoadedGridList /> ;\n};\n","/* eslint-disable import/no-anonymous-default-export */\nimport * as React from 'react';\nimport {\n    FilterList,\n    FilterLiveSearch,\n    FilterListItem,\n    useGetIdentity,\n    useGetList,\n} from 'react-admin';\nimport { Box, Chip } from '@material-ui/core';\nimport CategoryIcon from '@material-ui/icons/Category';\n\nimport { ProductFamily } from '../types';\n\nexport const ProductListFilter = () => {\n    const { identity } = useGetIdentity();\n    const { data: familyData, ids: familyIds } = useGetList<ProductFamily>(\n        'productFamilies',\n        { page: 1, perPage: 10 },\n        { field: 'name', order: 'ASC' }\n    );\n    return (\n        <Box width=\"15em\" order=\"-1\" marginRight=\"1em\" mb={1}>\n            <FilterLiveSearch />\n\n            <FilterList label=\"Families\" icon={<CategoryIcon />}>\n                {familyIds &&\n                    familyData &&\n                    familyIds.map(id => (\n                        <FilterListItem\n                            key={id}\n                            label={<Chip label={familyData[id].name} size=\"small\"/>}\n                            value={{ family_id: id }}\n                        />\n                    ))}\n            </FilterList>\n        </Box>\n    );\n};\n","import * as React from 'react';\nimport {\n    List,\n    ListProps,\n    TopToolbar,\n    ExportButton,\n    CreateButton,\n    Pagination,\n    useGetIdentity,\n    ListActionsProps,\n} from 'react-admin';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { ProductGridList } from './ProductGridList';\nimport { ProductListFilter } from './ProductListFilter';\nimport { ImportButton } from 'react-admin-import-csv';\n\nexport const ProductList = (props: ListProps) => {\n    const { identity } = useGetIdentity();\n    return identity ? (\n        <List\n            {...props}\n            actions={<ProductListActions />}\n            aside={<ProductListFilter />}\n            filterDefaultValues={{ }}\n            pagination={<Pagination rowsPerPageOptions={[15, 25, 50, 100]} />}\n            perPage={25}\n            sort={{ field: 'model', order: 'ASC' }}\n            component=\"div\"\n        >\n            <ProductGridList />\n        </List>\n    ) : null;\n};\n\nconst useActionStyles = makeStyles(theme => ({\n    createButton: {\n        marginLeft: theme.spacing(2),\n    },\n}));\n\nconst ProductListActions = (props: ListActionsProps) => {\n    const classes = useActionStyles();\n    return (\n        <TopToolbar>\n            <ExportButton />\n            <ImportButton {...props} />\n            <CreateButton\n                basePath=\"/products\"\n                variant=\"contained\"\n                label=\"New Product\"\n                className={classes.createButton}\n            />\n        </TopToolbar>\n    );\n};\n","import Reacct, { useState, FormEvent } from 'react';\nimport {\n    useCreateSuggestionContext,\n    useCreate,\n    ReferenceInput,\n} from 'react-admin';\nimport {\n    Dialog, \n    DialogContent,\n    DialogActions,\n    TextField,\n    Button,\n    DialogTitle,\n } from '@material-ui/core';\n import { makeStyles } from '@material-ui/core/styles';\n import { FamilyCategory } from '../types';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        display: 'flex',\n        flexDirection: 'column',\n    },\n}));\n\nexport const CreatePropertyType = () => {\n    const classes = useStyles();\n    const { filter, onCancel, onCreate } = useCreateSuggestionContext();\n    const [name, setName] = useState(filter || '');\n    const [unit, setUnit] = useState('');\n    const [synonyms, setSynonyms] = useState('');\n    const [create] = useCreate('propertyTypes');\n\n    const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        create(\n            {\n                payload: {\n                    data: {\n                        name: name,\n                        unit: unit,\n                        synonyms: synonyms,\n                    },\n                },\n            },\n            {\n                onSuccess: ({ data }: {data: FamilyCategory;}) => {\n                    setName('');\n                    setUnit('');\n                    setSynonyms('');\n                    onCreate(data);\n                },\n            }\n        );\n    };\n\n    return (\n        <Dialog open onClose={onCancel}>\n            <DialogTitle>Add new Product Property Type</DialogTitle>\n            <form onSubmit={handleSubmit}>\n                <DialogContent>\n                    <div className={classes.root}>\n                        <TextField\n                            label=\"New type name\"\n                            value={name}\n                            onChange={event => setName(event.target.value)}\n                            autoFocus\n                            required\n                        />\n                        <TextField\n                            label=\"Unit\"\n                            value={unit}\n                            onChange={event => setUnit(event.target.value)}\n                        />\n                        <TextField\n                            label=\"Commma separated synonyms\"\n                            value={synonyms}\n                            onChange={event => setSynonyms(event.target.value)}\n                        />\n                    </div>\n                </DialogContent>\n                <DialogActions>\n                    <Button type=\"submit\" disabled={!name}>Add</Button>\n                    <Button onClick={onCancel}>Cancel</Button>\n                </DialogActions>\n            </form>\n        </Dialog>\n    );\n};","import * as React from 'react';\nimport {\n    Create,\n    CreateProps,\n    ReferenceInput,\n    TabbedForm,\n    TextInput,\n    FormTab,\n    required,\n    AutocompleteInput,\n    useGetIdentity,\n    ArrayInput,\n    SimpleFormIterator,\n    ReferenceArrayInput,\n} from 'react-admin';\nimport RichTextInput from 'ra-input-rich-text';\nimport { Box, CardContent, Divider, Avatar, useTheme } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport BusinessIcon from '@material-ui/icons/Business';\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\nimport clsx from 'clsx';\nimport { CreatePropertyType } from './CreatePropertyType';\n\n\nconst useStyles = makeStyles(theme => ({\n    inline: {\n        display: 'inline-block',\n        marginLeft: '1em',\n        '&.first-child': {\n            marginLeft: 0,\n        },\n    },\n    propertyContainer: {\n        display: 'flex',\n        gap: theme.spacing(1),\n        minWidth: '500px',\n    },\n}));\n\nexport const ProductCreate = (props: CreateProps) => {\n    const classes = useStyles();\n    const { identity } = useGetIdentity();\n    const theme = useTheme();\n\n    const defaultValue = () => ({ });\n\n    return (\n        <Create {...props} actions={false} >\n            <TabbedForm>\n                <FormTab label=\"General\">\n                    <ReferenceInput \n                        label=\"Comapny\" \n                        source=\"company_id\" \n                        reference=\"companies\"\n                        fullWidth\n                    >\n                        <AutocompleteInput optionText=\"name\" />\n                    </ReferenceInput>\n                    <ReferenceInput \n                        label=\"Product Family\" \n                        source=\"family_id\" \n                        reference=\"productFamilies\"\n                        fullWidth\n                    >\n                        <AutocompleteInput optionText=\"name\" />\n                    </ReferenceInput>\n                    <TextInput source=\"model\" validate={required()} fullWidth />\n                    <TextInput source=\"code\" fullWidth />\n                    <TextInput source=\"website\" fullWidth />\n                    <TextInput source=\"image\" fullWidth />\n                    <TextInput \n                        source=\"description\"\n                        multiline\n                        rows={3} \n                        fullWidth \n                    />\n                </FormTab>\n                <FormTab label=\"Properties\">\n                    <ArrayInput\n                        source=\"properties\"\n                    >\n                        <SimpleFormIterator>\n                                <ReferenceInput\n                                    source=\"type_id\"\n                                    reference=\"propertyTypes\"\n                                    label=\"Type\"\n                                >\n                                    <AutocompleteInput \n                                        optionText=\"name\" \n                                        create={<CreatePropertyType />}\n                                    />\n                                </ReferenceInput>\n                                <TextInput source=\"property_value\" label=\"Value\"/>\n                                <TextInput source=\"condition\"  label=\"Condition\"/>\n                        </SimpleFormIterator>\n                    </ArrayInput>\n                </FormTab>\n            </TabbedForm>\n        </Create>\n    );\n};\n\nconst CustomLayout = ({ children }: \n    {children: any;}) => (\n    <CardContent>\n        <Box display=\"flex\">\n            <Box paddingTop={1}>\n                <Avatar>\n                    <ShoppingCartIcon />\n                </Avatar>\n            </Box>\n            <Box ml={2} flex=\"1\" maxWidth=\"80%\">\n                {children}\n            </Box>\n        </Box>\n    </CardContent>\n);\n\nconst CustomDivider = () => (\n    <Box mb={2}>\n        <Divider />\n    </Box>\n);\n","import * as React from 'react';\nimport { Avatar } from '@material-ui/core';\nimport BusinessIcon from '@material-ui/icons/Business';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\nimport { Product } from '../types';\n\nconst useStyles = makeStyles({\n    image: {\n        objectFit: 'contain',\n    },\n});\n\nconst sizeInPixel = {\n    medium: 42,\n    small: 20,\n};\n\nexport const ProductImageField = ({\n    record,\n    source,\n    size = 'medium',\n}: {\n    record?: Product;\n    source?: string;\n    size?: 'small' | 'medium';\n}) => {\n    const classes = useStyles();\n    if (!record) return null;\n    if(!record.image) return (\n        <Avatar>\n            <ShoppingCartIcon />\n        </Avatar>\n    )\n    return (\n        <img\n            src={process.env.PUBLIC_URL + record.image}\n            alt={record.model}\n            title={record.model}\n            width={sizeInPixel[size]}\n            height={sizeInPixel[size]}\n            className={classes.image}\n        />\n    );\n};\n","import * as React from 'react';\nimport {\n    TextField,\n    DateField,\n    FunctionField,\n    ReferenceField,\n    EditButton,\n    DeleteButton,\n    ShowButton,\n} from 'react-admin';\nimport { Box, Typography, Divider, Link } from '@material-ui/core';\nimport OpenInBrowserIcon from '@material-ui/icons/OpenInBrowser';\n\nimport { Product, Sale } from '../types';\n\nexport const ProductAside = ({\n    record,\n    link = 'edit',\n}: {\n    record?: Product;\n    link?: string;\n}) =>\n    record ? (\n        <Box ml={4} width={250} minWidth={250}>\n            <Box textAlign=\"center\" mb={2}>\n                {link === 'edit' ? (\n                    <EditButton\n                        basePath=\"/products\"\n                        record={record}\n                        label=\"Edit Product\"\n                    />\n                ) : (\n                    <ShowButton\n                        basePath=\"/products\"\n                        record={record}\n                        label=\"Show Product\"\n                    />\n                )}\n            </Box>\n\n            <Typography variant=\"subtitle2\">Product info</Typography>\n            <Divider />\n\n            <Box mt={1} display=\"flex\" gridGap={2}>\n                Company: \n                <ReferenceField\n                    record={record}\n                    source=\"company_id\"\n                    reference=\"companies\"\n                    link=\"show\"\n                >\n                    <TextField source=\"name\" />\n                </ReferenceField>\n            </Box>\n\n            <Box mt={1} display=\"flex\" gridGap={2}>\n                Family: \n                <ReferenceField\n                    record={record}\n                    source=\"family_id\"\n                    reference=\"productFamilies\"\n                    link=\"show\"\n                >\n                    <TextField source=\"name\" />\n                </ReferenceField>\n            </Box>\n\n            <Box mt={1}>\n                Code: <TextField source=\"code\" record={record} />\n            </Box>\n            {record.website && (\n                <Box mt={1}>\n                    Website: <Link href={record.website} target=\"_blank\" rel=\"noreferrer\">Link</Link>\n                </Box>\n            )}\n\n            <Box mt={3}>\n                <Typography variant=\"subtitle2\">Description</Typography>\n                <Divider />\n\n                <Box mt={1}>\n                    <TextField source=\"description\" />\n                </Box>\n\n            </Box>\n        </Box>\n    ) : null;\n","import * as React from 'react';\nimport { useState, ChangeEvent } from 'react';\nimport {\n    ShowBase,\n    ShowProps,\n    EditButton,\n    TextField,\n    ReferenceManyField,\n    SelectField,\n    ReferenceField,\n    ImageField,\n    Datagrid,\n    useShowContext,\n    useRecordContext,\n    useListContext,\n} from 'react-admin';\nimport {\n    Avatar as MuiAvatar,\n    Box,\n    Button,\n    Card,\n    CardContent,\n    Typography,\n    List,\n    ListItem,\n    ListItemAvatar,\n    ListItemText,\n    ListItemSecondaryAction,\n    Tabs,\n    Tab,\n    Chip,\n    Divider,\n} from '@material-ui/core';\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { NotesIterator } from '../notes';\n\n\nimport { ProductImageField } from './ProductImageField';\nimport { ProductAside } from './ProductAside';\nimport { Product, ProductPrperty } from '../types';\n\nexport const ProductShow = (props: ShowProps) => (\n    <ShowBase {...props}>\n        <ProductShowContent />\n    </ShowBase>\n);\n\nconst ProductShowContent = () => {\n    const { record, loaded } = useShowContext<Product>();\n    const [value, setValue] = useState(0);\n    const handleChange = (event: ChangeEvent<{}>, newValue: number) => {\n        setValue(newValue);\n    };\n    if (!loaded || !record) return null;\n    return (\n        <Box mt={2} display=\"flex\">\n            <Box flex=\"1\">\n                <Card>\n                    <CardContent>\n                        <Box display=\"flex\" mb={1}>\n                            <ProductImageField record={record as any} />\n                            <Box ml={2} flex=\"1\">\n                                <Box display=\"flex\" gridGap={4}>\n                                    <Typography variant=\"h5\">{record.model}</Typography>\n                                </Box>\n                            </Box>\n                        </Box>\n                        <Tabs\n                            value={value}\n                            indicatorColor=\"primary\"\n                            textColor=\"primary\"\n                            onChange={handleChange}\n                        >\n                            <Tab\n                                label={\n                                    record.nb_notes > 1\n                                        ? `${record.nb_notes} Notes`\n                                        : `${record.nb_notes} Note`\n                                }\n                            />\n                            <Tab\n                                label={\n                                    record.nb_properties > 1\n                                        ? `${record.nb_properties} Properties`\n                                        : `${record.nb_properties} Property`\n                                }\n                            />\n                        </Tabs>\n                        <Divider />\n                        <TabPanel value={value} index={0}>\n                            <ReferenceManyField\n                                reference=\"productNotes\"\n                                target=\"product_id\"\n                            >\n                                 <NotesIterator reference=\"products\" />\n                            </ReferenceManyField>\n                        </TabPanel>\n                        <TabPanel value={value} index={1}>\n                            <ReferenceManyField reference=\"productProperties\" target=\"product_id\" addLabel={false}>\n                                <Datagrid>\n                                    <ReferenceField\n                                            source=\"type_id\"\n                                            reference=\"propertyTypes\"\n                                            link={false}\n                                        >\n                                        <TextField source=\"name\" />\n                                    </ReferenceField>\n                                    <TextField source=\"property_value\" />\n                                    <ReferenceField\n                                            source=\"type_id\"\n                                            reference=\"propertyTypes\"\n                                            link={false}\n                                        >\n                                        <TextField source=\"unit\" />\n                                    </ReferenceField>\n                                    <TextField source=\"condition\" />\n    \n                                </Datagrid>\n                            </ReferenceManyField>\n                        </TabPanel>\n                    </CardContent>\n                </Card>\n            </Box>\n            <ProductAside record={record} />\n        </Box>\n    );\n};\n\ninterface TabPanelProps {\n    children?: React.ReactNode;\n    index: any;\n    value: any;\n}\n\nconst TabPanel = (props: TabPanelProps) => {\n    const { children, value, index, ...other } = props;\n\n    return (\n        <div\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`wrapped-tabpanel-${index}`}\n            aria-labelledby={`wrapped-tab-${index}`}\n            {...other}\n        >\n            {children}\n        </div>\n    );\n};\n\nconst ProductPrpertiesIterator = () => {\n    const { data, ids, loaded } = useListContext<ProductPrperty>();\n    const record = useRecordContext();\n\n    const now = Date.now();\n    if (!loaded) return null;\n    return (\n        <Box>\n            <List>\n                {ids.map(id => {\n                    const productProperty = data[id];\n                    return (\n                        <ListItem\n                            button\n                            key={id}\n                            component={RouterLink}\n                            to={`/productProperties/${id}/show`}\n                        >\n                            {/* <ListItemAvatar>\n                                <Avatar record={productProperty} />\n                            </ListItemAvatar>\n                            <ListItemText\n                                primary={`${productProperty.first_name} ${productProperty.last_name}`}\n                                secondary={\n                                    <>\n                                        {productProperty.title}{' '}\n                                        {productProperty.nb_notes &&\n                                        `- ${productProperty.nb_notes} notes `}\n                                    </>\n                                }\n                            />\n                            <ListItemSecondaryAction>\n                                <Typography variant=\"body2\" color=\"textSecondary\">\n                                    last activity{' '}\n                                    {formatDistance(\n                                        new Date(productProperty.last_seen),\n                                        now\n                                    )}{' '}\n                                    ago <Status status={productProperty.status} />\n                                </Typography>\n                            </ListItemSecondaryAction> */}\n                        </ListItem>\n                    );\n                })}\n            </List>\n            <Box textAlign=\"center\" mt={1}>\n                {/* <CreateRelatedProductPrpertyButton record={record} /> */}\n            </Box>\n        </Box>\n    );\n};\n\n// const CreateRelatedProductPrpertyButton = ({ record }: any) => (\n//     <Button\n//         component={RouterLink}\n//         to={{\n//             pathname: '/productProperties/create',\n//             state: { record: { product_id: record.id } },\n//         }}\n//         color=\"primary\"\n//         variant=\"contained\"\n//         size=\"small\"\n//         startIcon={<PersonAddIcon />}\n//     >\n//         Add property\n//     </Button>\n// );\n","import * as React from 'react';\nimport {\n    Edit,\n    EditProps,\n    ReferenceInput,\n    TabbedForm,\n    FormTab,\n    TextInput,\n    SelectInput,\n    useRecordContext,\n    AutocompleteInput,\n    required,\n    ArrayInput,\n    SimpleFormIterator,\n} from 'react-admin';\nimport { Box, CardContent, Divider } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\n\nimport { ProductAside } from './ProductAside';\nimport { ProductImageField } from './ProductImageField';\nimport { CreatePropertyType } from './CreatePropertyType';\n\nconst useStyles = makeStyles({\n    inline: {\n        display: 'inline-block',\n        marginLeft: '1em',\n        '&.first-child': {\n            marginLeft: 0,\n        },\n    },\n});\n\nconst renderDistributor = (choice: any) => {\n\n}\n\nexport const ProductEdit = (props: EditProps) => {\n    const classes = useStyles();\n    return (\n        <Edit \n            {...props} \n            aside={<ProductAside link=\"show\" />} \n            actions={false}\n        >\n            <TabbedForm\n                redirect=\"show\"\n            >\n                <FormTab label=\"General\">\n                    <ReferenceInput \n                        label=\"Comapny\" \n                        source=\"company_id\" \n                        reference=\"companies\"\n                        fullWidth\n                    >\n                        <AutocompleteInput optionText=\"name\" />\n                    </ReferenceInput>\n                    <ReferenceInput \n                        label=\"Product Family\" \n                        source=\"family_id\" \n                        reference=\"productFamilies\"\n                        fullWidth\n                    >\n                        <AutocompleteInput optionText=\"name\" />\n                    </ReferenceInput>\n                    <TextInput source=\"model\" validate={required()} fullWidth />\n                    <TextInput source=\"code\" fullWidth />\n                    <TextInput source=\"website\" fullWidth />\n                    <TextInput source=\"image\" fullWidth />\n                    <TextInput \n                        source=\"description\"\n                        multiline\n                        rows={3} \n                        fullWidth \n                    />\n                </FormTab>\n                <FormTab label=\"Properties\">\n                    <ArrayInput\n                        source=\"properties\"\n                    >\n                        <SimpleFormIterator>\n                                <ReferenceInput\n                                    source=\"type_id\"\n                                    reference=\"propertyTypes\"\n                                    label=\"Type\"\n                                >\n                                    <AutocompleteInput \n                                        optionText=\"name\" \n                                        create={<CreatePropertyType />}\n                                    />\n                                </ReferenceInput>\n                                <TextInput source=\"property_value\" label=\"Value\"/>\n                                <TextInput source=\"condition\"  label=\"Condition\"/>\n                        </SimpleFormIterator>\n                    </ArrayInput>\n                </FormTab>\n            </TabbedForm>\n        </Edit>\n    );\n};\n\nconst CustomLayout = (props: any) => {\n    const record = useRecordContext(props);\n    return (\n        <CardContent>\n            <Box display=\"flex\">\n                <ProductImageField record={record as any} />\n                <Box ml={2} flex=\"1\" maxWidth={796}>\n                    {props.children}\n                </Box>\n            </Box>\n        </CardContent>\n    );\n};\n\nconst CustomDivider = () => (\n    <Box mb={2}>\n        <Divider />\n    </Box>\n);\n","/* eslint-disable import/no-anonymous-default-export */\nimport { ProductList } from './ProductList';\nimport { ProductCreate } from './ProductCreate';\nimport { ProductShow } from './ProductShow';\nimport { ProductEdit } from './ProductEdit';\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\n\nexport default {\n    list: ProductList,\n    create: ProductCreate,\n    edit: ProductEdit,\n    show: ProductShow,\n    icon: FiberManualRecordIcon,\n};\n","import * as React from 'react';\nimport { Avatar as MuiAvatar } from '@material-ui/core';\n\nimport { ProductFamily } from '../types';\n\nexport const Avatar = ({ record }: { record: ProductFamily }) => (\n    <MuiAvatar src={record.image}>\n        {record.name}\n    </MuiAvatar>\n);\n","/* eslint-disable import/no-anonymous-default-export */\nimport * as React from 'react';\nimport {\n    FilterList,\n    FilterLiveSearch,\n    FilterListItem,\n    useGetIdentity,\n    useGetList,\n} from 'react-admin';\nimport { Box, Chip } from '@material-ui/core';\n\nexport const ProductFamilyListFilter = () => {\n\n    return (\n        <Box width=\"15em\" order=\"-1\" marginRight=\"1em\">\n            <FilterLiveSearch />\n        </Box>\n    );\n};\n","/* eslint-disable import/no-anonymous-default-export */\nimport * as React from 'react';\nimport {\n    List as RaList,\n    ListProps,\n    SimpleListLoading,\n    ReferenceField,\n    TextField,\n    useListContext,\n    ExportButton,\n    SortButton,\n    TopToolbar,\n    CreateButton,\n    Pagination,\n    useGetIdentity,\n} from 'react-admin';\nimport {\n    List,\n    ListItem,\n    ListItemAvatar,\n    ListItemIcon,\n    ListItemSecondaryAction,\n    ListItemText,\n    Checkbox,\n    Typography,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Link } from 'react-router-dom';\nimport { formatDistance } from 'date-fns';\n\nimport { Avatar } from './Avatar';\nimport { Status } from '../misc/Status';\nimport { TagsList } from '../tags/TagsList';\nimport { ProductFamilyListFilter } from './ProductFamilyListFilter';\nimport { ProductFamily } from '../types';\n\nconst ProductFamilyListContent = () => {\n    const { data, ids, loaded, onToggleItem, selectedIds } = useListContext<\n        ProductFamily\n    >();\n    const now = Date.now();\n    if (loaded === false) {\n        return <SimpleListLoading hasLeftAvatarOrIcon hasSecondaryText />;\n    }\n\n    return (\n        <List>\n            {ids.map(id => {\n                const record = data[id];\n                return (\n                    <ListItem\n                        button\n                        key={id}\n                        component={Link}\n                        to={`/productFamilies/${id}/show`}\n                    >\n                        <ListItemIcon>\n                            <Checkbox\n                                edge=\"start\"\n                                checked={selectedIds.includes(id)}\n                                tabIndex={-1}\n                                disableRipple\n                                onClick={e => {\n                                    e.stopPropagation();\n                                    onToggleItem(id);\n                                }}\n                            />\n                        </ListItemIcon>\n                        <ListItemAvatar>\n                            <Avatar record={record} />\n                        </ListItemAvatar>\n                        <ListItemText\n                            primary={`${record.name}`}\n                            secondary={\n                                <>\n                                    {record.name} in{' '}\n                                    <ReferenceField\n                                        record={record}\n                                        source=\"category_id\"\n                                        reference=\"familyCategories\"\n                                        basePath=\"/familyCategories\"\n                                        link={false}\n                                    >\n                                        <TextField source=\"name\" />\n                                    </ReferenceField>\n                                </>\n                            }\n                        />\n                        <ListItemSecondaryAction>\n\n                        </ListItemSecondaryAction>\n                    </ListItem>\n                );\n            })}\n        </List>\n    );\n};\n\nconst useActionStyles = makeStyles(theme => ({\n    createButton: {\n        marginLeft: theme.spacing(2),\n    },\n}));\nconst ProductFamilyListActions = () => {\n    const classes = useActionStyles();\n    return (\n        <TopToolbar>\n            <SortButton fields={['last_name', 'first_name', 'last_seen']} />\n            <ExportButton />\n            <CreateButton\n                basePath=\"/productFamilies\"\n                variant=\"contained\"\n                label=\"Add New\"\n                className={classes.createButton}\n            />\n        </TopToolbar>\n    );\n};\n\nexport const ProductFamilyList = (props: ListProps) => {\n    const { identity } = useGetIdentity();\n    return identity ? (\n        <RaList\n            {...props}\n            actions={<ProductFamilyListActions />}\n            aside={<ProductFamilyListFilter />}\n            perPage={25}\n            pagination={<Pagination rowsPerPageOptions={[10, 25, 50, 100]} />}\n            filterDefaultValues={{  }}\n            // sort={{  }}\n        >\n            <ProductFamilyListContent />\n        </RaList>\n    ) : null;\n};\n","import Reacct, { useState, FormEvent } from 'react';\nimport {\n    useCreateSuggestionContext,\n    useCreate,\n} from 'react-admin';\nimport {\n    Dialog, \n    DialogContent,\n    DialogActions,\n    TextField,\n    Button,\n } from '@material-ui/core';\n import { FamilyCategory } from '../types';\n\nexport const CreateCategory = () => {\n    const { filter, onCancel, onCreate } = useCreateSuggestionContext();\n    const [name, setValue] = useState(filter || '');\n    const [create] = useCreate('familyCategories');\n\n    const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        create(\n            {\n                payload: {\n                    data: {\n                        name: name,\n                    },\n                },\n            },\n            {\n                onSuccess: ({ data }: {data: FamilyCategory;}) => {\n                    setValue('');\n                    onCreate(data);\n                },\n            }\n        );\n    };\n\n    return (\n        <Dialog open onClose={onCancel}>\n            <form onSubmit={handleSubmit}>\n                <DialogContent>\n                    <TextField\n                        label=\"New category name\"\n                        value={name}\n                        onChange={event => setValue(event.target.value)}\n                        autoFocus\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button type=\"submit\">Save</Button>\n                    <Button onClick={onCancel}>Cancel</Button>\n                </DialogActions>\n            </form>\n        </Dialog>\n    );\n};","import Reacct, { useState, FormEvent } from 'react';\nimport {\n    Create,\n    CreateProps,\n    TextInput,\n    ReferenceInput,\n    SelectInput,\n    AutocompleteInput,\n    BooleanInput,\n    SimpleForm,\n    Toolbar,\n    required,\n    useGetIdentity,\n    useCreateContext,\n    useCreateSuggestionContext,\n    useCreate,\n} from 'react-admin';\nimport { \n    Card, \n    CardContent, \n    Divider, \n    Box, \n    Dialog, \n    DialogContent,\n    DialogActions,\n    TextField,\n    Button,\n } from '@material-ui/core';\nimport CategoryIcon from '@material-ui/icons/Category';\nimport { makeStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\nimport { CreateCategory } from './CreateCategory';\n\nimport { ProductFamily } from '../types';\n\nconst useStyles = makeStyles({\n    inline: {\n        display: 'inline-block',\n        marginLeft: '1em',\n        '&.first-child': {\n            marginLeft: 0,\n        },\n    },\n});\n\n\nexport const ProductFamilyCreate = (props: CreateProps) => {\n    const classes = useStyles();\n\n    const contactDefaultValue = () => ({ });\n    const transform = (data: ProductFamily) => ({\n        ...data,\n    });\n    \n    return (\n        <Create {...props} actions={false}>\n            <SimpleForm \n                component={CustomLayout} \n                redirect=\"show\"\n                initialValues={contactDefaultValue}\n                transform={transform}\n            >\n                <ReferenceInput\n                    source=\"category_id\"\n                    reference=\"familyCategories\"\n                    fullWidth\n                >\n                    <AutocompleteInput \n                        optionText=\"name\"\n                        create={<CreateCategory />}\n                    />\n                </ReferenceInput>\n                <TextInput source=\"name\" fullWidth />\n                <TextInput source=\"website\" fullWidth />\n                <TextInput source=\"image\" fullWidth />\n                <TextInput \n                    source=\"description\"\n                    multiline\n                    rows={3} \n                    fullWidth \n                />\n            </SimpleForm>\n        </Create>\n    );\n};\n\n\nconst CustomLayout = ({ children }: \n    {children: any;}) => (\n    <CardContent>\n        <Box display=\"flex\">\n            <Box paddingTop={1}>\n                <CategoryIcon />\n            </Box>\n            <Box ml={2} flex=\"1\" maxWidth={796}>\n                {children}\n            </Box>\n        </Box>\n    </CardContent>\n);\n\nconst CustomDivider = () => (\n    <Box mb={2}>\n        <Divider />\n    </Box>\n);\n\n","import * as React from 'react';\nimport {\n    TextField,\n    EmailField,\n    DateField,\n    ReferenceManyField,\n    EditButton,\n    ShowButton,\n    useListContext,\n    ReferenceField,\n    FunctionField,\n    ListButton,\n} from 'react-admin';\nimport { \n    Box, \n    Typography, \n    Divider, \n    List, \n    ListItem,\n    Link,\n } from '@material-ui/core';\n\nimport { ProductFamily, Sale } from '../types';\n\nexport const ProductFamilyAside = ({\n    record,\n    link = 'edit',\n}: {\n    record?: ProductFamily;\n    link?: string;\n}) =>\n    record ? (\n        <Box ml={4} width={250} minWidth={250}>\n            <Box textAlign=\"center\" mb={2}>\n                {link === 'edit' ? (\n                    <Box>\n                        <EditButton\n                            basePath=\"/productfamilies\"\n                            record={record}\n                        />\n                        <ListButton \n                            basePath=\"/productFamilies\"\n                        />\n                    </Box>\n                ) : (\n                    <ShowButton\n                        basePath=\"/productfamilies\"\n                        record={record}\n                    />\n                )}\n            </Box>\n\n            <Typography variant=\"subtitle2\">Family info</Typography>\n            <Divider />\n            <Box mt={1} display=\"flex\" gridGap={2}>\n                <Typography>Category:</Typography>\n                <ReferenceField\n                    record={record}\n                    source=\"category_id\"\n                    reference=\"familyCategories\"\n                    link=\"show\"\n                >\n                    <TextField source=\"name\" />\n                </ReferenceField>\n            </Box>\n\n            {record.website && (\n                <Box mt={1}>\n                    Website: <Link href={record.website} target=\"_blank\" rel=\"noreferrer\">Link</Link>\n                </Box>\n            )}\n            \n        </Box>\n) : null;\n","import * as React from 'react';\nimport {\n    EditBase,\n    EditProps,\n    TextInput,\n    ReferenceInput,\n    AutocompleteInput,\n    BooleanInput,\n    FormWithRedirect,\n    Toolbar,\n    useEditContext,\n} from 'react-admin';\nimport { Card, CardContent, Divider, Box } from '@material-ui/core';\nimport omit from 'lodash/omit';\n\nimport { Avatar } from './Avatar';\nimport { ProductFamilyAside } from './ProductFamilyAside';\nimport { ProductFamily } from '../types';\nimport { CreateCategory } from './CreateCategory';\n\nconst Spacer = () => <Box width={20} component=\"span\" />;\n\nconst ProductFamilyEditContent = () => {\n    const { record, loaded, save } = useEditContext<ProductFamily>();\n    if (!loaded || !record) return null;\n    return (\n        <Box mt={2} display=\"flex\">\n            <Box flex=\"1\">\n                <FormWithRedirect\n                    record={record}\n                    redirect=\"show\"\n                    save={save}\n                    render={formProps => (\n                        <Card>\n                            <CardContent>\n                                <Box>\n                                    <Box display=\"flex\">\n                                        <Box mr={2}>\n                                            <Avatar record={record} />\n                                        </Box>\n                                        <Box flex={1}>\n                                            <ReferenceInput\n                                                source=\"category_id\"\n                                                reference=\"familyCategories\"\n                                                fullWidth\n                                            >\n                                                <AutocompleteInput \n                                                    optionText=\"name\"\n                                                    create={<CreateCategory />}\n                                                />\n                                            </ReferenceInput>\n                                            <TextInput source=\"name\" fullWidth />\n                                            <TextInput source=\"website\" fullWidth />\n                                            <TextInput source=\"image\" fullWidth />\n                                            <TextInput \n                                                source=\"description\"\n                                                multiline\n                                                rows={3} \n                                                fullWidth \n                                            />\n                                        </Box>\n                                        \n                                    </Box>\n                                </Box>\n                            </CardContent>\n                            <Toolbar\n                                {...omit(formProps, [\n                                    // FIXME Not super user friendly way to remove warnings\n                                    'dirtyFields',\n                                    'dirtyFieldsSinceLastSubmit',\n                                    'dirtySinceLastSubmit',\n                                    'hasSubmitErrors',\n                                    'hasValidationErrors',\n                                    'initialValues',\n                                    'modifiedSinceLastSubmit',\n                                    'submitError',\n                                    'submitErrors',\n                                    'submitFailed',\n                                    'submitSucceeded',\n                                    'submitting',\n                                    'valid',\n                                ])}\n                            />\n                        </Card>\n                    )}\n                />\n            </Box>\n            <ProductFamilyAside record={record} link=\"show\" />\n        </Box>\n    );\n};\n\nexport const ProductFamilyEdit = (props: EditProps) => (\n    <EditBase {...props}>\n        <ProductFamilyEditContent />\n    </EditBase>\n);\n","import * as React from 'react';\nimport {\n    ShowBase,\n    ShowProps,\n    TextField,\n    ReferenceField,\n    ReferenceManyField,\n    useShowContext,\n} from 'react-admin';\nimport { Box, Card, CardContent, Typography } from '@material-ui/core';\n\nimport { Avatar } from './Avatar';\nimport { ProductFamilyAside } from './ProductFamilyAside';\nimport { LogoField } from '../companies/LogoField';\nimport { NotesIterator } from '../notes';\nimport { ProductFamily } from '../types';\nimport { ProductGridList } from '../products/ProductGridList';\n\nexport const ProductFamilyShow = (props: ShowProps) => (\n    <ShowBase {...props}>\n        <ProductFamilyShowContent />\n    </ShowBase>\n);\n\nconst ProductFamilyShowContent = () => {\n    const { record, loaded } = useShowContext<ProductFamily>();\n    if (!loaded || !record) return null;\n    return (\n        <Box mt={2} display=\"flex\">\n            <Box flex=\"1\">\n                <Card>\n                    <CardContent>\n                        <Box display=\"flex\">\n                            <Avatar record={record} />\n                            <Box ml={2} flex=\"1\">\n                                <Typography variant=\"h5\">\n                                    {record.name}\n                                </Typography>\n                                <Typography variant=\"body2\">\n                                    {record.title} in{' '}\n                                    <ReferenceField\n                                        source=\"category_id\"\n                                        reference=\"familyCategories\"\n                                        link=\"show\"\n                                    >\n                                        <TextField source=\"name\" />\n                                    </ReferenceField>\n                                </Typography>\n                            </Box>\n                        </Box>\n                        <Box mt={2} p={1}>\n                            <ReferenceManyField\n                                reference=\"products\"\n                                target=\"family_id\"\n                                label=\"Products\"\n                            >\n                                <ProductGridList />\n                            </ReferenceManyField>\n                        </Box>\n                    </CardContent>\n                </Card>\n            </Box>\n            <ProductFamilyAside record={record} />\n        </Box>\n    );\n};\n","/* eslint-disable import/no-anonymous-default-export */\nimport { ProductFamilyList } from './ProductFamilyList';\nimport { ProductFamilyCreate } from './ProductFamilyCreate';\nimport { ProductFamilyEdit } from './ProductFamilyEdit';\nimport { ProductFamilyShow } from './ProductFamilyShow';\nimport CategoryIcon from '@material-ui/icons/Category';\n\nexport default {\n    list: ProductFamilyList,\n    create: ProductFamilyCreate,\n    edit: ProductFamilyEdit,\n    show: ProductFamilyShow,\n    icon: CategoryIcon,\n};\n","import * as React from 'react';\nimport { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport LabelIcon from '@material-ui/icons/Label';\nimport { makeStyles } from '@material-ui/core/styles';\nimport classnames from 'classnames';\nimport {\n    useTranslate,\n    DashboardMenuItem,\n    MenuItemLink,\n    MenuProps,\n    ReduxState,\n} from 'react-admin';\n\n\nimport SubMenu from './SubMenu';\nimport { AppState } from '../types';\n\nimport companies from '../companies';\nimport contacts from '../contacts';\nimport tasks from '../tasks';\nimport products from '../products';\nimport productFamilies from '../productFamilies';\n\n\n\ntype MenuName = 'menuCrm' | 'menuProduct' | 'menuCustomers';\n\nconst Menu = ({ dense = false }: MenuProps) => {\n    const [state, setState] = useState({\n        menuCrm: true,\n        menuProduct: true,\n        menuCustomers: true,\n    });\n    const translate = useTranslate();\n    const open = useSelector((state: ReduxState) => state.admin.ui.sidebarOpen);\n    useSelector((state: AppState) => state.theme); // force rerender on theme change\n    const classes = useStyles();\n\n    const handleToggle = (menu: MenuName) => {\n        setState(state => ({ ...state, [menu]: !state[menu] }));\n    };\n\n    return (\n        <div\n            className={classnames(classes.root, {\n                [classes.open]: open,\n                [classes.closed]: !open,\n            })}\n        >\n            {' '}\n            <DashboardMenuItem />\n            <SubMenu\n                handleToggle={() => handleToggle('menuCrm')}\n                isOpen={state.menuCrm}\n                name=\"CRM\"\n                icon={<companies.icon />}\n                dense={dense}\n            >\n                <MenuItemLink\n                    to={{\n                        pathname: '/companies',\n                        state: { _scrollToTop: true },\n                    }}\n                    primaryText=\"Companies\"\n                    leftIcon={<companies.icon />}\n                    dense={dense}\n                />\n                <MenuItemLink\n                    to={{\n                        pathname: '/contacts',\n                        state: { _scrollToTop: true },\n                    }}\n                    primaryText=\"Contacts\"\n                    leftIcon={<contacts.icon />}\n                    dense={dense}\n                />\n                <MenuItemLink\n                    to={{\n                        pathname: '/tasks',\n                        state: { _scrollToTop: true },\n                    }}\n                    primaryText=\"Taks\"\n                    leftIcon={<tasks.icon />}\n                    dense={dense}\n                />\n            </SubMenu>\n            <SubMenu\n                handleToggle={() => handleToggle('menuProduct')}\n                isOpen={state.menuProduct}\n                name=\"Products\"\n                icon={<products.icon />}\n                dense={dense}\n            >\n                <MenuItemLink\n                    to={{\n                        pathname: '/products',\n                        state: { _scrollToTop: true },\n                    }}\n                    primaryText=\"Products\"\n                    leftIcon={<products.icon />}\n                    dense={dense}\n                />\n                <MenuItemLink\n                    to={{\n                        pathname: '/productFamilies',\n                        state: { _scrollToTop: true },\n                    }}\n                    primaryText=\"Families\"\n                    leftIcon={<productFamilies.icon />}\n                    dense={dense}\n                />\n                <MenuItemLink\n                    to={{\n                        pathname: '/familyCategories',\n                        state: { _scrollToTop: true },\n                    }}\n                    primaryText=\"Categories\"\n                    leftIcon={<productFamilies.icon />}\n                    dense={dense}\n                />\n            </SubMenu>\n        </div>\n    );\n};\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n    },\n    open: {\n        width: 200,\n    },\n    closed: {\n        width: 55,\n    },\n}));\n\nexport default Menu;\n","export const darkTheme = {\n    palette: {\n        primary: {\n            main: '#90caf9',\n        },\n        secondary: {\n            main: '#FBBA72',\n        },\n        type: 'dark' as 'dark', // Switching the dark mode on is a single property value change.\n    },\n    sidebar: {\n        width: 200,\n    },\n    overrides: {\n        MuiAppBar: {\n            colorSecondary: {\n                color: '#ffffffb3',\n                backgroundColor: '#616161e6',\n            },\n        },\n        MuiButtonBase: {\n            root: {\n                '&:hover:active::after': {\n                    // recreate a static ripple color\n                    // use the currentColor to make it work both for outlined and contained buttons\n                    // but to dim the background without dimming the text,\n                    // put another element on top with a limited opacity\n                    content: '\"\"',\n                    display: 'block',\n                    width: '100%',\n                    height: '100%',\n                    position: 'absolute',\n                    top: 0,\n                    right: 0,\n                    backgroundColor: 'currentColor',\n                    opacity: 0.3,\n                    borderRadius: 'inherit',\n                },\n            },\n        },\n    },\n    props: {\n        MuiButtonBase: {\n            // disable ripple for perf reasons\n            disableRipple: true,\n        },\n    },\n};\n\nexport const lightTheme = {\n    palette: {\n        primary: {\n            main: '#4f3cc9',\n        },\n        secondary: {\n            light: '#5f5fc4',\n            main: '#283593',\n            dark: '#001064',\n            contrastText: '#fff',\n        },\n        background: {\n            default: '#fcfcfe',\n        },\n        type: 'light' as 'light',\n    },\n    shape: {\n        borderRadius: 10,\n    },\n    sidebar: {\n        width: 200,\n    },\n    overrides: {\n        RaMenuItemLink: {\n            root: {\n                borderLeft: '3px solid #fff',\n            },\n            active: {\n                borderLeft: '3px solid #4f3cc9',\n            },\n        },\n        MuiPaper: {\n            elevation1: {\n                boxShadow: 'none',\n            },\n            root: {\n                border: '1px solid #e0e0e3',\n                backgroundClip: 'padding-box',\n            },\n        },\n        MuiButton: {\n            contained: {\n                backgroundColor: '#fff',\n                color: '#4f3cc9',\n                boxShadow: 'none',\n            },\n        },\n        MuiButtonBase: {\n            root: {\n                '&:hover:active::after': {\n                    // recreate a static ripple color\n                    // use the currentColor to make it work both for outlined and contained buttons\n                    // but to dim the background without dimming the text,\n                    // put another element on top with a limited opacity\n                    content: '\"\"',\n                    display: 'block',\n                    width: '100%',\n                    height: '100%',\n                    position: 'absolute',\n                    top: 0,\n                    right: 0,\n                    backgroundColor: 'currentColor',\n                    opacity: 0.3,\n                    borderRadius: 'inherit',\n                },\n            },\n        },\n        MuiAppBar: {\n            colorSecondary: {\n                color: '#808080',\n                backgroundColor: '#fff',\n            },\n        },\n        MuiLinearProgress: {\n            colorPrimary: {\n                backgroundColor: '#f5f5f5',\n            },\n            barColorPrimary: {\n                backgroundColor: '#d7d7d7',\n            },\n        },\n        MuiFilledInput: {\n            root: {\n                backgroundColor: 'rgba(0, 0, 0, 0.04)',\n                '&$disabled': {\n                    backgroundColor: 'rgba(0, 0, 0, 0.04)',\n                },\n            },\n        },\n        MuiSnackbarContent: {\n            root: {\n                border: 'none',\n            },\n        },\n    },\n    props: {\n        MuiButtonBase: {\n            // disable ripple for perf reasons\n            disableRipple: true,\n        },\n    },\n};\n","import * as React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Layout, LayoutProps } from 'react-admin';\nimport AppBar from './AppBar';\nimport Menu from './Menu';\nimport { darkTheme, lightTheme } from './themes';\nimport { AppState } from '../types';\n\nexport default (props: LayoutProps) => {\n    const theme = useSelector((state: AppState) =>\n        state.theme === 'dark' ? darkTheme : lightTheme\n    );\n    return <Layout {...props} appBar={AppBar} menu={Menu} theme={theme} />;\n};\n","import * as React from 'react';\nimport { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Field, withTypes } from 'react-final-form';\nimport { useLocation, Link as RouterLink  } from 'react-router-dom';\n\nimport {\n    Avatar,\n    Button,\n    Card,\n    CardActions,\n    CircularProgress,\n    TextField,\n    Link,\n    Typography,\n} from '@material-ui/core';\nimport { createTheme, makeStyles } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\nimport LockIcon from '@material-ui/icons/Lock';\nimport { Notification, useTranslate, useLogin, useNotify } from 'react-admin';\n\nimport { lightTheme } from './themes';\n\nconst useStyles = makeStyles(theme => ({\n    main: {\n        display: 'flex',\n        flexDirection: 'column',\n        minHeight: '100vh',\n        alignItems: 'center',\n        justifyContent: 'flex-start',\n        backgroundImage: 'radial-gradient(circle at 50% 14em, #313264 0%, #00023b 60%, #00023b 100%)',\n        backgroundRepeat: 'no-repeat',\n        backgroundSize: 'cover',\n    },\n    card: {\n        minWidth: 300,\n        marginTop: '6em',\n    },\n    avatar: {\n        margin: '1em',\n        display: 'flex',\n        justifyContent: 'center',\n    },\n    icon: {\n        backgroundColor: theme.palette.secondary.main,\n    },\n    hint: {\n        marginTop: '1em',\n        display: 'flex',\n        justifyContent: 'center',\n        color: theme.palette.grey[500],\n    },\n    form: {\n        padding: '0 1em 1em 1em',\n    },\n    input: {\n        marginTop: '1em',\n    },\n    actions: {\n        padding: '0 1em 1em 1em',\n        display: 'flex',\n        flexDirection: 'column',\n    },\n}));\n\nconst renderInput = ({\n    meta: { touched, error } = { touched: false, error: undefined },\n    input: { ...inputProps },\n    ...props\n}) => (\n    <TextField\n        error={!!(touched && error)}\n        helperText={touched && error}\n        {...inputProps}\n        {...props}\n        fullWidth\n    />\n);\n\ninterface FormValues {\n    username?: string;\n    password?: string;\n}\n\nconst { Form } = withTypes<FormValues>();\n\nconst Login = () => {\n    const [loading, setLoading] = useState(false);\n    const translate = useTranslate();\n    const classes = useStyles();\n    const notify = useNotify();\n    const login = useLogin();\n    const location = useLocation<{ nextPathname: string } | null>();\n\n    const handleSubmit = (auth: FormValues) => {\n        setLoading(true);\n        login(auth, location.state ? location.state.nextPathname : '/').catch(\n            (error: Error) => {\n                setLoading(false);\n                notify(\n                    typeof error === 'string'\n                        ? error\n                        : typeof error === 'undefined' || !error.message\n                        ? 'ra.auth.sign_in_error'\n                        : error.message,\n                    'warning',\n                    {\n                        _:\n                            typeof error === 'string'\n                                ? error\n                                : error && error.message\n                                ? error.message\n                                : undefined,\n                    }\n                );\n            }\n        );\n    };\n\n    const validate = (values: FormValues) => {\n        const errors: FormValues = {};\n        if (!values.username) {\n            errors.username = translate('ra.validation.required');\n        }\n        if (!values.password) {\n            errors.password = translate('ra.validation.required');\n        }\n        return errors;\n    };\n\n    return (\n        <Form\n            onSubmit={handleSubmit}\n            validate={validate}\n            render={({ handleSubmit }) => (\n                <form onSubmit={handleSubmit} noValidate>\n                    <div className={classes.main}>\n                        <Card className={classes.card}>\n                            <div className={classes.avatar}>\n                                <Avatar className={classes.icon}>\n                                    <LockIcon />\n                                </Avatar>\n                            </div>\n                            <div className={classes.hint}>\n                                Wecome to Assistor.\n                            </div>\n                            <div className={classes.form}>\n                                <div className={classes.input}>\n                                    <Field\n                                        autoFocus\n                                        name=\"username\"\n                                        // @ts-ignore\n                                        component={renderInput}\n                                        label={translate('ra.auth.username')}\n                                        disabled={loading}\n                                    />\n                                </div>\n                                <div className={classes.input}>\n                                    <Field\n                                        name=\"password\"\n                                        // @ts-ignore\n                                        component={renderInput}\n                                        label={translate('ra.auth.password')}\n                                        type=\"password\"\n                                        disabled={loading}\n                                    />\n                                </div>\n                            </div>\n                            <CardActions className={classes.actions}>\n                                <Button\n                                    variant=\"contained\"\n                                    type=\"submit\"\n                                    color=\"primary\"\n                                    disabled={loading}\n                                    fullWidth\n                                >\n                                    {loading && (\n                                        <CircularProgress\n                                            size={25}\n                                            thickness={2}\n                                        />\n                                    )}\n                                    {translate('ra.auth.sign_in')}\n                                </Button>\n                                <Typography variant=\"body2\">Or</Typography>\n                                <Link\n                                    color=\"textSecondary\"\n                                    component={RouterLink}\n                                    to=\"/register\"\n                                    variant=\"body1\"\n                                >\n                                    Register\n                                </Link>\n                            </CardActions>\n                        </Card>\n                        <Notification />\n                    </div>\n                </form>\n            )}\n        />\n    );\n};\n\nLogin.propTypes = {\n    authProvider: PropTypes.func,\n    previousRoute: PropTypes.string,\n};\n\n// We need to put the ThemeProvider decoration in another component\n// Because otherwise the useStyles() hook used in Login won't get\n// the right theme\nconst LoginWithTheme = (props: any) => (\n    <ThemeProvider theme={createTheme(lightTheme)}>\n        <Login {...props} />\n    </ThemeProvider>\n);\n\nexport default LoginWithTheme;\n","import * as React from 'react';\nimport { ReferenceField, useRedirect } from 'react-admin';\nimport { Card, Typography, Box } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Draggable } from 'react-beautiful-dnd';\n\nimport { LogoField } from '../companies/LogoField';\nimport { Deal } from '../types';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        marginBottom: theme.spacing(1),\n    },\n    cardContent: {\n        padding: theme.spacing(1),\n        display: 'flex',\n    },\n    cardText: {\n        marginLeft: theme.spacing(1),\n    },\n}));\n\nexport const DealCard = ({ deal, index }: { deal: Deal; index: number }) => {\n    const classes = useStyles();\n    const redirect = useRedirect();\n    if (!deal) return null;\n\n    const handleClick = () => {\n        redirect(`/deals/${deal.id}/show`);\n    };\n    return (\n        <Draggable draggableId={String(deal.id)} index={index}>\n            {(provided, snapshot) => (\n                <div\n                    className={classes.root}\n                    {...provided.draggableProps}\n                    {...provided.dragHandleProps}\n                    ref={provided.innerRef}\n                    onClick={handleClick}\n                >\n                    <Card\n                        style={{\n                            opacity: snapshot.isDragging ? 0.9 : 1,\n                            transform: snapshot.isDragging\n                                ? 'rotate(-2deg)'\n                                : '',\n                        }}\n                        elevation={snapshot.isDragging ? 3 : 1}\n                    >\n                        <Box p={1} display=\"flex\">\n                            <ReferenceField\n                                source=\"company_id\"\n                                record={deal}\n                                reference=\"companies\"\n                                resource=\"deals\"\n                                basePath=\"/deals\"\n                            >\n                                <LogoField size=\"small\" />\n                            </ReferenceField>\n                            <Box ml={1}>\n                                <Typography variant=\"body2\" gutterBottom>\n                                    {deal.name}\n                                </Typography>\n                                <Typography\n                                    variant=\"caption\"\n                                    color=\"textSecondary\"\n                                >\n                                    {deal.amount.toLocaleString('en-US', {\n                                        notation: 'compact',\n                                        style: 'currency',\n                                        currency: 'USD',\n                                        currencyDisplay: 'narrowSymbol',\n                                        minimumSignificantDigits: 3,\n                                    })}\n                                    , {deal.type}\n                                </Typography>\n                            </Box>\n                        </Box>\n                    </Card>\n                </div>\n            )}\n        </Draggable>\n    );\n};\n","import * as React from 'react';\nimport { Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Droppable } from 'react-beautiful-dnd';\nimport { Identifier, RecordMap } from 'react-admin';\n\nimport { DealCard } from './DealCard';\nimport { stageNames } from './stages';\nimport { Deal } from '../types';\n\nconst useStyles = makeStyles({\n    root: {\n        flex: 1,\n        paddingTop: 8,\n        paddingBottom: 16,\n        backgroundColor: '#eaeaee',\n        '&:first-child': {\n            paddingLeft: 5,\n            borderTopLeftRadius: 5,\n        },\n        '&:last-child': {\n            paddingRight: 5,\n            borderTopRightRadius: 5,\n        },\n    },\n    droppable: {\n        display: 'flex',\n        flexDirection: 'column',\n        borderRadius: 5,\n        padding: 5,\n        '&.isDraggingOver': {\n            backgroundColor: '#dadadf',\n        },\n    },\n});\n\nexport const DealColumn = ({\n    stage,\n    dealIds,\n    data,\n}: {\n    stage: string;\n    dealIds: Identifier[];\n    data: RecordMap<Deal>;\n}) => {\n    const classes = useStyles();\n    return (\n        <div className={classes.root}>\n            <Typography align=\"center\" variant=\"subtitle1\">\n                {/* @ts-ignore */}\n                {stageNames[stage]}\n            </Typography>\n            <Droppable droppableId={stage}>\n                {(droppableProvided, snapshot) => (\n                    <div\n                        ref={droppableProvided.innerRef}\n                        {...droppableProvided.droppableProps}\n                        className={\n                            classes.droppable +\n                            (snapshot.isDraggingOver ? ' isDraggingOver' : '')\n                        }\n                    >\n                        {dealIds.map((id, index) => (\n                            <DealCard key={id} index={index} deal={data[id]} />\n                        ))}\n                        {droppableProvided.placeholder}\n                    </div>\n                )}\n            </Droppable>\n        </div>\n    );\n};\n","import * as React from 'react';\nimport { useState, useEffect, useContext } from 'react';\nimport {\n    useMutation,\n    Identifier,\n    useListContext,\n    RecordMap,\n    DataProviderContext,\n} from 'react-admin';\nimport { Box } from '@material-ui/core';\nimport { DragDropContext, OnDragEndResponder } from 'react-beautiful-dnd';\nimport isEqual from 'lodash/isEqual';\n\nimport { DealColumn } from './DealColumn';\nimport { stages } from './stages';\nimport { Deal } from '../types';\n\ninterface DealsByColumn {\n    [stage: string]: Identifier[];\n}\n\nconst initialDeals: DealsByColumn = stages.reduce(\n    (obj, stage) => ({ ...obj, [stage]: [] }),\n    {}\n);\n\nconst getDealsByColumn = (\n    ids: Identifier[],\n    data: RecordMap<Deal>\n): DealsByColumn => {\n    // group deals by column\n    const columns = ids.reduce(\n        (acc, id) => {\n            acc[data[id].stage].push(id);\n            return acc;\n        },\n        stages.reduce((obj, stage) => ({ ...obj, [stage]: [] }), {} as any)\n    );\n    // order each column by index\n    stages.forEach(stage => {\n        columns[stage] = columns[stage].sort(\n            (a: Identifier, b: Identifier) => data[a].index - data[b].index\n        );\n    });\n    return columns;\n};\n\nexport const DealListContent = () => {\n    const {\n        data,\n        ids,\n        loaded,\n        page,\n        perPage,\n        currentSort,\n        filterValues,\n    } = useListContext<Deal>();\n\n    const [deals, setDeals] = useState<DealsByColumn>(\n        loaded ? getDealsByColumn(ids, data) : initialDeals\n    );\n    // we use the raw dataProvider to avoid too many updates to the Redux store after updates (which would create junk)\n    const dataProvider = useContext(DataProviderContext);\n\n    // FIXME: use refetch when available\n    const [refresh] = useMutation({\n        resource: 'deals',\n        type: 'getList',\n        payload: {\n            pagination: { page, perPage },\n            sort: currentSort,\n            filter: filterValues,\n        },\n    });\n\n    // update deals by columns when the dataProvider response updates\n    useEffect(() => {\n        if (!loaded) return;\n        const newDeals = getDealsByColumn(ids, data);\n        if (isEqual(deals, newDeals)) {\n            return;\n        }\n        setDeals(newDeals);\n    }, [data, ids, loaded]); // eslint-disable-line react-hooks/exhaustive-deps\n\n    if (!loaded) return null;\n\n    const onDragEnd: OnDragEndResponder = async result => {\n        const { destination, source, draggableId } = result;\n\n        if (!destination) {\n            return;\n        }\n\n        if (\n            destination.droppableId === source.droppableId &&\n            destination.index === source.index\n        ) {\n            return;\n        }\n\n        if (source.droppableId === destination.droppableId) {\n            // moving deal inside the same column\n\n            const column = Array.from(deals[source.droppableId]); // [4, 7, 23, 5] array of ids\n            const sourceDeal = data[column[source.index]];\n            const destinationDeal = data[column[destination.index]];\n\n            // update local state\n            // remove source deal from column\n            column.splice(source.index, 1);\n            // read source deal at destination\n            column.splice(destination.index, 0, Number(draggableId));\n            setDeals({\n                ...deals,\n                [source.droppableId]: column,\n            });\n\n            // update backend\n            // Fetch all the deals in this stage (because the list may be filtered, but we need to update even non-filtered deals)\n            const { data: columnDeals } = await dataProvider.getList('deals', {\n                sort: { field: 'index', order: 'ASC' },\n                pagination: { page: 1, perPage: 100 },\n                filter: { stage: source.droppableId },\n            });\n\n            if (source.index > destination.index) {\n                // deal moved up, eg\n                // dest   src\n                //  <------\n                // [4, 7, 23, 5]\n\n                await Promise.all([\n                    // for all deals between destination.index and source.index, increase the index\n                    ...columnDeals\n                        .filter(\n                            deal =>\n                                deal.index >= destinationDeal.index &&\n                                deal.index < sourceDeal.index\n                        )\n                        .map(deal =>\n                            dataProvider.update('deals', {\n                                id: deal.id,\n                                data: { index: deal.index + 1 },\n                                previousData: deal,\n                            })\n                        ),\n                    // for the deal that was moved, update its index\n                    dataProvider.update('deals', {\n                        id: sourceDeal.id,\n                        data: { index: destinationDeal.index },\n                        previousData: sourceDeal,\n                    }),\n                ]);\n\n                refresh();\n            } else {\n                // deal moved down, e.g\n                // src   dest\n                //  ------>\n                // [4, 7, 23, 5]\n\n                await Promise.all([\n                    // for all deals between source.index and destination.index, decrease the index\n                    ...columnDeals\n                        .filter(\n                            deal =>\n                                deal.index <= destinationDeal.index &&\n                                deal.index > sourceDeal.index\n                        )\n                        .map(deal =>\n                            dataProvider.update('deals', {\n                                id: deal.id,\n                                data: { index: deal.index - 1 },\n                                previousData: deal,\n                            })\n                        ),\n                    // for the deal that was moved, update its index\n                    dataProvider.update('deals', {\n                        id: sourceDeal.id,\n                        data: { index: destinationDeal.index },\n                        previousData: sourceDeal,\n                    }),\n                ]);\n\n                refresh();\n            }\n        } else {\n            // moving deal across columns\n\n            const sourceColumn = Array.from(deals[source.droppableId]); // [4, 7, 23, 5] array of ids\n            const destinationColumn = Array.from(\n                deals[destination.droppableId]\n            ); // [4, 7, 23, 5] arrays of ids\n            const sourceDeal = data[sourceColumn[source.index]];\n            const destinationDeal = data[destinationColumn[destination.index]]; // may be undefined if dropping at the end of a column\n\n            // update local state\n            sourceColumn.splice(source.index, 1);\n            destinationColumn.splice(destination.index, 0, draggableId);\n            setDeals({\n                ...deals,\n                [source.droppableId]: sourceColumn,\n                [destination.droppableId]: destinationColumn,\n            });\n\n            // update backend\n            // Fetch all the deals in both stages (because the list may be filtered, but we need to update even non-filtered deals)\n            const [\n                { data: sourceDeals },\n                { data: destinationDeals },\n            ] = await Promise.all([\n                dataProvider.getList('deals', {\n                    sort: { field: 'index', order: 'ASC' },\n                    pagination: { page: 1, perPage: 100 },\n                    filter: { stage: source.droppableId },\n                }),\n                dataProvider.getList('deals', {\n                    sort: { field: 'index', order: 'ASC' },\n                    pagination: { page: 1, perPage: 100 },\n                    filter: { stage: destination.droppableId },\n                }),\n            ]);\n\n            await Promise.all([\n                // decrease index on the deals after the source index in the source columns\n                ...sourceDeals\n                    .filter(deal => deal.index > sourceDeal.index)\n                    .map(deal =>\n                        dataProvider.update('deals', {\n                            id: deal.id,\n                            data: { index: deal.index - 1 },\n                            previousData: deal,\n                        })\n                    ),\n                // increase index on the deals after the destination index in the destination columns\n                ...destinationDeals\n                    .filter(deal =>\n                        destinationDeal\n                            ? deal.index >= destinationDeal.index\n                            : false\n                    )\n                    .map(deal =>\n                        dataProvider.update('deals', {\n                            id: deal.id,\n                            data: { index: deal.index + 1 },\n                            previousData: deal,\n                        })\n                    ),\n                // change the dragged deal to take the destination index and column\n                dataProvider.update('deals', {\n                    id: sourceDeal.id,\n                    data: {\n                        index: destinationDeal\n                            ? destinationDeal.index\n                            : destinationDeals.pop()!.index + 1,\n                        stage: destination.droppableId,\n                    },\n                    previousData: sourceDeal,\n                }),\n            ]);\n\n            refresh();\n        }\n    };\n\n    return (\n        <DragDropContext onDragEnd={onDragEnd}>\n            <Box display=\"flex\">\n                {stages.map(stage => (\n                    <DealColumn\n                        stage={stage}\n                        dealIds={deals[stage]}\n                        data={data}\n                        key={stage}\n                    />\n                ))}\n            </Box>\n        </DragDropContext>\n    );\n};\n","export const types = [\n    'Other',\n    'Copywriting',\n    'Print project',\n    'UI Design',\n    'Website design',\n];\n\nexport const typeChoices = types.map(type => ({ id: type, name: type }));\n","import * as React from 'react';\nimport {\n    Create,\n    SimpleForm,\n    TextInput,\n    SelectInput,\n    NumberInput,\n    ReferenceInput,\n    AutocompleteInput,\n    required,\n    useRedirect,\n    useDataProvider,\n} from 'react-admin';\nimport { Dialog } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { stageChoices } from './stages';\nimport { typeChoices } from './types';\nimport { Deal } from '../types';\n\nconst useStyles = makeStyles({\n    root: {\n        width: 500,\n    },\n});\n\nexport const DealCreate = ({ open }: { open: boolean }) => {\n    const classes = useStyles();\n    const redirect = useRedirect();\n    const dataProvider = useDataProvider();\n\n    const handleClose = () => {\n        redirect('/deals');\n    };\n\n    const onSuccess = ({ data: deal }: { data: Deal }) => {\n        redirect('/deals');\n        // increase the index of all deals in the same stage as the new deal\n        dataProvider\n            .getList('deals', {\n                pagination: { page: 1, perPage: 50 },\n                sort: { field: 'id', order: 'ASC' },\n                filter: { stage: deal.stage },\n            })\n            .then(({ data: deals }) =>\n                Promise.all(\n                    deals\n                        .filter(oldDeal => oldDeal.id !== deal.id)\n                        .map(oldDeal =>\n                            dataProvider.update('deals', {\n                                id: oldDeal.id,\n                                data: { index: oldDeal.index + 1 },\n                                previousData: oldDeal,\n                            })\n                        )\n                )\n            );\n    };\n\n    return (\n        <Dialog open={open} onClose={handleClose}>\n            <Create\n                resource=\"deals\"\n                basePath=\"/deals\"\n                className={classes.root}\n                onSuccess={onSuccess}\n            >\n                <SimpleForm initialValues={{ index: 0 }}>\n                    <TextInput\n                        source=\"name\"\n                        label=\"Deal name\"\n                        fullWidth\n                        validate={[required()]}\n                    />\n                    <TextInput\n                        source=\"description\"\n                        multiline\n                        rows={3}\n                        fullWidth\n                    />\n                    <ReferenceInput\n                        source=\"company_id\"\n                        reference=\"companies\"\n                        fullWidth\n                        validate={[required()]}\n                    >\n                        <AutocompleteInput optionText=\"name\" />\n                    </ReferenceInput>\n                    <SelectInput\n                        source=\"stage\"\n                        choices={stageChoices}\n                        fullWidth\n                        validate={[required()]}\n                        defaultValue=\"opportunity\"\n                    />\n                    <SelectInput\n                        source=\"type\"\n                        choices={typeChoices}\n                        fullWidth\n                    />\n                    <NumberInput source=\"amount\" fullWidth defaultValue={0} />\n                    <ReferenceInput\n                        source=\"sales_id\"\n                        reference=\"sales\"\n                        label=\"Account manager\"\n                        helperText={false}\n                        fullWidth\n                    >\n                        <SelectInput\n                            optionText={(sales: any) =>\n                                `${sales.first_name} ${sales.last_name}`\n                            }\n                        />\n                    </ReferenceInput>\n                </SimpleForm>\n            </Create>\n        </Dialog>\n    );\n};\n","import * as React from 'react';\nimport { useListContext } from 'react-admin';\nimport { Link } from '@material-ui/core';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n    ul: {\n        listStyle: 'none',\n        padding: 0,\n        margin: 0,\n        display: 'inline-block',\n    },\n    li: {\n        display: 'inline',\n        '&:after': {\n            content: '\", \"',\n        },\n        '&:last-child:after': {\n            content: '\"\"',\n        },\n    },\n});\n\nexport const ContactList = () => {\n    const { ids, data, loaded } = useListContext();\n    const classes = useStyles();\n    if (!loaded) return <div style={{ height: '2em' }} />;\n    return (\n        <ul className={classes.ul}>\n            {ids.map(id => (\n                <li key={id} className={classes.li}>\n                    <Link\n                        component={RouterLink}\n                        to={`/contacts/${id}`}\n                        variant=\"subtitle1\"\n                    >\n                        {data[id].first_name} {data[id].last_name}\n                    </Link>\n                </li>\n            ))}\n        </ul>\n    );\n};\n","import * as React from 'react';\nimport {\n    ShowBase,\n    TextField,\n    ReferenceField,\n    ReferenceManyField,\n    ReferenceArrayField,\n    useRecordContext,\n    useRedirect,\n    Identifier,\n} from 'react-admin';\nimport {\n    Box,\n    Dialog,\n    DialogContent,\n    Typography,\n    Divider,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { format } from 'date-fns';\n\nimport { CompanyAvatar } from '../companies/CompanyAvatar';\nimport { NotesIterator } from '../notes';\nimport { ContactList } from './ContactList';\nimport { stageNames } from './stages';\n\nconst useStyles = makeStyles({\n    dialog: {\n        position: 'absolute',\n        top: 50,\n    },\n});\n\nexport const DealShow = ({ open, id }: { open: boolean; id: Identifier }) => {\n    const redirect = useRedirect();\n    const classes = useStyles();\n\n    const handleClose = () => {\n        redirect('/deals');\n    };\n\n    return (\n        <Dialog\n            open={open}\n            onClose={handleClose}\n            fullWidth\n            maxWidth=\"md\"\n            classes={{ paper: classes.dialog }}\n        >\n            <DialogContent>\n                <ShowBase resource=\"deals\" basePath=\"/deals\" id={id}>\n                    <DealShowContent />\n                </ShowBase>\n            </DialogContent>\n        </Dialog>\n    );\n};\n\nconst DealShowContent = () => {\n    const record = useRecordContext();\n    if (!record) return null;\n    return (\n        <>\n            <Box display=\"flex\">\n                <Box\n                    width={100}\n                    display=\"flex\"\n                    flexDirection=\"column\"\n                    alignItems=\"center\"\n                >\n                    <ReferenceField\n                        source=\"company_id\"\n                        reference=\"companies\"\n                        link=\"show\"\n                    >\n                        <CompanyAvatar />\n                    </ReferenceField>\n                    <ReferenceField\n                        source=\"company_id\"\n                        reference=\"companies\"\n                        link=\"show\"\n                    >\n                        <TextField\n                            source=\"name\"\n                            align=\"center\"\n                            component=\"div\"\n                        />\n                    </ReferenceField>\n                </Box>\n                <Box ml={2} flex=\"1\">\n                    <Typography variant=\"h5\">{record.name}</Typography>\n\n                    <Box display=\"flex\" mt={2}>\n                        <Box display=\"flex\" mr={5} flexDirection=\"column\">\n                            <Typography color=\"textSecondary\" variant=\"body2\">\n                                Start\n                            </Typography>\n                            <Typography variant=\"subtitle1\">\n                                {format(new Date(record.start_at), 'PP')}\n                            </Typography>\n                        </Box>\n\n                        <Box display=\"flex\" mr={5} flexDirection=\"column\">\n                            <Typography color=\"textSecondary\" variant=\"body2\">\n                                Budget\n                            </Typography>\n                            <Typography variant=\"subtitle1\">\n                                {record.amount.toLocaleString('en-US', {\n                                    notation: 'compact',\n                                    style: 'currency',\n                                    currency: 'USD',\n                                    currencyDisplay: 'narrowSymbol',\n                                    minimumSignificantDigits: 3,\n                                })}\n                            </Typography>\n                        </Box>\n\n                        <Box display=\"flex\" mr={5} flexDirection=\"column\">\n                            <Typography color=\"textSecondary\" variant=\"body2\">\n                                Type\n                            </Typography>\n                            <Typography variant=\"subtitle1\">\n                                {record.type}\n                            </Typography>\n                        </Box>\n\n                        <Box display=\"flex\" mr={5} flexDirection=\"column\">\n                            <Typography color=\"textSecondary\" variant=\"body2\">\n                                Stage\n                            </Typography>\n                            <Typography variant=\"subtitle1\">\n                                {/* @ts-ignore */}\n                                {stageNames[record.stage]}\n                            </Typography>\n                        </Box>\n                    </Box>\n\n                    <Box mt={2} mb={2}>\n                        <Box\n                            display=\"flex\"\n                            mr={5}\n                            flexDirection=\"column\"\n                            minHeight={48}\n                        >\n                            <Typography color=\"textSecondary\" variant=\"body2\">\n                                Contacts\n                            </Typography>\n                            <ReferenceArrayField\n                                source=\"contact_ids\"\n                                reference=\"contacts\"\n                            >\n                                <ContactList />\n                            </ReferenceArrayField>\n                        </Box>\n                    </Box>\n\n                    <Box mt={2} mb={2} style={{ whiteSpace: 'pre-line' }}>\n                        <Typography color=\"textSecondary\" variant=\"body2\">\n                            Description\n                        </Typography>\n                        <Typography>{record.description}</Typography>\n                    </Box>\n\n                    <Divider />\n\n                    <Box mt={2}>\n                        <ReferenceManyField\n                            target=\"deal_id\"\n                            reference=\"dealNotes\"\n                            sort={{ field: 'date', order: 'DESC' }}\n                        >\n                            <NotesIterator reference=\"deals\" />\n                        </ReferenceManyField>\n                    </Box>\n                </Box>\n            </Box>\n        </>\n    );\n};\n","import * as React from 'react';\nimport { useListFilterContext, useGetIdentity } from 'react-admin';\nimport { Switch, FormControlLabel } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        marginBottom: theme.spacing(1),\n        marginLeft: theme.spacing(1),\n    },\n}));\n\nexport const OnlyMineInput = ({ alwaysOn }: { alwaysOn: boolean }) => {\n    const {\n        filterValues,\n        displayedFilters,\n        setFilters,\n    } = useListFilterContext();\n    const { identity } = useGetIdentity();\n    const classes = useStyles();\n    const handleChange = () => {\n        const newFilterValues = { ...filterValues };\n        if (typeof filterValues.sales_id !== 'undefined') {\n            delete newFilterValues.sales_id;\n        } else {\n            newFilterValues.sales_id = identity && identity?.id;\n        }\n        setFilters(newFilterValues, displayedFilters);\n    };\n    return (\n        <div className={classes.root}>\n            <FormControlLabel\n                control={\n                    <Switch\n                        checked={typeof filterValues.sales_id !== 'undefined'}\n                        onChange={handleChange}\n                        color=\"primary\"\n                        name=\"checkedC\"\n                    />\n                }\n                label=\"Only companies I manage\"\n            />\n        </div>\n    );\n};\n\nOnlyMineInput.defaultProps = { source: 'sales_id' };\n","import * as React from 'react';\nimport {\n    CreateButton,\n    ExportButton,\n    FilterButton,\n    List,\n    ListProps,\n    SearchInput,\n    SelectInput,\n    TopToolbar,\n    useGetIdentity,\n} from 'react-admin';\nimport { Route } from 'react-router';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { DealListContent } from './DealListContent';\nimport { DealCreate } from './DealCreate';\nimport { DealShow } from './DealShow';\nimport { OnlyMineInput } from './OnlyMineInput';\nimport { typeChoices } from './types';\n\nexport const DealList = (props: ListProps) => {\n    const { identity } = useGetIdentity();\n    return identity ? (\n        <>\n            <List\n                {...props}\n                perPage={100}\n                sort={{ field: 'index', order: 'ASC' }}\n                filters={dealFilters}\n                filterDefaultValues={{ sales_id: identity && identity?.id }}\n                actions={<DealActions />}\n                pagination={false}\n                component=\"div\"\n            >\n                <DealListContent />\n            </List>\n            <Route path=\"/deals/create\">\n                {({ match }) => <DealCreate open={!!match} />}\n            </Route>\n            <Route path=\"/deals/:id/show\">\n                {({ match }) =>\n                    !!match ? (\n                        <DealShow open={!!match} id={match?.params?.id} />\n                    ) : null\n                }\n            </Route>\n        </>\n    ) : null;\n};\n\nconst dealFilters = [\n    <SearchInput source=\"q\" alwaysOn />,\n    <OnlyMineInput alwaysOn />,\n    <SelectInput source=\"type\" choices={typeChoices} />,\n];\n\nconst useActionStyles = makeStyles(theme => ({\n    createButton: {\n        marginLeft: theme.spacing(2),\n    },\n}));\nconst DealActions = () => {\n    const classes = useActionStyles();\n    return (\n        <TopToolbar>\n            <FilterButton />\n            <ExportButton />\n            <CreateButton\n                basePath=\"/deals\"\n                variant=\"contained\"\n                label=\"New Deal\"\n                className={classes.createButton}\n            />\n        </TopToolbar>\n    );\n};\n","/* eslint-disable import/no-anonymous-default-export */\nimport { DealList } from './DealList';\nimport MonetizationOnIcon from '@material-ui/icons/MonetizationOn';\n\nexport default {\n    list: DealList,\n    icon: MonetizationOnIcon,\n};\n","import * as React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { Card, Box, Link } from '@material-ui/core';\nimport ContactsIcon from '@material-ui/icons/Contacts';\nimport { useGetList, SimpleList, useGetIdentity } from 'react-admin';\nimport { formatDistance } from 'date-fns';\n\nimport { Avatar } from '../contacts/Avatar';\nimport { Contact } from '../types';\n\nexport const HotContacts = () => {\n    const { identity } = useGetIdentity();\n    const {\n        data: contactData,\n        ids: contactIds,\n        total: contactTotal,\n        loaded: contactsLoaded,\n    } = useGetList<Contact>(\n        'contacts',\n        { page: 1, perPage: 10 },\n        { field: 'last_seen', order: 'DESC' },\n        { status: 'hot', sales_id: identity?.id },\n        { enabled: Number.isInteger(identity?.id) }\n    );\n    return (\n        <>\n            <Box display=\"flex\" alignItems=\"center\" marginBottom=\"1em\">\n                <Box ml={2} mr={2} display=\"flex\">\n                    <ContactsIcon color=\"disabled\" fontSize=\"large\" />\n                </Box>\n                <Link\n                    underline=\"none\"\n                    variant=\"h5\"\n                    color=\"textSecondary\"\n                    component={RouterLink}\n                    to=\"/contacts\"\n                >\n                    Hot contacts\n                </Link>\n            </Box>\n            <Card>\n                <SimpleList<Contact>\n                    basePath=\"/contacts\"\n                    linkType=\"show\"\n                    ids={contactIds}\n                    data={contactData}\n                    total={contactTotal}\n                    loaded={contactsLoaded}\n                    primaryText={contact =>\n                        `${contact.first_name} ${contact.last_name}`\n                    }\n                    secondaryText={contact =>\n                        formatDistance(\n                            new Date(contact.last_seen),\n                            new Date(),\n                            {\n                                addSuffix: true,\n                            }\n                        )\n                    }\n                    leftAvatar={contact => <Avatar record={contact} />}\n                />\n            </Card>\n        </>\n    );\n};\n","import * as React from 'react';\nimport { Card, CardContent, Typography, Box } from '@material-ui/core';\nimport NoteIcon from '@material-ui/icons/Note';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {\n    useGetList,\n    useGetIdentity,\n    ReferenceField,\n    TextField,\n    FunctionField,\n} from 'react-admin';\nimport { formatDistance } from 'date-fns';\n\nimport { Contact as ContactType } from '../types';\n\nconst useStyles = makeStyles(theme => ({\n    note: {\n        marginBottom: theme.spacing(2),\n    },\n    noteText: {\n        backgroundColor: theme.palette.grey[200],\n        padding: theme.spacing(1),\n        borderRadius: 10,\n    },\n    noteTextText: {\n        display: '-webkit-box',\n        '-webkit-line-clamp': 3,\n        '-webkit-box-orient': 'vertical',\n        overflow: 'hidden',\n    },\n}));\n\nexport const LatestNotes = () => {\n    const classes = useStyles();\n    const { identity } = useGetIdentity();\n    const {\n        data: contactNotesData,\n        ids: contactNotesIds,\n        loaded: contactNotesLoaded,\n    } = useGetList(\n        'contactNotes',\n        { page: 1, perPage: 5 },\n        { field: 'date', order: 'DESC' },\n        { sales_id: identity?.id },\n        { enabled: Number.isInteger(identity?.id) }\n    );\n    const {\n        data: dealNotesData,\n        ids: dealNotesIds,\n        loaded: dealNotesLoaded,\n    } = useGetList(\n        'dealNotes',\n        { page: 1, perPage: 5 },\n        { field: 'date', order: 'DESC' },\n        { sales_id: identity?.id },\n        { enabled: Number.isInteger(identity?.id) }\n    );\n    const {\n        data: companyNotesData,\n        ids: companyNotesIds,\n        loaded: companyNotesLoaded,\n    } = useGetList(\n        'companyNotes',\n        { page: 1, perPage: 5 },\n        { field: 'date', order: 'DESC' },\n        { sales_id: identity?.id },\n        { enabled: Number.isInteger(identity?.id) }\n    );\n    if (!contactNotesLoaded || !dealNotesLoaded || !companyNotesLoaded) {\n        return null;\n    }\n    // TypeScript guards\n    if (\n        !contactNotesIds ||\n        !contactNotesData ||\n        !dealNotesIds ||\n        !dealNotesData ||\n        !companyNotesIds ||\n        !companyNotesData\n    ) {\n        return null;\n    }\n\n    const allNotes = ([] as any[])\n        .concat(\n            contactNotesIds.map(id => ({\n                ...contactNotesData[id],\n                type: 'contactNote',\n            })),\n            dealNotesIds.map(id => ({\n                ...dealNotesData[id], \n                type: 'dealNote' \n            })),\n            companyNotesIds.map(id => ({\n                ...companyNotesData[id], \n                type: 'companyNote' \n            })),\n        )\n        .sort((a, b) => new Date(b.date).valueOf() - new Date(a.date).valueOf())\n        .slice(0, 5);\n\n    return (\n        <>\n            <Box display=\"flex\" alignItems=\"center\" marginBottom=\"1em\">\n                <Box ml={2} mr={2} display=\"flex\">\n                    <NoteIcon color=\"disabled\" fontSize=\"large\" />\n                </Box>\n                <Typography variant=\"h5\" color=\"textSecondary\">\n                    My Latest Notes\n                </Typography>\n            </Box>\n            <Card>\n                <CardContent>\n                    {allNotes.map(note => (\n                        <div\n                            id={`${note.type}_${note.id}`}\n                            key={`${note.type}_${note.id}`}\n                            className={classes.note}\n                        >\n                            <Typography color=\"textSecondary\" gutterBottom>\n                                on{' '}\n                                <NoteSource note={note} />\n                                , added{' '}\n                                {formatDistance(\n                                    new Date(note.date),\n                                    new Date(),\n                                    {\n                                        addSuffix: true,\n                                    }\n                                )}\n                            </Typography>\n                            <div className={classes.noteText}>\n                                <Typography className={classes.noteTextText}>\n                                    {note.text}\n                                </Typography>\n                            </div>\n                        </div>\n                    ))}\n                </CardContent>\n            </Card>\n        </>\n    );\n};\n\nconst NoteSource = ({ note }: any) => {\n    if (note.type === 'dealNote'){\n        return <Deal note={note} />;\n    }\n    else if (note.type === 'contactNote') {\n        return <Contact note={note} />;\n    }\n    else if (note.type === 'companyNote') {\n        return <Company note={note} />;\n    }\n    return null;\n};\n\nconst Deal = ({ note }: any) => (\n    <>\n        Deal{' '}\n        <ReferenceField\n            record={note}\n            source=\"deal_id\"\n            reference=\"deals\"\n            basePath=\"/deals\"\n            link=\"show\"\n        >\n            <TextField source=\"name\" variant=\"body1\" />\n        </ReferenceField>\n    </>\n);\n\nconst Contact = ({ note }: any) => (\n    <>\n        Contact{' '}\n        <ReferenceField\n            record={note}\n            source=\"contact_id\"\n            reference=\"contacts\"\n            basePath=\"/contacts\"\n            link=\"show\"\n        >\n            <FunctionField<ContactType>\n                variant=\"body1\"\n                render={contact =>\n                    contact ? `${contact.first_name} ${contact.last_name}` : ''\n                }\n            />\n        </ReferenceField>\n    </>\n);\n\nconst Company = ({ note }: any) => (\n    <>\n        Company{' '}\n        <ReferenceField\n            record={note}\n            source=\"company_id\"\n            reference=\"companies\"\n            basePath=\"/companies\"\n            link=\"show\"\n        >\n            <TextField source=\"name\" variant=\"body1\" />\n        </ReferenceField>\n    </>\n);\n","import * as React from 'react';\nimport { useEffect, useState } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { Card, Link, Box } from '@material-ui/core';\nimport MonetizationOnIcon from '@material-ui/icons/MonetizationOn';\nimport {\n    useGetList,\n    SimpleList,\n    useGetIdentity,\n    ReferenceField,\n    Identifier,\n} from 'react-admin';\n\nimport { CompanyAvatar } from '../companies/CompanyAvatar';\nimport { stages, stageNames } from '../deals/stages';\nimport { Deal } from '../types';\n\nexport const DealsPipeline = () => {\n    const { identity } = useGetIdentity();\n    const { data, ids: unorderedIds, total, loaded } = useGetList<Deal>(\n        'deals',\n        { page: 1, perPage: 10 },\n        { field: 'stage', order: 'DESC' },\n        { stage: 'lost', sales_id: identity?.id },\n        { enabled: Number.isInteger(identity?.id) }\n    );\n    const [ids, setIds] = useState(unorderedIds);\n    useEffect(() => {\n        const deals = unorderedIds.map(id => data[id]);\n        const orderedIds: Identifier[] = [];\n        stages\n            .filter(stage => stage !== 'won')\n            .forEach(stage =>\n                deals\n                    .filter(deal => deal.stage === stage)\n                    .forEach(deal => orderedIds.push(deal.id))\n            );\n        setIds(orderedIds);\n    }, [unorderedIds, data]);\n    return (\n        <>\n            <Box display=\"flex\" alignItems=\"center\" marginBottom=\"1em\">\n                <Box ml={2} mr={2} display=\"flex\">\n                    <MonetizationOnIcon color=\"disabled\" fontSize=\"large\" />\n                </Box>\n                <Link\n                    underline=\"none\"\n                    variant=\"h5\"\n                    color=\"textSecondary\"\n                    component={RouterLink}\n                    to=\"/deals\"\n                >\n                    Deals Pipeline\n                </Link>\n            </Box>\n            <Card>\n                <SimpleList<Deal>\n                    basePath=\"/deals\"\n                    linkType=\"show\"\n                    ids={ids}\n                    data={data}\n                    total={total}\n                    loaded={loaded}\n                    primaryText={deal => deal.name}\n                    secondaryText={deal =>\n                        `${deal.amount.toLocaleString('en-US', {\n                            notation: 'compact',\n                            style: 'currency',\n                            currency: 'USD',\n                            currencyDisplay: 'narrowSymbol',\n                            minimumSignificantDigits: 3,\n                            // @ts-ignore\n                        })} , ${stageNames[deal.stage]}`\n                    }\n                    leftAvatar={deal => (\n                        <ReferenceField\n                            source=\"company_id\"\n                            record={deal}\n                            reference=\"companies\"\n                            resource=\"deals\"\n                            basePath=\"/deals\"\n                            link={false}\n                        >\n                            <CompanyAvatar size=\"small\" />\n                        </ReferenceField>\n                    )}\n                />\n            </Card>\n        </>\n    );\n};\n","import React, { useState, memo } from \"react\";\nimport { \n    ComposableMap, \n    Geographies, \n    Geography, \n    ZoomableGroup,\n    Marker,\n    Annotation,\n} from 'react-simple-maps';\nimport { scaleQuantile } from 'd3-scale';\nimport { max } from 'd3-array';\nimport { geoCentroid } from \"d3-geo\";\nimport {\n    FilterList,\n    FilterLiveSearch,\n    FilterListItem,\n    useGetIdentity,\n    useGetList,\n} from 'react-admin';\nimport ReactTooltip from \"react-tooltip\";\n\nimport { Country } from '../types';\n\nconst geoUrl =\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nconst Map = memo(({setTooltipContent}: any) => {\n    const { data, ids, loaded } = useGetList<Country>(\n        'countries',\n        { perPage: 1000, page: 1 }\n    );\n    if (!loaded) return null;\n\n    const colorScale = scaleQuantile<string>()\n        .domain([0, max(ids.map(id => data[id].nb_companies))])\n        .range([\n            \"#e1f5fe\",\n            \"#b3e5fc\",\n            \"#81d4fa\",\n            \"#4fc3f7\",\n            \"#29b6f6\",\n            \"#03a9f4\",\n            \"#039be5\",\n            \"#0288d1\",\n            \"#0277bd\"\n        ]);\n\n    return (\n        <ComposableMap\n            data-tip=\"\"\n            projection=\"geoAzimuthalEqualArea\"\n            projectionConfig={{\n                rotate: [-25.0, -50.0, 0],\n                scale: 750\n            }}\n        >\n            <ZoomableGroup\n                center={[0, 0]}\n                zoom={1}\n            >\n                <Geographies geography={geoUrl}>\n                    {({ geographies }) => (\n                        <>\n                            {geographies\n                            .map(geo => {\n                                const { ISO_A3 } = geo.properties;\n                                const cur = ids.find(id => data[id].iso3 === ISO_A3);\n                                return (\n                                    <Geography \n                                            key={geo.rsmKey} \n                                            geography={geo} \n                                            fill={cur ? colorScale(data[cur].nb_companies) : \"#D6D6DA\"}\n                                            stroke=\"#EAEAEC\"\n                                            onMouseEnter={() => {\n                                                const { NAME, POP_EST } = geo.properties;\n                                                const nb_companies = cur ? data[cur].nb_companies : 0;\n                                                setTooltipContent(`${NAME} - ${nb_companies}`);\n                                            }}\n                                            onMouseLeave={() => {\n                                                setTooltipContent(\"\");\n                                            }}\n                                        />\n                                );\n                            })}\n                            {/* {geographies.map(geo => {\n                                const centroid = geoCentroid(geo);\n                                const { ISO_A3 } = geo.properties;\n                                const cur = ids.find(id => data[id].iso3 === ISO_A3);\n                                return (\n                                    <g key={geo.rsmKey + \"-name\"}>\n                                        {cur &&\n                                            <Marker coordinates={centroid}>\n                                                <text y=\"2\" fontSize={9} textAnchor=\"middle\">\n                                                {data[cur].nicename}\n                                                </text>\n                                            </Marker>\n                                        }\n                                    </g>\n                                );\n                            })} */}\n                        </>\n                    )}\n                </Geographies>\n            </ZoomableGroup>\n        </ComposableMap>\n    );\n});\n\nexport const CompaniesMap = () => {\n    const [content, setContent] = useState(\"\");\n\n    return (\n        <div>\n            <Map setTooltipContent={setContent} />\n            <ReactTooltip>{content}</ReactTooltip>\n        </div>\n    );\n}","import * as React from 'react';\nimport { Box } from '@material-ui/core';\n\nimport { Welcome } from './Welcome';\nimport { DealsChart } from './DealsChart';\nimport { HotContacts } from './HotContacts';\nimport { LatestNotes } from './LatestNotes';\nimport { DealsPipeline } from './DealsPipeline';\nimport { CompaniesMap } from './CompaniesMap';\n\nexport const Dashboard = () => {\n    return (\n        <>\n            {/* <Box display=\"flex\" mt=\"2em\">\n                <Box flex=\"3\" mr=\"1em\">\n                    <DealsChart />\n                </Box>\n                <Box flex=\"1\">\n                    <Welcome />\n                </Box>\n            </Box> */}\n\n            <Box display=\"flex\" mt=\"2em\">\n                <Box flex=\"3\" mr=\"1em\">\n                    <CompaniesMap />\n                </Box>\n                <Box flex=\"1\" mr=\"1em\">\n                    <HotContacts />\n                </Box>\n            </Box>\n\n            <Box display=\"flex\" mt=\"2em\">\n                <Box flex=\"1\" mr=\"1em\">\n                    <LatestNotes />\n                </Box>\n                <Box flex=\"1\" display=\"flex\">\n                    <Box flex=\"1\" mr=\"1em\">\n                        <HotContacts />\n                    </Box>\n                    <Box flex=\"1\">\n                        <DealsPipeline />\n                        {/*<Card>\n                            <CardContent>\n                            <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                                Upcoming tasks\n                            </Typography>\n                            </CardContent>\n                        </Card>*/}\n                    </Box>\n                </Box>\n            </Box>\n        </>\n    );\n};\n","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { Field, Form } from 'react-final-form';\nimport { useLocation, Link as RouterLink  } from 'react-router-dom';\nimport {\n    Button,\n    CardActions,\n    CircularProgress,\n    TextField,\n    Grid,\n    CardContent,\n    Typography,\n    Link,\n    Container,\n} from '@material-ui/core';\nimport { Theme } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { \n    useTranslate, \n    useNotify, \n    useLogin, \n    useSafeSetState, \n    useRedirect,\n} from 'ra-core';\nimport axios from 'axios';\n\n\nconst baseURL = \"/auth\";\n\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    form: {\n        padding: '0 1em 1em 1em',\n    },\n    input: {\n        marginTop: '1em',\n    },\n    button: {\n        width: '100%',\n    },\n    icon: {\n        marginRight: theme.spacing(1),\n    },\n    actions: {\n        padding: '0 1em 1em 1em',\n        display: 'flex',\n        flexDirection: 'column',\n    },\n}));\n\nconst Input = ({\n    meta: { touched, error }, // eslint-disable-line react/prop-types\n    input: inputProps, // eslint-disable-line react/prop-types\n    ...props\n}: {\n    meta: any;\n    input: any;\n}) => (\n    <TextField\n        error={!!(touched && error)}\n        helperText={touched && error}\n        {...inputProps}\n        {...props}\n        fullWidth\n    />\n);\n\nconst RegisterForm = ({ redirectTo }:\n    {redirectTo?: string | undefined;}) => {\n    const [loading, setLoading] = useSafeSetState(false);\n    const translate = useTranslate();\n    const login = useLogin();\n    const notify = useNotify();\n    const redirect = useRedirect();\n    const classes = useStyles();\n\n    const validate = ({ \n        first_name,\n        last_name,\n        email,\n        username, \n        password, \n        confirm \n    }: {\n        first_name: string;\n        last_name: string;\n        email: string;\n        username: string;\n        password: string;\n        confirm: string;\n\n    }) => {\n        const errors = { \n            first_name: !first_name ? translate('ra.validation.required') : undefined, \n            last_name: !last_name ? translate('ra.validation.required') : undefined, \n            email: !email ? translate('ra.validation.required') : undefined, \n            username: !username ? translate('ra.validation.required') : undefined, \n            password: !password ? translate('ra.validation.required') : undefined, \n            confirm: password !== confirm ? 'Confirmation should match password': undefined\n        };\n        return errors;\n    };\n\n    interface ResponseType {\n        message: string;\n    }\n\n    const submit = async ({ \n        first_name,\n        last_name,\n        email,\n        username, \n        password, \n        confirm \n    }: { \n        first_name: string;\n        last_name: string;\n        email: string;\n        username: string;\n        password: string;\n        confirm?: string;\n    }) => {\n        setLoading(true);\n        try{\n        const response = await axios.post<ResponseType>(`${baseURL}/register`, { \n                first_name,\n                last_name,\n                email,\n                username, \n                password\n            })\n        \n        setLoading(false)\n        login({ username, password }, redirectTo)\n        } catch (error: any) {\n            setLoading(false);\n            const response = error.response;\n            if (response.status == 401) {\n                const { message } = error.response.data;\n                notify(`Error:${message}`, 'warning');\n                return Promise.reject(message);\n            }\n            return Promise.reject(error);\n        }\n    };\n\n    return (\n        <Form\n            onSubmit={submit}\n            validate={validate}\n            render={({ handleSubmit }) => (\n                <form className={classes.form} onSubmit={handleSubmit} noValidate>\n                    <CardContent>\n                        <Container maxWidth=\"xs\">\n                        <Grid container spacing={2} >\n                            <Grid item xs={12} sm={6}>\n                                <div className={classes.input}>\n                                    <Field\n                                        autoFocus\n                                        id=\"first_name\"\n                                        name=\"first_name\"\n                                        component={Input}\n                                        label=\"First Name\"\n                                        disabled={loading}\n                                        required\n                                    />\n                                </div>\n                            </Grid>\n                            <Grid item xs={12} sm={6}>\n                                <div className={classes.input}>\n                                    <Field\n                                        autoFocus\n                                        id=\"last_name\"\n                                        name=\"last_name\"\n                                        component={Input}\n                                        label=\"Last Name\"\n                                        disabled={loading}\n                                        required\n                                    />\n                                </div>\n                            </Grid>\n                            <Grid item xs={12}>\n                                <div className={classes.input}>\n                                    <Field\n                                        autoFocus\n                                        id=\"email\"\n                                        name=\"email\"\n                                        component={Input}\n                                        label=\"Email Address\"\n                                        disabled={loading}\n                                        required\n                                    />\n                                </div>\n                            </Grid>\n                            <Grid item xs={12}>\n                                <div className={classes.input}>\n                                    <Field\n                                        autoFocus\n                                        id=\"username\"\n                                        name=\"username\"\n                                        component={Input}\n                                        label={translate('ra.auth.username')}\n                                        disabled={loading}\n                                        required\n                                    />\n                                </div>\n                            </Grid>\n                            <Grid item xs={12}>\n                                <div className={classes.input}>\n                                    <Field\n                                        id=\"password\"\n                                        name=\"password\"\n                                        component={Input}\n                                        label={translate('ra.auth.password')}\n                                        type=\"password\"\n                                        disabled={loading}\n                                        autoComplete=\"current-password\"\n                                        required\n                                    />\n                                </div>\n                            </Grid>\n                            <Grid item xs={12}>\n                                <div className={classes.input}>\n                                    <Field\n                                        id=\"confirm\"\n                                        name=\"confirm\"\n                                        component={Input}\n                                        label=\"Confirm Password\"\n                                        type=\"password\"\n                                        disabled={loading}\n                                        autoComplete=\"current-password\"\n                                        required\n                                    />\n                                </div>\n                            </Grid>\n                        </Grid>\n                    </Container>\n                    </CardContent>\n                    <CardActions className={classes.actions}>\n                        <Button\n                            variant=\"contained\"\n                            type=\"submit\"\n                            color=\"primary\"\n                            disabled={loading}\n                            className={classes.button}\n                            fullWidth\n                        >\n                            {loading && (\n                                <CircularProgress\n                                    size={25}\n                                    thickness={2}\n                                />\n                            )}\n                            Register\n                        </Button>\n                        <Typography variant=\"body2\">Or</Typography>\n                        <Link\n                            color=\"textSecondary\"\n                            component={RouterLink}\n                            to=\"/login\"\n                            variant=\"body1\"\n                        >\n                            Login\n                        </Link>\n                    </CardActions>\n                </form>\n            )}\n        />\n    );\n};\n\nRegisterForm.propTypes = {\n    redirectTo: PropTypes.string,\n};\n\nexport default RegisterForm;","import React, { ReactNode, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { \n    Card, \n    CardContent, \n    Theme, \n    Avatar,\n    Grid,\n    Link,\n} from '@material-ui/core';\nimport {\n    Notification,\n} from 'react-admin';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { createTheme, makeStyles } from '@material-ui/core/styles';\nimport classnames from 'classnames';\nimport { lightTheme } from '../layout/themes';\n\nimport RegisterForm from './RegisterForm';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n        main: {\n            display: 'flex',\n            flexDirection: 'column',\n            minHeight: '100vh',\n            height: '1px',\n            alignItems: 'center',\n            justifyContent: 'flex-start',\n            backgroundRepeat: 'no-repeat',\n            backgroundSize: 'cover',\n            backgroundImage:\n                'radial-gradient(circle at 50% 14em, #313264 0%, #00023b 60%, #00023b 100%)',\n        },\n        card: {\n            minWidth: 300,\n            marginTop: '6em',\n        },\n        avatar: {\n            margin: '1em',\n            display: 'flex',\n            justifyContent: 'center',\n        },\n        icon: {\n            backgroundColor: theme.palette.secondary.main,\n        },\n    }),\n    { name: 'Register' }\n);\n\nconst Register = () => {\n    const classes = useStyles();\n    return (\n            <div className={classes.main}>\n                <Card className={classes.card}>\n                    <div className={classes.avatar}>\n                        <Avatar className={classes.icon}>\n                            <ExitToAppIcon />\n                        </Avatar>\n                    </div>\n                    <RegisterForm />\n                </Card>\n                <Notification />\n            </div>\n    );\n}\n\nconst RegisterWithTheme = (props: any) => (\n    <ThemeProvider theme={createTheme(lightTheme)}>\n        <Register {...props} />\n    </ThemeProvider>\n);\n\nexport default RegisterWithTheme;","import { ThemeName } from '../types';\n\nexport const CHANGE_THEME = 'CHANGE_THEME';\n\nexport const changeTheme = (theme: ThemeName) => ({\n    type: CHANGE_THEME,\n    payload: theme,\n});","import * as React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport { useTranslate, useLocale, useSetLocale, Title } from 'react-admin';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { changeTheme } from './actions';\nimport { AppState } from '../types';\n\nconst useStyles = makeStyles({\n    label: { width: '10em', display: 'inline-block' },\n    button: { margin: '1em' },\n});\n\nconst Configuration = () => {\n    const translate = useTranslate();\n    const locale = useLocale();\n    const setLocale = useSetLocale();\n    const classes = useStyles();\n    const theme = useSelector((state: AppState) => state.theme);\n    const dispatch = useDispatch();\n    return (\n        <Card>\n            <Title title={translate('pos.configuration')} />\n            <CardContent>\n                <div className={classes.label}>\n                    {translate('pos.theme.name')}\n                </div>\n                <Button\n                    variant=\"contained\"\n                    className={classes.button}\n                    color={theme === 'light' ? 'primary' : 'default'}\n                    onClick={() => dispatch(changeTheme('light'))}\n                >\n                    {translate('pos.theme.light')}\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    className={classes.button}\n                    color={theme === 'dark' ? 'primary' : 'default'}\n                    onClick={() => dispatch(changeTheme('dark'))}\n                >\n                    {translate('pos.theme.dark')}\n                </Button>\n            </CardContent>\n            <CardContent>\n                <div className={classes.label}>{translate('pos.language')}</div>\n                <Button\n                    variant=\"contained\"\n                    className={classes.button}\n                    color={locale === 'en' ? 'primary' : 'default'}\n                    onClick={() => setLocale('en')}\n                >\n                    en\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    className={classes.button}\n                    color={locale === 'fr' ? 'primary' : 'default'}\n                    onClick={() => setLocale('fr')}\n                >\n                    fr\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    className={classes.button}\n                    color={locale === 'ja' ? 'primary' : 'default'}\n                    onClick={() => setLocale('ja')}\n                >\n                    ja\n                </Button>\n            </CardContent>\n        </Card>\n    );\n};\n\nexport default Configuration;","import * as React from \"react\";\nimport { RouteWithoutLayout } from 'react-admin';\nimport { Route } from 'react-router-dom';\nimport Register from './auth/RegisterPage';\nimport Configuration from './configuration/Configuration';\n\nexport const customRoutes = [\n    <RouteWithoutLayout exact path=\"/register\" component={Register} />,\n    <Route exact path=\"/configuration\" render={() => <Configuration />} />,\n];","import { TranslationMessages } from 'react-admin';\nimport englishMessages from 'ra-language-english';\n\nconst customEnglishMessages: TranslationMessages = {\n    ...englishMessages,\n\n};\n\nexport default customEnglishMessages;","import * as React from 'react';\nimport { Admin, Resource, ListGuesser, EditGuesser, ShowGuesser, defaultTheme } from 'react-admin';\nimport {\n    unstable_createMuiStrictModeTheme,\n    createTheme,\n} from '@material-ui/core/styles';\nimport polyglotI18nProvider from 'ra-i18n-polyglot';\n\nimport { dataProvider } from './dataProvider';\nimport { authProvider } from './authProvider';\nimport { Login, Layout } from './layout';\nimport contacts from './contacts';\nimport companies from './companies';\nimport products from './products';\nimport tasks from './tasks';\nimport productfamiliess from './productFamilies';\nimport deals from './deals';\nimport { Dashboard } from './dashboard/Dashboard';\nimport { customRoutes } from './customRoutes';\n// import Login from './Login'\nimport productFamilies from './productFamilies';\nimport englishMessages from './i18n/en';\n\n// FIXME MUI bug https://github.com/mui-org/material-ui/issues/13394\nconst theme =\n    process.env.NODE_ENV !== 'production'\n        ? unstable_createMuiStrictModeTheme(defaultTheme)\n        : createTheme(defaultTheme);\n\nconst i18nProvider = polyglotI18nProvider(locale => {\n    if (locale === 'fr') {\n        return import('./i18n/fr').then(messages => messages.default);\n    }\n    console.log(locale);\n    if (locale === 'ja') {\n        return import('./i18n/ja').then(messages => messages.default);\n    }\n\n    // Always fallback on english\n    return englishMessages;\n}, 'en');\n\nconst App = () => (\n    <Admin\n        customRoutes={customRoutes}\n        dataProvider={dataProvider}\n        authProvider={authProvider}\n        loginPage={Login}\n        layout={Layout}\n        dashboard={Dashboard}\n        theme={theme}\n        i18nProvider={i18nProvider}\n    >\n        <Resource name=\"deals\" {...deals} />\n        <Resource name=\"contacts\" {...contacts} />\n        <Resource name=\"companies\" {...companies} />\n        <Resource name=\"products\" {...products} />\n        <Resource name=\"productProperties\" />\n        <Resource name=\"propertyTypes\" />\n        <Resource name=\"contactNotes\" />\n        <Resource name=\"companyNotes\" />\n        <Resource name=\"productNotes\" />\n        <Resource name=\"dealNotes\" />\n        <Resource name=\"productFamilies\" {...productFamilies} />\n        <Resource name=\"familyCategories\" list={ListGuesser} edit={EditGuesser} show={ShowGuesser} />\n        <Resource name=\"tasks\" {...tasks} />\n        <Resource name=\"sales\" list={ListGuesser} />\n        <Resource name=\"tags\" list={ListGuesser} />\n        <Resource name=\"countries\" list={ListGuesser} />\n    </Admin>\n);\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import { CssBaseline } from '@material-ui/core';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <CssBaseline />\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}