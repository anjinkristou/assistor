{"version":3,"sources":["auth.ts","dataProvider.ts","authProvider.ts","layout/Logo.tsx","tasks/status.ts","tasks/TaskStatus.tsx","notifications/NotificationButton.tsx","layout/AppBar.tsx","layout/SubMenu.tsx","companies/sectors.ts","companies/CompanyAvatar.tsx","companies/CountryField.tsx","companies/CompanyCard.tsx","companies/CompanyGridList.tsx","companies/relations.ts","tags/TagChip.tsx","components/CollapsibleListFilter.tsx","companies/CompanyListFilter.tsx","companies/SelectAllButton.tsx","companies/CompanyList.tsx","companies/sizes.ts","companies/DistributorInput.tsx","companies/CompanyCreate.tsx","contacts/Avatar.tsx","misc/Status.tsx","tags/TagsList.tsx","companies/LogoField.tsx","tags/colors.ts","components/RoundButton.tsx","tags/TagsListEdit.tsx","components/CollapsibleAside.tsx","products/ProductsListEdit.tsx","companies/CompanyAside.tsx","deals/stages.ts","notes/StatusSelector.tsx","notes/NewNote.tsx","notes/Note.tsx","notes/NotesIterator.tsx","products/ProductAvatar.tsx","products/ProductCard.tsx","products/ProductGridList.tsx","companies/CompanyShow.tsx","companies/CompanyEdit.tsx","companies/index.ts","contacts/ContactAside.tsx","contacts/ContactShow.tsx","contacts/ContactListFilter.tsx","contacts/ContactList.tsx","contacts/ContactEdit.tsx","contacts/ContactCreate.tsx","contacts/index.tsx","tasks/TaskAside.tsx","tasks/TaskShow.tsx","tasks/TaskListFilter.tsx","tasks/MarkDoneButton.tsx","tasks/TaskList.tsx","tasks/TaskEdit.tsx","tasks/TaskCreate.tsx","tasks/index.ts","deals/DealCard.tsx","deals/DealColumn.tsx","deals/DealListContent.tsx","deals/types.ts","deals/DealCreate.tsx","deals/ContactList.tsx","deals/DealShow.tsx","deals/OnlyMineInput.tsx","deals/DealList.tsx","deals/index.ts","productFamilies/categories.ts","products/ProductListFilter.tsx","products/ProductList.tsx","products/CreatePropertyType.tsx","products/PropertyFormIterator.tsx","productFamilies/CreateProductFamily.tsx","products/ProductCreate.tsx","products/ProductImageField.tsx","products/ProductAside.tsx","products/ProductShow.tsx","products/ProductEdit.tsx","products/index.ts","productFamilies/Avatar.tsx","productFamilies/ProductFamilyListFilter.tsx","productFamilies/ProductFamilyList.tsx","productFamilies/ProductFamilyCreate.tsx","productFamilies/ProductFamilyAside.tsx","productFamilies/ProductFamilyEdit.tsx","productFamilies/ProductFamilyShow.tsx","productFamilies/index.ts","layout/Menu.tsx","layout/themes.ts","notifications/NotificationContainer.tsx","layout/Layout.tsx","layout/Login.tsx","dashboard/HotContacts.tsx","dashboard/LatestNotes.tsx","dashboard/CompaniesMap.tsx","dashboard/Dashboard.tsx","auth/RegisterForm.tsx","auth/RegisterPage.tsx","configuration/actions.ts","configuration/Configuration.tsx","customRoutes.tsx","i18n/en.ts","App.tsx","reportWebVitals.js","index.tsx"],"names":["CREDENTIALS_LOCAL_STORAGE_ITEM","setCredentials","credentials","localStorage","setItem","JSON","stringify","getCredentials","raw","getItem","parse","getList","resource","params","a","token","access_token","config","headers","Authorization","axios","get","response","Promise","resolve","data","reject","message","status","getOne","getMany","getManyReference","create","post","update","put","updateMany","deleteOne","delete","deleteMany","dataProvider","baseURL","refreshToken","refresh_token","undefined","login","username","password","decodedToken","decodeJwt","permissions","logout","removeItem","register","first_name","last_name","email","getIdentity","id","fullName","avatar","checkError","authProvider","checkAuth","error","getPermissions","useStyles","makeStyles","theme","root","display","breakpoints","down","spacing","logoIcon","color","palette","secondary","light","logoText","primary","Logo","classes","className","Typography","variant","statuses","name","TaskStatus","statusItem","find","item","statusColor","Box","width","height","borderRadius","bgcolor","component","NotificationButton","props","redirect","useRedirect","identity","useGetIdentity","React","anchorEl","setAnchorEl","now","Date","useGetList","page","perPage","field","order","sales_id","ids","hasNotification","loaded","length","IconButton","onClick","event","currentTarget","Badge","badgeContent","keepMounted","open","Boolean","onClose","anchorOrigin","vertical","horizontal","transformOrigin","map","MenuItem","handleNotificationClick","ListItemAvatar","ListItemText","text","formatDistance","due_date","title","flex","textOverflow","whiteSpace","overflow","spacer","ConfigurationMenu","forwardRef","ref","useTranslate","MenuItemLink","to","primaryText","leftIcon","sidebarIsOpen","CustomUserMenu","UserMenu","CustomAppBar","AppBar","elevation","userMenu","icon","minWidth","transition","paddingLeft","sidebarIsClosed","SubMenu","handleToggle","isOpen","children","dense","translate","useSelector","state","admin","ui","sidebarOpen","header","button","ListItemIcon","Tooltip","placement","Collapse","in","timeout","unmountOnExit","List","disablePadding","sectors","sector","backgroundColor","img","objectFit","small","large","CompanyAvatar","record","size","logo","src","process","alt","imgProps","clsx","image","sizeInPixel","medium","CountryField","source","ImageField","paper","flexDirection","justifyContent","padding","position","alignItems","textAlign","marginTop","stats","singleStat","statIcon","marginRight","checkbox","top","right","identifier","lrft","CompanyCard","useState","setElevation","useListContext","onToggleItem","selectedIds","Link","linkToRecord","underline","onMouseEnter","onMouseLeave","Paper","Checkbox","edge","checked","includes","tabIndex","disableRipple","e","stopPropagation","ReferenceField","reference","link","relation","Chip","label","SelectField","choices","style","marginBottom","nb_contacts","nb_notes","gridList","flexWrap","gap","grey","LoadingGridList","nbChildren","fn","key","Array","from","_","LoadedGridList","CompanyGridList","relations","TagChip","border","cursor","sideBig","marginLeft","sideSmall","up","container","drawerContent","maxWidth","CollapsibleListFilter","setOpen","childrenWithProps","child","Drawer","anchor","countryList","maxHeight","tagList","CompanyListFilter","tags","tagIds","countries","countryIds","FilterLiveSearch","FilterList","FilterListItem","value","nicename","country_id","SelectAllButton","onSelect","Button","toolbar","createButton","importOptions","parseConfig","dynamicTyping","CompanyListActions","TopToolbar","SortButton","fields","ExportButton","CreateButton","basePath","sizes","DistributorInput","AutocompleteInput","optionText","country_iso","allowEmpty","resettable","inline","CustomLayout","CardContent","paddingTop","ml","CustomDivider","mb","Divider","Avatar","charAt","getColorFromStatus","Status","ColoredChipField","ChipField","TagsList","ReferenceArrayField","SingleFieldList","linkType","LogoField","colors","margin","RoundButton","handleClick","selected","type","TagsListEdit","newTagName","setNewTagName","newTagColor","setNewTagColor","version","setVersion","disabled","setDisabled","allTags","useGetMany","enabled","useUpdate","useCreate","unselectedTagIds","filter","handleAddTag","handleOpenCreateDialog","tag","mt","onDelete","tagId","handleDeleteTag","Dialog","onSubmit","preventDefault","onSuccess","v","DialogTitle","DialogContent","autoFocus","fullWidth","onChange","target","DialogActions","CollapsibleAside","EditButton","ShowButton","ProductsListEdit","refresh","useRefresh","use_products","products","handleClose","product","productId","handleDeleteProduct","model","Popover","toString","values","SimpleForm","ReferenceArrayInput","AutocompleteArrayInput","CompanyAside","AsideContent","href","website","rel","linkedIn","TextField","distributor_id","phone_number","DateField","options","year","month","day","FunctionField","render","stages","stageNames","opportunity","won","lost","delayed","stageChoices","StatusSelector","setStatus","select","buttonSwitcher","previewConatiner","previewRaw","previewMarkdown","paddingRight","borderColor","main","preview","NewNote","showStatus","setPreview","useRecordContext","useResourceContext","setText","getCurrentDate","date","setDate","loading","notify","useNotify","foreignKeyMapping","last_seen","multiline","remarkPlugins","remarkGfm","setMinutes","getMinutes","getTimezoneOffset","toISOString","slice","contacts","deals","companies","metadata","textarea","paddingBottom","lineHeight","buttons","cancel","content","paragraph","fontFamily","typography","fontSize","body1","visibility","Note","note","isLast","isHover","setHover","isEditing","setEditing","noteText","setNoteText","useDelete","mutationMode","handleDelete","showTime","locales","dateStyle","timeStyle","FilledInput","NotesIterator","index","ProductAvatar","family","left","hidden","ProductCard","classNames","nb_properties","Skeleton","animation","ProductGridList","CompanyShowContent","useShowContext","setValue","Card","gridGap","Tabs","indicatorColor","textColor","newValue","scrollButtons","Tab","nb_deals","nb_products","ReferenceManyField","sort","pagination","Pagination","rowsPerPageOptions","TabPanel","other","role","ContactsIterator","contact","ListItem","RouterLink","ListItemSecondaryAction","CreateRelatedContactButton","pathname","company_id","startIcon","CreateRelatedProductButton","DealsIterator","deal","stage","amount","toLocaleString","notation","currency","currencyDisplay","minimumSignificantDigits","updated_at","list","actions","aside","filterDefaultValues","Create","initialValues","TextInput","validate","required","SelectInput","formClassName","FormDataConsumer","formData","ReferenceInput","helperText","sales","edit","show","ShowBase","BusinessIcon","ContactAside","TasksIterator","task","disableGutters","EmailField","gender","background","ContactShowContent","ContactListFilter","last_seen_gte","endOfYesterday","last_seen_lte","startOfWeek","startOfMonth","subMonths","ContactListContent","SimpleListLoading","hasLeftAvatarOrIcon","hasSecondaryText","ContactListActions","Spacer","ContactEditContent","useEditContext","save","FormWithRedirect","formProps","mr","BooleanInput","Toolbar","omit","EditBase","transform","ContactsIcon","TaskAside","TaskShowContent","TaskListFilter","due_date_gte","due_date_lte","doneState","MarkDoneButton","BulkUpdateButton","TaskListContent","useActionStyles","TaskListActions","TaskBulkActionButtons","BulkDeleteButton","TaskEditContent","DateInput","bulkActionButtons","FormatListBulletedIcon","cardContent","cardText","DealCard","draggableId","String","provided","snapshot","draggableProps","dragHandleProps","innerRef","opacity","isDragging","p","gutterBottom","borderTopLeftRadius","borderTopRightRadius","droppable","DealColumn","dealIds","align","droppableId","droppableProvided","droppableProps","isDraggingOver","placeholder","initialDeals","reduce","obj","getDealsByColumn","columns","acc","push","forEach","b","DealListContent","currentSort","filterValues","setDeals","useContext","DataProviderContext","useMutation","payload","useEffect","newDeals","isEqual","onDragEnd","result","destination","column","sourceDeal","destinationDeal","splice","Number","columnDeals","all","previousData","sourceColumn","destinationColumn","sourceDeals","destinationDeals","pop","typeChoices","DealCreate","useDataProvider","then","oldDeal","rows","defaultValue","NumberInput","ul","listStyle","li","ContactList","dialog","DealShow","DealShowContent","format","start_at","minHeight","description","OnlyMineInput","alwaysOn","useListFilterContext","displayedFilters","setFilters","FormControlLabel","control","Switch","newFilterValues","defaultProps","dealFilters","SearchInput","DealActions","FilterButton","filters","path","match","MonetizationOnIcon","categories","category","familyList","categoryList","ProductListFilter","familyData","familyIds","family_id","ProductListActions","CreatePropertyType","useCreateSuggestionContext","onCancel","onCreate","setName","unit","setUnit","synonyms","setSynonyms","PropertyFormIterator","SimpleFormIterator","CreateProductFamily","setCategory","setWebsite","setImage","Select","propertyContainer","ProductImageField","ProductAside","ProductShowContent","nb_used_by","addLabel","Datagrid","useTheme","TabbedForm","FormTab","ArrayInput","FiberManualRecordIcon","ProductFamilyListFilter","ProductFamilyListContent","ProductFamilyListActions","ProductFamilyAside","ProductFamilyEditContent","ProductFamilyShowContent","CategoryIcon","transitions","easing","sharp","duration","leavingScreen","closed","Menu","menuCrm","menuProduct","menuCustomers","setState","menu","classnames","DashboardMenuItem","_scrollToTop","tasks","productFamilies","darkTheme","sidebar","overrides","MuiAppBar","colorSecondary","MuiButtonBase","lightTheme","dark","contrastText","default","shape","RaMenuItemLink","borderLeft","active","MuiPaper","elevation1","boxShadow","backgroundClip","MuiButton","contained","MuiLinearProgress","colorPrimary","barColorPrimary","MuiFilledInput","MuiSnackbarContent","NotificationContainer","Notification","autoHideDuration","Layout","appBar","notification","backgroundImage","backgroundRepeat","backgroundSize","card","hint","form","input","renderInput","meta","touched","inputProps","Form","withTypes","Login","setLoading","useLogin","location","useLocation","handleSubmit","auth","nextPathname","noValidate","CardActions","CircularProgress","thickness","LoginWithTheme","ThemeProvider","createTheme","HotContacts","isInteger","contactData","contactIds","contactTotal","total","contactsLoaded","SimpleList","secondaryText","addSuffix","leftAvatar","noteTextText","LatestNotes","contactNotesData","contactNotesIds","contactNotesLoaded","dealNotesData","dealNotesIds","dealNotesLoaded","companyNotesData","companyNotesIds","companyNotesLoaded","allNotes","concat","valueOf","NoteSource","Deal","Contact","Company","Map","memo","setTooltipContent","colorScale","scaleQuantile","domain","max","nb_companies","range","projection","projectionConfig","rotate","scale","center","zoom","geography","geographies","geo","ISO_A3","properties","cur","iso3","fill","stroke","NAME","POP_EST","rsmKey","CompaniesMap","setContent","Dashboard","Grid","xs","sm","Input","RegisterForm","redirectTo","useAuthProvider","useSafeSetState","submit","confirm","Container","autoComplete","Register","RegisterWithTheme","changeTheme","Configuration","locale","useLocale","setLocale","useSetLocale","dispatch","useDispatch","Title","customRoutes","RouteWithoutLayout","exact","customEnglishMessages","englishMessages","defaultTheme","i18nProvider","polyglotI18nProvider","messages","App","Admin","loginPage","layout","dashboard","disableTelemetry","Resource","ListGuesser","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.192df86c.chunk.js","sourcesContent":["import axios, { AxiosError } from 'axios';\n\nconst baseURL = \"/auth\";\n\nexport type Credentials = {\n  access_token: string;\n  refresh_token: string;\n  permissions: string;\n};\n\nconst CREDENTIALS_LOCAL_STORAGE_ITEM = \"credentials\";\n\nexport function isAuthenticated(): boolean {\n  return Boolean(getCredentials());\n}\n\nexport function setCredentials(credentials: Credentials) {\n  localStorage.setItem(\n    CREDENTIALS_LOCAL_STORAGE_ITEM,\n    JSON.stringify(credentials)\n  );\n}\n\nexport function getCredentials(): Credentials | null {\n  const raw = localStorage.getItem(CREDENTIALS_LOCAL_STORAGE_ITEM);\n  if (raw === null) {\n    return null;\n  }\n  return JSON.parse(raw);\n}\n\nexport function removeCredentials(): void {\n  localStorage.removeItem(CREDENTIALS_LOCAL_STORAGE_ITEM);\n}\n","import axios, { AxiosError } from 'axios';\nimport { \n    GetListResult,\n    GetOneResult,\n    GetManyResult,\n    GetManyReferenceResult,\n    CreateResult,\n    UpdateResult,\n    UpdateManyResult,\n    DeleteResult,\n    DeleteManyResult,\n}  from 'react-admin'\n\nimport {\n    getCredentials,\n} from \"./auth\"\n\n\nconst getList = async (resource: string, params: any): Promise<GetListResult<any>> => {\n    try{\n        const credentials = getCredentials();\n        const token = credentials?.access_token;\n        const config = {\n            headers: { Authorization: `Bearer ${token}` },\n            params,\n        };\n        const response = await axios.get<GetListResult<any>>(`/${resource}/list`, config)\n        return Promise.resolve(response.data);\n    } catch (error: any) {\n        const response = error.response;\n        return Promise.reject({message: response.data, status: response.status});\n    }\n};\n\nconst getOne = async (resource: string, params: any): Promise<GetOneResult<any>> => {\n    try{\n        const credentials = getCredentials();\n        const token = credentials?.access_token;\n        const config = {\n            headers: { Authorization: `Bearer ${token}` },\n            params,\n        };\n        const response = await axios.get<GetOneResult<any>>(`/${resource}/item`, config)\n        return Promise.resolve(response.data);\n    } catch (error: any) {\n        const response = error.response;\n        return Promise.reject({message: response.data, status: response.status});\n    }\n};\n\nconst getMany = async (resource: string, params: any): Promise<GetManyResult<any>> => {\n    try{\n        const credentials = getCredentials();\n        const token = credentials?.access_token;\n        const config = {\n            headers: { Authorization: `Bearer ${token}` },\n            params,\n        };\n        const response = await axios.get<GetManyResult<any>>(`/${resource}/items`, config)\n        return Promise.resolve(response.data);\n    } catch (error: any) {\n        const response = error.response;\n        return Promise.reject({message: response.data, status: response.status});\n    }\n};\n\nconst getManyReference = async (resource: string, params: any): Promise<GetManyReferenceResult<any>>  => {\n    try{\n        const credentials = getCredentials();\n        const token = credentials?.access_token;\n        const config = {\n            headers: { Authorization: `Bearer ${token}` },\n            params,\n        };\n        const response = await axios.get<GetManyReferenceResult<any>>(`/${resource}/refs`, config)\n        return Promise.resolve(response.data);\n    } catch (error: any) {\n        const response = error.response;\n        return Promise.reject({message: response.data, status: response.status});\n    }\n};\n\nconst create = async (resource: string, params: any): Promise<CreateResult<any>> => {\n    try{\n        const credentials = getCredentials();\n        const token = credentials?.access_token;\n        const config = {\n            headers: { Authorization: `Bearer ${token}` },\n        };\n        const response = await axios.post<CreateResult<any>>(`/${resource}/item`, params, config)\n        return Promise.resolve(response.data);\n    } catch (error: any) {\n        const response = error.response;\n        return Promise.reject({message: response.data, status: response.status});\n    }\n};\n\nconst update = async (resource: string, params: any): Promise<UpdateResult<any>> => {\n    try{\n        const credentials = getCredentials();\n        const token = credentials?.access_token;\n        const config = {\n            headers: { Authorization: `Bearer ${token}` },\n        };\n        const response = await axios.put<UpdateResult<any>>(`/${resource}/item`, params, config)\n        return Promise.resolve(response.data);\n    } catch (error: any) {\n        const response = error.response;\n        return Promise.reject({message: response.data, status: response.status});\n    }\n};\n\nconst updateMany = async (resource: string, params: any): Promise<UpdateManyResult> => {\n    try{\n        const credentials = getCredentials();\n        const token = credentials?.access_token;\n        const config = {\n            headers: { Authorization: `Bearer ${token}` },\n        };\n        const response = await axios.put<UpdateManyResult>(`/${resource}/items`, params, config)\n        return Promise.resolve(response.data);\n    } catch (error: any) {\n        const response = error.response;\n        return Promise.reject({message: response.data, status: response.status});\n    }\n};\n\nconst deleteOne = async (resource: string, params: any): Promise<DeleteResult<any>> => {\n    try{\n        const credentials = getCredentials();\n        const token = credentials?.access_token;\n        const config = {\n            headers: { Authorization: `Bearer ${token}` },\n            params,\n        };\n        const response = await axios.delete<DeleteResult<any>>(`/${resource}/item`, config)\n        return Promise.resolve(response.data);\n    } catch (error: any) {\n        const response = error.response;\n        return Promise.reject({message: response.data, status: response.status});\n    }\n};\n\nconst deleteMany = async (resource: string, params: any): Promise<DeleteManyResult> => {\n    try{\n        const credentials = getCredentials();\n        const token = credentials?.access_token;\n        const config = {\n            headers: { Authorization: `Bearer ${token}` },\n            params,\n        };\n        const response = await axios.delete<DeleteManyResult>(`/${resource}/items`, config)\n        return Promise.resolve(response.data);\n    } catch (error: any) {\n        const response = error.response;\n        return Promise.reject({message: response.data, status: response.status});\n    }\n};\n\nexport const dataProvider = {\n    getList:    getList,\n    getOne:     getOne,\n    getMany:    getMany,\n    getManyReference: getManyReference,\n    create:     create,\n    update:     update,\n    updateMany: updateMany,\n    delete:     deleteOne,\n    deleteMany: deleteMany,\n}\n","import { AuthProvider } from 'react-admin';\nimport decodeJwt, { JwtPayload } from 'jwt-decode';\nimport axios, { AxiosError } from 'axios';\nimport {\n    isAuthenticated,\n    setCredentials,\n    getCredentials,\n    removeCredentials,\n} from \"./auth\"\n\ninterface RefreshToken {\n    access_token: string;\n  }\n\nconst baseURL = \"/auth\";\n\ninterface Permission {\n    permissions: string;\n}\n\ninterface LoginToken {\n    access_token: string;\n    refresh_token: string;\n}\n\ninterface UserIdentity {\n    id: number;\n    fullName: string;\n    avatar: string;\n}\n\nconst refreshToken = async () => {\n    const credentials = getCredentials();\n    if(!credentials) return;\n  \n    const token = credentials?.refresh_token;\n  \n    const config = {\n        headers: { Authorization: `Bearer ${token}` }\n    };\n    let response = await axios.post<RefreshToken>(`${baseURL}/refresh`, undefined, config)\n    const { access_token } = response.data;\n    setCredentials({\n        ...credentials,\n        access_token: access_token,\n    });\n};\n\n\nconst login = async ({ username, password }: {username: string; password:string;}) => {\n    try{\n        const response = await axios.post<LoginToken>(`${baseURL}/login`, { username, password })\n        const { access_token, refresh_token } = response.data;\n        const decodedToken = decodeJwt<Permission>(access_token);\n        setCredentials({\n            access_token,\n            refresh_token,\n            permissions: decodedToken.permissions,\n        });\n        return Promise.resolve();\n    } catch (error: any) {\n        const response = error.response;\n        return Promise.reject({message: response.data.message, status: response.status});\n    }\n};\n\nconst logout = async () => {\n    await axios.get(`${baseURL}/logout`)\n    removeCredentials();\n    return Promise.resolve('/login');\n}\n\nconst register = async ({ \n    first_name,\n    last_name,\n    email,\n    username, \n    password\n}: { \n    first_name: string;\n    last_name: string;\n    email: string;\n    username: string;\n    password: string;\n}) => {\n    try{\n    const response = await axios.post<ResponseType>(`${baseURL}/register`, { \n            first_name,\n            last_name,\n            email,\n            username, \n            password\n        })\n\n    } catch (error: any) {\n        const response = error.response;\n        return Promise.reject({message: response.data.message, status: response.status});\n    }\n}\n\nconst getIdentity = async () => { \n    try{\n        refreshToken();\n        const credentials = getCredentials();\n        const token = credentials?.access_token;\n        const config = {\n            headers: { Authorization: `Bearer ${token}` }\n        };\n        let response = await axios.get<UserIdentity>(`${baseURL}/user`, config)\n        const { id, fullName, avatar } = response.data;\n        \n        return Promise.resolve({ id, fullName, avatar });\n    } catch (error: any) {\n        // const response = error.response;\n        // removeCredentials();\n        // return Promise.reject({message: response.data, status: response.status});\n\n        return Promise.reject(error);\n    }\n };\n\n const checkError = async ({ status }: any) => {\n    if (status === 401 || status === 403 || status === 422) {\n        try{\n            refreshToken();\n        } catch (error: any) {\n            return Promise.reject();\n        }\n    }\n    return Promise.resolve();\n};\n\nconst checkAuth = () => {\n    try{\n        refreshToken();\n        return Promise.resolve();\n    } catch (error: any) {\n        return Promise.reject();\n    }\n}\n\nconst getPermissions = () => {\n    try{\n        refreshToken();\n        return Promise.resolve();\n    } catch (error: any) {\n        return Promise.reject();\n    }\n}\n\nexport const authProvider: AuthProvider =  {\n    login: login,\n    checkError: checkError,\n    checkAuth: checkAuth,\n    logout: logout,\n    getIdentity: getIdentity,\n    getPermissions: getPermissions,\n    register: register,\n};","import * as React from 'react';\nimport { Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AccountBalanceWalletIcon from '@material-ui/icons/AccountBalanceWallet';\nimport classNames from 'classnames';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        display: \"flex\",\n        [theme.breakpoints.down(\"xs\")]: {\n            display: \"none\",\n        },\n        alignItems:\"center\",\n        gap: theme.spacing(1)\n    },\n    logoIcon: {\n        color: theme.palette.secondary.light,\n    },\n    logoText: {\n        color: theme.palette.primary.light,\n    }\n}));\n\nconst Logo = () => {\n    const classes = useStyles();\n    return (\n        <div className={classes.root}>\n            <AccountBalanceWalletIcon className={classes.logoIcon} />\n            <Typography variant=\"h6\" className={classes.logoText} >\n                Assistor\n            </Typography>\n        </div>\n    );\n};\n\nexport default Logo;\n","export const statuses = [\n    {id: 'pending', name: 'Pending', color: '#FFA000'},\n    {id: 'done', name: 'Done', color: '#CDDC39'},\n    {id: 'postponed', name: 'Postponed', color: '#2196F3'},\n]","import * as React from 'react';\nimport { Box } from '@material-ui/core';\n\nimport { statuses } from './status';\n\nexport const TaskStatus = ({ status }: { status: string }) => {\n    const statusItem = statuses.find(item => item.id === status)\n    const statusColor = statusItem ? statusItem.color : \"#000\";\n    return (\n        <Box\n            width={10}\n            height={10}\n            display=\"inline-block\"\n            borderRadius={5}\n            bgcolor={statusColor}\n            component=\"span\"\n        />\n    );\n};","import * as React from 'react';\n\nimport {\n    Avatar,\n    Badge, \n    IconButton, \n    ListItem, \n    ListItemAvatar, \n    ListItemSecondaryAction, \n    ListItemText, \n    Menu,\n    MenuItem,\n    Typography,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport { \n    useGetList, \n    useRedirect, \n    ReferenceField,\n    FunctionField,\n    useGetIdentity,\n} from 'react-admin';\nimport AssignmentTurnedInIcon from '@material-ui/icons/AssignmentTurnedIn';\nimport NotificationsNoneIcon from '@material-ui/icons/NotificationsNone';\nimport { Sale, Task } from '../types';\nimport { formatDistance } from 'date-fns';\nimport { TaskStatus } from '../tasks/TaskStatus';\n\nconst useStyles = makeStyles(theme => ({\n\n}));\n\nconst NotificationButton = (props: any) => {\n    const classes = useStyles();\n    const redirect = useRedirect();\n    const { identity } = useGetIdentity();\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n\n    const now = Date.now();\n\n    const { data, ids, loaded } = useGetList<Task>(\n        'tasks',\n        { page: 1, perPage: 1000 },\n        { field: 'id', order: 'ASC' },\n        { status: 'pending', sales_id: identity && identity?.id,},\n    );\n\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        setAnchorEl(event.currentTarget);\n    };\n    \n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    const handleNotificationClick = (id: any) => {\n        setAnchorEl(null);\n\n        redirect(`/tasks/${id}/show`);\n    }\n\n    const hasNotification = ids.length > 0;\n      \n    return (\n        <div {...props}>\n            <IconButton \n                onClick={handleClick}\n            >\n                <Badge \n                    badgeContent={ids.length} \n                    color=\"primary\"\n                > \n                    { hasNotification\n                        ? <NotificationsIcon />\n                        : <NotificationsNoneIcon />\n                    }\n                </Badge>\n            </IconButton>\n            { hasNotification &&\n                <Menu \n                id=\"simple-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={handleClose}\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n                >\n                    {ids.map(id => (\n                        <MenuItem onClick={() => handleNotificationClick(id)}>\n                            <ListItemAvatar>\n                                <Avatar>\n                                    <AssignmentTurnedInIcon />\n                                </Avatar>\n                            </ListItemAvatar>\n                            <ListItemText\n                                primary={\n                                    <>\n                                    {data[id].text} \n                                    </>\n                                }\n                                secondary={\n                                    <>\n                                        <Typography variant=\"body2\" color=\"textSecondary\">\n                                            due in{' '}\n                                            {formatDistance(\n                                                new Date(data[id].due_date),\n                                                now\n                                                )}\n                                            {' '}<TaskStatus status={data[id].status} />\n                                        </Typography>\n                                    </>\n                                }\n                                />\n                        </MenuItem>\n                    ))\n                    }\n                </Menu>\n             }\n        </div>\n    )\n}\n\nexport default NotificationButton;","import * as React from 'react';\nimport { forwardRef } from 'react';\nimport { AppBar, UserMenu, MenuItemLink, useTranslate } from 'react-admin';\nimport Typography from '@material-ui/core/Typography';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport Logo from './Logo';\nimport NotificationButton from '../notifications/NotificationButton';\n\nconst useStyles = makeStyles({\n    title: {\n        flex: 1,\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n        overflow: 'hidden',\n    },\n    spacer: {\n        flex: 1,\n    },\n});\n\nconst ConfigurationMenu = forwardRef<any, any>((props, ref) => {\n    const translate = useTranslate();\n    return (\n        <MenuItemLink\n            ref={ref}\n            to=\"/configuration\"\n            primaryText=\"Configuration\"\n            leftIcon={<SettingsIcon />}\n            onClick={props.onClick}\n            sidebarIsOpen\n        />\n    );\n});\n\nconst CustomUserMenu = (props: any) => (\n    <UserMenu {...props}>\n        <ConfigurationMenu />\n    </UserMenu>\n);\n\nconst CustomAppBar = (props: any) => {\n    const classes = useStyles();\n    return (\n        <AppBar \n            {...props} \n            elevation={1} \n            userMenu={<CustomUserMenu />\n        }>\n            <Typography\n                variant=\"h6\"\n                color=\"inherit\"\n                className={classes.title}\n                id=\"react-admin-title\"\n            />\n            <Logo />\n            <span className={classes.spacer} />\n            <NotificationButton />\n        </AppBar>\n    );\n};\n\nexport default CustomAppBar;\n","import * as React from 'react';\nimport { Fragment, ReactElement, ReactNode } from 'react';\nimport { useSelector } from 'react-redux';\nimport {\n    List,\n    MenuItem,\n    ListItemIcon,\n    Typography,\n    Collapse,\n    Tooltip,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport { useTranslate, ReduxState } from 'react-admin';\n\nconst useStyles = makeStyles(theme => ({\n    icon: { minWidth: theme.spacing(5) },\n    sidebarIsOpen: {\n        '& a': {\n            transition: 'padding-left 195ms cubic-bezier(0.4, 0, 0.6, 1) 0ms',\n            paddingLeft: theme.spacing(4),\n        },\n    },\n    sidebarIsClosed: {\n        '& a': {\n            transition: 'padding-left 195ms cubic-bezier(0.4, 0, 0.6, 1) 0ms',\n            paddingLeft: theme.spacing(2),\n        },\n    },\n}));\n\ninterface Props {\n    dense: boolean;\n    handleToggle: () => void;\n    icon: ReactElement;\n    isOpen: boolean;\n    name: string;\n    children: ReactNode;\n}\n\nconst SubMenu = (props: Props) => {\n    const { handleToggle, isOpen, name, icon, children, dense } = props;\n    const translate = useTranslate();\n    const classes = useStyles();\n    const sidebarIsOpen = useSelector<ReduxState, boolean>(\n        state => state.admin.ui.sidebarOpen\n    );\n\n    const header = (\n        <MenuItem dense={dense} button onClick={handleToggle}>\n            <ListItemIcon className={classes.icon}>\n                {isOpen ? <ExpandMore /> : icon}\n            </ListItemIcon>\n            <Typography variant=\"inherit\" color=\"textSecondary\">\n                {translate(name)}\n            </Typography>\n        </MenuItem>\n    );\n\n    return (\n        <Fragment>\n            {sidebarIsOpen || isOpen ? (\n                header\n            ) : (\n                <Tooltip title={translate(name)} placement=\"right\">\n                    {header}\n                </Tooltip>\n            )}\n            <Collapse in={isOpen} timeout=\"auto\" unmountOnExit>\n                <List\n                    dense={dense}\n                    component=\"div\"\n                    disablePadding\n                    className={\n                        sidebarIsOpen\n                            ? classes.sidebarIsOpen\n                            : classes.sidebarIsClosed\n                    }\n                >\n                    {children}\n                </List>\n            </Collapse>\n        </Fragment>\n    );\n};\n\nexport default SubMenu;\n","export const sectors = [\n    'Factory Automation',\n    'Logistics Automation',\n    'Warehouse Automation',\n    'Consulting & Development',\n].map(sector => ({ id: sector, name: sector }));\n","import * as React from 'react';\nimport { Avatar } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport BusinessIcon from '@material-ui/icons/Business';\nimport clsx from 'clsx';\n\nimport { Company } from '../types';\n\nconst useStyles = makeStyles({\n    avatar: {\n        width: 60,\n        height: 60,\n        backgroundColor: 'aliceblue',\n    },\n    img: {\n        objectFit: 'contain',\n    },\n    small: {\n        width: 20,\n        height: 20,\n    },\n    large: {\n        width: 40,\n        height: 40,\n    },\n});\n\nexport const CompanyAvatar = ({\n    record,\n    size = 'large',\n}: {\n    record?: Company;\n    size?: 'small' | 'large';\n}) => {\n    const classes = useStyles();\n    if (!record) return null;\n    if(!record.logo) return (\n        <Avatar\n            alt={record.name}\n            className={classes.avatar}\n        >\n            <BusinessIcon />\n        </Avatar>\n    )\n    return (\n        <Avatar\n            src={process.env.PUBLIC_URL + record.logo}\n            alt={record.name}\n            className={classes.avatar}\n            imgProps={{ className: clsx(classes.img, classes[size]) }}\n        />\n    );\n};\n","import * as React from 'react';\nimport { Theme } from '@material-ui/core';\nimport BusinessIcon from '@material-ui/icons/Business';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { ImageField } from 'react-admin';\n\nexport interface StyleProps {\n    width: number;\n}\n\nconst useStyles = makeStyles<Theme, StyleProps>(theme => ({\n    image: {\n        width: props => props.width\n    },\n}));\n\nconst sizeInPixel = {\n    medium: 42,\n    small: 20,\n};\n\nexport const CountryField = ({\n    record,\n    source=\"url\",\n    title=\"nicename\",\n    size = 'medium',\n}: {\n    record?: { logo: string; name: string };\n    source?: string;\n    title?: string;\n    size?: 'small' | 'medium';\n}) => {\n    const classes = useStyles({width: sizeInPixel[size]});\n    if (!record) return null;\n\n    return (\n        <ImageField \n            record={record as any}\n            source={source} \n            title={title}\n            classes={classes}\n        />\n    );\n};\n","import * as React from 'react';\nimport { useState } from 'react';\nimport { Paper, Typography, Link as MuiLink, Box, Chip, Checkbox } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ContactsIcon from '@material-ui/icons/AccountCircle';\nimport DealIcon from '@material-ui/icons/MonetizationOn';\nimport NoteIcon from '@material-ui/icons/Note';\nimport { linkToRecord, SelectField, ReferenceField, useListContext } from 'react-admin';\nimport { Link } from 'react-router-dom';\n\nimport { sectors } from './sectors';\nimport { CompanyAvatar } from './CompanyAvatar';\nimport { Company } from '../types';\nimport { CountryField } from './CountryField';\n\nconst useStyles = makeStyles(theme => ({\n    paper: {\n        height: 200,\n        width: 194,\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-between',\n        padding: '1em',\n        position: 'relative',\n    },\n    identity: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    name: {\n        textAlign: 'center',\n        marginTop: theme.spacing(1),\n    },\n    stats: {\n        display: 'flex',\n        justifyContent: 'space-around',\n        width: '100%',\n    },\n    singleStat: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    statIcon: {\n        marginRight: theme.spacing(1),\n    },\n    checkbox: {\n        position: 'absolute',\n        top: 0,\n        right: 0,\n    },\n    identifier: {\n        position: 'absolute',\n        top: theme.spacing(1),\n        lrft: 0,\n    }\n}));\n\nexport const CompanyCard = ({ record }: { record: Company }) => {\n    const classes = useStyles();\n    const [elevation, setElevation] = useState(1);\n    const { data, ids, loaded, onToggleItem, selectedIds } = useListContext<Company>();\n    return (\n        <MuiLink\n            component={Link}\n            to={linkToRecord('/companies', record.id, 'show')}\n            underline=\"none\"\n            onMouseEnter={() => setElevation(3)}\n            onMouseLeave={() => setElevation(1)}\n        >\n            <Paper className={classes.paper} elevation={elevation}>\n                <Checkbox\n                    edge=\"start\"\n                    checked={selectedIds.includes(record.id)}\n                    tabIndex={-1}\n                    disableRipple\n                    className={classes.checkbox}\n                    onClick={(e: any )=> {\n                        e.stopPropagation();\n                        onToggleItem(record.id);\n                    }}\n                />\n                <Typography \n                    variant=\"body2\" \n                    color=\"textSecondary\"\n                    className={classes.identifier}\n                >\n                    {`#${record.id}`}\n                </Typography>\n                <div className={classes.identity}>\n                    <CompanyAvatar record={record} />\n                    <div className={classes.name}>\n                        <Box display=\"flex\" alignItems=\"center\">\n                        <Typography variant=\"subtitle2\">\n                            {record.name}\n                        </Typography>\n                        <ReferenceField\n                            record={record}\n                            source=\"country_id\"\n                            reference=\"countries\"\n                            link={false}\n                        >\n                            <CountryField size='small' />\n                        </ReferenceField>\n                        </Box>\n                        {record.relation && (\n                            <Chip \n                                label={record.relation} \n                                variant=\"outlined\" \n                                size=\"small\"\n                            />\n                        )}\n                        <SelectField\n                            color=\"textSecondary\"\n                            source=\"sector\"\n                            choices={sectors}\n                            record={record}\n                        />\n                    </div>\n                </div>\n                <div className={classes.stats}>\n                    <div className={classes.singleStat}>\n                        <ContactsIcon\n                            color=\"disabled\"\n                            className={classes.statIcon}\n                        />\n                        <div>\n                            <Typography\n                                variant=\"subtitle2\"\n                                style={{ marginBottom: -8 }}\n                            >\n                                {record.nb_contacts}\n                            </Typography>\n                            <Typography variant=\"caption\" color=\"textSecondary\">\n                                {record.nb_contacts > 1\n                                    ? 'contacts'\n                                    : 'contact'}\n                            </Typography>\n                        </div>\n                    </div>\n                    <div className={classes.singleStat}>\n                        <NoteIcon\n                            color=\"disabled\"\n                            className={classes.statIcon}\n                        />\n                        <div>\n                            <Typography\n                                variant=\"subtitle2\"\n                                style={{ marginBottom: -8 }}\n                            >\n                                {record.nb_notes}\n                            </Typography>\n                            <Typography variant=\"caption\" color=\"textSecondary\">\n                                {record.nb_notes > 1 ? 'notes' : 'note'}\n                            </Typography>\n                        </div>\n                    </div>\n                </div>\n            </Paper>\n        </MuiLink>\n    );\n};\n","import * as React from 'react';\nimport { Box, Paper } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useListContext, Identifier } from 'react-admin';\n\nimport { CompanyCard } from './CompanyCard';\nimport { Company } from '../types';\n\nconst useStyles = makeStyles(theme => ({\n    gridList: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        width:  '100%',\n        gap: '5px',\n    },\n    paper: {\n        height: 200,\n        width: 194,\n        display: 'flex',\n        flexDirection: 'column',\n        backgroundColor: theme.palette.grey[200],\n    },\n}));\n\nconst times = (nbChildren: number, fn: (key: number) => any) =>\n    Array.from({ length: nbChildren }, (_, key) => fn(key));\n\nconst LoadingGridList = () => {\n    const classes = useStyles();\n    return (\n        <Box className={classes.gridList}>\n            {times(15, key => (\n                <Paper className={classes.paper} key={key} />\n            ))}\n        </Box>\n    );\n};\n\nconst LoadedGridList = () => {\n    const { ids, data } = useListContext<Company>();\n    const classes = useStyles();\n\n    if (!ids || !data) return null;\n\n    return (\n        <Box className={classes.gridList}>\n            {ids.map((id: Identifier) => (\n                <CompanyCard key={id} record={data[id]} />\n            ))}\n        </Box>\n    );\n};\n\nexport const CompanyGridList = () => {\n    const { loaded } = useListContext();\n    return loaded ? <LoadedGridList /> : <LoadingGridList />;\n};\n","export const relations = [\n    'Distributor',\n    'End-customer',\n    'Prospect',\n    'System Integrator'\n].map(relations => ({ id: relations, name: relations }));","import { Box, Chip } from '@material-ui/core';\nimport { Tag } from '../types'\n\nexport const TagChip = ({ record }: { record: Tag; }) => (\n    <>\n        { record && (\n                <Chip\n                label={record.name}\n                size=\"small\"\n                style={{\n                    backgroundColor: record.color,\n                    border: 0,\n                    cursor: 'pointer',\n                }}\n            />\n        )}\n    </>\n);","/* eslint-disable import/no-anonymous-default-export */\nimport * as React from 'react';\nimport { useState } from 'react';\nimport { Drawer, IconButton } from '@material-ui/core';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport { makeStyles } from '@material-ui/core/styles';\nimport classNames from 'classnames';\n\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        order: -1,\n        display: 'flex',\n        flexDirection: 'column',\n    },\n    sideBig: {\n        width: 250,\n        minWidth: 250,\n        marginLeft: theme.spacing(2),\n        [theme.breakpoints.down('xs')]:{\n            display: 'none',\n        }\n    },\n    sideSmall: {\n        [theme.breakpoints.up('sm')]:{\n            display: 'none',\n        }\n    },\n    container: {\n        order: -1,\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n        minWidth: '13em',\n    },\n    drawerContent: {\n         marginTop: theme.spacing(2),\n         marginLeft: theme.spacing(1),\n         marginRight: theme.spacing(1),\n         maxWidth: theme.spacing(32),\n    }\n}));\n\nexport const CollapsibleListFilter = ({ children }: {children: any;}) => {\n    const classes = useStyles();\n    const [isOpen, setOpen] = useState(false);\n    const childrenWithProps = React.Children.map(children, child => \n        React.isValidElement(child)\n        ? React.cloneElement(child as React.ReactElement<any>, {})\n        : child\n    );\n    return (\n        <div className={classes.root}>\n            <div className={classes.sideBig}>\n                {childrenWithProps}\n            </div>\n            <div className={classes.sideSmall}>\n                <IconButton \n                    onClick={() => setOpen(true)}\n                    color=\"secondary\"\n                >\n                    <ChevronRightIcon />\n                </IconButton>\n            </div>\n            <Drawer \n                anchor=\"left\" \n                open={isOpen} onClose={() => setOpen(false)}\n            >\n                <div className={classes.drawerContent}>\n                    {childrenWithProps}\n                </div>\n            </Drawer>\n        </div>\n    );\n};","/* eslint-disable import/no-anonymous-default-export */\nimport * as React from 'react';\nimport { useState } from 'react';\nimport {\n    FilterList,\n    FilterLiveSearch,\n    FilterListItem,\n    useGetIdentity,\n    useGetList,\n} from 'react-admin';\nimport { Box, Chip, Drawer, IconButton, ListItem } from '@material-ui/core';\nimport BusinessIcon from '@material-ui/icons/Business';\nimport LocalShippingIcon from '@material-ui/icons/LocalShipping';\nimport SupervisorAccountIcon from '@material-ui/icons/SupervisorAccount';\nimport LocalOfferIcon from '@material-ui/icons/LocalOffer';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport PublicIcon from '@material-ui/icons/Public';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { sectors } from './sectors';\nimport { relations } from './relations';\nimport { TagChip } from '../tags/TagChip';\nimport { Country, Tag } from '../types';\nimport { CollapsibleListFilter } from '../components/CollapsibleListFilter';\n\nconst useStyles = makeStyles(theme => ({\n    container: {\n        minWidth: '13em',\n    },\n    countryList: {\n        maxHeight: theme.spacing(20), \n        overflow: 'auto',\n    },\n    tagList: {\n        maxHeight: theme.spacing(20), \n        overflow: 'auto',\n    }\n}));\n\nexport const CompanyListFilter = () => {\n    const classes = useStyles();\n    const { identity } = useGetIdentity();\n    const { data: tags, ids: tagIds } = useGetList<Tag>(\n        'tags',\n        { page: 1, perPage: 500 },\n        { field: 'name', order: 'ASC' }\n    );\n\n    const { data: countries, ids: countryIds } = useGetList<Country>(\n        'countries',\n        { page: 1, perPage: 500 },\n        { field: 'name', order: 'ASC' }\n    );\n\n    return (\n        <CollapsibleListFilter>\n            <FilterLiveSearch />\n\n            <FilterList label=\"Relation\" icon={<BusinessIcon />}>\n                {relations.map(relation => (\n                    <FilterListItem\n                        key={relation.id}\n                        label={relation.name}\n                        value={{ relation: relation.id }}\n                    />\n                ))}\n            </FilterList>\n\n            <FilterList label=\"Tags\" icon={<LocalOfferIcon />}>\n                <div className={classes.tagList}>\n                    {tagIds &&\n                        tags &&\n                        tagIds.map(id => (\n                            <FilterListItem\n                                key={id}\n                                label={<TagChip record={tags[id]}/>}\n                                value={{ tags: [id] }}\n                            />\n                    ))}\n                </div>\n            </FilterList>\n\n            <FilterList label=\"Sector\" icon={<LocalShippingIcon />}>\n                {sectors.map(sector => (\n                    <FilterListItem\n                        key={sector.id}\n                        label={sector.name}\n                        value={{ sector: sector.id }}\n                    />\n                ))}\n            </FilterList>\n\n            <FilterList label=\"Countries\" icon={<PublicIcon />}>\n                <div className={classes.countryList}>\n                    {countryIds &&\n                        countries &&\n                        countryIds.map(id => (\n                            <FilterListItem\n                            key={id}\n                            label={countries[id].nicename}\n                            value={{ country_id: id }}\n                            />\n                    ))}\n                </div>\n            </FilterList>\n\n            <FilterList\n                label=\"Account manager\"\n                icon={<SupervisorAccountIcon />}\n            >\n                <FilterListItem\n                    label=\"Me\"\n                    value={{\n                        sales_id: identity && identity.id,\n                    }}\n                />\n            </FilterList>\n        </CollapsibleListFilter>\n    );\n};\n","// in ./MarkDoneButton.js\nimport * as React from 'react';\nimport { Button, useListContext } from 'react-admin';\nimport DoneAllIcon from '@material-ui/icons/DoneAll';\nimport { Company } from '../types';\n\nconst doneState = { status: 'Done' };\n\nconst SelectAllButton = () => {\n    const { ids, data, onSelect } = useListContext<Company>();\n    return (\n        <Button\n            onClick={(e:any) =>{\n                e.stopPropagation();\n                onSelect(ids);\n            }}\n            label=\"Select All\"\n        >\n            <DoneAllIcon />\n        </Button>\n    );\n};\n\nexport default SelectAllButton;","import * as React from 'react';\nimport {\n    List,\n    ListProps,\n    TopToolbar,\n    ExportButton,\n    CreateButton,\n    Pagination,\n    useGetIdentity,\n    ListActionsProps,\n    SortButton,\n    FilterLiveSearch,\n} from 'react-admin';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { CompanyGridList } from './CompanyGridList';\nimport { CompanyListFilter } from './CompanyListFilter';\nimport { ImportButton } from 'react-admin-import-csv';\nimport SelectAllButton from './SelectAllButton';\nimport { Box } from '@material-ui/core';\n\nexport const CompanyList = (props: ListProps) => {\n    const { identity } = useGetIdentity();\n    return identity ? (\n        <List\n            {...props}\n            actions={<CompanyListActions />}\n            aside={<CompanyListFilter />}\n            filterDefaultValues={{ sales_id: identity?.id }}\n            pagination={<Pagination rowsPerPageOptions={[15, 25, 50, 100, 1000]} />}\n            perPage={25}\n            sort={{ field: 'name', order: 'ASC' }}\n            component=\"div\"\n        >\n            <CompanyGridList />\n        </List>\n    ) : null;\n};\n\nconst useStyles = makeStyles(theme => ({\n    toolbar: {\n        \n    },\n    createButton: {\n        marginLeft: theme.spacing(2),\n    },\n}));\n\nconst importOptions = {\n    parseConfig: {\n        // For all options see: https://www.papaparse.com/docs#config\n        dynamicTyping: true\n    }\n}\n\n\nconst CompanyListActions = (props: ListActionsProps) => {\n    const classes = useStyles();\n    return (\n        <TopToolbar className={classes.toolbar} >\n            <SortButton fields={['id', 'name']} />\n            <SelectAllButton />\n            <ExportButton />\n            <ImportButton {...props} {...importOptions}/>\n            <CreateButton\n                basePath=\"/companies\"\n                variant=\"contained\"\n                label=\"New Company\"\n                className={classes.createButton}\n            />\n        </TopToolbar>\n    );\n};\n","export const sizes = [\n    { id: 1, name: '1 employee' },\n    { id: 10, name: '2-9 employees' },\n    { id: 50, name: '10-49 employees' },\n    { id: 250, name: '50-249 employees' },\n    { id: 500, name: '250 or more employees' },\n];\n","import { AutocompleteInput, AutocompleteInputProps } from 'react-admin';\n\nconst DistributorInput = (props: AutocompleteInputProps) => (\n    <AutocompleteInput \n        {...props}\n        optionText={record => record ? record.country_iso ? `${record.name} (${record.country_iso})` : `${record.name}` : ''} \n        allowEmpty\n        resettable\n    />\n);\n\nexport default DistributorInput;","import * as React from 'react';\nimport {\n    Create,\n    CreateProps,\n    ReferenceInput,\n    SimpleForm,\n    TextInput,\n    SelectInput,\n    required,\n    AutocompleteInput,\n    useGetIdentity,\n    FormDataConsumer,\n    ReferenceArrayInput,\n    AutocompleteArrayInput,\n} from 'react-admin';\nimport { Box, CardContent, Divider, Avatar } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport BusinessIcon from '@material-ui/icons/Business';\nimport clsx from 'clsx';\n\nimport { sectors } from './sectors';\nimport { sizes } from './sizes';\nimport { relations } from './relations';\nimport DistributorInput from './DistributorInput';\n\nconst useStyles = makeStyles({\n    inline: {\n        display: 'inline-block',\n        marginLeft: '1em',\n        '&.first-child': {\n            marginLeft: 0,\n        },\n    },\n});\n\nexport const CompanyCreate = (props: CreateProps) => {\n    const classes = useStyles();\n    const { identity } = useGetIdentity();\n\n    if (!identity) return null;\n\n    const defaultValue = () => ({ sales_id: identity && identity?.id });\n\n    return (\n        <Create {...props} actions={false}>\n            <SimpleForm \n                component={CustomLayout} \n                initialValues={defaultValue}\n                redirect=\"show\"\n            >\n                <TextInput source=\"name\" validate={required()} fullWidth />\n                <SelectInput\n                    source=\"sector\"\n                    choices={sectors}\n                    formClassName={clsx(classes.inline, 'first-child')}\n                />\n                <SelectInput\n                    source=\"size\"\n                    choices={sizes}\n                    formClassName={classes.inline}\n                />\n                <SelectInput\n                    source=\"relation\"\n                    choices={relations}\n                    formClassName={classes.inline}\n                />\n                <FormDataConsumer>\n                    {({ formData, ...rest }) => formData.relation != 'Distributor' &&\n                        <ReferenceInput\n                            source=\"distributor_id\"\n                            reference=\"companies\"\n                            filter={{ relation: 'Distributor' }}\n                        >\n                            <DistributorInput />\n                        </ReferenceInput>\n                    }\n                </FormDataConsumer>\n\n                <ReferenceArrayInput source=\"use_products\" reference=\"products\">\n                    <AutocompleteArrayInput optionText=\"model\" />\n                </ReferenceArrayInput>\n\n                <CustomDivider />\n                <TextInput source=\"address\" fullWidth helperText={false} />\n                <TextInput\n                    source=\"city\"\n                    formClassName={clsx(classes.inline, 'first-child')}\n                />\n                <TextInput source=\"zipcode\" formClassName={classes.inline} />\n                <TextInput source=\"stateAbbr\" formClassName={classes.inline} />\n                <ReferenceInput\n                    source=\"country_id\"\n                    reference=\"countries\"\n                >\n                    <AutocompleteInput optionText=\"nicename\" />\n                </ReferenceInput>\n                <CustomDivider />\n                <TextInput source=\"website\" fullWidth helperText={false} />\n                <TextInput source=\"linkedIn\" fullWidth helperText={false} />\n                <TextInput source=\"logo\" fullWidth />\n                <CustomDivider />\n                <TextInput\n                    source=\"phone_number\"\n                    formClassName={clsx(classes.inline, 'first-child')}\n                    helperText={false}\n                />\n                <ReferenceInput\n                    source=\"sales_id\"\n                    reference=\"sales\"\n                    label=\"Account manager\"\n                    formClassName={classes.inline}\n                    helperText={false}\n                >\n                    <SelectInput\n                        optionText={(sales: any) =>\n                            `${sales.first_name} ${sales.last_name}`\n                        }\n                    />\n                </ReferenceInput>\n            </SimpleForm>\n        </Create>\n    );\n};\n\nconst CustomLayout = ({ children }: \n    {children: any;}) => (\n    <CardContent>\n        <Box display=\"flex\">\n            <Box paddingTop={1}>\n                <Avatar>\n                    <BusinessIcon />\n                </Avatar>\n            </Box>\n            <Box ml={2} flex=\"1\" maxWidth={796}>\n                {children}\n            </Box>\n        </Box>\n    </CardContent>\n);\n\nconst CustomDivider = () => (\n    <Box mb={2}>\n        <Divider />\n    </Box>\n);\n","import * as React from 'react';\nimport { Avatar as MuiAvatar } from '@material-ui/core';\n\nimport { Contact } from '../types';\n\nexport const Avatar = ({ record }: { record: Contact }) => (\n    <MuiAvatar src={record.avatar}>\n        {record.first_name.charAt(0)}\n        {record.last_name.charAt(0)}\n    </MuiAvatar>\n);\n","import * as React from 'react';\nimport { Box } from '@material-ui/core';\n\nconst getColorFromStatus = (status: string) =>\n    status === 'cold'\n        ? '#7dbde8'\n        : status === 'warm'\n        ? '#e8cb7d'\n        : status === 'hot'\n        ? '#e88b7d'\n        : status === 'in-contract'\n        ? '#a4e87d'\n        : '#000';\n\nexport const Status = ({ status }: { status: string }) => (\n    <Box\n        width={10}\n        height={10}\n        display=\"inline-block\"\n        borderRadius={5}\n        bgcolor={getColorFromStatus(status)}\n        component=\"span\"\n    />\n);\n","import * as React from 'react';\nimport { ReferenceArrayField, SingleFieldList, ChipField } from 'react-admin';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { Contact } from '../types';\n\nconst ColoredChipField = ({ record, ...props }: any) =>\n    record ? (\n        <ChipField\n            record={record}\n            {...props}\n            style={{ backgroundColor: record.color, border: 0 }}\n            component=\"span\"\n        />\n    ) : null;\n\nconst useStyles = makeStyles({\n    root: {\n        display: 'inline-block',\n    },\n});\n\nexport const TagsList = ({ record }: { record: Contact }) => {\n    const classes = useStyles();\n    if (!record) return null;\n    return (\n        <ReferenceArrayField\n            record={record}\n            basePath=\"/contacts\"\n            resource=\"contacts\"\n            source=\"tags\"\n            reference=\"tags\"\n            className={classes.root}\n        >\n            <SingleFieldList linkType={false} component=\"span\">\n                <ColoredChipField\n                    source=\"name\"\n                    variant=\"outlined\"\n                    size=\"small\"\n                />\n            </SingleFieldList>\n        </ReferenceArrayField>\n    );\n};\n","import * as React from 'react';\nimport { Avatar } from '@material-ui/core';\nimport BusinessIcon from '@material-ui/icons/Business';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n    image: {\n        objectFit: 'contain',\n    },\n});\n\nconst sizeInPixel = {\n    medium: 42,\n    small: 20,\n};\n\nexport const LogoField = ({\n    record,\n    source,\n    size = 'medium',\n}: {\n    record?: { logo: string; name: string };\n    source?: string;\n    size?: 'small' | 'medium';\n}) => {\n    const classes = useStyles();\n    if (!record) return null;\n    if(!record.logo) return (\n        <Avatar>\n            <BusinessIcon />\n        </Avatar>\n    )\n    return (\n        <img\n            src={process.env.PUBLIC_URL + record.logo}\n            alt={record.name}\n            title={record.name}\n            width={sizeInPixel[size]}\n            height={sizeInPixel[size]}\n            className={classes.image}\n        />\n    );\n};\n","export const colors = [\n    '#eddcd2',\n    '#fff1e6',\n    '#fde2e4',\n    '#fad2e1',\n    '#c5dedd',\n    '#dbe7e4',\n    '#f0efeb',\n    '#d6e2e9',\n    '#bcd4e6',\n    '#99c1de',\n];\n","import * as React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n    root: {\n        width: 30,\n        height: 30,\n        borderRadius: 15,\n        display: 'inline-block',\n        margin: 8,\n    },\n});\n\nexport const RoundButton = ({ color, handleClick, selected }: any) => {\n    const classes = useStyles();\n    return (\n        <button\n            type=\"button\"\n            className={classes.root}\n            style={{\n                backgroundColor: color,\n                border: selected ? '2px solid grey' : 'none',\n            }}\n            onClick={handleClick}\n        />\n    );\n};","import * as React from 'react';\nimport { useState, FormEvent } from 'react';\nimport {\n    useGetMany,\n    useCreate,\n    useUpdate,\n    useGetList,\n    Identifier,\n} from 'react-admin';\nimport {\n    Chip,\n    Box,\n    Button,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    TextField,\n    MenuItem,\n    Menu,\n} from '@material-ui/core';\nimport ControlPointIcon from '@material-ui/icons/ControlPoint';\nimport EditIcon from '@material-ui/icons/Edit';\n\nimport { colors } from './colors';\nimport { Contact, Company, Product } from '../types';\nimport { Tag } from '../types';\nimport { RoundButton } from '../components/RoundButton';\n\nexport const TagsListEdit = ({ \n    record,\n    reference, \n}: { \n    record: Contact | Company | Product;\n    reference: 'companies' | 'contacts' | 'products';\n}) => {\n    const [open, setOpen] = useState(false);\n    const [newTagName, setNewTagName] = useState('');\n    const [newTagColor, setNewTagColor] = useState(colors[0]);\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n    const [version, setVersion] = useState(0); // used to force the refresh of useGetList without refreshing the whole page\n    const [disabled, setDisabled] = useState(false);\n\n    const { data: allTags, ids } = useGetList<Tag>(\n        'tags',\n        { page: 1, perPage: 10 },\n        { field: 'name', order: 'ASC' },\n        {},\n        { version } as any // FIXME UseDataProviderOptions don't allow [key: string]: any\n    );\n    const { data: tags, loaded } = useGetMany('tags', record.tags, {\n        enabled: record.tags && record.tags.length > 0,\n    });\n    const [update] = useUpdate();\n    const [create] = useCreate();\n\n    const unselectedTagIds = ids && ids.filter(id => !record.tags.includes(id));\n\n    const handleOpen = (event: React.MouseEvent<HTMLDivElement>) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    const handleDeleteTag = (id: Identifier) => {\n        const tags: Identifier[] = record.tags.filter(\n            (tagId: Identifier) => tagId !== id\n        );\n        update(reference, record.id, { tags }, record);\n    };\n\n    const handleAddTag = (id: Identifier) => {\n        const tags: Identifier[] = [...record.tags, id];\n        update(reference, record.id, { tags }, record);\n        setAnchorEl(null);\n    };\n\n    const handleOpenCreateDialog = () => {\n        setOpen(true);\n        setAnchorEl(null);\n        setDisabled(false);\n    };\n\n    const handleNewTagNameChange = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        setNewTagName(event.target.value);\n    };\n\n    const handleCreateTag = (event: FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        setDisabled(true);\n        create(\n            'tags',\n            { name: newTagName, color: newTagColor },\n            {\n                onSuccess: ({ data }) => {\n                    update(\n                        reference,\n                        record.id,\n                        { tags: [...record.tags, data.id] },\n                        record,\n                        {\n                            onSuccess: () => {\n                                setNewTagName('');\n                                setNewTagColor(colors[0]);\n                                setOpen(false);\n\n                                setVersion(v => v + 1);\n                            },\n                        }\n                    );\n                },\n            }\n        );\n    };\n\n    // if (!loaded || !tags) return null;\n    return (\n        <>\n            {tags.map(tag => (\n                <Box mt={1} mb={1} key={tag.id}>\n                    <Chip\n                        size=\"small\"\n                        variant=\"outlined\"\n                        onDelete={() => handleDeleteTag(tag.id)}\n                        label={tag.name}\n                        style={{ backgroundColor: tag.color, border: 0 }}\n                    />\n                </Box>\n            ))}\n            <Box mt={1}>\n                <Chip\n                    icon={<ControlPointIcon />}\n                    size=\"small\"\n                    variant=\"outlined\"\n                    onClick={handleOpen}\n                    label=\"Add tag\"\n                    color=\"primary\"\n                />\n            </Box>\n            <Menu\n                open={Boolean(anchorEl)}\n                onClose={handleClose}\n                anchorEl={anchorEl}\n            >\n                {unselectedTagIds?.map(id => (\n                    <MenuItem key={id} onClick={() => handleAddTag(id)}>\n                        <Chip\n                            size=\"small\"\n                            variant=\"outlined\"\n                            label={allTags && allTags[id].name}\n                            style={{\n                                backgroundColor: allTags && allTags[id].color,\n                                border: 0,\n                            }}\n                            onClick={() => handleAddTag(id)}\n                        />\n                    </MenuItem>\n                ))}\n                <MenuItem onClick={handleOpenCreateDialog}>\n                    <Chip\n                        icon={<EditIcon />}\n                        size=\"small\"\n                        variant=\"outlined\"\n                        onClick={handleOpenCreateDialog}\n                        color=\"primary\"\n                        label=\"Create new tag\"\n                    />\n                </MenuItem>\n            </Menu>\n            <Dialog\n                open={open}\n                onClose={() => setOpen(false)}\n                aria-labelledby=\"form-dialog-title\"\n            >\n                <form onSubmit={handleCreateTag}>\n                    <DialogTitle id=\"form-dialog-title\">\n                        Create a new tag\n                    </DialogTitle>\n                    <DialogContent>\n                        <TextField\n                            autoFocus\n                            label=\"Tag name\"\n                            fullWidth\n                            value={newTagName}\n                            onChange={handleNewTagNameChange}\n                        />\n                        <Box display=\"flex\" flexWrap=\"wrap\" width={230} mt={2}>\n                            {colors.map(color => (\n                                <RoundButton\n                                    key={color}\n                                    color={color}\n                                    selected={color === newTagColor}\n                                    handleClick={() => {\n                                        setNewTagColor(color);\n                                    }}\n                                />\n                            ))}\n                        </Box>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={() => setOpen(false)} color=\"primary\">\n                            Cancel\n                        </Button>\n                        <Button\n                            type=\"submit\"\n                            color=\"primary\"\n                            disabled={disabled}\n                        >\n                            Add tag\n                        </Button>\n                    </DialogActions>\n                </form>\n            </Dialog>\n        </>\n    );\n};\n","import * as React from 'react';\nimport { useState } from 'react';\nimport {\n    EditButton,\n    ShowButton,\n} from 'react-admin';\nimport { Box, Drawer, IconButton } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        display: 'flex',\n        flexDirection: 'column',\n    },\n    sideBig: {\n        width: 250,\n        minWidth: 250,\n        marginLeft: theme.spacing(2),\n        [theme.breakpoints.down('xs')]:{\n            display: 'none',\n        }\n    },\n    sideSmall: {\n        [theme.breakpoints.up('sm')]:{\n            display: 'none',\n        }\n    },\n    drawerContent: {\n         marginTop: theme.spacing(2),\n         marginLeft: theme.spacing(1),\n         marginRight: theme.spacing(1),\n         maxWidth: theme.spacing(32),\n    }\n}));\n\nexport const CollapsibleAside = ({\n    basePath,\n    record,\n    link = 'edit',\n    children,\n}: {\n    basePath: string,\n    record?: any;\n    children: any,\n    link?: string;\n}) => {\n    const classes = useStyles();\n    const [isOpen, setOpen] = useState(false);\n    if (!record) return null;\n\n    const childrenWithProps = React.Children.map(children, child => \n        React.isValidElement(child)\n        ? React.cloneElement(child as React.ReactElement<any>, { record })\n        : child\n    );\n\n    return (\n        <div className={classes.root}>\n            <Box textAlign=\"center\" mb={2}>\n                {link === 'edit' ? (\n                    <EditButton\n                        basePath={basePath}\n                        record={record}\n                        label=\"Edit\"\n                    />\n                ) : (\n                    <ShowButton\n                        basePath={basePath}\n                        record={record}\n                        label=\"Show\"\n                    />\n                )}\n            </Box>\n            <div className={classes.sideBig}>\n                {childrenWithProps}\n            </div>\n            <div className={classes.sideSmall}>\n                <IconButton \n                    onClick={() => setOpen(true)}\n                    color=\"secondary\"\n                >\n                    <ChevronLeftIcon />\n                </IconButton>\n            </div>\n            <Drawer \n                anchor=\"right\" \n                open={isOpen} onClose={() => setOpen(false)}\n            >\n                <div className={classes.drawerContent}>\n                    {childrenWithProps}\n                </div>\n            </Drawer>\n        </div>\n    )\n};\n    \n","import * as React from 'react';\nimport { cloneElement, useState } from 'react';\nimport { \n    AutocompleteArrayInput,\n    Edit,\n    EditContextProvider,\n    Identifier, \n    ReferenceArrayField, \n    ReferenceArrayInput, \n    SimpleForm, \n    SingleFieldList, \n    useEditController, \n    useGetList, \n    useGetMany, \n    useUpdate, \n    useRefresh\n} from 'react-admin';\n\nimport {\n    Chip,\n    Box,\n    Button,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    TextField,\n    MenuItem,\n    Popover,\n    Menu,\n} from '@material-ui/core';\nimport ControlPointIcon from '@material-ui/icons/ControlPoint';\nimport { Company, Product } from '../types';\nimport { string } from 'prop-types';\n\nexport const ProductsListEdit = ({ \n    record,\n    reference, \n}: { \n    record: Company;\n    reference: 'companies';\n}) => {\n    const [open, setOpen] = useState(false);\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n    const [version, setVersion] = useState(0); // used to force the refresh of useGetList without refreshing the whole page\n    const [update] = useUpdate();\n    const refresh = useRefresh();\n\n\n\n    const { data: products, loaded } = useGetMany('products', record.use_products, {\n        enabled: record.use_products && record.use_products.length > 0,\n    });\n\n    const handleDeleteProduct = (id: Identifier) => {\n        const products: Identifier[] = record.use_products.filter(\n            (productId: Identifier) => productId !== id\n        );\n        update(reference, record.id, { use_products: products }, record);\n    };\n\n    const handleOpen = (event: React.MouseEvent<HTMLDivElement>) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleSucess = (values: any) =>{\n        refresh();\n        handleClose();\n    }\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n\n    if (!record) return null;\n\n     return (\n        <>\n            {loaded && products.map(product => (\n                <Box mt={1} key={product.id}>\n                    <Chip\n                        size=\"small\"\n                        variant=\"outlined\"\n                        onDelete={() => handleDeleteProduct(product.id)}\n                        label={product.model}\n                        style={{ backgroundColor: \"#d4d4d4\", border: 0 }}\n                    />\n                </Box>\n            ))}\n            <Box mt={1}>\n                <Chip\n                    icon={<ControlPointIcon />}\n                    size=\"small\"\n                    variant=\"outlined\"\n                    onClick={handleOpen}\n                    label=\"Add product\"\n                    color=\"primary\"\n                />\n            </Box>\n            <Popover\n                open={Boolean(anchorEl)}\n                anchorEl={anchorEl}\n                onClose={handleClose}\n                anchorOrigin={{\n                    vertical: 'center',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'center',\n                    horizontal: 'center',\n                }}\n            >\n                <Edit\n                    basePath=\"/companies\"\n                    resource={reference}\n                    id={record.id.toString()}\n                    onSuccess={handleSucess}\n                >\n                    <SimpleForm>\n                        <ReferenceArrayInput source=\"use_products\" reference=\"products\">\n                            <AutocompleteArrayInput optionText=\"model\" />\n                        </ReferenceArrayInput>\n                    </SimpleForm>\n                </Edit>\n            </Popover>\n        </>\n    );\n}","import * as React from 'react';\nimport {\n    TextField,\n    DateField,\n    FunctionField,\n    ReferenceField,\n    ReferenceArrayField,\n    SingleFieldList,\n    ChipField,\n    ShowButton,\n} from 'react-admin';\nimport { \n    Box, \n    Typography, \n    Divider, \n    Link,\n} from '@material-ui/core';\nimport { Company, Sale } from '../types';\nimport { TagsListEdit } from '../tags/TagsListEdit';\nimport { CollapsibleAside } from '../components/CollapsibleAside';\nimport { ProductsListEdit } from '../products/ProductsListEdit';\nimport { any } from 'prop-types';\n\nexport const CompanyAside = ({\n    record,\n    link = 'edit',\n    ...props\n}: {\n    record?: Company;\n    link?: string;\n}) => {\n    if (!record) return null;\n\n    return (\n        <CollapsibleAside record={record} link={link} basePath=\"/companies\">\n            <AsideContent />\n        </CollapsibleAside>\n    );\n};\n    \n\nconst AsideContent = ({ \n    record \n}: { \n    record?: Company;\n}) => \n    record ? (\n        <>\n            <Typography variant=\"subtitle2\">Company info</Typography>\n            <Divider />\n\n            <Box mt={2}>\n                Website: <Link href={record.website} target=\"_blank\" rel=\"noreferrer\">{record.website}</Link>\n                <br />\n                LinkedIn: <Link href={record.linkedIn} target=\"_blank\" rel=\"noreferrer\">LinkedIn</Link>\n            </Box>\n            <Box mt={1}>\n                Relation: <TextField source=\"relation\" record={record} />\n            </Box>\n            {record.distributor_id && (\n                <Box mt={1}>\n                    Distributor: <ReferenceField\n                            record={record}\n                            source=\"distributor_id\"\n                            reference=\"companies\"\n                        >\n                            <TextField source=\"name\" record={record} />\n                        </ReferenceField>\n                </Box>\n            )}\n\n            {record.phone_number && (\n                <Box mt={1}>\n                    <TextField source=\"phone_number\" record={record} />{' '}\n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"span\">Main</Typography>\n                </Box>\n            )}\n\n            <Box mt={1} mb={3}>\n                <TextField source=\"address\" />\n                <br />\n                <TextField source=\"city\" /> <TextField source=\"zipcode\" />{' '}\n                <TextField source=\"stateAbbr\" />\n            </Box>\n\n            <Typography variant=\"subtitle2\">Background</Typography>\n            <Divider />\n\n            <Box mt={3}>\n                <Typography\n                    variant=\"body2\"\n                    color=\"textSecondary\"\n                    component=\"span\"\n                >\n                    Added on\n                </Typography>{' '}\n                <DateField\n                    source=\"created_at\"\n                    options={{ year: 'numeric', month: 'long', day: 'numeric' }}\n                    color=\"textSecondary\"\n                />\n                <br />\n                <Typography\n                    component=\"span\"\n                    variant=\"body2\"\n                    color=\"textSecondary\"\n                >\n                    Followed by\n                </Typography>{' '}\n                <ReferenceField\n                    resource=\"companies\"\n                    source=\"sales_id\"\n                    reference=\"sales\"\n                >\n                    <FunctionField<Sale>\n                        source=\"last_name\"\n                        render={record =>\n                            record\n                                ? `${record.first_name} ${record.last_name}`\n                                : ''\n                        }\n                    />\n                </ReferenceField>\n            </Box>\n\n            <Box mb={3}>\n                <Typography variant=\"subtitle2\">Tags</Typography>\n                <Divider />\n                <TagsListEdit record={record} reference=\"companies\" />\n            </Box>\n\n            <Box mb={3}>\n                <Typography variant=\"subtitle2\">Use Products</Typography>\n                <Divider />\n\n                <ProductsListEdit record={record} reference=\"companies\" />\n            </Box>\n        </>\n    ) : null;","export const stages = [\n    'opportunity',\n    'proposal-sent',\n    'in-negociation',\n    'won',\n    'lost',\n    'delayed',\n];\n\nexport const stageNames = {\n    opportunity: 'Opportunity',\n    'proposal-sent': 'Proposal Sent',\n    'in-negociation': 'In Negociation',\n    won: 'Won',\n    lost: 'Lost',\n    delayed: 'Delayed',\n};\n\nexport const stageChoices = stages.map(type => ({\n    id: type,\n    /* @ts-ignore */\n    name: stageNames[type],\n}));\n","import * as React from 'react';\nimport { TextField, MenuItem } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\n\nimport { Status } from '../misc/Status';\n\nconst useStyles = makeStyles({\n    root: {\n        width: 150,\n    },\n});\n\nexport const StatusSelector = ({ status, setStatus, className = '' }: any) => {\n    const classes = useStyles();\n    return (\n        <TextField\n            select\n            value={status}\n            onChange={(event: React.ChangeEvent<{ value: unknown }>) => {\n                setStatus(event.target.value);\n            }}\n            variant=\"filled\"\n            label={false}\n            margin=\"none\"\n            size=\"small\"\n            className={clsx(className, classes.root)}\n        >\n            <MenuItem value=\"cold\">\n                Cold <Status status=\"cold\" />\n            </MenuItem>\n            <MenuItem value=\"warm\">\n                Warm <Status status=\"warm\" />\n            </MenuItem>\n            <MenuItem value=\"hot\">\n                Hot <Status status=\"hot\" />\n            </MenuItem>\n            <MenuItem value=\"in-contract\">\n                In Contract <Status status=\"in-contract\" />\n            </MenuItem>\n        </TextField>\n    );\n};\n","import * as React from 'react';\nimport { useState, FormEvent } from 'react';\nimport {\n    useRecordContext,\n    useCreate,\n    useUpdate,\n    useRefresh,\n    useNotify,\n    useGetIdentity,\n    Identifier,\n    useResourceContext,\n} from 'react-admin';\nimport { TextField as TextInput, Button, Paper } from '@material-ui/core';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport ReactMarkdown from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\n\nimport { StatusSelector } from './StatusSelector';\n\ntype Props = {\n    preview: Boolean;\n}\n\nconst useStyles = makeStyles<Theme, Props>(theme => ({\n    root: {\n        marginTop: theme.spacing(4),\n        marginBottom: theme.spacing(1),\n    },\n    toolbar: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        marginTop: theme.spacing(1),\n    },\n    small: {\n        marginRight: '1em',\n        '& .MuiFilledInput-input': {\n            paddingTop: 10,\n        },\n    },\n    buttonSwitcher: {\n        marginBottom: theme.spacing(1),\n    },\n    previewConatiner: {\n        display: 'flex',\n    },\n    previewRaw: {\n        flex: 1,\n    },\n    previewMarkdown: {\n        flex: 1,\n        marginLeft: theme.spacing(1),\n        paddingLeft: theme.spacing(1),\n        paddingRight: theme.spacing(1),\n        borderColor: theme.palette.primary.main,\n        display: ({preview}) => (preview ? 'block' : 'none'),\n    },\n}));\n\nexport const NewNote = ({\n    showStatus,\n    reference,\n}: {\n    showStatus?: boolean;\n    reference: 'companies' | 'contacts' | 'deals' | 'products';\n}) => {\n    const [preview, setPreview] = useState(false);\n    const classes = useStyles({preview});\n    const record = useRecordContext();\n    const resource = useResourceContext();\n    const [text, setText] = useState('');\n    const [status, setStatus] = useState(record && record.status);\n    const [date, setDate] = useState(getCurrentDate());\n    const [create, { loading }] = useCreate();\n    const [update] = useUpdate();\n    // FIXME: use refetch instead when ReferenceManyField exposes it in the ListContext\n    const refresh = useRefresh();\n    const notify = useNotify();\n    const { identity } = useGetIdentity();\n    if (!record || !identity) return null;\n\n    const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        const data: any = {\n            [foreignKeyMapping[reference]]: record.id,\n            sales_id: identity.id,\n            date,\n            text,\n        };\n        if (showStatus) {\n            data.status = status;\n        }\n        update(\n            reference,\n            ((record && record.id) as unknown) as Identifier,\n            {\n                last_seen: date,\n                status,\n            },\n            record\n        );\n        create(resource, data, {\n            onSuccess: () => {\n                setText('');\n                notify('Note added successfully', 'info');\n                refresh();\n            },\n        });\n        return false;\n    };\n    return (\n        <div className={classes.root}>\n            <form onSubmit={handleSubmit}>\n                <div className={classes.buttonSwitcher}>\n                    <Button \n                        variant={preview ? \"contained\": \"outlined\"} \n                        color=\"primary\"\n                        onClick={()=> setPreview(!preview)}\n                    >Markdown</Button>\n                </div>\n                <div className={classes.previewConatiner}>\n                    <div className={classes.previewRaw}>\n                        <TextInput\n                            label=\"Add a note\"\n                            variant=\"filled\"\n                            size=\"small\"\n                            fullWidth\n                            multiline\n                            value={text}\n                            onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n                                setText(event.target.value)\n                            }\n                        />\n                    </div>\n                    <Paper className={classes.previewMarkdown}>\n                        <ReactMarkdown children={text} remarkPlugins={[remarkGfm]} />\n                    </Paper>\n                </div>\n                <div className={classes.toolbar}>\n                    <span>\n                        {text ? (\n                            <>\n                                {showStatus && (\n                                    <StatusSelector\n                                        status={status}\n                                        setStatus={setStatus}\n                                        className={classes.small}\n                                    />\n                                )}\n                                <TextInput\n                                    type=\"datetime-local\"\n                                    variant=\"filled\"\n                                    size=\"small\"\n                                    value={date}\n                                    onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                                        setDate(event.target.value);\n                                    }}\n                                    className={classes.small}\n                                />\n                            </>\n                        ) : null}\n                    </span>\n                    <Button\n                        type=\"submit\"\n                        variant=\"contained\"\n                        color=\"primary\"\n                        disabled={!text || loading}\n                    >\n                        Add this note\n                    </Button>\n                </div>\n            </form>\n        </div>\n    );\n};\n\nconst getCurrentDate = () => {\n    const now = new Date();\n    now.setMinutes(now.getMinutes() - now.getTimezoneOffset());\n    return now.toISOString().slice(0, -8);\n};\n\nconst foreignKeyMapping = {\n    contacts: 'contact_id',\n    deals: 'deal_id',\n    companies: 'company_id',\n    products: 'product_id',\n};\n","import * as React from 'react';\nimport { useState, FormEvent, ChangeEvent } from 'react';\nimport {\n    TextField,\n    ReferenceField,\n    DateField,\n    useResourceContext,\n    useDelete,\n    useUpdate,\n    useNotify,\n    useRecordContext,\n} from 'react-admin';\nimport {\n    Typography,\n    Tooltip,\n    IconButton,\n    FilledInput,\n    Button,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport EditIcon from '@material-ui/icons/Edit';\nimport TrashIcon from '@material-ui/icons/Delete';\nimport ReactMarkdown from 'react-markdown'\nimport remarkGfm from 'remark-gfm'\n\nimport { Status } from '../misc/Status';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        marginBottom: theme.spacing(2),\n    },\n    metadata: {\n        marginBottom: theme.spacing(1),\n        color: theme.palette.text.secondary,\n    },\n    textarea: {\n        paddingTop: 16,\n        paddingLeft: 14,\n        paddingRight: 60,\n        paddingBottom: 14,\n        lineHeight: 1.3,\n    },\n    buttons: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        marginTop: theme.spacing(1),\n    },\n    cancel: {\n        marginRight: theme.spacing(1),\n    },\n    content: {\n        backgroundColor: theme.palette.grey[200],\n        padding: '0 1em',\n        borderRadius: 10,\n        display: 'flex',\n        alignItems: 'stretch',\n        marginBottom: theme.spacing(1),\n    },\n    text: {\n        flex: 1,\n    },\n    paragraph: {\n        fontFamily: theme.typography.fontFamily,\n        fontSize: theme.typography.body1.fontSize,\n        lineHeight: 1,\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n    },\n    toolbar: {\n        marginLeft: theme.spacing(2),\n        visibility: 'hidden',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-around',\n    },\n}));\n\nexport const Note = ({\n    showStatus,\n    note,\n    isLast,\n    reference,\n}: {\n    showStatus?: boolean;\n    note: any;\n    isLast: boolean;\n    reference: string;\n}) => {\n    const [isHover, setHover] = useState(false);\n    const [isEditing, setEditing] = useState(false);\n    const [noteText, setNoteText] = useState(note.text);\n    const resource = useResourceContext();\n    const record = useRecordContext();\n    const notify = useNotify();\n    const classes = useStyles();\n    const [update, { loading }] = useUpdate();\n\n    const [handleDelete] = useDelete(resource, note.id, note, {\n        mutationMode: 'undoable',\n        onSuccess: () => {\n            notify('Note deleted', 'info', undefined, true);\n            update(\n                reference,\n                record.id,\n                { nb_notes: record.nb_notes - 1 },\n                record\n            );\n        },\n    });\n\n    const handleEnterEditMode = () => {\n        setEditing(true);\n    };\n\n    const handleCancelEdit = () => {\n        setEditing(false);\n        setNoteText(note.text);\n        setHover(false);\n    };\n\n    const handleTextChange = (event: ChangeEvent<HTMLInputElement>) => {\n        setNoteText(event.target.value);\n    };\n\n    const handleNoteUpdate = (event: FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        update(resource, note.id, { text: noteText }, note, {\n            onSuccess: () => {\n                setEditing(false);\n                setNoteText(note.text);\n                setHover(false);\n            },\n        });\n    };\n\n    return (\n        <div\n            className={classes.root}\n            onMouseEnter={() => setHover(true)}\n            onMouseLeave={() => setHover(false)}\n        >\n            <div className={classes.metadata}>\n                <ReferenceField\n                    record={note}\n                    resource=\"contactNotes\"\n                    source=\"sales_id\"\n                    reference=\"sales\"\n                    basePath=\"/contactNotes\"\n                >\n                    <TextField source=\"first_name\" variant=\"body1\" />\n                </ReferenceField>{' '}\n                <Typography component=\"span\" variant=\"body1\">\n                    added a note on{' '}\n                </Typography>\n                <DateField\n                    source=\"date\"\n                    record={note}\n                    variant=\"body1\"\n                    showTime\n                    locales=\"en\"\n                    options={{\n                        dateStyle: 'full',\n                        timeStyle: 'short',\n                    }}\n                />{' '}\n                {showStatus && <Status status={note.status} />}\n            </div>\n            {isEditing ? (\n                <form onSubmit={handleNoteUpdate}>\n                    <FilledInput\n                        value={noteText}\n                        onChange={handleTextChange}\n                        fullWidth\n                        multiline\n                        className={classes.textarea}\n                        autoFocus\n                    />\n                    <div className={classes.buttons}>\n                        <Button\n                            className={classes.cancel}\n                            onClick={handleCancelEdit}\n                            color=\"primary\"\n                        >\n                            Cancel\n                        </Button>\n                        <Button\n                            type=\"submit\"\n                            color=\"primary\"\n                            variant=\"contained\"\n                            disabled={loading}\n                        >\n                            Update Note\n                        </Button>\n                    </div>\n                </form>\n            ) : (\n                <div \n                    className={classes.content}\n                    onClick={() => setHover(true)}\n                >\n                    <div className={classes.text}>\n                        <ReactMarkdown children={note.text} remarkPlugins={[remarkGfm]} />\n                    </div>\n                    <div\n                        className={classes.toolbar}\n                        style={{ visibility: isHover ? 'visible' : 'hidden' }}\n                    >\n                        <Tooltip title=\"Edit note\">\n                            <IconButton\n                                size=\"small\"\n                                onClick={handleEnterEditMode}\n                            >\n                                <EditIcon />\n                            </IconButton>\n                        </Tooltip>\n                        <Tooltip title=\"Delete note\">\n                            <IconButton size=\"small\" onClick={handleDelete}>\n                                <TrashIcon />\n                            </IconButton>\n                        </Tooltip>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\n","import * as React from 'react';\nimport { useListContext } from 'react-admin';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { Note } from './Note';\nimport { NewNote } from './NewNote';\n\nconst useStyles = makeStyles({\n    root: {\n        marginTop: '0.5em',\n    },\n});\n\nexport const NotesIterator = ({\n    showStatus,\n    reference,\n}: {\n    showStatus?: boolean;\n    reference: 'companies' | 'contacts' | 'deals' | 'products';\n}) => {\n    const classes = useStyles();\n    const { data, ids, loaded } = useListContext();\n    if (!loaded) return null;\n    return (\n        <>\n            <NewNote showStatus={showStatus} reference={reference} />\n            <div className={classes.root}>\n                {ids.map((id, index) => (\n                    <Note\n                        note={data[id]}\n                        isLast={index === ids.length - 1}\n                        showStatus={showStatus}\n                        reference={reference}\n                        key={index}\n                    />\n                ))}\n            </div>\n        </>\n    );\n};\n","import * as React from 'react';\nimport { Avatar } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport BusinessIcon from '@material-ui/icons/Business';\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\nimport clsx from 'clsx';\n\nimport { Product } from '../types';\n\nconst useStyles = makeStyles({\n    avatar: {\n        width: 60,\n        height: 60,\n        // backgroundColor: 'aliceblue',\n    },\n    img: {\n        objectFit: 'contain',\n    },\n    small: {\n        width: 20,\n        height: 20,\n    },\n    large: {\n        width: 40,\n        height: 40,\n    },\n});\n\nexport const ProductAvatar = ({\n    record,\n    size = 'large',\n}: {\n    record?: Product;\n    size?: 'small' | 'large';\n}) => {\n    const classes = useStyles();\n    if (!record) return null;\n\n\n    return (record.image\n        ? <Avatar\n            src={process.env.PUBLIC_URL + record.image}\n            alt={record.model}\n            className={classes.avatar}\n            imgProps={{ className: clsx(classes.img, classes[size]) }}\n        />\n        : <Avatar\n            alt={record.model}\n            className={classes.avatar}\n        >\n            <ShoppingCartIcon />\n        </Avatar>\n    );\n};\n","import * as React from 'react';\nimport { useState } from 'react';\nimport { Paper, Typography, Link as MuiLink, Box, Chip, Checkbox } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ContactsIcon from '@material-ui/icons/AccountCircle';\nimport DealIcon from '@material-ui/icons/MonetizationOn';\nimport { linkToRecord, TextField, ReferenceField, ImageField, useListContext } from 'react-admin';\nimport { Link } from 'react-router-dom';\n\nimport { ProductAvatar } from './ProductAvatar';\nimport { Product } from '../types';\nimport classNames from 'classnames';\n\nconst useStyles = makeStyles(theme => ({\n    paper: {\n        height: 200,\n        width: 194,\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-between',\n        padding: '1em',\n        position: 'relative',\n    },\n    identity: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    name: {\n        textAlign: 'center',\n        marginTop: theme.spacing(1),\n    },\n    family: {\n        textAlign: 'center',\n        marginTop: theme.spacing(1),\n    },\n    stats: {\n        display: 'flex',\n        justifyContent: 'space-around',\n        width: '100%',\n    },\n    singleStat: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    statIcon: {\n        marginRight: theme.spacing(1),\n    },\n    image: {\n        width: 28,\n        height: 28,\n    },\n    checkbox: {\n        position: 'absolute',\n        top: 0,\n        left: theme.spacing(1),\n    },\n    hidden:{\n        display: 'none',\n    }\n}));\n\nexport const ProductCard = ({ record }: { record: Product }) => {\n    const classes = useStyles();\n    const [elevation, setElevation] = useState(1);\n    const { data, ids, loaded, onToggleItem, selectedIds } = useListContext<Product>();\n    return (\n        <MuiLink\n            component={Link}\n            to={linkToRecord('/products', record.id, 'show')}\n            underline=\"none\"\n            onMouseEnter={() => setElevation(3)}\n            onMouseLeave={() => setElevation(1)}\n        >\n            <Paper className={classes.paper} elevation={elevation}>\n                <Checkbox\n                    edge=\"start\"\n                    checked={selectedIds.includes(record.id)}\n                    tabIndex={-1}\n                    disableRipple\n                    className={classNames(classes.checkbox, {[classes.hidden]: !loaded})}\n                    onClick={(e: any )=> {\n                        e.stopPropagation();\n                        onToggleItem(record.id);\n                    }}\n                />\n                <Box position=\"absolute\" top={10} right={10}>\n                    <ReferenceField\n                        record={record}\n                        source=\"company_id\"\n                        reference=\"companies\"\n                        link=\"show\"\n                    >\n                        <ImageField \n                            source=\"logo\" \n                            title=\"name\"\n                            classes={classes}\n                        />\n                    </ReferenceField>\n                </Box>\n                <div className={classes.identity}>\n                    <ProductAvatar record={record} />\n                    <div className={classes.name}>\n                        <Box display=\"flex\" alignItems=\"center\">\n                        <Typography variant=\"subtitle2\">\n                            {record.model}\n                        </Typography>\n                        </Box>\n                    </div>\n\n                    <div className={classes.family}>\n                        <Typography variant=\"body2\">\n                            in family{' '}\n                            <ReferenceField\n                                record={record}\n                                source=\"family_id\"\n                                reference=\"productFamilies\"\n                                link=\"show\"\n                            >\n                                <TextField source=\"name\" />\n                            </ReferenceField>\n                        </Typography>\n                    </div>\n\n                </div>\n                <div className={classes.stats}>\n                    <div className={classes.singleStat}>\n                        <ContactsIcon\n                            color=\"disabled\"\n                            className={classes.statIcon}\n                        />\n                        <div>\n                            <Typography\n                                variant=\"subtitle2\"\n                                style={{ marginBottom: -8 }}\n                            >\n                                {record.nb_notes}\n                            </Typography>\n                            <Typography variant=\"caption\" color=\"textSecondary\">\n                                {record.nb_notes > 1 ? 'notes' : 'note'}\n                            </Typography>\n                        </div>\n                    </div>\n                    <div className={classes.singleStat}>\n                        <DealIcon\n                            color=\"disabled\"\n                            className={classes.statIcon}\n                        />\n                        <div>\n                            <Typography\n                                variant=\"subtitle2\"\n                                style={{ marginBottom: -8 }}\n                            >\n                                {record.nb_properties}\n                            </Typography>\n                            <Typography variant=\"caption\" color=\"textSecondary\">\n                                {record.nb_properties > 1 ? 'properties' : 'property'}\n                            </Typography>\n                        </div>\n                    </div>\n                </div>\n            </Paper>\n        </MuiLink>\n    );\n};\n","import * as React from 'react';\nimport { Box, Paper } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useListContext, Identifier } from 'react-admin';\nimport Skeleton from '@material-ui/lab/Skeleton';\n\nimport { ProductCard } from './ProductCard';\nimport { Product } from '../types';\n\nconst useStyles = makeStyles(theme => ({\n    gridList: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        width:  '100%',\n        gap: '5px',\n    },\n    paper: {\n        height: 200,\n        width: 194,\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-between',\n        alignItems: \"center\",\n        padding: '1em',\n        backgroundColor: theme.palette.grey[200],\n    },\n}));\n\nconst times = (nbChildren: number, fn: (key: number) => any) =>\n    Array.from({ length: nbChildren }, (_, key) => fn(key));\n\nconst LoadingGridList = () => {\n    const classes = useStyles();\n    return (\n        <Box className={classes.gridList}>\n            {times(15, key => (\n                <Paper className={classes.paper} key={key} >\n                <Skeleton variant=\"circle\" width={60} height={60}  animation=\"wave\"/>\n                <Skeleton variant=\"text\" animation=\"wave\" width={110}/>\n                <Skeleton variant=\"text\" animation=\"wave\" width={150}/>\n                <Skeleton variant=\"rect\" width={180} height={40} />\n                </Paper>\n            ))}\n        </Box>\n    );\n};\n\nconst LoadedGridList = () => {\n    const { ids, data } = useListContext<Product>();\n    const classes = useStyles();\n\n    if (!ids || !data) return null;\n\n    return (\n        <Box className={classes.gridList}>\n            {ids.map((id: Identifier) => (\n                <ProductCard key={id} record={data[id]} />\n            ))}\n        </Box>\n    );\n};\n\nexport const ProductGridList = () => {\n    const { loaded, loading } = useListContext();\n    return loading ? <LoadingGridList /> : <LoadedGridList /> ;\n};\n","import * as React from 'react';\nimport { useState, ChangeEvent } from 'react';\nimport {\n    ShowBase,\n    ShowProps,\n    TextField,\n    ReferenceManyField,\n    SelectField,\n    ReferenceField,\n    ImageField,\n    useShowContext,\n    useRecordContext,\n    useListContext,\n    Pagination,\n} from 'react-admin';\nimport {\n    Avatar as MuiAvatar,\n    Box,\n    Button,\n    Card,\n    CardContent,\n    Typography,\n    List,\n    ListItem,\n    ListItemAvatar,\n    ListItemText,\n    ListItemSecondaryAction,\n    Tabs,\n    Tab,\n    Chip,\n    Divider,\n} from '@material-ui/core';\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { formatDistance } from 'date-fns';\nimport BusinessIcon from '@material-ui/icons/Business';\nimport AddIcon from '@material-ui/icons/Add';\n\nimport { Avatar } from '../contacts/Avatar';\nimport { Status } from '../misc/Status';\nimport { TagsList } from '../tags/TagsList';\nimport { sizes } from './sizes';\nimport { LogoField } from './LogoField';\nimport { CompanyAside } from './CompanyAside';\nimport { Company, Deal, Contact } from '../types';\nimport { stageNames } from '../deals/stages';\nimport { NotesIterator } from '../notes';\nimport { CountryField } from './CountryField';\nimport { ProductGridList } from '../products/ProductGridList';\n\nexport const CompanyShow = (props: ShowProps) => (\n    <ShowBase {...props}>\n        <CompanyShowContent />\n    </ShowBase>\n);\n\nconst CompanyShowContent = () => {\n    const { record, loaded } = useShowContext<Company>();\n    const [value, setValue] = useState(0);\n    const handleChange = (event: ChangeEvent<{}>, newValue: number) => {\n        setValue(newValue);\n    };\n    if (!loaded || !record) return null;\n    return (\n        <Box mt={2} display=\"flex\">\n            <Box flex=\"1\">\n                <Card>\n                    <CardContent>\n                        <Box display=\"flex\" mb={1}>\n                            <LogoField record={record as any} />\n                            <Box ml={2} flex=\"1\">\n                                <Box display=\"flex\" gridGap={4}>\n                                    <Typography variant=\"h5\">{record.name}</Typography>\n                                    {record.relation && (\n                                        <Chip \n                                            label={record.relation} \n                                            variant=\"outlined\" \n                                            size=\"small\"\n                                        />\n                                    )}\n                                </Box>\n                                <Typography \n                                    variant=\"body2\" \n                                    color=\"textSecondary\"\n                                >\n                                    {`#${record.id} - `}\n                                </Typography>\n                                {record.sector && (\n                                        <Typography variant=\"body2\">\n                                            <TextField source=\"sector\" />,{' '}\n                                            <SelectField\n                                                source=\"size\"\n                                                choices={sizes}\n                                            />\n                                        </Typography>\n                                )}\n                            </Box>\n                            <Box>\n                                <ReferenceField\n                                    source=\"country_id\"\n                                    reference=\"countries\"\n                                    link={false}\n                                >\n                                    <CountryField />\n                                </ReferenceField>\n                            </Box>\n                        </Box>\n                        <Tabs\n                            value={value}\n                            indicatorColor=\"primary\"\n                            textColor=\"primary\"\n                            onChange={handleChange}\n                            variant=\"scrollable\"\n                            scrollButtons=\"auto\"\n                        >\n                            <Tab\n                                label={\n                                    record.nb_notes === 1\n                                        ? '1 Note'\n                                        : `${record.nb_notes} Notes`\n                                }\n                            />\n                            <Tab\n                                label={\n                                    record.nb_contacts === 1\n                                        ? '1 Contact'\n                                        : `${record.nb_contacts} Contacts`\n                                }\n                            />\n                            <Tab\n                                label={\n                                    record.nb_deals === 1\n                                        ? '1 Deal'\n                                        : `${record.nb_deals} Deals`\n                                }\n                            />\n                            <Tab\n                                label={\n                                    record.nb_products === 1\n                                        ? '1 Product'\n                                        : `${record.nb_products} Products`\n                                }\n                            />\n                        </Tabs>\n                        <Divider />\n                        <TabPanel value={value} index={0}>\n                            <ReferenceManyField\n                                reference=\"companyNotes\"\n                                target=\"company_id\"\n                                sort={{ field: 'date', order: 'DESC' }}\n                            >\n                                 <NotesIterator reference=\"companies\" />\n                            </ReferenceManyField>\n                        </TabPanel>\n                        <TabPanel value={value} index={1}>\n                            <ReferenceManyField\n                                reference=\"contacts\"\n                                target=\"company_id\"\n                                sort={{ field: 'last_name', order: 'ASC' }}\n                            >\n                                <ContactsIterator />\n                            </ReferenceManyField>\n                        </TabPanel>\n                        <TabPanel value={value} index={2}>\n                            <ReferenceManyField\n                                reference=\"deals\"\n                                target=\"company_id\"\n                                sort={{ field: 'name', order: 'ASC' }}\n                            >\n                                <DealsIterator />\n                            </ReferenceManyField>\n                        </TabPanel>\n                        <TabPanel value={value} index={3}>\n                            <Box mt={1}>\n                                <ReferenceManyField\n                                    reference=\"products\"\n                                    target=\"company_id\"\n                                    label=\"Products\"\n                                    pagination={<Pagination rowsPerPageOptions={[15, 25, 50, 100]} />}\n                                    perPage={25}\n                                >\n                                    <ProductGridList />\n                                </ReferenceManyField>\n                            </Box>\n                            <Box textAlign=\"center\" mt={1}>\n                                <CreateRelatedProductButton record={record} />\n                            </Box>\n                        </TabPanel>\n                    </CardContent>\n                </Card>\n            </Box>\n            <CompanyAside record={record} />\n        </Box>\n    );\n};\n\ninterface TabPanelProps {\n    children?: React.ReactNode;\n    index: any;\n    value: any;\n}\n\nconst TabPanel = (props: TabPanelProps) => {\n    const { children, value, index, ...other } = props;\n\n    return (\n        <div\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`wrapped-tabpanel-${index}`}\n            aria-labelledby={`wrapped-tab-${index}`}\n            {...other}\n        >\n            {children}\n        </div>\n    );\n};\n\nconst ContactsIterator = () => {\n    const { data, ids, loaded } = useListContext<Contact>();\n    const record = useRecordContext();\n\n    const now = Date.now();\n    if (!loaded) return null;\n    return (\n        <Box>\n            <List>\n                {ids.map(id => {\n                    const contact = data[id];\n                    return (\n                        <ListItem\n                            button\n                            key={id}\n                            component={RouterLink}\n                            to={`/contacts/${id}/show`}\n                        >\n                            <ListItemAvatar>\n                                <Avatar record={contact} />\n                            </ListItemAvatar>\n                            <ListItemText\n                                primary={`${contact.first_name} ${contact.last_name}`}\n                                secondary={\n                                    <>\n                                        {contact.title}{' '}\n                                        {`- ${contact.nb_notes} notes `}\n                                        <TagsList record={contact} />\n                                    </>\n                                }\n                            />\n                            <ListItemSecondaryAction>\n                                <Typography variant=\"body2\" color=\"textSecondary\">\n                                    last activity{' '}\n                                    {formatDistance(\n                                        new Date(contact.last_seen),\n                                        now\n                                    )}{' '}\n                                    ago <Status status={contact.status} />\n                                </Typography>\n                            </ListItemSecondaryAction>\n                        </ListItem>\n                    );\n                })}\n            </List>\n            <Box textAlign=\"center\" mt={1}>\n                <CreateRelatedContactButton record={record} />\n            </Box>\n        </Box>\n    );\n};\n\nconst CreateRelatedContactButton = ({ record }: any) => (\n    <Button\n        component={RouterLink}\n        to={{\n            pathname: '/contacts/create',\n            state: { record: { company_id: record.id } },\n        }}\n        color=\"primary\"\n        variant=\"contained\"\n        size=\"small\"\n        startIcon={<PersonAddIcon />}\n    >\n        Add contact\n    </Button>\n);\n\nconst CreateRelatedProductButton = ({ record }: any) => (\n    <Button\n        component={RouterLink}\n        to={{\n            pathname: '/products/create',\n            state: { record: { company_id: record.id } },\n        }}\n        color=\"primary\"\n        variant=\"contained\"\n        size=\"small\"\n        startIcon={<AddIcon />}\n    >\n        Add product\n    </Button>\n);\n\nconst DealsIterator = () => {\n    const { data, ids, loaded } = useListContext<Deal>();\n\n    const now = Date.now();\n    if (!loaded) return null;\n    return (\n        <Box>\n            <List>\n                {ids.map(id => {\n                    const deal = data[id];\n                    return (\n                        <ListItem\n                            button\n                            key={id}\n                            component={RouterLink}\n                            to={`/deals/${id}/show`}\n                        >\n                            <ListItemText\n                                primary={deal.name}\n                                secondary={\n                                    <>\n                                        {/* @ts-ignore */}\n                                        {stageNames[deal.stage]},{' '}\n                                        {deal.amount.toLocaleString('en-US', {\n                                            notation: 'compact',\n                                            style: 'currency',\n                                            currency: 'USD',\n                                            currencyDisplay: 'narrowSymbol',\n                                            minimumSignificantDigits: 3,\n                                        })}\n                                        , {deal.type}\n                                    </>\n                                }\n                            />\n                            <ListItemSecondaryAction>\n                                <Typography\n                                    variant=\"body2\"\n                                    color=\"textSecondary\"\n                                    component=\"span\"\n                                >\n                                    last activity{' '}\n                                    {formatDistance(\n                                        new Date(deal.updated_at),\n                                        now\n                                    )}{' '}\n                                    ago{' '}\n                                </Typography>\n                            </ListItemSecondaryAction>\n                        </ListItem>\n                    );\n                })}\n            </List>\n        </Box>\n    );\n};\n","import * as React from 'react';\nimport {\n    Edit,\n    EditProps,\n    ReferenceInput,\n    SimpleForm,\n    TextInput,\n    SelectInput,\n    useRecordContext,\n    AutocompleteInput,\n    ReferenceArrayInput,\n    AutocompleteArrayInput,\n    FormDataConsumer,\n    required,\n} from 'react-admin';\nimport { Box, CardContent, Divider } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\n\nimport { CompanyAside } from './CompanyAside';\nimport { LogoField } from './LogoField';\nimport { sectors } from './sectors';\nimport { sizes } from './sizes';\nimport { relations } from './relations';\nimport DistributorInput from './DistributorInput';\n\nconst useStyles = makeStyles({\n    inline: {\n        display: 'inline-block',\n        marginLeft: '1em',\n        '&.first-child': {\n            marginLeft: 0,\n        },\n    },\n});\n\nconst renderDistributor = (choice: any) => {\n\n}\n\nexport const CompanyEdit = (props: EditProps) => {\n    const classes = useStyles();\n    return (\n        <Edit {...props} aside={<CompanyAside link=\"show\" />} actions={false}>\n            <SimpleForm component={CustomLayout} redirect=\"show\">\n                <TextInput source=\"name\" validate={required()} fullWidth />\n                <SelectInput\n                    source=\"sector\"\n                    choices={sectors}\n                    formClassName={clsx(classes.inline, 'first-child')}\n                />\n                <SelectInput\n                    source=\"size\"\n                    choices={sizes}\n                    formClassName={classes.inline}\n                />\n                <SelectInput\n                    source=\"relation\"\n                    choices={relations}\n                    formClassName={classes.inline}\n                />\n                <FormDataConsumer>\n                    {({ formData, ...rest }) => formData.relation != 'Distributor' &&\n                        <ReferenceInput\n                            source=\"distributor_id\"\n                            reference=\"companies\"\n                            filter={{ relation: 'Distributor' }}\n                        >\n                            <DistributorInput />\n                        </ReferenceInput>\n                    }\n                </FormDataConsumer>\n\n                <ReferenceArrayInput source=\"use_products\" reference=\"products\">\n                    <AutocompleteArrayInput optionText=\"model\" />\n                </ReferenceArrayInput>\n\n                <CustomDivider />\n                <TextInput source=\"address\" fullWidth helperText={false} />\n                <TextInput\n                    source=\"city\"\n                    formClassName={clsx(classes.inline, 'first-child')}\n                />\n                <TextInput source=\"zipcode\" formClassName={classes.inline} />\n                <TextInput source=\"stateAbbr\" formClassName={classes.inline} />\n                <ReferenceInput\n                    source=\"country_id\"\n                    reference=\"countries\"\n                >\n                    <AutocompleteInput optionText=\"nicename\" />\n                </ReferenceInput>\n                <CustomDivider />\n                <TextInput source=\"website\" fullWidth helperText={false} />\n                <TextInput source=\"linkedIn\" fullWidth helperText={false} />\n                <TextInput source=\"logo\" fullWidth />\n                <CustomDivider />\n                <TextInput\n                    source=\"phone_number\"\n                    formClassName={clsx(classes.inline, 'first-child')}\n                    helperText={false}\n                />\n                <ReferenceInput\n                    source=\"sales_id\"\n                    reference=\"sales\"\n                    label=\"Account manager\"\n                    formClassName={classes.inline}\n                    helperText={false}\n                >\n                    <SelectInput\n                        optionText={(sales: any) =>\n                            `${sales.first_name} ${sales.last_name}`\n                        }\n                    />\n                </ReferenceInput>\n            </SimpleForm>\n        </Edit>\n    );\n};\n\nconst CustomLayout = (props: any) => {\n    const record = useRecordContext(props);\n    return (\n        <CardContent>\n            <Box display=\"flex\">\n                <LogoField record={record as any} />\n                <Box ml={2} flex=\"1\" maxWidth={796}>\n                    {props.children}\n                </Box>\n            </Box>\n        </CardContent>\n    );\n};\n\nconst CustomDivider = () => (\n    <Box mb={2}>\n        <Divider />\n    </Box>\n);\n","/* eslint-disable import/no-anonymous-default-export */\nimport { CompanyList } from './CompanyList';\nimport { CompanyCreate } from './CompanyCreate';\nimport { CompanyShow } from './CompanyShow';\nimport { CompanyEdit } from './CompanyEdit';\nimport BusinessIcon from '@material-ui/icons/Business';\n\nexport default {\n    list: CompanyList,\n    create: CompanyCreate,\n    edit: CompanyEdit,\n    show: CompanyShow,\n    icon: BusinessIcon,\n};\n","import * as React from 'react';\nimport {\n    TextField,\n    EmailField,\n    DateField,\n    ReferenceManyField,\n    useListContext,\n    ReferenceField,\n    FunctionField,\n} from 'react-admin';\nimport { Box, Typography, Divider, List, ListItem } from '@material-ui/core';\nimport { TagsListEdit } from '../tags/TagsListEdit';\n\nimport { Contact, Sale } from '../types';\nimport { CollapsibleAside } from '../components/CollapsibleAside';\n\nexport const ContactAside = ({ \n    record, \n    link = 'edit',\n}: {\n    record?: Contact;\n    link?: string;\n}) => {\n    if (!record) return null;\n\n    return (\n        <CollapsibleAside record={record} link={link} basePath=\"/contacts\">\n            <AsideContent />\n        </CollapsibleAside>\n    );\n};\n\nconst TasksIterator = () => {\n    const { data, ids, loading } = useListContext();\n    if (loading || ids.length === 0) return null;\n    return (\n            <List>\n                {ids.map(id => {\n                    const task = data[id];\n                    return (\n                        <ListItem key={id} disableGutters>\n                            <Box>\n                                <Typography variant=\"body2\">\n                                    {task.text}\n                                </Typography>\n                                <Typography\n                                    variant=\"body2\"\n                                    color=\"textSecondary\"\n                                >\n                                    due{' '}\n                                    <DateField\n                                        source=\"due_date\"\n                                        record={task}\n                                    />\n                                </Typography>\n                            </Box>\n                        </ListItem>\n                    );\n                })}\n            </List>\n    );\n};\n\n\nconst AsideContent = ({ \n    record \n}: { \n    record?: Contact;\n}) => \n    record ? (\n        <>\n            <Typography variant=\"subtitle2\">Personal info</Typography>\n            <Divider />\n\n            <Box mt={2}>\n                <EmailField source=\"email\" />\n            </Box>\n\n            <Box mt={1}>\n                <TextField source=\"phone_number1\" />{' '}\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"span\">\n                    Work\n                </Typography>\n            </Box>\n\n            <Box mb={1}>\n                <TextField source=\"phone_number2\" />{' '}\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"span\">\n                    Home\n                </Typography>\n            </Box>\n\n            <Box mb={3}>\n                <Typography variant=\"body2\">\n                    {record.gender === 'male' ? 'He/Him' : 'She/Her'}\n                </Typography>\n            </Box>\n\n            <Typography variant=\"subtitle2\">Background</Typography>\n            <Divider />\n\n            <Box mt={2}>{record && record.background}</Box>\n            <Box mt={1} mb={3}>\n                <Typography component=\"span\" variant=\"body2\" color=\"textSecondary\">\n                    Added on\n                </Typography>{' '}\n                <DateField\n                    source=\"first_seen\"\n                    options={{ year: 'numeric', month: 'long', day: 'numeric' }}\n                    color=\"textSecondary\"\n                />\n                <br />\n                <Typography component=\"span\" variant=\"body2\" color=\"textSecondary\">\n                    Last seen on\n                </Typography>{' '}\n                <DateField\n                    source=\"last_seen\"\n                    options={{ year: 'numeric', month: 'long', day: 'numeric' }}\n                    color=\"textSecondary\"\n                />\n                <br />\n                <Typography component=\"span\" variant=\"body2\" color=\"textSecondary\">\n                    Followed by\n                </Typography>{' '}\n                <ReferenceField\n                    resource=\"contacts\"\n                    source=\"sales_id\"\n                    reference=\"sales\"\n                >\n                    <FunctionField<Sale>\n                        source=\"last_name\"\n                        render={record =>\n                            record ? `${record.first_name} ${record.last_name}` : ''\n                        }\n                    />\n                </ReferenceField>\n            </Box>\n\n            <Box mb={3}>\n                <Typography variant=\"subtitle2\">Tags</Typography>\n                <Divider />\n                <TagsListEdit record={record} reference=\"contacts\" />\n            </Box>\n\n            <Box>\n                <Typography variant=\"subtitle2\">Tasks</Typography>\n                <Divider />\n                <ReferenceManyField\n                    resource=\"contacts\"\n                    target=\"contact_id\"\n                    reference=\"tasks\"\n                >\n                    <TasksIterator />\n                </ReferenceManyField>\n            </Box>\n        </>\n    ) : null;","import * as React from 'react';\nimport {\n    ShowBase,\n    ShowProps,\n    TextField,\n    ReferenceField,\n    ReferenceManyField,\n    useShowContext,\n} from 'react-admin';\nimport { Box, Card, CardContent, Typography } from '@material-ui/core';\n\nimport { Avatar } from './Avatar';\nimport { ContactAside } from './ContactAside';\nimport { LogoField } from '../companies/LogoField';\nimport { NotesIterator } from '../notes';\nimport { Contact } from '../types';\n\nexport const ContactShow = (props: ShowProps) => (\n    <ShowBase {...props}>\n        <ContactShowContent />\n    </ShowBase>\n);\n\nconst ContactShowContent = () => {\n    const { record, loaded } = useShowContext<Contact>();\n    if (!loaded || !record) return null;\n    return (\n        <Box mt={2} display=\"flex\">\n            <Box flex=\"1\">\n                <Card>\n                    <CardContent>\n                        <Box display=\"flex\">\n                            <Avatar record={record} />\n                            <Box ml={2} flex=\"1\">\n                                <Typography variant=\"h5\">\n                                    {record.first_name} {record.last_name}\n                                </Typography>\n                                <Typography variant=\"body2\">\n                                    {`#${record.id} - `}\n                                    {record.title} at{' '}\n                                    <ReferenceField\n                                        source=\"company_id\"\n                                        reference=\"companies\"\n                                        link=\"show\"\n                                    >\n                                        <TextField source=\"name\" />\n                                    </ReferenceField>\n                                </Typography>\n                            </Box>\n                            <Box>\n                                <ReferenceField\n                                    source=\"company_id\"\n                                    reference=\"companies\"\n                                    link=\"show\"\n                                >\n                                    <LogoField />\n                                </ReferenceField>\n                            </Box>\n                        </Box>\n                        <ReferenceManyField\n                            target=\"contact_id\"\n                            reference=\"contactNotes\"\n                            sort={{ field: 'date', order: 'DESC' }}\n                        >\n                            <NotesIterator showStatus reference=\"contacts\" />\n                        </ReferenceManyField>\n                    </CardContent>\n                </Card>\n            </Box>\n            <ContactAside record={record} />\n        </Box>\n    );\n};\n","/* eslint-disable import/no-anonymous-default-export */\nimport * as React from 'react';\nimport {\n    FilterList,\n    FilterLiveSearch,\n    FilterListItem,\n    useGetIdentity,\n    useGetList,\n} from 'react-admin';\nimport { Box, Chip } from '@material-ui/core';\nimport AccessTimeIcon from '@material-ui/icons/AccessTime';\nimport TrendingUpIcon from '@material-ui/icons/TrendingUp';\nimport LocalOfferIcon from '@material-ui/icons/LocalOffer';\nimport SupervisorAccountIcon from '@material-ui/icons/SupervisorAccount';\nimport { endOfYesterday, startOfWeek, startOfMonth, subMonths } from 'date-fns';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { Status } from '../misc/Status';\nimport { TagChip } from '../tags/TagChip';\nimport { Tag } from '../types';\nimport { CollapsibleListFilter } from '../components/CollapsibleListFilter';\n\nconst useStyles = makeStyles(theme => ({\n    container: {\n        order: -1,\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n        minWidth: '13em',\n        [theme.breakpoints.down('xs')]: {\n            display: 'none',\n        }\n    },\n}));\n\nexport const ContactListFilter = () => {\n    const classes = useStyles();\n    const { identity } = useGetIdentity();\n    const { data, ids } = useGetList<Tag>(\n        'tags',\n        { page: 1, perPage: 10 },\n        { field: 'name', order: 'ASC' }\n    );\n    return (\n        <CollapsibleListFilter>\n            <FilterLiveSearch />\n            <FilterList label=\"Last seen\" icon={<AccessTimeIcon />}>\n                <FilterListItem\n                    label=\"Today\"\n                    value={{\n                        last_seen_gte: endOfYesterday().toISOString(),\n                        last_seen_lte: undefined,\n                    }}\n                />\n                <FilterListItem\n                    label=\"This week\"\n                    value={{\n                        last_seen_gte: startOfWeek(new Date()).toISOString(),\n                        last_seen_lte: undefined,\n                    }}\n                />\n                <FilterListItem\n                    label=\"Before this week\"\n                    value={{\n                        last_seen_gte: undefined,\n                        last_seen_lte: startOfWeek(new Date()).toISOString(),\n                    }}\n                />\n                <FilterListItem\n                    label=\"Before this month\"\n                    value={{\n                        last_seen_gte: undefined,\n                        last_seen_lte: startOfMonth(new Date()).toISOString(),\n                    }}\n                />\n                <FilterListItem\n                    label=\"Before last month\"\n                    value={{\n                        last_seen_gte: undefined,\n                        last_seen_lte: subMonths(\n                            startOfMonth(new Date()),\n                            1\n                        ).toISOString(),\n                    }}\n                />\n            </FilterList>\n            <FilterList label=\"Status\" icon={<TrendingUpIcon />}>\n                <FilterListItem\n                    label={\n                        <>\n                            Cold <Status status=\"cold\" />\n                        </>\n                    }\n                    value={{\n                        status: 'cold',\n                    }}\n                />\n                <FilterListItem\n                    label={\n                        <>\n                            Warm <Status status=\"warm\" />\n                        </>\n                    }\n                    value={{\n                        status: 'warm',\n                    }}\n                />\n                <FilterListItem\n                    label={\n                        <>\n                            Hot <Status status=\"hot\" />\n                        </>\n                    }\n                    value={{\n                        status: 'hot',\n                    }}\n                />\n                <FilterListItem\n                    label={\n                        <>\n                            In contract <Status status=\"in-contract\" />\n                        </>\n                    }\n                    value={{\n                        status: 'in-contract',\n                    }}\n                />\n            </FilterList>\n            <FilterList label=\"Tags\" icon={<LocalOfferIcon />}>\n                {ids &&\n                    data &&\n                    ids.map(id => (\n                        <FilterListItem\n                            key={id}\n                            label={<TagChip record={data[id]}/>}\n                            value={{ tags: [id] }}\n                        />\n                    ))}\n            </FilterList>\n            <FilterList\n                label=\"Account manager\"\n                icon={<SupervisorAccountIcon />}\n            >\n                <FilterListItem\n                    label=\"Me\"\n                    value={{\n                        sales_id: identity && identity.id,\n                    }}\n                />\n            </FilterList>\n        </CollapsibleListFilter>\n    );\n};\n","/* eslint-disable import/no-anonymous-default-export */\nimport * as React from 'react';\nimport {\n    List as RaList,\n    ListProps,\n    SimpleListLoading,\n    ReferenceField,\n    TextField,\n    useListContext,\n    ExportButton,\n    SortButton,\n    TopToolbar,\n    CreateButton,\n    Pagination,\n    useGetIdentity,\n    ListActionsProps,\n    FilterLiveSearch,\n} from 'react-admin';\nimport {\n    List,\n    ListItem,\n    ListItemAvatar,\n    ListItemIcon,\n    ListItemSecondaryAction,\n    ListItemText,\n    Checkbox,\n    Typography,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Link } from 'react-router-dom';\nimport { formatDistance } from 'date-fns';\n\nimport { Avatar } from './Avatar';\nimport { Status } from '../misc/Status';\nimport { TagsList } from '../tags/TagsList';\nimport { ContactListFilter } from './ContactListFilter';\nimport { Contact } from '../types';\nimport { ImportButton } from 'react-admin-import-csv';\n\nconst ContactListContent = () => {\n    const { data, ids, loaded, onToggleItem, selectedIds } = useListContext<\n        Contact\n    >();\n    const now = Date.now();\n    if (loaded === false) {\n        return <SimpleListLoading hasLeftAvatarOrIcon hasSecondaryText />;\n    }\n\n    return (\n        <List>\n            {ids.map(id => {\n                const contact = data[id];\n                return (\n                    <ListItem\n                        button\n                        key={id}\n                        component={Link}\n                        to={`/contacts/${id}/show`}\n                    >\n                        <ListItemIcon>\n                            <Checkbox\n                                edge=\"start\"\n                                checked={selectedIds.includes(id)}\n                                tabIndex={-1}\n                                disableRipple\n                                onClick={e => {\n                                    e.stopPropagation();\n                                    onToggleItem(id);\n                                }}\n                            />\n                        </ListItemIcon>\n                        <ListItemAvatar>\n                            <Avatar record={contact} />\n                        </ListItemAvatar>\n                        <ListItemText\n                            primary={`${contact.first_name} ${contact.last_name}`}\n                            secondary={\n                                <>\n                                    {`#${contact.id} - `}\n                                    {contact.title} at{' '}\n                                    <ReferenceField\n                                        record={contact}\n                                        source=\"company_id\"\n                                        reference=\"companies\"\n                                        basePath=\"/companies\"\n                                        link={false}\n                                    >\n                                        <TextField source=\"name\" />\n                                    </ReferenceField>{' '}\n                                    {!!contact.nb_notes &&\n                                        `- ${contact.nb_notes} notes `}\n                                    <TagsList record={contact} />\n                                </>\n                            }\n                        />\n                        <ListItemSecondaryAction>\n                            <Typography variant=\"body2\" color=\"textSecondary\">\n                                last activity{' '}\n                                {formatDistance(\n                                    new Date(contact.last_seen),\n                                    now\n                                )}{' '}\n                                ago <Status status={contact.status} />\n                            </Typography>\n                        </ListItemSecondaryAction>\n                    </ListItem>\n                );\n            })}\n        </List>\n    );\n};\n\nconst useStyles = makeStyles(theme => ({\n    createButton: {\n        marginLeft: theme.spacing(2),\n    },\n}));\n\nconst ContactListActions = (props: ListActionsProps) => {\n    const classes = useStyles();\n    return (\n        <TopToolbar>\n            <SortButton fields={['id', 'last_name', 'first_name', 'last_seen']} />\n            <ExportButton />\n            <ImportButton {...props} />\n            <CreateButton\n                basePath=\"/contacts\"\n                variant=\"contained\"\n                label=\"New Contact\"\n                className={classes.createButton}\n            />\n        </TopToolbar>\n    );\n};\n\nexport const ContactList = (props: ListProps) => {\n    const { identity } = useGetIdentity();\n    return identity ? (\n        <RaList\n            {...props}\n            actions={<ContactListActions />}\n            aside={<ContactListFilter />}\n            perPage={25}\n            pagination={<Pagination rowsPerPageOptions={[10, 25, 50, 100]} />}\n            filterDefaultValues={{ sales_id: identity?.id }}\n            sort={{ field: 'last_seen', order: 'DESC' }}\n        >\n            <ContactListContent />\n        </RaList>\n    ) : null;\n};\n","import * as React from 'react';\nimport {\n    EditBase,\n    EditProps,\n    TextInput,\n    ReferenceInput,\n    AutocompleteInput,\n    BooleanInput,\n    FormWithRedirect,\n    Toolbar,\n    useEditContext,\n} from 'react-admin';\nimport { Card, CardContent, Divider, Box } from '@material-ui/core';\nimport omit from 'lodash/omit';\n\nimport { Avatar } from './Avatar';\nimport { ContactAside } from './ContactAside';\nimport { Contact } from '../types';\n\nconst Spacer = () => <Box width={20} component=\"span\" />;\n\nconst ContactEditContent = () => {\n    const { record, loaded, save } = useEditContext<Contact>();\n    if (!loaded || !record) return null;\n    return (\n        <Box mt={2} display=\"flex\">\n            <Box flex=\"1\">\n                <FormWithRedirect\n                    record={record}\n                    redirect=\"show\"\n                    save={save}\n                    render={formProps => (\n                        <Card>\n                            <CardContent>\n                                <Box>\n                                    <Box display=\"flex\">\n                                        <Box mr={2}>\n                                            <Avatar record={record} />\n                                        </Box>\n                                        <Box flex=\"1\" mt={-1}>\n                                            <Box display=\"flex\">\n                                                <TextInput source=\"first_name\" />\n                                                <Spacer />\n                                                <TextInput source=\"last_name\" />\n                                            </Box>\n                                            <Box display=\"flex\">\n                                                <TextInput source=\"title\" />\n                                                <Spacer />\n                                                <ReferenceInput\n                                                    source=\"company_id\"\n                                                    reference=\"companies\"\n                                                >\n                                                    <AutocompleteInput optionText=\"name\" />\n                                                </ReferenceInput>\n                                            </Box>\n                                            <Divider />\n                                            <Box mt={2} width={430}>\n                                                <TextInput\n                                                    source=\"email\"\n                                                    fullWidth\n                                                />\n                                            </Box>\n                                            <Box display=\"flex\">\n                                                <TextInput source=\"phone_number1\" />\n                                                <Spacer />\n                                                <TextInput source=\"phone_number2\" />\n                                            </Box>\n                                            <Divider />\n                                            <Box mt={2} width={430}>\n                                                <TextInput\n                                                    source=\"background\"\n                                                    multiline\n                                                    fullWidth\n                                                />\n                                                <TextInput\n                                                    source=\"avatar\"\n                                                    fullWidth\n                                                />\n                                                <BooleanInput source=\"has_newsletter\" />\n                                            </Box>\n                                        </Box>\n                                    </Box>\n                                </Box>\n                            </CardContent>\n                            <Toolbar\n                                {...omit(formProps, [\n                                    // FIXME Not super user friendly way to remove warnings\n                                    'dirtyFields',\n                                    'dirtyFieldsSinceLastSubmit',\n                                    'dirtySinceLastSubmit',\n                                    'hasSubmitErrors',\n                                    'hasValidationErrors',\n                                    'initialValues',\n                                    'modifiedSinceLastSubmit',\n                                    'submitError',\n                                    'submitErrors',\n                                    'submitFailed',\n                                    'submitSucceeded',\n                                    'submitting',\n                                    'valid',\n                                ])}\n                            />\n                        </Card>\n                    )}\n                />\n            </Box>\n            <ContactAside record={record} link=\"show\" />\n        </Box>\n    );\n};\n\nexport const ContactEdit = (props: EditProps) => (\n    <EditBase {...props}>\n        <ContactEditContent />\n    </EditBase>\n);\n","import * as React from 'react';\nimport {\n    Create,\n    CreateProps,\n    TextInput,\n    ReferenceInput,\n    SelectInput,\n    AutocompleteInput,\n    BooleanInput,\n    SimpleForm,\n    Toolbar,\n    required,\n    useGetIdentity,\n    useCreateContext,\n} from 'react-admin';\nimport { Card, CardContent, Divider, Box, Avatar } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\n\nimport { Contact } from '../types';\n\nconst useStyles = makeStyles({\n    inline: {\n        display: 'inline-block',\n        marginLeft: '1em',\n        '&.first-child': {\n            marginLeft: 0,\n        },\n    },\n});\n\n\nexport const ContactCreate = (props: CreateProps) => {\n    const classes = useStyles();\n    const { identity } = useGetIdentity();\n    \n    if (!identity) return null;\n\n    const contactDefaultValue = () => ({ sales_id: identity && identity?.id });\n    const transform = (data: Contact) => ({\n        ...data,\n        last_seen: new Date(),\n        tags: [],\n    });\n    \n    return (\n        <Create {...props} actions={false}>\n            <SimpleForm \n                component={CustomLayout} \n                redirect=\"show\"\n                initialValues={contactDefaultValue}\n                transform={transform}\n            >\n                <TextInput \n                    source=\"first_name\" \n                    validate={[required()]} \n                    formClassName={clsx(classes.inline, 'first-child')}\n                />\n                <TextInput\n                    source=\"last_name\"\n                    validate={[required()]}\n                    formClassName={classes.inline}\n                />\n                <CustomDivider />\n                <TextInput \n                    source=\"title\"\n                    formClassName={clsx(classes.inline, 'first-child')}\n                />\n                <ReferenceInput\n                    source=\"company_id\"\n                    reference=\"companies\"\n                    formClassName={classes.inline}\n                >\n                    <AutocompleteInput optionText=\"name\" />\n                </ReferenceInput>\n                <CustomDivider />\n                <TextInput\n                    source=\"email\"\n                    fullWidth\n                />\n                <TextInput source=\"phone_number1\"\n                    formClassName={clsx(classes.inline, 'first-child')} />\n                <TextInput source=\"phone_number2\"\n                    formClassName={classes.inline} />\n                <CustomDivider />\n                <TextInput\n                    source=\"background\"\n                    multiline\n                    fullWidth\n                />\n                <TextInput\n                    source=\"avatar\"\n                    fullWidth\n                />\n                <ReferenceInput\n                    source=\"sales_id\"\n                    reference=\"sales\"\n                    label=\"Account manager\"\n                    helperText={false}\n                >\n                    <SelectInput\n                        optionText={(sales: any) =>\n                            `${sales.first_name} ${sales.last_name}`\n                        }\n                    />\n                </ReferenceInput>\n                <BooleanInput source=\"has_newsletter\" />\n            </SimpleForm>\n        </Create>\n    );\n};\n\n\nconst CustomLayout = ({ children }: \n    {children: any;}) => (\n    <CardContent>\n        <Box display=\"flex\">\n            <Box paddingTop={1}>\n                <Avatar />\n            </Box>\n            <Box ml={2} flex=\"1\" maxWidth={796}>\n                {children}\n            </Box>\n        </Box>\n    </CardContent>\n);\n\nconst CustomDivider = () => (\n    <Box mb={2}>\n        <Divider />\n    </Box>\n);","/* eslint-disable import/no-anonymous-default-export */\nimport { ContactShow } from './ContactShow';\nimport { ContactList } from './ContactList';\nimport { ContactEdit } from './ContactEdit';\nimport { ContactCreate } from './ContactCreate';\nimport ContactsIcon from '@material-ui/icons/Contacts';\n\nexport default {\n    list: ContactList,\n    show: ContactShow,\n    edit: ContactEdit,\n    create: ContactCreate,\n    icon: ContactsIcon,\n};\n","import * as React from 'react';\nimport {\n    TextField,\n    EmailField,\n    DateField,\n    ReferenceManyField,\n    EditButton,\n    ShowButton,\n    useListContext,\n    ReferenceField,\n    FunctionField,\n} from 'react-admin';\nimport { Box, Typography, Divider, List, ListItem } from '@material-ui/core';\nimport { TagsListEdit } from '../tags/TagsListEdit';\n\nimport { Sale } from '../types';\n\nexport const TaskAside = ({ record, link = 'edit' }: any) => (\n    <Box ml={4} width={250} minWidth={250}>\n        <Box textAlign=\"center\" mb={2}>\n            {link === 'edit' ? (\n                <EditButton\n                    basePath=\"/Tasks\"\n                    record={record}\n                    label=\"Edit Task\"\n                />\n            ) : (\n                <ShowButton\n                    basePath=\"/Tasks\"\n                    record={record}\n                    label=\"Show Task\"\n                />\n            )}\n        </Box>\n    </Box>\n);\n","import * as React from 'react';\nimport {\n    ShowBase,\n    ShowProps,\n    TextField,\n    ReferenceField,\n    ReferenceManyField,\n    useShowContext,\n    FunctionField,\n} from 'react-admin';\nimport { Avatar, Box, Card, CardContent, Typography } from '@material-ui/core';\nimport AssignmentTurnedInIcon from '@material-ui/icons/AssignmentTurnedIn';\n\n\nimport { TaskAside } from './TaskAside';\nimport { LogoField } from '../companies/LogoField';\nimport { NotesIterator } from '../notes';\nimport { Sale, Task } from '../types';\n\nexport const TaskShow = (props: ShowProps) => (\n    <ShowBase {...props}>\n        <TaskShowContent />\n    </ShowBase>\n);\n\nconst TaskShowContent = () => {\n    const { record, loaded } = useShowContext<Task>();\n    if (!loaded || !record) return null;\n    return (\n        <Box mt={2} display=\"flex\">\n            <Box flex=\"1\">\n                <Card>\n                    <CardContent>\n                        <Box display=\"flex\">\n                            <Avatar >\n                                <AssignmentTurnedInIcon />\n                            </Avatar>\n                            <Box ml={2} flex=\"1\">\n                                <Typography variant=\"h5\">\n                                    {record.text}\n                                </Typography>\n                                <Typography variant=\"body2\">\n                                <Typography component=\"span\" variant=\"body2\" color=\"textSecondary\">\n                                        Assigned to\n                                    </Typography>{' '}\n                                    <ReferenceField\n                                        record={record}\n                                        source=\"sales_id\"\n                                        reference=\"sales\"\n                                    >\n                                        <FunctionField<Sale>\n                                            source=\"last_name\"\n                                            render={record =>\n                                                record ? `${record.first_name} ${record.last_name}` : ''\n                                            }\n                                        />\n                                    </ReferenceField>\n                                </Typography>\n                            </Box>\n                            <Box>\n                                <ReferenceField\n                                    source=\"company_id\"\n                                    reference=\"companies\"\n                                    link=\"show\"\n                                >\n                                    <LogoField />\n                                </ReferenceField>\n                            </Box>\n                        </Box>\n                    </CardContent>\n                </Card>\n            </Box>\n            <TaskAside record={record} />\n        </Box>\n    );\n};\n","/* eslint-disable import/no-anonymous-default-export */\nimport * as React from 'react';\nimport {\n    FilterList,\n    FilterLiveSearch,\n    FilterListItem,\n    useGetIdentity,\n    useGetList,\n} from 'react-admin';\nimport { Box, Chip } from '@material-ui/core';\nimport AccessTimeIcon from '@material-ui/icons/AccessTime';\nimport TrendingUpIcon from '@material-ui/icons/TrendingUp';\nimport LocalOfferIcon from '@material-ui/icons/LocalOffer';\nimport SupervisorAccountIcon from '@material-ui/icons/SupervisorAccount';\nimport { endOfYesterday, startOfWeek, startOfMonth, subMonths } from 'date-fns';\n\nimport { TaskStatus } from './TaskStatus';\nimport { TagChip } from '../tags/TagChip';\nimport { Tag } from '../types';\nimport { statuses } from './status';\nimport { CollapsibleListFilter } from '../components/CollapsibleListFilter';\n\nexport const TaskListFilter = () => {\n    const { identity } = useGetIdentity();\n    return (\n        <CollapsibleListFilter>\n            <FilterLiveSearch />\n            <FilterList label=\"Due date\" icon={<AccessTimeIcon />}>\n                <FilterListItem\n                    label=\"Today\"\n                    value={{\n                        due_date_gte: endOfYesterday().toISOString(),\n                        due_date_lte: undefined,\n                    }}\n                />\n                <FilterListItem\n                    label=\"This week\"\n                    value={{\n                        due_date_gte: startOfWeek(new Date()).toISOString(),\n                        due_date_lte: undefined,\n                    }}\n                />\n                <FilterListItem\n                    label=\"Before this week\"\n                    value={{\n                        due_date_gte: undefined,\n                        due_date_lte: startOfWeek(new Date()).toISOString(),\n                    }}\n                />\n                <FilterListItem\n                    label=\"Before this month\"\n                    value={{\n                        due_date_gte: undefined,\n                        due_date_lte: startOfMonth(new Date()).toISOString(),\n                    }}\n                />\n                <FilterListItem\n                    label=\"Before last month\"\n                    value={{\n                        due_date_gte: undefined,\n                        due_date_lte: subMonths(\n                            startOfMonth(new Date()),\n                            1\n                        ).toISOString(),\n                    }}\n                />\n            </FilterList>\n            <FilterList label=\"Status\" icon={<TrendingUpIcon />}>\n                {statuses.map(status =>(\n                    <FilterListItem\n                    label={\n                        <>\n                            {status.name} <TaskStatus status={status.id} />\n                        </>\n                    }\n                    value={{\n                        status: status.id,\n                    }}\n                />\n                ))}\n            </FilterList>\n            <FilterList\n                label=\"Account manager\"\n                icon={<SupervisorAccountIcon />}\n            >\n                <FilterListItem\n                    label=\"Me\"\n                    value={{\n                        sales_id: identity && identity.id,\n                    }}\n                />\n            </FilterList>\n        </CollapsibleListFilter>\n    );\n};\n","// in ./MarkDoneButton.js\nimport * as React from 'react';\nimport { BulkUpdateButton, BulkActionProps } from 'react-admin';\nimport DoneIcon from '@material-ui/icons/Done';\n\nconst doneState = { status: 'done' };\n\nconst MarkDoneButton = (props: BulkActionProps) => (\n    <BulkUpdateButton\n        {...props}\n        label=\"Mark checked\"\n        data={doneState}\n        icon={<DoneIcon/>}\n        mutationMode=\"pessimistic\"\n    />\n);\n\nexport default MarkDoneButton;","/* eslint-disable import/no-anonymous-default-export */\nimport * as React from 'react';\nimport { Fragment } from 'react';\nimport {\n    List as RaList,\n    ListProps,\n    SimpleListLoading,\n    ReferenceField,\n    TextField,\n    useListContext,\n    ExportButton,\n    SortButton,\n    TopToolbar,\n    CreateButton,\n    Pagination,\n    BulkDeleteButton,\n    useGetIdentity,\n    BulkActionProps,\n    ListActionsProps,\n    FunctionField,\n} from 'react-admin';\nimport {\n    List,\n    ListItem,\n    ListItemAvatar,\n    ListItemIcon,\n    ListItemSecondaryAction,\n    ListItemText,\n    Checkbox,\n    Typography,\n    Avatar,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Link } from 'react-router-dom';\nimport { formatDistance } from 'date-fns';\nimport AssignmentTurnedInIcon from '@material-ui/icons/AssignmentTurnedIn';\nimport { ImportButton } from \"react-admin-import-csv\";\n\nimport { Status } from '../misc/Status';\nimport { TagsList } from '../tags/TagsList';\nimport { TaskListFilter } from './TaskListFilter';\nimport { Sale, Task } from '../types';\nimport MarkDoneButton from './MarkDoneButton';\nimport { TaskStatus } from './TaskStatus';\n\nconst TaskListContent = () => {\n    const { data, ids, loaded, onToggleItem, selectedIds } = useListContext<\n        Task\n    >();\n    const now = Date.now();\n    if (loaded === false) {\n        return <SimpleListLoading hasLeftAvatarOrIcon hasSecondaryText />;\n    }\n\n    return (\n        <List>\n            {ids.map(id => {\n                const task = data[id];\n                return (\n                    <ListItem\n                        button\n                        key={id}\n                        component={Link}\n                        to={`/Tasks/${id}/show`}\n                    >\n                        <ListItemIcon>\n                            <Checkbox\n                                edge=\"start\"\n                                checked={selectedIds.includes(id)}\n                                tabIndex={-1}\n                                disableRipple\n                                onClick={e => {\n                                    e.stopPropagation();\n                                    onToggleItem(id);\n                                }}\n                            />\n                        </ListItemIcon>\n                        <ListItemAvatar>\n                            <Avatar>\n                                <AssignmentTurnedInIcon />\n                            </Avatar>\n                        </ListItemAvatar>\n                        <ListItemText\n                            primary={\n                                <>\n                                {task.text} \n                                </>\n                            }\n                            secondary={\n                                <>\n                                    <Typography component=\"span\" variant=\"body2\" color=\"textSecondary\">\n                                        Assigned to\n                                    </Typography>{' '}\n                                    <ReferenceField\n                                        record={task}\n                                        source=\"sales_id\"\n                                        reference=\"sales\"\n                                    >\n                                        <FunctionField<Sale>\n                                            source=\"last_name\"\n                                            render={record =>\n                                                record ? `${record.first_name} ${record.last_name}` : ''\n                                            }\n                                        />\n                                    </ReferenceField>\n                                </>\n                            }\n                        />\n                        <ListItemSecondaryAction>\n                            <Typography variant=\"body2\" color=\"textSecondary\">\n                                due in{' '}\n                                {formatDistance(\n                                    new Date(task.due_date),\n                                    now\n                                )}\n                                {' '}<TaskStatus status={task.status} />\n                            </Typography>\n                        </ListItemSecondaryAction>\n                    </ListItem>\n                );\n            })}\n        </List>\n    );\n};\n\nconst useActionStyles = makeStyles(theme => ({\n    createButton: {\n        marginLeft: theme.spacing(2),\n    },\n}));\nconst TaskListActions = (props: ListActionsProps) => {\n    const classes = useActionStyles();\n    return (\n        <TopToolbar>\n            <SortButton fields={['due_date']} />\n            <ExportButton />\n            <ImportButton {...props} />\n            <CreateButton\n                basePath=\"/Tasks\"\n                variant=\"contained\"\n                label=\"New Task\"\n                className={classes.createButton}\n            />\n        </TopToolbar>\n    );\n};\n\nconst TaskBulkActionButtons = (props: BulkActionProps) => (\n    <Fragment>\n        <MarkDoneButton {...props} />\n        {/* default bulk delete action */}\n        <BulkDeleteButton {...props} />\n    </Fragment>\n);\n\nexport const TaskList = (props: ListProps) => {\n    const { identity } = useGetIdentity();\n    return identity ? (\n        <RaList\n            {...props}\n            actions={<TaskListActions />}\n            aside={<TaskListFilter />}\n            bulkActionButtons={<TaskBulkActionButtons />}\n            perPage={25}\n            pagination={<Pagination rowsPerPageOptions={[10, 25, 50, 100]} />}\n            filterDefaultValues={{ sales_id: identity?.id, status: 'pending' }}\n            sort={{ field: 'due_date', order: 'DESC' }}\n        >\n            <TaskListContent />\n        </RaList>\n    ) : null;\n};\n","import * as React from 'react';\nimport {\n    EditBase,\n    EditProps,\n    TextInput,\n    ReferenceInput,\n    AutocompleteInput,\n    BooleanInput,\n    FormWithRedirect,\n    required,\n    Toolbar,\n    useEditContext,\n    DateInput,\n    SelectInput,\n} from 'react-admin';\nimport { Card, CardContent, Divider, Box, Avatar } from '@material-ui/core';\nimport omit from 'lodash/omit';\nimport AssignmentTurnedInIcon from '@material-ui/icons/AssignmentTurnedIn';\nimport { makeStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\n\nimport { TaskAside } from './TaskAside';\nimport { Task } from '../types';\nimport { statuses } from './status';\n\nconst Spacer = () => <Box width={20} component=\"span\" />;\nconst useStyles = makeStyles({\n    inline: {\n        display: 'inline-block',\n        marginLeft: '1em',\n        '&.first-child': {\n            marginLeft: 0,\n        },\n    },\n});\n\nconst TaskEditContent = () => {\n    const classes = useStyles();\n    const { record, loaded, save } = useEditContext<Task>();\n    if (!loaded || !record) return null;\n    return (\n        <Box mt={2} display=\"flex\">\n            <Box flex=\"1\">\n                <FormWithRedirect\n                    record={record}\n                    redirect=\"show\"\n                    save={save}\n                    render={formProps => (\n                        <Card>\n                            <CardContent>\n                                <Box>\n                                    <Box display=\"flex\">\n                                        <Box mr={2}>\n                                        <Avatar >\n                                            <AssignmentTurnedInIcon />\n                                        </Avatar>\n                                        </Box>\n                                        <Box flex=\"1\" mt={-1}>\n                                            <TextInput \n                                                source=\"text\"\n                                                label=\"Task\"\n                                                validate={[required()]}\n                                                fullWidth\n                                            />\n                                            <DateInput\n                                                source=\"due_date\"\n                                                className={clsx(classes.inline, 'first-child')}\n                                            />\n                                            <SelectInput\n                                                source=\"status\"\n                                                choices={statuses}\n                                                className={classes.inline}\n                                            />\n                                            \n                                            <ReferenceInput\n                                                source=\"sales_id\"\n                                                reference=\"sales\"\n                                                label=\"Assigned to\"\n                                                helperText={false}\n                                            >\n                                                <SelectInput\n                                                    optionText={(sales: any) =>\n                                                        `${sales.first_name} ${sales.last_name}`\n                                                    }\n                                                />\n                                            </ReferenceInput>\n                                        </Box>\n                                    </Box>\n                                </Box>\n                            </CardContent>\n                            <Toolbar\n                                {...omit(formProps, [\n                                    // FIXME Not super user friendly way to remove warnings\n                                    'dirtyFields',\n                                    'dirtyFieldsSinceLastSubmit',\n                                    'dirtySinceLastSubmit',\n                                    'hasSubmitErrors',\n                                    'hasValidationErrors',\n                                    'initialValues',\n                                    'modifiedSinceLastSubmit',\n                                    'submitError',\n                                    'submitErrors',\n                                    'submitFailed',\n                                    'submitSucceeded',\n                                    'submitting',\n                                    'valid',\n                                ])}\n                            />\n                        </Card>\n                    )}\n                />\n            </Box>\n            <TaskAside record={record} link=\"show\" />\n        </Box>\n    );\n};\n\nexport const TaskEdit = (props: EditProps) => (\n    <EditBase {...props}>\n        <TaskEditContent />\n    </EditBase>\n);\n","import * as React from 'react';\nimport {\n    Create,\n    CreateProps,\n    TextInput,\n    ReferenceInput,\n    SelectInput,\n    AutocompleteInput,\n    BooleanInput,\n    SimpleForm,\n    Toolbar,\n    required,\n    useGetIdentity,\n    DateInput,\n    useCreateContext,\n    SelectField,\n} from 'react-admin';\nimport { Card, CardContent, Divider, Box, Avatar } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\nimport AssignmentTurnedInIcon from '@material-ui/icons/AssignmentTurnedIn';\n\n\nimport { Task } from '../types';\nimport { statuses } from './status';\n\nconst useStyles = makeStyles({\n    inline: {\n        display: 'inline-block',\n        marginLeft: '1em',\n        '&.first-child': {\n            marginLeft: 0,\n        },\n    },\n});\n\n\nexport const TaskCreate = (props: CreateProps) => {\n    const classes = useStyles();\n    const { identity } = useGetIdentity();\n    \n    if (!identity) return null;\n\n    const defaultValue = () => ({\n        due_date: new Date(), \n        status: 'pending',\n        sales_id: identity && identity?.id,\n    });\n    const transform = (data: Task) => ({\n        ...data,\n    });\n    \n    return (\n        <Create {...props} actions={false}>\n            <SimpleForm \n                component={CustomLayout} \n                redirect=\"show\"\n                initialValues={defaultValue}\n                transform={transform}\n            >\n                <TextInput \n                    source=\"text\"\n                    label=\"Task\"\n                    validate={[required()]}\n                    fullWidth\n                />\n                <DateInput\n                    source=\"due_date\"\n                    formClassName={clsx(classes.inline, 'first-child')}\n                />\n                <SelectInput\n                    source=\"status\"\n                    choices={statuses}\n                    formClassName={classes.inline}\n                />\n                <ReferenceInput\n                    source=\"sales_id\"\n                    reference=\"sales\"\n                    label=\"Assigned to\"\n                    helperText={false}\n                >\n                    <SelectInput\n                        optionText={(sales: any) =>\n                            `${sales.first_name} ${sales.last_name}`\n                        }\n                    />\n                </ReferenceInput>\n            </SimpleForm>\n        </Create>\n    );\n};\n\n\nconst CustomLayout = ({ children }: \n    {children: any;}) => (\n    <CardContent>\n        <Box display=\"flex\">\n            <Box paddingTop={1}>\n                <Avatar >\n                    <AssignmentTurnedInIcon />\n                </Avatar>\n            </Box>\n            <Box ml={2} flex=\"1\" maxWidth={796}>\n                {children}\n            </Box>\n        </Box>\n    </CardContent>\n);\n\nconst CustomDivider = () => (\n    <Box mb={2}>\n        <Divider />\n    </Box>\n);","/* eslint-disable import/no-anonymous-default-export */\nimport { TaskShow } from './TaskShow';\nimport { TaskList } from './TaskList';\nimport { TaskEdit } from './TaskEdit';\nimport { TaskCreate } from './TaskCreate';\nimport FormatListBulletedIcon from '@material-ui/icons/FormatListBulleted';\n\nexport default {\n    list: TaskList,\n    show: TaskShow,\n    edit: TaskEdit,\n    create: TaskCreate,\n    icon: FormatListBulletedIcon,\n};\n","import * as React from 'react';\nimport { ReferenceField, useRedirect } from 'react-admin';\nimport { Card, Typography, Box } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Draggable } from 'react-beautiful-dnd';\n\nimport { LogoField } from '../companies/LogoField';\nimport { Deal } from '../types';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        marginBottom: theme.spacing(1),\n    },\n    cardContent: {\n        padding: theme.spacing(1),\n        display: 'flex',\n    },\n    cardText: {\n        marginLeft: theme.spacing(1),\n    },\n}));\n\nexport const DealCard = ({ deal, index }: { deal: Deal; index: number }) => {\n    const classes = useStyles();\n    const redirect = useRedirect();\n    if (!deal) return null;\n\n    const handleClick = () => {\n        redirect(`/deals/${deal.id}/show`);\n    };\n    return (\n        <Draggable draggableId={String(deal.id)} index={index}>\n            {(provided, snapshot) => (\n                <div\n                    className={classes.root}\n                    {...provided.draggableProps}\n                    {...provided.dragHandleProps}\n                    ref={provided.innerRef}\n                    onClick={handleClick}\n                >\n                    <Card\n                        style={{\n                            opacity: snapshot.isDragging ? 0.9 : 1,\n                            transform: snapshot.isDragging\n                                ? 'rotate(-2deg)'\n                                : '',\n                        }}\n                        elevation={snapshot.isDragging ? 3 : 1}\n                    >\n                        <Box p={1} display=\"flex\">\n                            <ReferenceField\n                                source=\"company_id\"\n                                record={deal}\n                                reference=\"companies\"\n                                resource=\"deals\"\n                                basePath=\"/deals\"\n                            >\n                                <LogoField size=\"small\" />\n                            </ReferenceField>\n                            <Box ml={1}>\n                                <Typography variant=\"body2\" gutterBottom>\n                                    {deal.name}\n                                </Typography>\n                                <Typography\n                                    variant=\"caption\"\n                                    color=\"textSecondary\"\n                                >\n                                    {deal.amount.toLocaleString('en-US', {\n                                        notation: 'compact',\n                                        style: 'currency',\n                                        currency: 'USD',\n                                        currencyDisplay: 'narrowSymbol',\n                                        minimumSignificantDigits: 3,\n                                    })}\n                                    , {deal.type}\n                                </Typography>\n                            </Box>\n                        </Box>\n                    </Card>\n                </div>\n            )}\n        </Draggable>\n    );\n};\n","import * as React from 'react';\nimport { Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Droppable } from 'react-beautiful-dnd';\nimport { Identifier, RecordMap } from 'react-admin';\n\nimport { DealCard } from './DealCard';\nimport { stageNames } from './stages';\nimport { Deal } from '../types';\n\nconst useStyles = makeStyles({\n    root: {\n        flex: 1,\n        paddingTop: 8,\n        paddingBottom: 16,\n        backgroundColor: '#eaeaee',\n        '&:first-child': {\n            paddingLeft: 5,\n            borderTopLeftRadius: 5,\n        },\n        '&:last-child': {\n            paddingRight: 5,\n            borderTopRightRadius: 5,\n        },\n    },\n    droppable: {\n        display: 'flex',\n        flexDirection: 'column',\n        borderRadius: 5,\n        padding: 5,\n        '&.isDraggingOver': {\n            backgroundColor: '#dadadf',\n        },\n    },\n});\n\nexport const DealColumn = ({\n    stage,\n    dealIds,\n    data,\n}: {\n    stage: string;\n    dealIds: Identifier[];\n    data: RecordMap<Deal>;\n}) => {\n    const classes = useStyles();\n    return (\n        <div className={classes.root}>\n            <Typography align=\"center\" variant=\"subtitle1\">\n                {/* @ts-ignore */}\n                {stageNames[stage]}\n            </Typography>\n            <Droppable droppableId={stage}>\n                {(droppableProvided, snapshot) => (\n                    <div\n                        ref={droppableProvided.innerRef}\n                        {...droppableProvided.droppableProps}\n                        className={\n                            classes.droppable +\n                            (snapshot.isDraggingOver ? ' isDraggingOver' : '')\n                        }\n                    >\n                        {dealIds.map((id, index) => (\n                            <DealCard key={id} index={index} deal={data[id]} />\n                        ))}\n                        {droppableProvided.placeholder}\n                    </div>\n                )}\n            </Droppable>\n        </div>\n    );\n};\n","import * as React from 'react';\nimport { useState, useEffect, useContext } from 'react';\nimport {\n    useMutation,\n    Identifier,\n    useListContext,\n    RecordMap,\n    DataProviderContext,\n} from 'react-admin';\nimport { Box } from '@material-ui/core';\nimport { DragDropContext, OnDragEndResponder } from 'react-beautiful-dnd';\nimport isEqual from 'lodash/isEqual';\n\nimport { DealColumn } from './DealColumn';\nimport { stages } from './stages';\nimport { Deal } from '../types';\n\ninterface DealsByColumn {\n    [stage: string]: Identifier[];\n}\n\nconst initialDeals: DealsByColumn = stages.reduce(\n    (obj, stage) => ({ ...obj, [stage]: [] }),\n    {}\n);\n\nconst getDealsByColumn = (\n    ids: Identifier[],\n    data: RecordMap<Deal>\n): DealsByColumn => {\n    // group deals by column\n    const columns = ids.reduce(\n        (acc, id) => {\n            acc[data[id].stage].push(id);\n            return acc;\n        },\n        stages.reduce((obj, stage) => ({ ...obj, [stage]: [] }), {} as any)\n    );\n    // order each column by index\n    stages.forEach(stage => {\n        columns[stage] = columns[stage].sort(\n            (a: Identifier, b: Identifier) => data[a].index - data[b].index\n        );\n    });\n    return columns;\n};\n\nexport const DealListContent = () => {\n    const {\n        data,\n        ids,\n        loaded,\n        page,\n        perPage,\n        currentSort,\n        filterValues,\n    } = useListContext<Deal>();\n\n    const [deals, setDeals] = useState<DealsByColumn>(\n        loaded ? getDealsByColumn(ids, data) : initialDeals\n    );\n    // we use the raw dataProvider to avoid too many updates to the Redux store after updates (which would create junk)\n    const dataProvider = useContext(DataProviderContext);\n\n    // FIXME: use refetch when available\n    const [refresh] = useMutation({\n        resource: 'deals',\n        type: 'getList',\n        payload: {\n            pagination: { page, perPage },\n            sort: currentSort,\n            filter: filterValues,\n        },\n    });\n\n    // update deals by columns when the dataProvider response updates\n    useEffect(() => {\n        if (!loaded) return;\n        const newDeals = getDealsByColumn(ids, data);\n        if (isEqual(deals, newDeals)) {\n            return;\n        }\n        setDeals(newDeals);\n    }, [data, ids, loaded]); // eslint-disable-line react-hooks/exhaustive-deps\n\n    if (!loaded) return null;\n\n    const onDragEnd: OnDragEndResponder = async result => {\n        const { destination, source, draggableId } = result;\n\n        if (!destination) {\n            return;\n        }\n\n        if (\n            destination.droppableId === source.droppableId &&\n            destination.index === source.index\n        ) {\n            return;\n        }\n\n        if (source.droppableId === destination.droppableId) {\n            // moving deal inside the same column\n\n            const column = Array.from(deals[source.droppableId]); // [4, 7, 23, 5] array of ids\n            const sourceDeal = data[column[source.index]];\n            const destinationDeal = data[column[destination.index]];\n\n            // update local state\n            // remove source deal from column\n            column.splice(source.index, 1);\n            // read source deal at destination\n            column.splice(destination.index, 0, Number(draggableId));\n            setDeals({\n                ...deals,\n                [source.droppableId]: column,\n            });\n\n            // update backend\n            // Fetch all the deals in this stage (because the list may be filtered, but we need to update even non-filtered deals)\n            const { data: columnDeals } = await dataProvider.getList('deals', {\n                sort: { field: 'index', order: 'ASC' },\n                pagination: { page: 1, perPage: 100 },\n                filter: { stage: source.droppableId },\n            });\n\n            if (source.index > destination.index) {\n                // deal moved up, eg\n                // dest   src\n                //  <------\n                // [4, 7, 23, 5]\n\n                await Promise.all([\n                    // for all deals between destination.index and source.index, increase the index\n                    ...columnDeals\n                        .filter(\n                            deal =>\n                                deal.index >= destinationDeal.index &&\n                                deal.index < sourceDeal.index\n                        )\n                        .map(deal =>\n                            dataProvider.update('deals', {\n                                id: deal.id,\n                                data: { index: deal.index + 1 },\n                                previousData: deal,\n                            })\n                        ),\n                    // for the deal that was moved, update its index\n                    dataProvider.update('deals', {\n                        id: sourceDeal.id,\n                        data: { index: destinationDeal.index },\n                        previousData: sourceDeal,\n                    }),\n                ]);\n\n                refresh();\n            } else {\n                // deal moved down, e.g\n                // src   dest\n                //  ------>\n                // [4, 7, 23, 5]\n\n                await Promise.all([\n                    // for all deals between source.index and destination.index, decrease the index\n                    ...columnDeals\n                        .filter(\n                            deal =>\n                                deal.index <= destinationDeal.index &&\n                                deal.index > sourceDeal.index\n                        )\n                        .map(deal =>\n                            dataProvider.update('deals', {\n                                id: deal.id,\n                                data: { index: deal.index - 1 },\n                                previousData: deal,\n                            })\n                        ),\n                    // for the deal that was moved, update its index\n                    dataProvider.update('deals', {\n                        id: sourceDeal.id,\n                        data: { index: destinationDeal.index },\n                        previousData: sourceDeal,\n                    }),\n                ]);\n\n                refresh();\n            }\n        } else {\n            // moving deal across columns\n\n            const sourceColumn = Array.from(deals[source.droppableId]); // [4, 7, 23, 5] array of ids\n            const destinationColumn = Array.from(\n                deals[destination.droppableId]\n            ); // [4, 7, 23, 5] arrays of ids\n            const sourceDeal = data[sourceColumn[source.index]];\n            const destinationDeal = data[destinationColumn[destination.index]]; // may be undefined if dropping at the end of a column\n\n            // update local state\n            sourceColumn.splice(source.index, 1);\n            destinationColumn.splice(destination.index, 0, draggableId);\n            setDeals({\n                ...deals,\n                [source.droppableId]: sourceColumn,\n                [destination.droppableId]: destinationColumn,\n            });\n\n            // update backend\n            // Fetch all the deals in both stages (because the list may be filtered, but we need to update even non-filtered deals)\n            const [\n                { data: sourceDeals },\n                { data: destinationDeals },\n            ] = await Promise.all([\n                dataProvider.getList('deals', {\n                    sort: { field: 'index', order: 'ASC' },\n                    pagination: { page: 1, perPage: 100 },\n                    filter: { stage: source.droppableId },\n                }),\n                dataProvider.getList('deals', {\n                    sort: { field: 'index', order: 'ASC' },\n                    pagination: { page: 1, perPage: 100 },\n                    filter: { stage: destination.droppableId },\n                }),\n            ]);\n\n            await Promise.all([\n                // decrease index on the deals after the source index in the source columns\n                ...sourceDeals\n                    .filter(deal => deal.index > sourceDeal.index)\n                    .map(deal =>\n                        dataProvider.update('deals', {\n                            id: deal.id,\n                            data: { index: deal.index - 1 },\n                            previousData: deal,\n                        })\n                    ),\n                // increase index on the deals after the destination index in the destination columns\n                ...destinationDeals\n                    .filter(deal =>\n                        destinationDeal\n                            ? deal.index >= destinationDeal.index\n                            : false\n                    )\n                    .map(deal =>\n                        dataProvider.update('deals', {\n                            id: deal.id,\n                            data: { index: deal.index + 1 },\n                            previousData: deal,\n                        })\n                    ),\n                // change the dragged deal to take the destination index and column\n                dataProvider.update('deals', {\n                    id: sourceDeal.id,\n                    data: {\n                        index: destinationDeal\n                            ? destinationDeal.index\n                            : (destinationDeals.length > 0)\n                            ? destinationDeals.pop()!.index + 1 \n                            : 0,\n                        stage: destination.droppableId,\n                    },\n                    previousData: sourceDeal,\n                }),\n            ]);\n\n            refresh();\n        }\n    };\n\n    return (\n        <DragDropContext onDragEnd={onDragEnd}>\n            <Box display=\"flex\">\n                {stages.map(stage => (\n                    <DealColumn\n                        stage={stage}\n                        dealIds={deals[stage]}\n                        data={data}\n                        key={stage}\n                    />\n                ))}\n            </Box>\n        </DragDropContext>\n    );\n};\n","export const types = [\n    'Other',\n    'Copywriting',\n    'Print project',\n    'UI Design',\n    'Website design',\n];\n\nexport const typeChoices = types.map(type => ({ id: type, name: type }));\n","import * as React from 'react';\nimport {\n    Create,\n    SimpleForm,\n    TextInput,\n    SelectInput,\n    NumberInput,\n    ReferenceInput,\n    AutocompleteInput,\n    required,\n    useRedirect,\n    useDataProvider,\n    useGetIdentity,\n} from 'react-admin';\nimport { Dialog } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { stageChoices } from './stages';\nimport { typeChoices } from './types';\nimport { Deal } from '../types';\n\nconst useStyles = makeStyles({\n    root: {\n        width: 500,\n    },\n});\n\nexport const DealCreate = ({ open }: { open: boolean }) => {\n    const classes = useStyles();\n    const redirect = useRedirect();\n    const dataProvider = useDataProvider();\n    const { identity } = useGetIdentity();\n\n    const handleClose = () => {\n        redirect('/deals');\n    };\n\n    const onSuccess = ({ data: deal }: { data: Deal }) => {\n        redirect('/deals');\n        // increase the index of all deals in the same stage as the new deal\n        dataProvider\n            .getList('deals', {\n                pagination: { page: 1, perPage: 50 },\n                sort: { field: 'id', order: 'ASC' },\n                filter: { stage: deal.stage },\n            })\n            .then(({ data: deals }) =>\n                Promise.all(\n                    deals\n                        .filter(oldDeal => oldDeal.id !== deal.id)\n                        .map(oldDeal =>\n                            dataProvider.update('deals', {\n                                id: oldDeal.id,\n                                data: { index: oldDeal.index + 1 },\n                                previousData: oldDeal,\n                            })\n                        )\n                )\n            );\n    };\n\n    return (\n        <Dialog open={open} onClose={handleClose}>\n            <Create\n                resource=\"deals\"\n                basePath=\"/deals\"\n                className={classes.root}\n                onSuccess={onSuccess}\n            >\n                <SimpleForm initialValues={{ index: 0, sales_id: identity && identity?.id }}>\n                    <TextInput\n                        source=\"name\"\n                        label=\"Deal name\"\n                        fullWidth\n                        validate={[required()]}\n                    />\n                    <TextInput\n                        source=\"description\"\n                        multiline\n                        rows={3}\n                        fullWidth\n                    />\n                    <ReferenceInput\n                        source=\"company_id\"\n                        reference=\"companies\"\n                        fullWidth\n                        validate={[required()]}\n                    >\n                        <AutocompleteInput optionText=\"name\" />\n                    </ReferenceInput>\n                    <SelectInput\n                        source=\"stage\"\n                        choices={stageChoices}\n                        fullWidth\n                        validate={[required()]}\n                        defaultValue=\"opportunity\"\n                    />\n                    <SelectInput\n                        source=\"type\"\n                        choices={typeChoices}\n                        fullWidth\n                    />\n                    <NumberInput source=\"amount\" fullWidth defaultValue={0} />\n                    <ReferenceInput\n                        source=\"sales_id\"\n                        reference=\"sales\"\n                        label=\"Account manager\"\n                        helperText={false}\n                        fullWidth\n                    >\n                        <SelectInput\n                            optionText={(sales: any) =>\n                                `${sales.first_name} ${sales.last_name}`\n                            }\n                        />\n                    </ReferenceInput>\n                </SimpleForm>\n            </Create>\n        </Dialog>\n    );\n};\n","import * as React from 'react';\nimport { useListContext } from 'react-admin';\nimport { Link } from '@material-ui/core';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n    ul: {\n        listStyle: 'none',\n        padding: 0,\n        margin: 0,\n        display: 'inline-block',\n    },\n    li: {\n        display: 'inline',\n        '&:after': {\n            content: '\", \"',\n        },\n        '&:last-child:after': {\n            content: '\"\"',\n        },\n    },\n});\n\nexport const ContactList = () => {\n    const { ids, data, loaded } = useListContext();\n    const classes = useStyles();\n    if (!loaded) return <div style={{ height: '2em' }} />;\n    return (\n        <ul className={classes.ul}>\n            {ids.map(id => (\n                <li key={id} className={classes.li}>\n                    <Link\n                        component={RouterLink}\n                        to={`/contacts/${id}`}\n                        variant=\"subtitle1\"\n                    >\n                        {data[id].first_name} {data[id].last_name}\n                    </Link>\n                </li>\n            ))}\n        </ul>\n    );\n};\n","import * as React from 'react';\nimport {\n    ShowBase,\n    TextField,\n    ReferenceField,\n    ReferenceManyField,\n    ReferenceArrayField,\n    useRecordContext,\n    useRedirect,\n    useRefresh,\n    useDataProvider,\n    Identifier,\n} from 'react-admin';\nimport {\n    Box,\n    Dialog,\n    DialogContent,\n    Typography,\n    Divider,\n    Button,\n} from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { format } from 'date-fns';\n\nimport { CompanyAvatar } from '../companies/CompanyAvatar';\nimport { NotesIterator } from '../notes';\nimport { ContactList } from './ContactList';\nimport { stageNames } from './stages';\n\nconst useStyles = makeStyles({\n    dialog: {\n        position: 'absolute',\n        top: 50,\n    },\n});\n\nexport const DealShow = ({ open, id }: { open: boolean; id: Identifier }) => {\n    const redirect = useRedirect();\n    const classes = useStyles();\n\n    const handleClose = () => {\n        redirect('/deals');\n    };\n\n    return (\n        <Dialog\n            open={open}\n            onClose={handleClose}\n            fullWidth\n            maxWidth=\"md\"\n            classes={{ paper: classes.dialog }}\n        >\n            <DialogContent>\n                <ShowBase resource=\"deals\" basePath=\"/deals\" id={id}>\n                    <DealShowContent />\n                </ShowBase>\n            </DialogContent>\n        </Dialog>\n    );\n};\n\nconst DealShowContent = () => {\n    const record = useRecordContext();\n    const dataProvider = useDataProvider();\n    const redirect = useRedirect();\n    const refresh = useRefresh();\n    \n    if (!record) return null;\n\n    const onDelete = async() =>{\n        const { data: columnDeals } = await dataProvider.getList('deals', {\n            sort: { field: 'index', order: 'ASC' },\n            pagination: { page: 1, perPage: 100 },\n            filter: { stage: record.droppableId },\n        });\n        await Promise.all([\n            ...columnDeals\n                .filter(\n                    deal => deal.index < record.index\n                )\n                .map(deal =>\n                    dataProvider.update('deals', {\n                        id: deal.id,\n                        data: { index: deal.index - 1 },\n                        previousData: deal,\n                    })\n                ),\n            // for the deal that was moved, update its index\n            dataProvider.delete('deals', {\n                id: record.id,\n                previousData: record,\n            }),\n        ]);\n        redirect('/deals');\n        refresh();\n    };\n\n    return (\n        <>\n            <Box display=\"flex\">\n                <Box\n                    width={100}\n                    display=\"flex\"\n                    flexDirection=\"column\"\n                    alignItems=\"center\"\n                >\n                    <ReferenceField\n                        source=\"company_id\"\n                        reference=\"companies\"\n                        link=\"show\"\n                    >\n                        <CompanyAvatar />\n                    </ReferenceField>\n                    <ReferenceField\n                        source=\"company_id\"\n                        reference=\"companies\"\n                        link=\"show\"\n                    >\n                        <TextField\n                            source=\"name\"\n                            align=\"center\"\n                            component=\"div\"\n                        />\n                    </ReferenceField>\n                </Box>\n                <Box ml={2} flex=\"1\">\n                    <Box display=\"flex\" justifyContent=\"space-between\" >\n                        <Typography variant=\"h5\">{record.name}</Typography>\n                        <Button\n                            variant=\"contained\"\n                            startIcon={<DeleteIcon />}            \n                            onClick={(e:any) =>{\n                                e.stopPropagation();\n                                onDelete();\n                            }}\n                        >\n                            Delete\n                        </Button>\n                    </Box>\n\n                    <Box display=\"flex\" mt={2}>\n                        <Box display=\"flex\" mr={5} flexDirection=\"column\">\n                            <Typography color=\"textSecondary\" variant=\"body2\">\n                                Start\n                            </Typography>\n                            <Typography variant=\"subtitle1\">\n                                {format(new Date(record.start_at), 'PP')}\n                            </Typography>\n                        </Box>\n\n                        <Box display=\"flex\" mr={5} flexDirection=\"column\">\n                            <Typography color=\"textSecondary\" variant=\"body2\">\n                                Budget\n                            </Typography>\n                            <Typography variant=\"subtitle1\">\n                                {record.amount.toLocaleString('en-US', {\n                                    notation: 'compact',\n                                    style: 'currency',\n                                    currency: 'USD',\n                                    currencyDisplay: 'narrowSymbol',\n                                    minimumSignificantDigits: 3,\n                                })}\n                            </Typography>\n                        </Box>\n\n                        <Box display=\"flex\" mr={5} flexDirection=\"column\">\n                            <Typography color=\"textSecondary\" variant=\"body2\">\n                                Type\n                            </Typography>\n                            <Typography variant=\"subtitle1\">\n                                {record.type}\n                            </Typography>\n                        </Box>\n\n                        <Box display=\"flex\" mr={5} flexDirection=\"column\">\n                            <Typography color=\"textSecondary\" variant=\"body2\">\n                                Stage\n                            </Typography>\n                            <Typography variant=\"subtitle1\">\n                                {/* @ts-ignore */}\n                                {stageNames[record.stage]}\n                            </Typography>\n                        </Box>\n                    </Box>\n\n                    <Box mt={2} mb={2}>\n                        <Box\n                            display=\"flex\"\n                            mr={5}\n                            flexDirection=\"column\"\n                            minHeight={48}\n                        >\n                            <Typography color=\"textSecondary\" variant=\"body2\">\n                                Contacts\n                            </Typography>\n                            <ReferenceArrayField\n                                source=\"contact_ids\"\n                                reference=\"contacts\"\n                            >\n                                <ContactList />\n                            </ReferenceArrayField>\n                        </Box>\n                    </Box>\n\n                    <Box mt={2} mb={2} style={{ whiteSpace: 'pre-line' }}>\n                        <Typography color=\"textSecondary\" variant=\"body2\">\n                            Description\n                        </Typography>\n                        <Typography>{record.description}</Typography>\n                    </Box>\n\n                    <Divider />\n\n                    <Box mt={2}>\n                        <ReferenceManyField\n                            target=\"deal_id\"\n                            reference=\"dealNotes\"\n                            sort={{ field: 'date', order: 'DESC' }}\n                        >\n                            <NotesIterator reference=\"deals\" />\n                        </ReferenceManyField>\n                    </Box>\n                </Box>\n            </Box>\n        </>\n    );\n};\n","import * as React from 'react';\nimport { useListFilterContext, useGetIdentity } from 'react-admin';\nimport { Switch, FormControlLabel } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        marginBottom: theme.spacing(1),\n        marginLeft: theme.spacing(1),\n    },\n}));\n\nexport const OnlyMineInput = ({ alwaysOn }: { alwaysOn: boolean }) => {\n    const {\n        filterValues,\n        displayedFilters,\n        setFilters,\n    } = useListFilterContext();\n    const { identity } = useGetIdentity();\n    const classes = useStyles();\n    const handleChange = () => {\n        const newFilterValues = { ...filterValues };\n        if (typeof filterValues.sales_id !== 'undefined') {\n            delete newFilterValues.sales_id;\n        } else {\n            newFilterValues.sales_id = identity && identity?.id;\n        }\n        setFilters(newFilterValues, displayedFilters);\n    };\n    return (\n        <div className={classes.root}>\n            <FormControlLabel\n                control={\n                    <Switch\n                        checked={typeof filterValues.sales_id !== 'undefined'}\n                        onChange={handleChange}\n                        color=\"primary\"\n                        name=\"checkedC\"\n                    />\n                }\n                label=\"Only companies I manage\"\n            />\n        </div>\n    );\n};\n\nOnlyMineInput.defaultProps = { source: 'sales_id' };\n","import * as React from 'react';\nimport {\n    CreateButton,\n    ExportButton,\n    FilterButton,\n    List,\n    ListProps,\n    SearchInput,\n    SelectInput,\n    TopToolbar,\n    useGetIdentity,\n} from 'react-admin';\nimport { Route } from 'react-router';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { DealListContent } from './DealListContent';\nimport { DealCreate } from './DealCreate';\nimport { DealShow } from './DealShow';\nimport { OnlyMineInput } from './OnlyMineInput';\nimport { typeChoices } from './types';\n\nexport const DealList = (props: ListProps) => {\n    const { identity } = useGetIdentity();\n    return identity ? (\n        <>\n            <List\n                {...props}\n                perPage={100}\n                sort={{ field: 'index', order: 'ASC' }}\n                filters={dealFilters}\n                filterDefaultValues={{ sales_id: identity && identity?.id }}\n                actions={<DealActions />}\n                pagination={false}\n                component=\"div\"\n            >\n                <DealListContent />\n            </List>\n            <Route path=\"/deals/create\">\n                {({ match }) => <DealCreate open={!!match} />}\n            </Route>\n            <Route path=\"/deals/:id/show\">\n                {({ match }) =>\n                    !!match ? (\n                        <DealShow open={!!match} id={match?.params?.id} />\n                    ) : null\n                }\n            </Route>\n        </>\n    ) : null;\n};\n\nconst dealFilters = [\n    <SearchInput source=\"q\" alwaysOn />,\n    <OnlyMineInput alwaysOn />,\n    <SelectInput source=\"type\" choices={typeChoices} />,\n];\n\nconst useActionStyles = makeStyles(theme => ({\n    createButton: {\n        marginLeft: theme.spacing(2),\n    },\n}));\nconst DealActions = () => {\n    const classes = useActionStyles();\n    return (\n        <TopToolbar>\n            <FilterButton />\n            <ExportButton />\n            <CreateButton\n                basePath=\"/deals\"\n                variant=\"contained\"\n                label=\"New Deal\"\n                className={classes.createButton}\n            />\n        </TopToolbar>\n    );\n};\n","/* eslint-disable import/no-anonymous-default-export */\nimport { DealList } from './DealList';\nimport MonetizationOnIcon from '@material-ui/icons/MonetizationOn';\n\nexport default {\n    list: DealList,\n    icon: MonetizationOnIcon,\n};\n","export const categories = [\n    'Safety laser scanners', \n    '2D LiDAR sensors', \n    '3D LiDAR sensors', \n    'Cleaning Robot',\n].map(category => ({ id: category, name: category }));","/* eslint-disable import/no-anonymous-default-export */\nimport * as React from 'react';\nimport {\n    FilterList,\n    FilterLiveSearch,\n    FilterListItem,\n    useGetIdentity,\n    useGetList,\n} from 'react-admin';\nimport { Box, Chip } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CategoryIcon from '@material-ui/icons/Category';\n\nimport { ProductFamily } from '../types';\nimport { CollapsibleListFilter } from '../components/CollapsibleListFilter';\nimport { categories } from '../productFamilies/categories';\n\nconst useStyles = makeStyles(theme => ({\n    familyList: {\n        maxHeight: theme.spacing(20), \n        overflow: 'auto',\n    },\n    categoryList: {\n        maxHeight: theme.spacing(20), \n        overflow: 'auto',\n    }\n}));\n\nexport const ProductListFilter = () => {\n    const classes = useStyles();\n    const { identity } = useGetIdentity();\n    const { data: familyData, ids: familyIds } = useGetList<ProductFamily>(\n        'productFamilies',\n        { page: 1, perPage: 1000 },\n        { field: 'name', order: 'ASC' }\n    );\n    return (\n        <CollapsibleListFilter>\n            <FilterLiveSearch />\n\n            <FilterList label=\"Families\" icon={<CategoryIcon />}>\n                <div className={classes.familyList}>\n                    {familyIds &&\n                        familyData &&\n                        familyIds.map(id => (\n                            <FilterListItem\n                                key={id}\n                                label={<Chip label={familyData[id].name} size=\"small\"/>}\n                                value={{ family_id: id }}\n                            />\n                        ))}\n                </div>\n            </FilterList>\n\n            <FilterList label=\"Categories\" icon={<CategoryIcon />}>\n                <div className={classes.categoryList}>\n                    {categories.map(category => (\n                            <FilterListItem\n                                key={category.id}\n                                label={category.name}\n                                value={{ 'family.category': category.id }}\n                            />\n                    ))}\n                </div>\n            </FilterList>\n        </CollapsibleListFilter>\n    );\n};\n","import * as React from 'react';\nimport {\n    List,\n    ListProps,\n    TopToolbar,\n    ExportButton,\n    CreateButton,\n    Pagination,\n    useGetIdentity,\n    ListActionsProps,\n} from 'react-admin';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { ProductGridList } from './ProductGridList';\nimport { ProductListFilter } from './ProductListFilter';\nimport { ImportButton } from 'react-admin-import-csv';\n\nexport const ProductList = (props: ListProps) => {\n    const { identity } = useGetIdentity();\n    return identity ? (\n        <List\n            {...props}\n            actions={<ProductListActions />}\n            aside={<ProductListFilter />}\n            filterDefaultValues={{ }}\n            pagination={<Pagination rowsPerPageOptions={[15, 25, 50, 100]} />}\n            perPage={25}\n            sort={{ field: 'model', order: 'ASC' }}\n            component=\"div\"\n        >\n            <ProductGridList />\n        </List>\n    ) : null;\n};\n\nconst useActionStyles = makeStyles(theme => ({\n    createButton: {\n        marginLeft: theme.spacing(2),\n    },\n}));\n\nconst ProductListActions = (props: ListActionsProps) => {\n    const classes = useActionStyles();\n    return (\n        <TopToolbar>\n            <ExportButton />\n            <ImportButton {...props} />\n            <CreateButton\n                basePath=\"/products\"\n                variant=\"contained\"\n                label=\"New Product\"\n                className={classes.createButton}\n            />\n        </TopToolbar>\n    );\n};\n","import Reacct, { useState, FormEvent } from 'react';\nimport {\n    useCreateSuggestionContext,\n    useCreate,\n    ReferenceInput,\n} from 'react-admin';\nimport {\n    Dialog, \n    DialogContent,\n    DialogActions,\n    TextField,\n    Button,\n    DialogTitle,\n } from '@material-ui/core';\n import { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        display: 'flex',\n        flexDirection: 'column',\n    },\n}));\n\nexport const CreatePropertyType = () => {\n    const classes = useStyles();\n    const { filter, onCancel, onCreate } = useCreateSuggestionContext();\n    const [name, setName] = useState(filter || '');\n    const [unit, setUnit] = useState('');\n    const [synonyms, setSynonyms] = useState('');\n    const [create] = useCreate('propertyTypes');\n\n    const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        create(\n            {\n                payload: {\n                    data: {\n                        name: name,\n                        unit: unit,\n                        synonyms: synonyms,\n                    },\n                },\n            },\n            {\n                onSuccess: ({ data }: {data: any;}) => {\n                    setName('');\n                    setUnit('');\n                    setSynonyms('');\n                    onCreate(data);\n                },\n            }\n        );\n    };\n\n    return (\n        <Dialog open onClose={onCancel}>\n            <DialogTitle>Add new Product Property Type</DialogTitle>\n            <form onSubmit={handleSubmit}>\n                <DialogContent>\n                    <div className={classes.root}>\n                        <TextField\n                            label=\"New type name\"\n                            value={name}\n                            onChange={event => setName(event.target.value)}\n                            autoFocus\n                            required\n                        />\n                        <TextField\n                            label=\"Unit\"\n                            value={unit}\n                            onChange={event => setUnit(event.target.value)}\n                        />\n                        <TextField\n                            label=\"Commma separated synonyms\"\n                            value={synonyms}\n                            onChange={event => setSynonyms(event.target.value)}\n                        />\n                    </div>\n                </DialogContent>\n                <DialogActions>\n                    <Button type=\"submit\" disabled={!name}>Add</Button>\n                    <Button onClick={onCancel}>Cancel</Button>\n                </DialogActions>\n            </form>\n        </Dialog>\n    );\n};","import { \n    AutocompleteInput, \n    ReferenceInput, \n    SimpleFormIterator,\n    SimpleFormIteratorProps, \n    TextInput, \n} from \"react-admin\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport classNames from 'classnames';\n\nimport { CreatePropertyType } from \"./CreatePropertyType\";\n\nconst useStyles = makeStyles(theme => ({\n    inline: {\n        display: 'inline-block',\n        marginLeft: theme.spacing(1),\n        width: '32%',\n        minWidth: theme.spacing(10),\n        '&.first-child': {\n            marginLeft: 0,\n        },\n        [theme.breakpoints.down('xs')]: {\n            display: 'block',\n            marginLeft: 0,\n            width: '100%',\n            margin: 0,\n        }\n    },\n    \n}));\n\nexport const PropertyFormIterator = (props: SimpleFormIteratorProps) => {\n    const classes = useStyles();\n    return (\n        <SimpleFormIterator {...props} >\n            <ReferenceInput\n                source=\"type_id\"\n                reference=\"propertyTypes\"\n                label=\"Type\"\n                formClassName={classNames(classes.inline, 'first-child')}\n                fullWidth\n            >\n                <AutocompleteInput \n                    optionText=\"name\" \n                    create={<CreatePropertyType />}\n                />\n            </ReferenceInput>\n            <TextInput \n                source=\"property_value\" \n                label=\"Value\"\n                formClassName={classes.inline}\n                fullWidth\n            />\n            <TextInput \n                source=\"condition\"  \n                label=\"Condition\"\n                formClassName={classes.inline}\n                fullWidth\n            />\n        </SimpleFormIterator>\n    );\n};","import Reacct, { useState, FormEvent } from 'react';\nimport {\n    useCreateSuggestionContext,\n    useCreate,\n} from 'react-admin';\nimport {\n    Dialog, \n    DialogContent,\n    DialogActions,\n    TextField,\n    Button,\n    Select,\n    MenuItem,\n    Box,\n    DialogTitle,\n } from '@material-ui/core';\n import { ProductFamily } from '../types';\n import { categories } from './categories';\n\nexport const CreateProductFamily = () => {\n    const { filter, onCancel, onCreate } = useCreateSuggestionContext();\n    const [name, setName] = useState(filter || '');\n    const [category, setCategory] = useState('');\n    const [website, setWebsite] = useState('');\n    const [image, setImage] = useState('');\n    const [create] = useCreate('productFamilies');\n\n    const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        create(\n            {\n                payload: {\n                    data: {\n                        name: name,\n                        image: image,\n                        website: website,\n                        category: category,\n                    },\n                },\n            },\n            {\n                onSuccess: ({ data }: {data: ProductFamily;}) => {\n                    setName('');\n                    setImage('');\n                    setWebsite('');\n                    setCategory('');\n                    onCreate(data);\n                },\n            }\n        );\n    };\n\n    return (\n        <Dialog open onClose={onCancel}>\n            <DialogTitle>New Product Category</DialogTitle>\n            <form onSubmit={handleSubmit}>\n                <DialogContent>\n                    <Box display=\"flex\" flexDirection=\"column\">\n                        <Select\n                            label=\"Category\"\n                            value={category}\n                            onChange={(event:any) => setCategory(event.target.value)}\n                        >\n                            <MenuItem value=\"\"><em>None</em></MenuItem>\n                            {categories.map(category => (\n                                <MenuItem\n                                    key={category.id}\n                                    value={category.id}\n                                >\n                                    {category.name}\n                                </MenuItem>\n                            ))}\n                        </Select>\n\n                        <TextField\n                            label=\"New category name\"\n                            value={name}\n                            onChange={event => setName(event.target.value)}\n                            autoFocus\n                        />\n                        <TextField\n                            label=\"Website\"\n                            value={website}\n                            onChange={event => setWebsite(event.target.value)}\n                            autoFocus\n                        />\n                        <TextField\n                            label=\"Image\"\n                            value={image}\n                            onChange={event => setImage(event.target.value)}\n                            autoFocus\n                        />\n                    </Box>\n                </DialogContent>\n                <DialogActions>\n                    <Button type=\"submit\">Save</Button>\n                    <Button onClick={onCancel}>Cancel</Button>\n                </DialogActions>\n            </form>\n        </Dialog>\n    );\n};","import * as React from 'react';\nimport {\n    Create,\n    CreateProps,\n    ReferenceInput,\n    TabbedForm,\n    TextInput,\n    FormTab,\n    required,\n    AutocompleteInput,\n    useGetIdentity,\n    ArrayInput,\n    SimpleFormIterator,\n    ReferenceArrayInput,\n} from 'react-admin';\nimport RichTextInput from 'ra-input-rich-text';\nimport { Box, CardContent, Divider, Avatar, useTheme } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport BusinessIcon from '@material-ui/icons/Business';\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\nimport clsx from 'clsx';\nimport { CreatePropertyType } from './CreatePropertyType';\nimport { PropertyFormIterator } from './PropertyFormIterator';\nimport { CreateProductFamily } from '../productFamilies/CreateProductFamily';\n\n\nconst useStyles = makeStyles(theme => ({\n    inline: {\n        display: 'inline-block',\n        marginLeft: '1em',\n        '&.first-child': {\n            marginLeft: 0,\n        },\n    },\n    propertyContainer: {\n        display: 'flex',\n        gap: theme.spacing(1),\n        minWidth: '500px',\n    },\n}));\n\nexport const ProductCreate = (props: CreateProps) => {\n    const classes = useStyles();\n    const { identity } = useGetIdentity();\n    const theme = useTheme();\n\n    const defaultValue = () => ({ });\n\n    return (\n        <Create {...props} actions={false} >\n            <TabbedForm redirect=\"show\">\n                <FormTab label=\"General\">\n                    <ReferenceInput \n                        label=\"Comapny\" \n                        source=\"company_id\" \n                        reference=\"companies\"\n                        fullWidth\n                    >\n                        <AutocompleteInput optionText=\"name\" />\n                    </ReferenceInput>\n                    <ReferenceInput \n                        label=\"Product Family\" \n                        source=\"family_id\" \n                        reference=\"productFamilies\"\n                        fullWidth\n                    >\n                        <AutocompleteInput \n                            optionText=\"name\" \n                            create={<CreateProductFamily />}\n                        />\n                    </ReferenceInput>\n                    <TextInput source=\"model\" validate={required()} fullWidth />\n                    <TextInput source=\"code\" fullWidth />\n                    <TextInput source=\"website\" fullWidth />\n                    <TextInput source=\"image\" fullWidth />\n                    <TextInput \n                        source=\"description\"\n                        multiline\n                        rows={3} \n                        fullWidth \n                    />\n                </FormTab>\n                <FormTab label=\"Properties\">\n                    <ArrayInput\n                        source=\"properties\"\n                    >\n                        <PropertyFormIterator />\n                    </ArrayInput>\n                </FormTab>\n            </TabbedForm>\n        </Create>\n    );\n};\n\nconst CustomLayout = ({ children }: \n    {children: any;}) => (\n    <CardContent>\n        <Box display=\"flex\">\n            <Box paddingTop={1}>\n                <Avatar>\n                    <ShoppingCartIcon />\n                </Avatar>\n            </Box>\n            <Box ml={2} flex=\"1\" maxWidth=\"80%\">\n                {children}\n            </Box>\n        </Box>\n    </CardContent>\n);\n\nconst CustomDivider = () => (\n    <Box mb={2}>\n        <Divider />\n    </Box>\n);\n","import * as React from 'react';\nimport { Avatar } from '@material-ui/core';\nimport BusinessIcon from '@material-ui/icons/Business';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\nimport { Product } from '../types';\n\nconst useStyles = makeStyles({\n    image: {\n        objectFit: 'contain',\n    },\n});\n\nconst sizeInPixel = {\n    medium: 42,\n    small: 20,\n};\n\nexport const ProductImageField = ({\n    record,\n    source,\n    size = 'medium',\n}: {\n    record?: Product;\n    source?: string;\n    size?: 'small' | 'medium';\n}) => {\n    const classes = useStyles();\n    if (!record) return null;\n    if(!record.image) return (\n        <Avatar>\n            <ShoppingCartIcon />\n        </Avatar>\n    )\n    return (\n        <img\n            src={process.env.PUBLIC_URL + record.image}\n            alt={record.model}\n            title={record.model}\n            width={sizeInPixel[size]}\n            height={sizeInPixel[size]}\n            className={classes.image}\n        />\n    );\n};\n","import * as React from 'react';\nimport {\n    TextField,\n    ReferenceField,\n} from 'react-admin';\nimport { Box, Typography, Divider, Link } from '@material-ui/core';\n\nimport { Product, Sale } from '../types';\nimport { CollapsibleAside } from '../components/CollapsibleAside';\n\nexport const ProductAside = ({\n    record,\n    link = 'edit',\n}: {\n    record?: Product;\n    link?: string;\n}) =>{\n    if (!record) return null;\n\n    return (\n        <CollapsibleAside record={record} link={link} basePath=\"/products\">\n            <AsideContent />\n        </CollapsibleAside>\n    );\n};\n\nconst AsideContent = ({ \n    record \n}: { \n    record?: Product;\n}) => \n    record ? (\n        <>\n            <Typography variant=\"subtitle2\">Product info</Typography>\n            <Divider />\n\n            <Box mt={1} display=\"flex\" gridGap={2}>\n                Company: \n                <ReferenceField\n                    record={record}\n                    source=\"company_id\"\n                    reference=\"companies\"\n                    link=\"show\"\n                >\n                    <TextField source=\"name\" />\n                </ReferenceField>\n            </Box>\n\n            <Box mt={1} display=\"flex\" gridGap={2}>\n                Family: \n                <ReferenceField\n                    record={record}\n                    source=\"family_id\"\n                    reference=\"productFamilies\"\n                    link=\"show\"\n                >\n                    <TextField source=\"name\" />\n                </ReferenceField>\n            </Box>\n\n            <Box mt={1}>\n                Code: <TextField source=\"code\" record={record} />\n            </Box>\n            {record.website && (\n                <Box mt={1}>\n                    Website: <Link href={record.website} target=\"_blank\" rel=\"noreferrer\">Link</Link>\n                </Box>\n            )}\n\n            <Box mt={3}>\n                <Typography variant=\"subtitle2\">Description</Typography>\n                <Divider />\n\n                <Box mt={1}>\n                    <TextField source=\"description\" />\n                </Box>\n\n            </Box>\n        </>\n    ) : null;","import * as React from 'react';\nimport { useState, ChangeEvent } from 'react';\nimport {\n    ShowBase,\n    ShowProps,\n    EditButton,\n    TextField,\n    ReferenceManyField,\n    SelectField,\n    ReferenceField,\n    ImageField,\n    Datagrid,\n    useShowContext,\n    useRecordContext,\n    useListContext,\n    ReferenceArrayField,\n    SingleFieldList,\n    ChipField,\n    Pagination,\n} from 'react-admin';\nimport {\n    Avatar as MuiAvatar,\n    Box,\n    Button,\n    Card,\n    CardContent,\n    Typography,\n    List,\n    ListItem,\n    ListItemAvatar,\n    ListItemText,\n    ListItemSecondaryAction,\n    Tabs,\n    Tab,\n    Chip,\n    Divider,\n} from '@material-ui/core';\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { NotesIterator } from '../notes';\n\n\nimport { ProductImageField } from './ProductImageField';\nimport { ProductAside } from './ProductAside';\nimport { Product, ProductPrperty } from '../types';\nimport { LogoField } from '../companies/LogoField';\nimport { CompanyGridList } from '../companies/CompanyGridList';\nimport { CompanyCard } from '../companies/CompanyCard';\n\nexport const ProductShow = (props: ShowProps) => (\n    <ShowBase {...props}>\n        <ProductShowContent />\n    </ShowBase>\n);\n\nconst ProductShowContent = () => {\n    const { record, loaded } = useShowContext<Product>();\n    const [value, setValue] = useState(0);\n    const handleChange = (event: ChangeEvent<{}>, newValue: number) => {\n        setValue(newValue);\n    };\n    if (!loaded || !record) return null;\n    return (\n        <Box mt={2} display=\"flex\">\n            <Box flex=\"1\">\n                <Card>\n                    <CardContent>\n                        <Box display=\"flex\" mb={1}>\n                            <ProductImageField record={record as any} />\n                            <Box ml={2} flex=\"1\">\n                                <Box display=\"flex\" gridGap={4}>\n                                    <Typography variant=\"h5\">{record.model}</Typography>\n                                </Box>\n                            </Box>\n                            <Box>\n                                <ReferenceField\n                                    source=\"company_id\"\n                                    reference=\"companies\"\n                                    link=\"show\"\n                                >\n                                    <LogoField />\n                                </ReferenceField>\n                            </Box>\n                        </Box>\n                        <Tabs\n                            value={value}\n                            indicatorColor=\"primary\"\n                            textColor=\"primary\"\n                            onChange={handleChange}\n                            variant=\"scrollable\"\n                            scrollButtons=\"auto\"\n                        >\n                            <Tab\n                                label={\n                                    record.nb_notes > 1\n                                        ? `${record.nb_notes} Notes`\n                                        : `${record.nb_notes} Note`\n                                }\n                            />\n                            <Tab\n                                label={\n                                    record.nb_properties > 1\n                                        ? `${record.nb_properties} Properties`\n                                        : `${record.nb_properties} Property`\n                                }\n                            />\n                            <Tab\n                                label={\n                                    record.nb_used_by > 1\n                                        ? `Used by ${record.nb_used_by} Companies`\n                                        : `Used by ${record.nb_used_by} Company`\n                                }\n                            />\n                        </Tabs>\n                        <Divider />\n                        <TabPanel value={value} index={0}>\n                            <ReferenceManyField\n                                reference=\"productNotes\"\n                                target=\"product_id\"\n                            >\n                                 <NotesIterator reference=\"products\" />\n                            </ReferenceManyField>\n                        </TabPanel>\n                        <TabPanel value={value} index={1}>\n                            <ReferenceManyField reference=\"productProperties\" target=\"product_id\" addLabel={false}>\n                                <Datagrid>\n                                    <ReferenceField\n                                            source=\"type_id\"\n                                            reference=\"propertyTypes\"\n                                            link={false}\n                                        >\n                                        <TextField source=\"name\" />\n                                    </ReferenceField>\n                                    <TextField source=\"property_value\" />\n                                    <ReferenceField\n                                            source=\"type_id\"\n                                            reference=\"propertyTypes\"\n                                            link={false}\n                                        >\n                                        <TextField source=\"unit\" />\n                                    </ReferenceField>\n                                    <TextField source=\"condition\" />\n    \n                                </Datagrid>\n                            </ReferenceManyField>\n                        </TabPanel>\n                        <TabPanel value={value} index={2}>\n                            <Box mt={1}>\n                            <ReferenceArrayField\n                                reference=\"companies\"\n                                source=\"used_by_companies\"\n                                pagination={<Pagination rowsPerPageOptions={[15, 25, 50, 100]} />}\n                                perPage={25}\n                            >\n                                <CompanyGridList />\n                            </ReferenceArrayField>\n                            </Box>\n                        </TabPanel>\n                    </CardContent>\n                </Card>\n            </Box>\n            <ProductAside record={record} />\n        </Box>\n    );\n};\n\ninterface TabPanelProps {\n    children?: React.ReactNode;\n    index: any;\n    value: any;\n}\n\nconst TabPanel = (props: TabPanelProps) => {\n    const { children, value, index, ...other } = props;\n\n    return (\n        <div\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`wrapped-tabpanel-${index}`}\n            aria-labelledby={`wrapped-tab-${index}`}\n            {...other}\n        >\n            {children}\n        </div>\n    );\n};\n\nconst ProductPrpertiesIterator = () => {\n    const { data, ids, loaded } = useListContext<ProductPrperty>();\n    const record = useRecordContext();\n\n    const now = Date.now();\n    if (!loaded) return null;\n    return (\n        <Box>\n            <List>\n                {ids.map(id => {\n                    const productProperty = data[id];\n                    return (\n                        <ListItem\n                            button\n                            key={id}\n                            component={RouterLink}\n                            to={`/productProperties/${id}/show`}\n                        >\n                            {/* <ListItemAvatar>\n                                <Avatar record={productProperty} />\n                            </ListItemAvatar>\n                            <ListItemText\n                                primary={`${productProperty.first_name} ${productProperty.last_name}`}\n                                secondary={\n                                    <>\n                                        {productProperty.title}{' '}\n                                        {productProperty.nb_notes &&\n                                        `- ${productProperty.nb_notes} notes `}\n                                    </>\n                                }\n                            />\n                            <ListItemSecondaryAction>\n                                <Typography variant=\"body2\" color=\"textSecondary\">\n                                    last activity{' '}\n                                    {formatDistance(\n                                        new Date(productProperty.last_seen),\n                                        now\n                                    )}{' '}\n                                    ago <Status status={productProperty.status} />\n                                </Typography>\n                            </ListItemSecondaryAction> */}\n                        </ListItem>\n                    );\n                })}\n            </List>\n            <Box textAlign=\"center\" mt={1}>\n                {/* <CreateRelatedProductPrpertyButton record={record} /> */}\n            </Box>\n        </Box>\n    );\n};\n\n// const CreateRelatedProductPrpertyButton = ({ record }: any) => (\n//     <Button\n//         component={RouterLink}\n//         to={{\n//             pathname: '/productProperties/create',\n//             state: { record: { product_id: record.id } },\n//         }}\n//         color=\"primary\"\n//         variant=\"contained\"\n//         size=\"small\"\n//         startIcon={<PersonAddIcon />}\n//     >\n//         Add property\n//     </Button>\n// );\n","import * as React from 'react';\nimport {\n    Edit,\n    EditProps,\n    ReferenceInput,\n    TabbedForm,\n    FormTab,\n    TextInput,\n    SelectInput,\n    useRecordContext,\n    AutocompleteInput,\n    required,\n    ArrayInput,\n    SimpleFormIterator,\n} from 'react-admin';\nimport { Box, CardContent, Divider } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\n\nimport { ProductAside } from './ProductAside';\nimport { ProductImageField } from './ProductImageField';\nimport { CreatePropertyType } from './CreatePropertyType';\nimport { PropertyFormIterator } from './PropertyFormIterator';\n\nconst useStyles = makeStyles({\n    inline: {\n        display: 'inline-block',\n        marginLeft: '1em',\n        '&.first-child': {\n            marginLeft: 0,\n        },\n    },\n});\n\nconst renderDistributor = (choice: any) => {\n\n}\n\nexport const ProductEdit = (props: EditProps) => {\n    const classes = useStyles();\n    return (\n        <Edit \n            {...props} \n            aside={<ProductAside link=\"show\" />} \n            actions={false}\n        >\n            <TabbedForm\n                redirect=\"show\"\n            >\n                <FormTab label=\"General\">\n                    <ReferenceInput \n                        label=\"Comapny\" \n                        source=\"company_id\" \n                        reference=\"companies\"\n                        fullWidth\n                    >\n                        <AutocompleteInput optionText=\"name\" />\n                    </ReferenceInput>\n                    <ReferenceInput \n                        label=\"Product Family\" \n                        source=\"family_id\" \n                        reference=\"productFamilies\"\n                        fullWidth\n                    >\n                        <AutocompleteInput optionText=\"name\" />\n                    </ReferenceInput>\n                    <TextInput source=\"model\" validate={required()} fullWidth />\n                    <TextInput source=\"code\" fullWidth />\n                    <TextInput source=\"website\" fullWidth />\n                    <TextInput source=\"image\" fullWidth />\n                    <TextInput \n                        source=\"description\"\n                        multiline\n                        rows={3} \n                        fullWidth \n                    />\n                </FormTab>\n                <FormTab label=\"Properties\">\n                    <ArrayInput\n                        source=\"properties\"\n                    >\n                        <PropertyFormIterator />\n                    </ArrayInput>\n                </FormTab>\n            </TabbedForm>\n        </Edit>\n    );\n};\n\nconst CustomLayout = (props: any) => {\n    const record = useRecordContext(props);\n    return (\n        <CardContent>\n            <Box display=\"flex\">\n                <ProductImageField record={record as any} />\n                <Box ml={2} flex=\"1\" maxWidth={796}>\n                    {props.children}\n                </Box>\n            </Box>\n        </CardContent>\n    );\n};\n\nconst CustomDivider = () => (\n    <Box mb={2}>\n        <Divider />\n    </Box>\n);\n","/* eslint-disable import/no-anonymous-default-export */\nimport { ProductList } from './ProductList';\nimport { ProductCreate } from './ProductCreate';\nimport { ProductShow } from './ProductShow';\nimport { ProductEdit } from './ProductEdit';\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\n\nexport default {\n    list: ProductList,\n    create: ProductCreate,\n    edit: ProductEdit,\n    show: ProductShow,\n    icon: FiberManualRecordIcon,\n};\n","import * as React from 'react';\nimport { Avatar as MuiAvatar } from '@material-ui/core';\n\nimport { ProductFamily } from '../types';\n\nexport const Avatar = ({ record }: { record: ProductFamily }) => (\n    <MuiAvatar src={record.image}>\n        {record.name}\n    </MuiAvatar>\n);\n","/* eslint-disable import/no-anonymous-default-export */\nimport * as React from 'react';\nimport {\n    FilterList,\n    FilterLiveSearch,\n    FilterListItem,\n    useGetIdentity,\n    useGetList,\n} from 'react-admin';\nimport { Box, Chip } from '@material-ui/core';\nimport { CollapsibleListFilter } from '../components/CollapsibleListFilter';\n\nexport const ProductFamilyListFilter = () => {\n\n    return (\n        <CollapsibleListFilter>\n            <FilterLiveSearch />\n        </CollapsibleListFilter>\n    );\n};\n","/* eslint-disable import/no-anonymous-default-export */\nimport * as React from 'react';\nimport {\n    List as RaList,\n    ListProps,\n    SimpleListLoading,\n    ReferenceField,\n    TextField,\n    useListContext,\n    ExportButton,\n    SortButton,\n    TopToolbar,\n    CreateButton,\n    Pagination,\n    useGetIdentity,\n    SelectField,\n} from 'react-admin';\nimport {\n    List,\n    ListItem,\n    ListItemAvatar,\n    ListItemIcon,\n    ListItemSecondaryAction,\n    ListItemText,\n    Checkbox,\n    Typography,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Link } from 'react-router-dom';\nimport { formatDistance } from 'date-fns';\n\nimport { Avatar } from './Avatar';\nimport { Status } from '../misc/Status';\nimport { TagsList } from '../tags/TagsList';\nimport { ProductFamilyListFilter } from './ProductFamilyListFilter';\nimport { ProductFamily } from '../types';\nimport { categories } from './categories';\n\nconst ProductFamilyListContent = () => {\n    const { data, ids, loaded, onToggleItem, selectedIds } = useListContext<\n        ProductFamily\n    >();\n    const now = Date.now();\n    if (loaded === false) {\n        return <SimpleListLoading hasLeftAvatarOrIcon hasSecondaryText />;\n    }\n\n    return (\n        <List>\n            {ids.map(id => {\n                const record = data[id];\n                return (\n                    <ListItem\n                        button\n                        key={id}\n                        component={Link}\n                        to={`/productFamilies/${id}/show`}\n                    >\n                        <ListItemIcon>\n                            <Checkbox\n                                edge=\"start\"\n                                checked={selectedIds.includes(id)}\n                                tabIndex={-1}\n                                disableRipple\n                                onClick={e => {\n                                    e.stopPropagation();\n                                    onToggleItem(id);\n                                }}\n                            />\n                        </ListItemIcon>\n                        <ListItemAvatar>\n                            <Avatar record={record} />\n                        </ListItemAvatar>\n                        <ListItemText\n                            primary={`${record.name}`}\n                            secondary={\n                                <>\n                                    {record.name} in{' '}\n                                    <SelectField\n                                        record={record}\n                                        source=\"category\"\n                                        choices={categories}\n                                    />\n                                </>\n                            }\n                        />\n                        <ListItemSecondaryAction>\n\n                        </ListItemSecondaryAction>\n                    </ListItem>\n                );\n            })}\n        </List>\n    );\n};\n\nconst useActionStyles = makeStyles(theme => ({\n    createButton: {\n        marginLeft: theme.spacing(2),\n    },\n}));\nconst ProductFamilyListActions = () => {\n    const classes = useActionStyles();\n    return (\n        <TopToolbar>\n            <SortButton fields={['last_name', 'first_name', 'last_seen']} />\n            <ExportButton />\n            <CreateButton\n                basePath=\"/productFamilies\"\n                variant=\"contained\"\n                label=\"Add New\"\n                className={classes.createButton}\n            />\n        </TopToolbar>\n    );\n};\n\nexport const ProductFamilyList = (props: ListProps) => {\n    const { identity } = useGetIdentity();\n    return identity ? (\n        <RaList\n            {...props}\n            actions={<ProductFamilyListActions />}\n            aside={<ProductFamilyListFilter />}\n            perPage={25}\n            pagination={<Pagination rowsPerPageOptions={[10, 25, 50, 100]} />}\n            filterDefaultValues={{  }}\n            // sort={{  }}\n        >\n            <ProductFamilyListContent />\n        </RaList>\n    ) : null;\n};\n","import Reacct, { useState, FormEvent } from 'react';\nimport {\n    Create,\n    CreateProps,\n    TextInput,\n    ReferenceInput,\n    SelectInput,\n    AutocompleteInput,\n    BooleanInput,\n    SimpleForm,\n    Toolbar,\n    required,\n    useGetIdentity,\n    useCreateContext,\n    useCreateSuggestionContext,\n    useCreate,\n} from 'react-admin';\nimport { \n    Card, \n    CardContent, \n    Divider, \n    Box, \n    Dialog, \n    DialogContent,\n    DialogActions,\n    TextField,\n    Button,\n } from '@material-ui/core';\nimport CategoryIcon from '@material-ui/icons/Category';\nimport { makeStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\n\nimport { ProductFamily } from '../types';\nimport { categories } from './categories';\n\nconst useStyles = makeStyles({\n    inline: {\n        display: 'inline-block',\n        marginLeft: '1em',\n        '&.first-child': {\n            marginLeft: 0,\n        },\n    },\n});\n\n\nexport const ProductFamilyCreate = (props: CreateProps) => {\n    const classes = useStyles();\n\n    const contactDefaultValue = () => ({ });\n    const transform = (data: ProductFamily) => ({\n        ...data,\n    });\n    \n    return (\n        <Create {...props} actions={false}>\n            <SimpleForm \n                component={CustomLayout} \n                redirect=\"show\"\n                initialValues={contactDefaultValue}\n                transform={transform}\n            >\n                <SelectInput\n                    source=\"category\"\n                    choices={categories}\n                    formClassName={clsx(classes.inline, 'first-child')}\n                />\n                <TextInput source=\"name\" fullWidth />\n                <TextInput source=\"website\" fullWidth />\n                <TextInput source=\"image\" fullWidth />\n                <TextInput \n                    source=\"description\"\n                    multiline\n                    rows={3} \n                    fullWidth \n                />\n            </SimpleForm>\n        </Create>\n    );\n};\n\n\nconst CustomLayout = ({ children }: \n    {children: any;}) => (\n    <CardContent>\n        <Box display=\"flex\">\n            <Box paddingTop={1}>\n                <CategoryIcon />\n            </Box>\n            <Box ml={2} flex=\"1\" maxWidth={796}>\n                {children}\n            </Box>\n        </Box>\n    </CardContent>\n);\n\nconst CustomDivider = () => (\n    <Box mb={2}>\n        <Divider />\n    </Box>\n);\n\n","import * as React from 'react';\nimport {\n    TextField,\n    ReferenceField,\n    SelectField,\n} from 'react-admin';\nimport { \n    Box, \n    Typography, \n    Divider,\n    Link,\n } from '@material-ui/core';\n\nimport { ProductFamily, Sale } from '../types';\nimport { CollapsibleAside } from '../components/CollapsibleAside';\nimport { categories } from './categories';\n\nexport const ProductFamilyAside = ({\n    record,\n    link = 'edit',\n}: {\n    record?: ProductFamily;\n    link?: string;\n}) => {\n    if (!record) return null;\n\n    return (\n        <CollapsibleAside record={record} link={link} basePath=\"/productFamilies\">\n            <AsideContent />\n        </CollapsibleAside>\n    );\n};\n\nconst AsideContent = ({ \n    record \n}: { \n    record?: ProductFamily;\n}) => \n    record ? (\n        <>\n            <Typography variant=\"subtitle2\">Family info</Typography>\n            <Divider />\n            <Box mt={1} display=\"flex\" gridGap={2}>\n                <Typography>Category:</Typography>\n                <SelectField\n                    source=\"category\"\n                    choices={categories}\n                />\n            </Box>\n\n            {record.website && (\n                <Box mt={1}>\n                    Website: <Link href={record.website} target=\"_blank\" rel=\"noreferrer\">Link</Link>\n                </Box>\n            )}\n        </>\n    ) : null;","import * as React from 'react';\nimport {\n    EditBase,\n    EditProps,\n    TextInput,\n    ReferenceInput,\n    AutocompleteInput,\n    BooleanInput,\n    FormWithRedirect,\n    Toolbar,\n    useEditContext,\n    SelectInput,\n} from 'react-admin';\nimport { Card, CardContent, Divider, Box } from '@material-ui/core';\nimport omit from 'lodash/omit';\n\nimport { Avatar } from './Avatar';\nimport { ProductFamilyAside } from './ProductFamilyAside';\nimport { ProductFamily } from '../types';\nimport { categories } from './categories';\n\nconst Spacer = () => <Box width={20} component=\"span\" />;\n\nconst ProductFamilyEditContent = () => {\n    const { record, loaded, save } = useEditContext<ProductFamily>();\n    if (!loaded || !record) return null;\n    return (\n        <Box mt={2} display=\"flex\">\n            <Box flex=\"1\">\n                <FormWithRedirect\n                    record={record}\n                    redirect=\"show\"\n                    save={save}\n                    render={formProps => (\n                        <Card>\n                            <CardContent>\n                                <Box>\n                                    <Box display=\"flex\">\n                                        <Box mr={2}>\n                                            <Avatar record={record} />\n                                        </Box>\n                                        <Box flex={1}>\n                                            <SelectInput\n                                                source=\"category\"\n                                                choices={categories}\n                                            />\n                                            <TextInput source=\"name\" fullWidth />\n                                            <TextInput source=\"website\" fullWidth />\n                                            <TextInput source=\"image\" fullWidth />\n                                            <TextInput \n                                                source=\"description\"\n                                                multiline\n                                                rows={3} \n                                                fullWidth \n                                            />\n                                        </Box>\n                                        \n                                    </Box>\n                                </Box>\n                            </CardContent>\n                            <Toolbar\n                                {...omit(formProps, [\n                                    // FIXME Not super user friendly way to remove warnings\n                                    'dirtyFields',\n                                    'dirtyFieldsSinceLastSubmit',\n                                    'dirtySinceLastSubmit',\n                                    'hasSubmitErrors',\n                                    'hasValidationErrors',\n                                    'initialValues',\n                                    'modifiedSinceLastSubmit',\n                                    'submitError',\n                                    'submitErrors',\n                                    'submitFailed',\n                                    'submitSucceeded',\n                                    'submitting',\n                                    'valid',\n                                ])}\n                            />\n                        </Card>\n                    )}\n                />\n            </Box>\n            <ProductFamilyAside record={record} link=\"show\" />\n        </Box>\n    );\n};\n\nexport const ProductFamilyEdit = (props: EditProps) => (\n    <EditBase {...props}>\n        <ProductFamilyEditContent />\n    </EditBase>\n);\n","import * as React from 'react';\nimport {\n    ShowBase,\n    ShowProps,\n    TextField,\n    ReferenceField,\n    ReferenceManyField,\n    useShowContext,\n    SelectField,\n    Pagination,\n} from 'react-admin';\nimport { Box, Card, CardContent, Typography } from '@material-ui/core';\n\nimport { Avatar } from './Avatar';\nimport { ProductFamilyAside } from './ProductFamilyAside';\nimport { LogoField } from '../companies/LogoField';\nimport { NotesIterator } from '../notes';\nimport { ProductFamily } from '../types';\nimport { ProductGridList } from '../products/ProductGridList';\nimport { categories } from './categories';\n\nexport const ProductFamilyShow = (props: ShowProps) => (\n    <ShowBase {...props}>\n        <ProductFamilyShowContent />\n    </ShowBase>\n);\n\nconst ProductFamilyShowContent = () => {\n    const { record, loaded } = useShowContext<ProductFamily>();\n    if (!loaded || !record) return null;\n    return (\n        <Box mt={2} display=\"flex\">\n            <Box flex=\"1\">\n                <Card>\n                    <CardContent>\n                        <Box display=\"flex\">\n                            <Avatar record={record} />\n                            <Box ml={2} flex=\"1\">\n                                <Typography variant=\"h5\">\n                                    {record.name}\n                                </Typography>\n                                <Typography variant=\"body2\">\n                                    {record.title} in{' '}\n                                    <SelectField\n                                        record={record}\n                                        source=\"category\"\n                                        choices={categories}\n                                    />\n                                </Typography>\n                            </Box>\n                        </Box>\n                        <Box mt={2} p={1}>\n                            <ReferenceManyField\n                                reference=\"products\"\n                                target=\"family_id\"\n                                label=\"Products\"\n                                pagination={<Pagination rowsPerPageOptions={[15, 25, 50, 100]} />}\n                                perPage={25}\n                            >\n                                <ProductGridList />\n                            </ReferenceManyField>\n                        </Box>\n                    </CardContent>\n                </Card>\n            </Box>\n            <ProductFamilyAside record={record} />\n        </Box>\n    );\n};\n","/* eslint-disable import/no-anonymous-default-export */\nimport { ProductFamilyList } from './ProductFamilyList';\nimport { ProductFamilyCreate } from './ProductFamilyCreate';\nimport { ProductFamilyEdit } from './ProductFamilyEdit';\nimport { ProductFamilyShow } from './ProductFamilyShow';\nimport CategoryIcon from '@material-ui/icons/Category';\n\nexport default {\n    list: ProductFamilyList,\n    create: ProductFamilyCreate,\n    edit: ProductFamilyEdit,\n    show: ProductFamilyShow,\n    icon: CategoryIcon,\n};\n","import * as React from 'react';\nimport { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport LabelIcon from '@material-ui/icons/Label';\nimport { makeStyles } from '@material-ui/core/styles';\nimport classnames from 'classnames';\nimport {\n    useTranslate,\n    DashboardMenuItem,\n    MenuItemLink,\n    MenuProps,\n    ReduxState,\n} from 'react-admin';\n\n\nimport SubMenu from './SubMenu';\nimport { AppState } from '../types';\n\nimport companies from '../companies';\nimport contacts from '../contacts';\nimport tasks from '../tasks';\nimport deals from '../deals';\nimport products from '../products';\nimport productFamilies from '../productFamilies';\n\n\n\ntype MenuName = 'menuCrm' | 'menuProduct' | 'menuCustomers';\n\nconst Menu = ({ dense = false }: MenuProps) => {\n    const [state, setState] = useState({\n        menuCrm: true,\n        menuProduct: true,\n        menuCustomers: true,\n    });\n    const translate = useTranslate();\n    const open = useSelector((state: ReduxState) => state.admin.ui.sidebarOpen);\n    useSelector((state: AppState) => state.theme); // force rerender on theme change\n    const classes = useStyles();\n\n    const handleToggle = (menu: MenuName) => {\n        setState(state => ({ ...state, [menu]: !state[menu] }));\n    };\n\n    return (\n        <div\n            className={classnames(classes.root, {\n                [classes.open]: open,\n                [classes.closed]: !open,\n            })}\n        >\n            {' '}\n            <DashboardMenuItem />\n            <SubMenu\n                handleToggle={() => handleToggle('menuCrm')}\n                isOpen={state.menuCrm}\n                name=\"CRM\"\n                icon={<companies.icon />}\n                dense={dense}\n            >\n                <MenuItemLink\n                    to={{\n                        pathname: '/companies',\n                        state: { _scrollToTop: true },\n                    }}\n                    primaryText=\"Companies\"\n                    leftIcon={<companies.icon />}\n                    dense={dense}\n                />\n                <MenuItemLink\n                    to={{\n                        pathname: '/contacts',\n                        state: { _scrollToTop: true },\n                    }}\n                    primaryText=\"Contacts\"\n                    leftIcon={<contacts.icon />}\n                    dense={dense}\n                />\n                <MenuItemLink\n                    to={{\n                        pathname: '/deals',\n                        state: { _scrollToTop: true },\n                    }}\n                    primaryText=\"Deals\"\n                    leftIcon={<deals.icon />}\n                    dense={dense}\n                />\n                <MenuItemLink\n                    to={{\n                        pathname: '/tasks',\n                        state: { _scrollToTop: true },\n                    }}\n                    primaryText=\"Taks\"\n                    leftIcon={<tasks.icon />}\n                    dense={dense}\n                />\n            </SubMenu>\n            <SubMenu\n                handleToggle={() => handleToggle('menuProduct')}\n                isOpen={state.menuProduct}\n                name=\"Products\"\n                icon={<products.icon />}\n                dense={dense}\n            >\n                <MenuItemLink\n                    to={{\n                        pathname: '/products',\n                        state: { _scrollToTop: true },\n                    }}\n                    primaryText=\"Products\"\n                    leftIcon={<products.icon />}\n                    dense={dense}\n                />\n                <MenuItemLink\n                    to={{\n                        pathname: '/productFamilies',\n                        state: { _scrollToTop: true },\n                    }}\n                    primaryText=\"Families\"\n                    leftIcon={<productFamilies.icon />}\n                    dense={dense}\n                />\n            </SubMenu>\n        </div>\n    );\n};\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n    },\n    open: {\n        width: 200,\n    },\n    closed: {\n        width: 55,\n    },\n}));\n\nexport default Menu;\n","export const darkTheme = {\n    palette: {\n        primary: {\n            main: '#90caf9',\n        },\n        secondary: {\n            main: '#FBBA72',\n        },\n        type: 'dark' as 'dark', // Switching the dark mode on is a single property value change.\n    },\n    sidebar: {\n        width: 200,\n    },\n    overrides: {\n        MuiAppBar: {\n            colorSecondary: {\n                color: '#ffffffb3',\n                backgroundColor: '#616161e6',\n            },\n        },\n        MuiButtonBase: {\n            root: {\n                '&:hover:active::after': {\n                    // recreate a static ripple color\n                    // use the currentColor to make it work both for outlined and contained buttons\n                    // but to dim the background without dimming the text,\n                    // put another element on top with a limited opacity\n                    content: '\"\"',\n                    display: 'block',\n                    width: '100%',\n                    height: '100%',\n                    position: 'absolute',\n                    top: 0,\n                    right: 0,\n                    backgroundColor: 'currentColor',\n                    opacity: 0.3,\n                    borderRadius: 'inherit',\n                },\n            },\n        },\n    },\n    props: {\n        MuiButtonBase: {\n            // disable ripple for perf reasons\n            disableRipple: true,\n        },\n    },\n};\n\nexport const lightTheme = {\n    palette: {\n        primary: {\n            main: '#4f3cc9',\n        },\n        secondary: {\n            light: '#5f5fc4',\n            main: '#283593',\n            dark: '#001064',\n            contrastText: '#fff',\n        },\n        background: {\n            default: '#fcfcfe',\n        },\n        type: 'light' as 'light',\n    },\n    shape: {\n        borderRadius: 10,\n    },\n    sidebar: {\n        width: 200,\n    },\n    overrides: {\n        RaMenuItemLink: {\n            root: {\n                borderLeft: '3px solid #fff',\n            },\n            active: {\n                borderLeft: '3px solid #4f3cc9',\n            },\n        },\n        MuiPaper: {\n            elevation1: {\n                boxShadow: 'none',\n            },\n            root: {\n                border: '1px solid #e0e0e3',\n                backgroundClip: 'padding-box',\n            },\n        },\n        MuiButton: {\n            contained: {\n                backgroundColor: '#fff',\n                color: '#4f3cc9',\n                boxShadow: 'none',\n            },\n        },\n        MuiButtonBase: {\n            root: {\n                '&:hover:active::after': {\n                    // recreate a static ripple color\n                    // use the currentColor to make it work both for outlined and contained buttons\n                    // but to dim the background without dimming the text,\n                    // put another element on top with a limited opacity\n                    content: '\"\"',\n                    display: 'block',\n                    width: '100%',\n                    height: '100%',\n                    position: 'absolute',\n                    top: 0,\n                    right: 0,\n                    backgroundColor: 'currentColor',\n                    opacity: 0.3,\n                    borderRadius: 'inherit',\n                },\n            },\n        },\n        MuiAppBar: {\n            colorSecondary: {\n                color: '#808080',\n                backgroundColor: '#fff',\n            },\n        },\n        MuiLinearProgress: {\n            colorPrimary: {\n                backgroundColor: '#f5f5f5',\n            },\n            barColorPrimary: {\n                backgroundColor: '#d7d7d7',\n            },\n        },\n        MuiFilledInput: {\n            root: {\n                backgroundColor: 'rgba(0, 0, 0, 0.04)',\n                '&$disabled': {\n                    backgroundColor: 'rgba(0, 0, 0, 0.04)',\n                },\n            },\n        },\n        MuiSnackbarContent: {\n            root: {\n                border: 'none',\n            },\n        },\n    },\n    props: {\n        MuiButtonBase: {\n            // disable ripple for perf reasons\n            disableRipple: true,\n        },\n    },\n};\n","import * as React from 'react';\n\n\nimport { \n    Notification, \n    NotificationProps,\n} from 'react-admin';\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(theme => ({\n\n}));\n\nconst NotificationContainer = (props: any) => {\n    const classes = useStyles();\n    return (\n        <Notification {...props} autoHideDuration={5000} />\n    )\n}\n\nexport default NotificationContainer;","import * as React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Layout, LayoutProps } from 'react-admin';\nimport AppBar from './AppBar';\nimport Menu from './Menu';\nimport { darkTheme, lightTheme } from './themes';\nimport { AppState } from '../types';\nimport NotificationContainer from '../notifications/NotificationContainer';\n\nexport default (props: LayoutProps) => {\n    const theme = useSelector((state: AppState) =>\n        state.theme === 'dark' ? darkTheme : lightTheme\n    );\n\n    return (\n        <Layout \n            {...props} \n            appBar={AppBar} \n            menu={Menu} \n            theme={theme} \n            notification={NotificationContainer}\n        />\n    );\n};\n","import * as React from 'react';\nimport { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Field, withTypes } from 'react-final-form';\nimport { useLocation, Link as RouterLink  } from 'react-router-dom';\n\nimport {\n    Avatar,\n    Button,\n    Card,\n    CardActions,\n    CircularProgress,\n    TextField,\n    Link,\n    Typography,\n} from '@material-ui/core';\nimport { createTheme, makeStyles } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\nimport LockIcon from '@material-ui/icons/Lock';\nimport { Notification, useTranslate, useLogin, useNotify } from 'react-admin';\n\nimport { lightTheme } from './themes';\n\nconst useStyles = makeStyles(theme => ({\n    main: {\n        display: 'flex',\n        flexDirection: 'column',\n        minHeight: '100vh',\n        alignItems: 'center',\n        justifyContent: 'center',\n        backgroundImage: 'radial-gradient(circle at 50% 50%, #313264 0%, #00023b 50%, #00023b 100%)',\n        backgroundRepeat: 'no-repeat',\n        backgroundSize: 'cover',\n    },\n    card: {\n        minWidth: 300,\n        // marginTop: '6em',\n    },\n    avatar: {\n        margin: '1em',\n        display: 'flex',\n        justifyContent: 'center',\n    },\n    icon: {\n        backgroundColor: theme.palette.secondary.main,\n    },\n    hint: {\n        marginTop: '1em',\n        display: 'flex',\n        justifyContent: 'center',\n        color: theme.palette.grey[500],\n    },\n    form: {\n        padding: '0 1em 1em 1em',\n    },\n    input: {\n        marginTop: '1em',\n    },\n    actions: {\n        padding: '0 1em 1em 1em',\n        display: 'flex',\n        flexDirection: 'column',\n    },\n}));\n\nconst renderInput = ({\n    meta: { touched, error } = { touched: false, error: undefined },\n    input: { ...inputProps },\n    ...props\n}) => (\n    <TextField\n        error={!!(touched && error)}\n        helperText={touched && error}\n        {...inputProps}\n        {...props}\n        fullWidth\n    />\n);\n\ninterface FormValues {\n    username?: string;\n    password?: string;\n}\n\nconst { Form } = withTypes<FormValues>();\n\nconst Login = () => {\n    const [loading, setLoading] = useState(false);\n    const translate = useTranslate();\n    const classes = useStyles();\n    const notify = useNotify();\n    const login = useLogin();\n    const location = useLocation<{ nextPathname: string } | null>();\n\n    const handleSubmit = async (auth: FormValues) => {\n        setLoading(true);\n        try{\n            const response = await login(auth, location.state ? location.state.nextPathname : '/');\n        } catch (error: any) {\n            setLoading(false);\n            notify(error.message, 'warning');\n        }\n    };\n\n    const validate = ({\n        username,\n        password,\n    }: FormValues) => {\n        const errors = { \n            username: !username ? translate('ra.validation.required') : undefined, \n            password: !password ? translate('ra.validation.required') : undefined,\n        };\n        return errors;\n    };\n\n    return (\n        <Form\n            onSubmit={handleSubmit}\n            validate={validate}\n            render={({ handleSubmit }) => (\n                <form onSubmit={handleSubmit} noValidate>\n                    <div className={classes.main}>\n                        <Card className={classes.card}>\n                            <div className={classes.avatar}>\n                                <Avatar className={classes.icon}>\n                                    <LockIcon />\n                                </Avatar>\n                            </div>\n                            <div className={classes.hint}>\n                                Wecome to Assistor.\n                            </div>\n                            <div className={classes.form}>\n                                <div className={classes.input}>\n                                    <Field\n                                        autoFocus\n                                        name=\"username\"\n                                        // @ts-ignore\n                                        component={renderInput}\n                                        label={translate('ra.auth.username')}\n                                        disabled={loading}\n                                    />\n                                </div>\n                                <div className={classes.input}>\n                                    <Field\n                                        name=\"password\"\n                                        // @ts-ignore\n                                        component={renderInput}\n                                        label={translate('ra.auth.password')}\n                                        type=\"password\"\n                                        disabled={loading}\n                                    />\n                                </div>\n                            </div>\n                            <CardActions className={classes.actions}>\n                                <Button\n                                    variant=\"contained\"\n                                    type=\"submit\"\n                                    color=\"primary\"\n                                    disabled={loading}\n                                    fullWidth\n                                >\n                                    {loading && (\n                                        <CircularProgress\n                                            size={25}\n                                            thickness={2}\n                                        />\n                                    )}\n                                    {translate('ra.auth.sign_in')}\n                                </Button>\n                                <Typography variant=\"body2\">Or</Typography>\n                                <Link\n                                    color=\"textSecondary\"\n                                    component={RouterLink}\n                                    to=\"/register\"\n                                    variant=\"body1\"\n                                >\n                                    Register\n                                </Link>\n                            </CardActions>\n                        </Card>\n                        <Notification />\n                    </div>\n                </form>\n            )}\n        />\n    );\n};\n\nLogin.propTypes = {\n    authProvider: PropTypes.func,\n    previousRoute: PropTypes.string,\n};\n\n// We need to put the ThemeProvider decoration in another component\n// Because otherwise the useStyles() hook used in Login won't get\n// the right theme\nconst LoginWithTheme = (props: any) => (\n    <ThemeProvider theme={createTheme(lightTheme)}>\n        <Login {...props} />\n    </ThemeProvider>\n);\n\nexport default LoginWithTheme;\n","import * as React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { Card, Box, Link } from '@material-ui/core';\nimport ContactsIcon from '@material-ui/icons/Contacts';\nimport { useGetList, SimpleList, useGetIdentity } from 'react-admin';\nimport { formatDistance } from 'date-fns';\n\nimport { Avatar } from '../contacts/Avatar';\nimport { Contact } from '../types';\n\nexport const HotContacts = () => {\n    const { identity } = useGetIdentity();\n    const {\n        data: contactData,\n        ids: contactIds,\n        total: contactTotal,\n        loaded: contactsLoaded,\n    } = useGetList<Contact>(\n        'contacts',\n        { page: 1, perPage: 10 },\n        { field: 'last_seen', order: 'DESC' },\n        { status: 'hot', sales_id: identity?.id },\n        { enabled: Number.isInteger(identity?.id) }\n    );\n    return (\n        <>\n            <Box display=\"flex\" alignItems=\"center\" marginBottom=\"1em\">\n                <Box ml={2} mr={2} display=\"flex\">\n                    <ContactsIcon color=\"disabled\" fontSize=\"large\" />\n                </Box>\n                <Link\n                    underline=\"none\"\n                    variant=\"h5\"\n                    color=\"textSecondary\"\n                    component={RouterLink}\n                    to=\"/contacts\"\n                >\n                    Hot contacts\n                </Link>\n            </Box>\n            <Card>\n                <SimpleList<Contact>\n                    basePath=\"/contacts\"\n                    linkType=\"show\"\n                    ids={contactIds}\n                    data={contactData}\n                    total={contactTotal}\n                    loaded={contactsLoaded}\n                    primaryText={contact =>\n                        `${contact.first_name} ${contact.last_name}`\n                    }\n                    secondaryText={contact =>\n                        formatDistance(\n                            new Date(contact.last_seen),\n                            new Date(),\n                            {\n                                addSuffix: true,\n                            }\n                        )\n                    }\n                    leftAvatar={contact => <Avatar record={contact} />}\n                />\n            </Card>\n        </>\n    );\n};\n","import * as React from 'react';\nimport { Card, CardContent, Typography, Box } from '@material-ui/core';\nimport NoteIcon from '@material-ui/icons/Note';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {\n    useGetList,\n    useGetIdentity,\n    ReferenceField,\n    TextField,\n    FunctionField,\n} from 'react-admin';\nimport { formatDistance } from 'date-fns';\nimport ReactMarkdown from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\n\n\nimport { Contact as ContactType } from '../types';\n\nconst useStyles = makeStyles(theme => ({\n    note: {\n        marginBottom: theme.spacing(2),\n    },\n    noteText: {\n        backgroundColor: theme.palette.grey[200],\n        padding: theme.spacing(1),\n        borderRadius: 10,\n    },\n    noteTextText: {\n        display: '-webkit-box',\n        '-webkit-line-clamp': 3,\n        '-webkit-box-orient': 'vertical',\n        overflow: 'hidden',\n    },\n}));\n\nexport const LatestNotes = () => {\n    const classes = useStyles();\n    const { identity } = useGetIdentity();\n    const {\n        data: contactNotesData,\n        ids: contactNotesIds,\n        loaded: contactNotesLoaded,\n    } = useGetList(\n        'contactNotes',\n        { page: 1, perPage: 5 },\n        { field: 'date', order: 'DESC' },\n        { sales_id: identity?.id },\n        { enabled: Number.isInteger(identity?.id) }\n    );\n    const {\n        data: dealNotesData,\n        ids: dealNotesIds,\n        loaded: dealNotesLoaded,\n    } = useGetList(\n        'dealNotes',\n        { page: 1, perPage: 5 },\n        { field: 'date', order: 'DESC' },\n        { sales_id: identity?.id },\n        { enabled: Number.isInteger(identity?.id) }\n    );\n    const {\n        data: companyNotesData,\n        ids: companyNotesIds,\n        loaded: companyNotesLoaded,\n    } = useGetList(\n        'companyNotes',\n        { page: 1, perPage: 5 },\n        { field: 'date', order: 'DESC' },\n        { sales_id: identity?.id },\n        { enabled: Number.isInteger(identity?.id) }\n    );\n    if (!contactNotesLoaded || !dealNotesLoaded || !companyNotesLoaded) {\n        return null;\n    }\n    // TypeScript guards\n    if (\n        !contactNotesIds ||\n        !contactNotesData ||\n        !dealNotesIds ||\n        !dealNotesData ||\n        !companyNotesIds ||\n        !companyNotesData\n    ) {\n        return null;\n    }\n\n    const allNotes = ([] as any[])\n        .concat(\n            contactNotesIds.map(id => ({\n                ...contactNotesData[id],\n                type: 'contactNote',\n            })),\n            dealNotesIds.map(id => ({\n                ...dealNotesData[id], \n                type: 'dealNote' \n            })),\n            companyNotesIds.map(id => ({\n                ...companyNotesData[id], \n                type: 'companyNote' \n            })),\n        )\n        .sort((a, b) => new Date(b.date).valueOf() - new Date(a.date).valueOf())\n        .slice(0, 5);\n\n    return (\n        <>\n            <Box display=\"flex\" alignItems=\"center\" marginBottom=\"1em\">\n                <Box ml={2} mr={2} display=\"flex\">\n                    <NoteIcon color=\"disabled\" fontSize=\"large\" />\n                </Box>\n                <Typography variant=\"h5\" color=\"textSecondary\">\n                    My Latest Notes\n                </Typography>\n            </Box>\n            <Card>\n                <CardContent>\n                    {allNotes.map(note => (\n                        <div\n                            id={`${note.type}_${note.id}`}\n                            key={`${note.type}_${note.id}`}\n                            className={classes.note}\n                        >\n                            <Typography color=\"textSecondary\" gutterBottom>\n                                on{' '}\n                                <NoteSource note={note} />\n                                , added{' '}\n                                {formatDistance(\n                                    new Date(note.date),\n                                    new Date(),\n                                    {\n                                        addSuffix: true,\n                                    }\n                                )}\n                            </Typography>\n                            <div className={classes.noteText}>\n                                <ReactMarkdown children={note.text} remarkPlugins={[remarkGfm]} />\n                            </div>\n                        </div>\n                    ))}\n                </CardContent>\n            </Card>\n        </>\n    );\n};\n\nconst NoteSource = ({ note }: any) => {\n    if (note.type === 'dealNote'){\n        return <Deal note={note} />;\n    }\n    else if (note.type === 'contactNote') {\n        return <Contact note={note} />;\n    }\n    else if (note.type === 'companyNote') {\n        return <Company note={note} />;\n    }\n    return null;\n};\n\nconst Deal = ({ note }: any) => (\n    <>\n        Deal{' '}\n        <ReferenceField\n            record={note}\n            source=\"deal_id\"\n            reference=\"deals\"\n            basePath=\"/deals\"\n            link=\"show\"\n        >\n            <TextField source=\"name\" variant=\"body1\" />\n        </ReferenceField>\n    </>\n);\n\nconst Contact = ({ note }: any) => (\n    <>\n        Contact{' '}\n        <ReferenceField\n            record={note}\n            source=\"contact_id\"\n            reference=\"contacts\"\n            basePath=\"/contacts\"\n            link=\"show\"\n        >\n            <FunctionField<ContactType>\n                variant=\"body1\"\n                render={contact =>\n                    contact ? `${contact.first_name} ${contact.last_name}` : ''\n                }\n            />\n        </ReferenceField>\n    </>\n);\n\nconst Company = ({ note }: any) => (\n    <>\n        Company{' '}\n        <ReferenceField\n            record={note}\n            source=\"company_id\"\n            reference=\"companies\"\n            basePath=\"/companies\"\n            link=\"show\"\n        >\n            <TextField source=\"name\" variant=\"body1\" />\n        </ReferenceField>\n    </>\n);\n","import React, { useState, memo } from \"react\";\nimport { \n    ComposableMap, \n    Geographies, \n    Geography, \n    ZoomableGroup,\n    Marker,\n    Annotation,\n} from 'react-simple-maps';\nimport { scaleQuantile } from 'd3-scale';\nimport { max } from 'd3-array';\nimport { geoCentroid } from \"d3-geo\";\nimport {\n    FilterList,\n    FilterLiveSearch,\n    FilterListItem,\n    useGetIdentity,\n    useGetList,\n} from 'react-admin';\nimport ReactTooltip from \"react-tooltip\";\n\nimport { Country } from '../types';\n\nconst geoUrl =\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nconst Map = memo(({setTooltipContent}: any) => {\n    const { data, ids, loaded } = useGetList<Country>(\n        'countries',\n        { perPage: 1000, page: 1 }\n    );\n    if (!loaded) return null;\n\n    const colorScale = scaleQuantile<string>()\n        .domain([0, max(ids.map(id => data[id].nb_companies))])\n        .range([\n            \"#e1f5fe\",\n            \"#b3e5fc\",\n            \"#81d4fa\",\n            \"#4fc3f7\",\n            \"#29b6f6\",\n            \"#03a9f4\",\n            \"#039be5\",\n            \"#0288d1\",\n            \"#0277bd\"\n        ]);\n\n    return (\n        <ComposableMap\n            data-tip=\"\"\n            projection=\"geoAzimuthalEqualArea\"\n            projectionConfig={{\n                rotate: [-25.0, -50.0, 0],\n                scale: 750\n            }}\n        >\n            <ZoomableGroup\n                center={[0, 0]}\n                zoom={1}\n            >\n                <Geographies geography={geoUrl}>\n                    {({ geographies }) => (\n                        <>\n                            {geographies\n                            .map(geo => {\n                                const { ISO_A3 } = geo.properties;\n                                const cur = ids.find(id => data[id].iso3 === ISO_A3);\n                                return (\n                                    <Geography \n                                            key={geo.rsmKey} \n                                            geography={geo} \n                                            fill={cur ? colorScale(data[cur].nb_companies) : \"#D6D6DA\"}\n                                            stroke=\"#EAEAEC\"\n                                            onMouseEnter={() => {\n                                                const { NAME, POP_EST } = geo.properties;\n                                                const nb_companies = cur ? data[cur].nb_companies : 0;\n                                                setTooltipContent(`${NAME} - ${nb_companies}`);\n                                            }}\n                                            onMouseLeave={() => {\n                                                setTooltipContent(\"\");\n                                            }}\n                                        />\n                                );\n                            })}\n                            {/* {geographies.map(geo => {\n                                const centroid = geoCentroid(geo);\n                                const { ISO_A3 } = geo.properties;\n                                const cur = ids.find(id => data[id].iso3 === ISO_A3);\n                                return (\n                                    <g key={geo.rsmKey + \"-name\"}>\n                                        {cur &&\n                                            <Marker coordinates={centroid}>\n                                                <text y=\"2\" fontSize={9} textAnchor=\"middle\">\n                                                {data[cur].nicename}\n                                                </text>\n                                            </Marker>\n                                        }\n                                    </g>\n                                );\n                            })} */}\n                        </>\n                    )}\n                </Geographies>\n            </ZoomableGroup>\n        </ComposableMap>\n    );\n});\n\nexport const CompaniesMap = () => {\n    const [content, setContent] = useState(\"\");\n\n    return (\n        <div>\n            <Map setTooltipContent={setContent} />\n            <ReactTooltip>{content}</ReactTooltip>\n        </div>\n    );\n}","import * as React from 'react';\nimport { Box, Grid } from '@material-ui/core';\n\nimport { Welcome } from './Welcome';\nimport { DealsChart } from './DealsChart';\nimport { HotContacts } from './HotContacts';\nimport { LatestNotes } from './LatestNotes';\nimport { DealsPipeline } from './DealsPipeline';\nimport { CompaniesMap } from './CompaniesMap';\n\nexport const Dashboard = () => {\n    return (\n        <>\n            <Grid container spacing={1}>\n                <Grid item xs={12} sm={8}>\n                    <CompaniesMap />\n                </Grid>\n                <Grid item xs={12} sm={4}>\n                    <HotContacts />\n                </Grid>\n                <Grid item xs={12}>\n                    <LatestNotes />\n                </Grid>\n            </Grid>\n        </>\n    );\n};\n","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { Field, Form } from 'react-final-form';\nimport { useLocation, Link as RouterLink  } from 'react-router-dom';\nimport {\n    Button,\n    CardActions,\n    CircularProgress,\n    TextField,\n    Grid,\n    CardContent,\n    Typography,\n    Link,\n    Container,\n} from '@material-ui/core';\nimport { Theme } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { \n    useTranslate, \n    useNotify, \n    useLogin, \n    useSafeSetState, \n    useRedirect,\n    useAuthProvider,\n} from 'react-admin';\nimport axios from 'axios';\n\n\nconst baseURL = \"/auth\";\n\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    form: {\n        padding: '0 1em 1em 1em',\n    },\n    input: {\n        marginTop: '1em',\n    },\n    button: {\n        width: '100%',\n    },\n    icon: {\n        marginRight: theme.spacing(1),\n    },\n    actions: {\n        padding: '0 1em 1em 1em',\n        display: 'flex',\n        flexDirection: 'column',\n    },\n}));\n\nconst Input = ({\n    meta: { touched, error }, // eslint-disable-line react/prop-types\n    input: inputProps, // eslint-disable-line react/prop-types\n    ...props\n}: {\n    meta: any;\n    input: any;\n}) => (\n    <TextField\n        error={!!(touched && error)}\n        helperText={touched && error}\n        {...inputProps}\n        {...props}\n        fullWidth\n    />\n);\n\ninterface FormValues {\n    first_name: string;\n    last_name: string;\n    email: string;\n    username: string;\n    password: string;\n    confirm: string;\n}\n\nconst RegisterForm = ({ redirectTo }:\n    {redirectTo?: string | undefined;}) => {\n    const authProvider = useAuthProvider();\n    const [loading, setLoading] = useSafeSetState(false);\n    const translate = useTranslate();\n    const login = useLogin();\n    const notify = useNotify();\n    const redirect = useRedirect();\n    const classes = useStyles();\n\n    const validate = ({ \n        first_name,\n        last_name,\n        email,\n        username, \n        password, \n        confirm \n    }: FormValues) => {\n        const errors = { \n            first_name: !first_name ? translate('ra.validation.required') : undefined, \n            last_name: !last_name ? translate('ra.validation.required') : undefined, \n            email: !email ? translate('ra.validation.required') : undefined, \n            username: !username ? translate('ra.validation.required') : undefined, \n            password: !password ? translate('ra.validation.required') : undefined, \n            confirm: password !== confirm ? 'Confirmation should match password': undefined\n        };\n        return errors;\n    };\n\n    interface ResponseType {\n        message: string;\n    }\n\n    const submit = async ({ \n        first_name,\n        last_name,\n        email,\n        username, \n        password,\n    }: FormValues) => {\n        setLoading(true);\n        try{\n            const response = await authProvider.register({ \n                    first_name,\n                    last_name,\n                    email,\n                    username, \n                    password\n                });\n        \n            setLoading(false)\n            login({ username, password }, redirectTo)\n        } catch (error: any) {\n            setLoading(false);\n            notify(error.message, 'warning');\n        }\n    };\n\n    return (\n        <Form\n            onSubmit={submit}\n            validate={validate}\n            render={({ handleSubmit }) => (\n                <form className={classes.form} onSubmit={handleSubmit} noValidate>\n                    <CardContent>\n                        <Container maxWidth=\"xs\">\n                        <Grid container spacing={2} >\n                            <Grid item xs={12} sm={6}>\n                                <div className={classes.input}>\n                                    <Field\n                                        autoFocus\n                                        id=\"first_name\"\n                                        name=\"first_name\"\n                                        component={Input}\n                                        label=\"First Name\"\n                                        disabled={loading}\n                                        required\n                                    />\n                                </div>\n                            </Grid>\n                            <Grid item xs={12} sm={6}>\n                                <div className={classes.input}>\n                                    <Field\n                                        autoFocus\n                                        id=\"last_name\"\n                                        name=\"last_name\"\n                                        component={Input}\n                                        label=\"Last Name\"\n                                        disabled={loading}\n                                        required\n                                    />\n                                </div>\n                            </Grid>\n                            <Grid item xs={12}>\n                                <div className={classes.input}>\n                                    <Field\n                                        autoFocus\n                                        id=\"email\"\n                                        name=\"email\"\n                                        component={Input}\n                                        label=\"Email Address\"\n                                        disabled={loading}\n                                        required\n                                    />\n                                </div>\n                            </Grid>\n                            <Grid item xs={12}>\n                                <div className={classes.input}>\n                                    <Field\n                                        autoFocus\n                                        id=\"username\"\n                                        name=\"username\"\n                                        component={Input}\n                                        label={translate('ra.auth.username')}\n                                        disabled={loading}\n                                        required\n                                    />\n                                </div>\n                            </Grid>\n                            <Grid item xs={12}>\n                                <div className={classes.input}>\n                                    <Field\n                                        id=\"password\"\n                                        name=\"password\"\n                                        component={Input}\n                                        label={translate('ra.auth.password')}\n                                        type=\"password\"\n                                        disabled={loading}\n                                        autoComplete=\"current-password\"\n                                        required\n                                    />\n                                </div>\n                            </Grid>\n                            <Grid item xs={12}>\n                                <div className={classes.input}>\n                                    <Field\n                                        id=\"confirm\"\n                                        name=\"confirm\"\n                                        component={Input}\n                                        label=\"Confirm Password\"\n                                        type=\"password\"\n                                        disabled={loading}\n                                        autoComplete=\"current-password\"\n                                        required\n                                    />\n                                </div>\n                            </Grid>\n                        </Grid>\n                    </Container>\n                    </CardContent>\n                    <CardActions className={classes.actions}>\n                        <Button\n                            variant=\"contained\"\n                            type=\"submit\"\n                            color=\"primary\"\n                            disabled={loading}\n                            className={classes.button}\n                            fullWidth\n                        >\n                            {loading && (\n                                <CircularProgress\n                                    size={25}\n                                    thickness={2}\n                                />\n                            )}\n                            Register\n                        </Button>\n                        <Typography variant=\"body2\">Or</Typography>\n                        <Link\n                            color=\"textSecondary\"\n                            component={RouterLink}\n                            to=\"/login\"\n                            variant=\"body1\"\n                        >\n                            Login\n                        </Link>\n                    </CardActions>\n                </form>\n            )}\n        />\n    );\n};\n\nRegisterForm.propTypes = {\n    redirectTo: PropTypes.string,\n};\n\nexport default RegisterForm;","import React, { ReactNode, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { \n    Card, \n    CardContent, \n    Theme, \n    Avatar,\n    Grid,\n    Link,\n} from '@material-ui/core';\nimport {\n    Notification,\n} from 'react-admin';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { createTheme, makeStyles } from '@material-ui/core/styles';\nimport classnames from 'classnames';\nimport { lightTheme } from '../layout/themes';\n\nimport RegisterForm from './RegisterForm';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n        main: {\n            display: 'flex',\n            flexDirection: 'column',\n            minHeight: '100vh',\n            // height: '1px',\n            alignItems: 'center',\n            justifyContent: 'center',\n            backgroundRepeat: 'no-repeat',\n            backgroundSize: 'cover',\n            backgroundImage:\n                'radial-gradient(circle at 50% 50%, #313264 0%, #00023b 50%, #00023b 100%)',\n        },\n        card: {\n            minWidth: 300,\n            // marginTop: '6em',\n        },\n        avatar: {\n            margin: '1em',\n            display: 'flex',\n            justifyContent: 'center',\n        },\n        icon: {\n            backgroundColor: theme.palette.secondary.main,\n        },\n        hint: {\n            marginTop: '1em',\n            display: 'flex',\n            justifyContent: 'center',\n            color: theme.palette.grey[500],\n        },\n    }),\n    { name: 'Register' }\n);\n\nconst Register = () => {\n    const classes = useStyles();\n    return (\n            <div className={classes.main}>\n                <Card className={classes.card}>\n                    <div className={classes.avatar}>\n                        <Avatar className={classes.icon}>\n                            <ExitToAppIcon />\n                        </Avatar>\n                    </div>\n                    <div className={classes.hint}>\n                                Register to Assistor.\n                            </div>\n                    <RegisterForm />\n                </Card>\n                <Notification />\n            </div>\n    );\n}\n\nconst RegisterWithTheme = (props: any) => (\n    <ThemeProvider theme={createTheme(lightTheme)}>\n        <Register {...props} />\n    </ThemeProvider>\n);\n\nexport default RegisterWithTheme;","import { ThemeName } from '../types';\n\nexport const CHANGE_THEME = 'CHANGE_THEME';\n\nexport const changeTheme = (theme: ThemeName) => ({\n    type: CHANGE_THEME,\n    payload: theme,\n});","import * as React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport { useTranslate, useLocale, useSetLocale, Title } from 'react-admin';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { changeTheme } from './actions';\nimport { AppState } from '../types';\n\nconst useStyles = makeStyles({\n    label: { width: '10em', display: 'inline-block' },\n    button: { margin: '1em' },\n});\n\nconst Configuration = () => {\n    const translate = useTranslate();\n    const locale = useLocale();\n    const setLocale = useSetLocale();\n    const classes = useStyles();\n    const theme = useSelector((state: AppState) => state.theme);\n    const dispatch = useDispatch();\n    return (\n        <Card>\n            <Title title={translate('pos.configuration')} />\n            <CardContent>\n                <div className={classes.label}>\n                    {translate('pos.theme.name')}\n                </div>\n                <Button\n                    variant=\"contained\"\n                    className={classes.button}\n                    color={theme === 'light' ? 'primary' : 'default'}\n                    onClick={() => dispatch(changeTheme('light'))}\n                >\n                    {translate('pos.theme.light')}\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    className={classes.button}\n                    color={theme === 'dark' ? 'primary' : 'default'}\n                    onClick={() => dispatch(changeTheme('dark'))}\n                >\n                    {translate('pos.theme.dark')}\n                </Button>\n            </CardContent>\n            <CardContent>\n                <div className={classes.label}>{translate('pos.language')}</div>\n                <Button\n                    variant=\"contained\"\n                    className={classes.button}\n                    color={locale === 'en' ? 'primary' : 'default'}\n                    onClick={() => setLocale('en')}\n                >\n                    en\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    className={classes.button}\n                    color={locale === 'fr' ? 'primary' : 'default'}\n                    onClick={() => setLocale('fr')}\n                >\n                    fr\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    className={classes.button}\n                    color={locale === 'ja' ? 'primary' : 'default'}\n                    onClick={() => setLocale('ja')}\n                >\n                    ja\n                </Button>\n            </CardContent>\n        </Card>\n    );\n};\n\nexport default Configuration;","import * as React from \"react\";\nimport { RouteWithoutLayout } from 'react-admin';\nimport { Route } from 'react-router-dom';\nimport Register from './auth/RegisterPage';\nimport Configuration from './configuration/Configuration';\n\nexport const customRoutes = [\n    <RouteWithoutLayout exact path=\"/register\" component={Register} />,\n    <Route exact path=\"/configuration\" render={() => <Configuration />} />,\n];","import { TranslationMessages } from 'react-admin';\nimport englishMessages from 'ra-language-english';\n\nconst customEnglishMessages: TranslationMessages = {\n    ...englishMessages,\n\n};\n\nexport default customEnglishMessages;","import * as React from 'react';\nimport { Admin, Resource, ListGuesser, EditGuesser, ShowGuesser, defaultTheme } from 'react-admin';\nimport {\n    unstable_createMuiStrictModeTheme,\n    createTheme,\n} from '@material-ui/core/styles';\nimport polyglotI18nProvider from 'ra-i18n-polyglot';\n\nimport { dataProvider } from './dataProvider';\nimport { authProvider } from './authProvider';\nimport { Login, Layout } from './layout';\nimport contacts from './contacts';\nimport companies from './companies';\nimport products from './products';\nimport tasks from './tasks';\nimport productfamiliess from './productFamilies';\nimport deals from './deals';\nimport { Dashboard } from './dashboard/Dashboard';\nimport { customRoutes } from './customRoutes';\n// import Login from './Login'\nimport productFamilies from './productFamilies';\nimport englishMessages from './i18n/en';\n\n// FIXME MUI bug https://github.com/mui-org/material-ui/issues/13394\nconst theme =\n    process.env.NODE_ENV !== 'production'\n        ? unstable_createMuiStrictModeTheme(defaultTheme)\n        : createTheme(defaultTheme);\n\nconst i18nProvider = polyglotI18nProvider(locale => {\n    if (locale === 'fr') {\n        return import('./i18n/fr').then(messages => messages.default);\n    }\n    \n    if (locale === 'ja') {\n        return import('./i18n/ja').then(messages => messages.default);\n    }\n\n    // Always fallback on english\n    return englishMessages;\n}, 'en');\n\nconst App = () => (\n    <Admin\n        customRoutes={customRoutes}\n        dataProvider={dataProvider}\n        authProvider={authProvider}\n        loginPage={Login}\n        layout={Layout}\n        dashboard={Dashboard}\n        theme={theme}\n        i18nProvider={i18nProvider}\n        disableTelemetry\n    >\n        <Resource name=\"deals\" {...deals} />\n        <Resource name=\"contacts\" {...contacts} />\n        <Resource name=\"companies\" {...companies} />\n        <Resource name=\"products\" {...products} />\n        <Resource name=\"productProperties\" />\n        <Resource name=\"propertyTypes\" />\n        <Resource name=\"contactNotes\" />\n        <Resource name=\"companyNotes\" />\n        <Resource name=\"productNotes\" />\n        <Resource name=\"dealNotes\" />\n        <Resource name=\"productFamilies\" {...productFamilies} />\n        <Resource name=\"tasks\" {...tasks} />\n        <Resource name=\"sales\" list={ListGuesser} />\n        <Resource name=\"tags\" list={ListGuesser} />\n        <Resource name=\"countries\" list={ListGuesser} />\n    </Admin>\n);\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import { CssBaseline } from '@material-ui/core';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <CssBaseline />\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}