{"version":3,"sources":["auth.ts","dataProvider.ts","authProvider.ts","layout/Logo.tsx","layout/AppBar.tsx","layout/SubMenu.tsx","companies/sectors.ts","companies/CompanyAvatar.tsx","companies/CountryField.tsx","companies/CompanyCard.tsx","companies/GridList.tsx","companies/relations.ts","tags/TagChip.tsx","companies/CompanyListFilter.tsx","companies/SelectAllButton.tsx","companies/CompanyList.tsx","companies/sizes.ts","companies/DistributorInput.tsx","companies/CompanyCreate.tsx","contacts/Avatar.tsx","misc/Status.tsx","tags/TagsList.tsx","companies/LogoField.tsx","tags/colors.ts","tags/TagsListEdit.tsx","companies/CompanyAside.tsx","deals/stages.ts","notes/StatusSelector.tsx","notes/NewNote.tsx","notes/Note.tsx","notes/NotesIterator.tsx","companies/CompanyShow.tsx","companies/CompanyEdit.tsx","companies/index.ts","contacts/ContactAside.tsx","contacts/ContactShow.tsx","contacts/ContactListFilter.tsx","contacts/ContactList.tsx","contacts/ContactEdit.tsx","contacts/ContactCreate.tsx","contacts/index.tsx","tasks/TaskAside.tsx","tasks/TaskShow.tsx","tasks/status.ts","tasks/TaskStatus.tsx","tasks/TaskListFilter.tsx","tasks/MarkDoneButton.tsx","tasks/TaskList.tsx","tasks/TaskEdit.tsx","tasks/TaskCreate.tsx","tasks/index.ts","deals/DealCard.tsx","deals/DealColumn.tsx","deals/DealListContent.tsx","deals/types.ts","deals/DealCreate.tsx","deals/ContactList.tsx","deals/DealShow.tsx","deals/OnlyMineInput.tsx","deals/DealList.tsx","deals/index.ts","products/ProductAvatar.tsx","products/ProductCard.tsx","products/ProductGridList.tsx","products/ProductListFilter.tsx","products/ProductList.tsx","products/CreatePropertyType.tsx","products/ProductCreate.tsx","products/ProductImageField.tsx","products/ProductAside.tsx","products/ProductShow.tsx","products/ProductEdit.tsx","products/index.ts","productFamilies/Avatar.tsx","productFamilies/ProductFamilyListFilter.tsx","productFamilies/ProductFamilyList.tsx","productFamilies/CreateCategory.tsx","productFamilies/ProductFamilyCreate.tsx","productFamilies/ProductFamilyAside.tsx","productFamilies/ProductFamilyEdit.tsx","productFamilies/ProductFamilyShow.tsx","productFamilies/index.ts","layout/Menu.tsx","layout/themes.ts","layout/Layout.tsx","layout/Login.tsx","dashboard/HotContacts.tsx","dashboard/LatestNotes.tsx","dashboard/CompaniesMap.tsx","dashboard/Dashboard.tsx","auth/RegisterForm.tsx","auth/RegisterPage.tsx","configuration/actions.ts","configuration/Configuration.tsx","customRoutes.tsx","i18n/en.ts","App.tsx","reportWebVitals.js","index.tsx"],"names":["CREDENTIALS_LOCAL_STORAGE_ITEM","setCredentials","credentials","localStorage","setItem","JSON","stringify","getCredentials","raw","getItem","parse","getList","resource","params","a","token","access_token","config","headers","Authorization","axios","get","response","Promise","resolve","data","reject","message","status","getOne","getMany","getManyReference","create","post","update","put","updateMany","deleteOne","delete","deleteMany","dataProvider","baseURL","refreshToken","refresh_token","undefined","login","username","password","decodedToken","decodeJwt","permissions","logout","removeItem","register","first_name","last_name","email","getIdentity","id","fullName","avatar","checkError","authProvider","checkAuth","error","getPermissions","useStyles","makeStyles","theme","root","display","breakpoints","down","spacing","logoIcon","color","palette","secondary","light","logoText","primary","Logo","classes","className","Typography","variant","title","flex","textOverflow","whiteSpace","overflow","spacer","ConfigurationMenu","forwardRef","props","ref","useTranslate","MenuItemLink","to","primaryText","leftIcon","onClick","sidebarIsOpen","CustomUserMenu","UserMenu","CustomAppBar","AppBar","elevation","userMenu","icon","minWidth","transition","paddingLeft","sidebarIsClosed","SubMenu","handleToggle","isOpen","name","children","dense","translate","useSelector","state","admin","ui","sidebarOpen","header","MenuItem","button","ListItemIcon","Tooltip","placement","Collapse","in","timeout","unmountOnExit","List","component","disablePadding","sectors","map","sector","width","height","backgroundColor","img","objectFit","small","large","CompanyAvatar","record","size","logo","src","process","alt","imgProps","clsx","image","sizeInPixel","medium","CountryField","source","ImageField","paper","flexDirection","justifyContent","padding","position","identity","alignItems","textAlign","marginTop","stats","singleStat","statIcon","marginRight","checkbox","top","right","identifier","lrft","CompanyCard","useState","setElevation","useListContext","onToggleItem","ids","loaded","selectedIds","Link","linkToRecord","underline","onMouseEnter","onMouseLeave","Paper","Checkbox","edge","checked","includes","tabIndex","disableRipple","e","stopPropagation","Box","ReferenceField","reference","link","relation","Chip","label","SelectField","choices","style","marginBottom","nb_contacts","nb_notes","gridList","flexWrap","gap","grey","LoadingGridList","nbChildren","fn","key","Array","from","length","_","LoadedGridList","GridList","relations","TagChip","border","cursor","container","order","marginLeft","CompanyListFilter","useGetIdentity","useGetList","page","perPage","field","FilterLiveSearch","FilterList","FilterListItem","value","tags","sales_id","SelectAllButton","onSelect","Button","toolbar","createButton","searchbox","up","importOptions","parseConfig","dynamicTyping","CompanyListActions","TopToolbar","SortButton","fields","ExportButton","CreateButton","basePath","sizes","DistributorInput","AutocompleteInput","optionText","country_iso","allowEmpty","resettable","inline","CustomLayout","CardContent","paddingTop","ml","maxWidth","CustomDivider","mb","Divider","Avatar","charAt","getColorFromStatus","Status","borderRadius","bgcolor","ColoredChipField","ChipField","TagsList","ReferenceArrayField","SingleFieldList","linkType","LogoField","colors","TagsListEdit","open","setOpen","newTagName","setNewTagName","newTagColor","setNewTagColor","anchorEl","setAnchorEl","version","setVersion","disabled","setDisabled","allTags","useGetMany","enabled","useUpdate","useCreate","unselectedTagIds","filter","handleAddTag","handleOpenCreateDialog","tag","mt","onDelete","tagId","handleDeleteTag","event","currentTarget","Boolean","onClose","Dialog","onSubmit","preventDefault","onSuccess","v","DialogTitle","DialogContent","autoFocus","fullWidth","onChange","target","selected","handleClick","DialogActions","type","margin","RoundButton","sideBig","sideSmall","drawerContent","CompanyAside","EditButton","ShowButton","IconButton","Drawer","anchor","AsideContent","href","website","rel","linkedIn","TextField","distributor_id","phone_number","DateField","options","year","month","day","FunctionField","render","stages","stageNames","opportunity","won","lost","delayed","stageChoices","StatusSelector","setStatus","select","buttonSwitcher","previewConatiner","previewRaw","previewMarkdown","paddingRight","borderColor","main","preview","NewNote","showStatus","setPreview","useRecordContext","useResourceContext","text","setText","getCurrentDate","date","setDate","loading","refresh","useRefresh","notify","useNotify","foreignKeyMapping","last_seen","multiline","remarkPlugins","remarkGfm","now","Date","setMinutes","getMinutes","getTimezoneOffset","toISOString","slice","contacts","deals","companies","products","metadata","textarea","paddingBottom","lineHeight","buttons","cancel","content","paragraph","fontFamily","typography","fontSize","body1","visibility","Note","note","isLast","isHover","setHover","isEditing","setEditing","noteText","setNoteText","useDelete","mutationMode","handleDelete","showTime","locales","dateStyle","timeStyle","FilledInput","NotesIterator","index","CompanyShowContent","useShowContext","setValue","Card","gridGap","Tabs","indicatorColor","textColor","newValue","Tab","nb_deals","ReferenceManyField","sort","TabPanel","other","role","hidden","ContactsIterator","contact","ListItem","RouterLink","ListItemAvatar","ListItemText","ListItemSecondaryAction","formatDistance","CreateRelatedContactButton","pathname","company_id","startIcon","DealsIterator","deal","stage","amount","toLocaleString","notation","currency","currencyDisplay","minimumSignificantDigits","updated_at","list","actions","aside","filterDefaultValues","pagination","Pagination","rowsPerPageOptions","Create","SimpleForm","initialValues","redirect","TextInput","validate","required","SelectInput","formClassName","FormDataConsumer","formData","ReferenceInput","ReferenceArrayInput","AutocompleteArrayInput","helperText","sales","edit","show","ShowBase","BusinessIcon","ContactAside","EmailField","gender","background","TasksIterator","task","disableGutters","ContactShowContent","ContactListFilter","last_seen_gte","endOfYesterday","last_seen_lte","startOfWeek","startOfMonth","subMonths","ContactListContent","SimpleListLoading","hasLeftAvatarOrIcon","hasSecondaryText","useStyle","ContactListActions","Spacer","ContactEditContent","useEditContext","save","FormWithRedirect","formProps","mr","BooleanInput","Toolbar","omit","EditBase","transform","ContactsIcon","TaskAside","TaskShowContent","statuses","TaskStatus","statusItem","find","item","statusColor","TaskListFilter","due_date_gte","due_date_lte","doneState","MarkDoneButton","BulkUpdateButton","TaskListContent","due_date","useActionStyles","TaskListActions","TaskBulkActionButtons","BulkDeleteButton","TaskEditContent","DateInput","bulkActionButtons","FormatListBulletedIcon","cardContent","cardText","DealCard","useRedirect","draggableId","String","provided","snapshot","draggableProps","dragHandleProps","innerRef","opacity","isDragging","p","gutterBottom","borderTopLeftRadius","borderTopRightRadius","droppable","DealColumn","dealIds","align","droppableId","droppableProvided","droppableProps","isDraggingOver","placeholder","initialDeals","reduce","obj","getDealsByColumn","columns","acc","push","forEach","b","DealListContent","currentSort","filterValues","setDeals","useContext","DataProviderContext","useMutation","payload","useEffect","newDeals","isEqual","onDragEnd","result","destination","column","sourceDeal","destinationDeal","splice","Number","columnDeals","all","previousData","sourceColumn","destinationColumn","sourceDeals","destinationDeals","pop","typeChoices","DealCreate","useDataProvider","then","oldDeal","rows","defaultValue","NumberInput","ul","listStyle","li","ContactList","dialog","DealShow","DealShowContent","format","start_at","minHeight","description","OnlyMineInput","alwaysOn","useListFilterContext","displayedFilters","setFilters","FormControlLabel","control","Switch","newFilterValues","defaultProps","dealFilters","SearchInput","DealActions","FilterButton","filters","path","match","MonetizationOnIcon","ProductAvatar","console","log","model","family","ProductCard","nb_properties","Skeleton","animation","ProductGridList","ProductListFilter","familyData","familyIds","family_id","ProductListActions","CreatePropertyType","useCreateSuggestionContext","onCancel","onCreate","setName","unit","setUnit","synonyms","setSynonyms","propertyContainer","ProductImageField","ProductAside","ProductShowContent","addLabel","Datagrid","useTheme","TabbedForm","FormTab","ArrayInput","SimpleFormIterator","FiberManualRecordIcon","ProductFamilyListFilter","ProductFamilyListContent","ProductFamilyListActions","CreateCategory","ProductFamilyAside","ListButton","ProductFamilyEditContent","ProductFamilyShowContent","CategoryIcon","transitions","easing","sharp","duration","leavingScreen","closed","Menu","menuCrm","menuProduct","menuCustomers","setState","menu","classnames","DashboardMenuItem","_scrollToTop","tasks","productFamilies","darkTheme","sidebar","overrides","MuiAppBar","colorSecondary","MuiButtonBase","lightTheme","dark","contrastText","default","shape","RaMenuItemLink","borderLeft","active","MuiPaper","elevation1","boxShadow","backgroundClip","MuiButton","contained","MuiLinearProgress","colorPrimary","barColorPrimary","MuiFilledInput","MuiSnackbarContent","Layout","appBar","backgroundImage","backgroundRepeat","backgroundSize","card","hint","form","input","renderInput","meta","touched","inputProps","Form","withTypes","Login","setLoading","useLogin","location","useLocation","auth","nextPathname","catch","values","errors","handleSubmit","noValidate","CardActions","CircularProgress","thickness","Notification","LoginWithTheme","ThemeProvider","createTheme","HotContacts","isInteger","contactData","contactIds","contactTotal","total","contactsLoaded","SimpleList","secondaryText","addSuffix","leftAvatar","noteTextText","LatestNotes","contactNotesData","contactNotesIds","contactNotesLoaded","dealNotesData","dealNotesIds","dealNotesLoaded","companyNotesData","companyNotesIds","companyNotesLoaded","allNotes","concat","valueOf","NoteSource","Deal","Contact","Company","Map","memo","setTooltipContent","colorScale","scaleQuantile","domain","max","nb_companies","range","projection","projectionConfig","rotate","scale","center","zoom","geography","geographies","geo","ISO_A3","properties","cur","iso3","fill","stroke","NAME","POP_EST","rsmKey","CompaniesMap","setContent","Dashboard","Grid","xs","sm","Input","RegisterForm","redirectTo","useSafeSetState","submit","confirm","Container","autoComplete","Register","RegisterWithTheme","changeTheme","Configuration","locale","useLocale","setLocale","useSetLocale","dispatch","useDispatch","Title","customRoutes","RouteWithoutLayout","exact","customEnglishMessages","englishMessages","defaultTheme","i18nProvider","polyglotI18nProvider","messages","App","Admin","loginPage","layout","dashboard","Resource","ListGuesser","EditGuesser","ShowGuesser","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","CssBaseline","document","getElementById"],"mappings":"ySAUMA,EAAiC,cAMhC,SAASC,EAAeC,GAC7BC,aAAaC,QACXJ,EACAK,KAAKC,UAAUJ,IAIZ,SAASK,IACd,IAAMC,EAAML,aAAaM,QAAQT,GACjC,OAAY,OAARQ,EACK,KAEFH,KAAKK,MAAMF,GCVpB,IAAMG,EAAO,uCAAG,WAAOC,EAAkBC,GAAzB,uBAAAC,EAAA,sEAEFZ,EAAcK,IACdQ,EAHE,OAGMb,QAHN,IAGMA,OAHN,EAGMA,EAAac,aACrBC,EAAS,CACXC,QAAS,CAAEC,cAAc,UAAD,OAAYJ,IACpCF,UANI,SAQeO,IAAMC,IAAN,WAAkCT,EAAlC,SAAmDK,GARlE,cAQFK,EARE,yBASDC,QAAQC,QAAQF,EAASG,OATxB,yCAWFH,EAAW,KAAMA,SAXf,kBAYDC,QAAQG,OAAO,CAACC,QAASL,EAASG,KAAMG,OAAQN,EAASM,UAZxD,0DAAH,wDAgBPC,EAAM,uCAAG,WAAOjB,EAAkBC,GAAzB,uBAAAC,EAAA,sEAEDZ,EAAcK,IACdQ,EAHC,OAGOb,QAHP,IAGOA,OAHP,EAGOA,EAAac,aACrBC,EAAS,CACXC,QAAS,CAAEC,cAAc,UAAD,OAAYJ,IACpCF,UANG,SAQgBO,IAAMC,IAAN,WAAiCT,EAAjC,SAAkDK,GARlE,cAQDK,EARC,yBASAC,QAAQC,QAAQF,EAASG,OATzB,yCAWDH,EAAW,KAAMA,SAXhB,kBAYAC,QAAQG,OAAO,CAACC,QAASL,EAASG,KAAMG,OAAQN,EAASM,UAZzD,0DAAH,wDAgBNE,EAAO,uCAAG,WAAOlB,EAAkBC,GAAzB,uBAAAC,EAAA,sEAEFZ,EAAcK,IACdQ,EAHE,OAGMb,QAHN,IAGMA,OAHN,EAGMA,EAAac,aACrBC,EAAS,CACXC,QAAS,CAAEC,cAAc,UAAD,OAAYJ,IACpCF,UANI,SAQeO,IAAMC,IAAN,WAAkCT,EAAlC,UAAoDK,GARnE,cAQFK,EARE,yBASDC,QAAQC,QAAQF,EAASG,OATxB,yCAWFH,EAAW,KAAMA,SAXf,kBAYDC,QAAQG,OAAO,CAACC,QAASL,EAASG,KAAMG,OAAQN,EAASM,UAZxD,0DAAH,wDAgBPG,EAAgB,uCAAG,WAAOnB,EAAkBC,GAAzB,uBAAAC,EAAA,sEAEXZ,EAAcK,IACdQ,EAHW,OAGHb,QAHG,IAGHA,OAHG,EAGHA,EAAac,aACrBC,EAAS,CACXC,QAAS,CAAEC,cAAc,UAAD,OAAYJ,IACpCF,UANa,SAQMO,IAAMC,IAAN,WAA2CT,EAA3C,SAA4DK,GARlE,cAQXK,EARW,yBASVC,QAAQC,QAAQF,EAASG,OATf,yCAWXH,EAAW,KAAMA,SAXN,kBAYVC,QAAQG,OAAO,CAACC,QAASL,EAASG,KAAMG,OAAQN,EAASM,UAZ/C,0DAAH,wDAgBhBI,EAAM,uCAAG,WAAOpB,EAAkBC,GAAzB,uBAAAC,EAAA,sEAEDZ,EAAcK,IACdQ,EAHC,OAGOb,QAHP,IAGOA,OAHP,EAGOA,EAAac,aACrBC,EAAS,CACXC,QAAS,CAAEC,cAAc,UAAD,OAAYJ,KALjC,SAOgBK,IAAMa,KAAN,WAAkCrB,EAAlC,SAAmDC,EAAQI,GAP3E,cAODK,EAPC,yBAQAC,QAAQC,QAAQF,EAASG,OARzB,yCAUDH,EAAW,KAAMA,SAVhB,kBAWAC,QAAQG,OAAO,CAACC,QAASL,EAASG,KAAMG,OAAQN,EAASM,UAXzD,0DAAH,wDAeNM,EAAM,uCAAG,WAAOtB,EAAkBC,GAAzB,uBAAAC,EAAA,sEAEDZ,EAAcK,IACdQ,EAHC,OAGOb,QAHP,IAGOA,OAHP,EAGOA,EAAac,aACrBC,EAAS,CACXC,QAAS,CAAEC,cAAc,UAAD,OAAYJ,KALjC,SAOgBK,IAAMe,IAAN,WAAiCvB,EAAjC,SAAkDC,EAAQI,GAP1E,cAODK,EAPC,yBAQAC,QAAQC,QAAQF,EAASG,OARzB,yCAUDH,EAAW,KAAMA,SAVhB,kBAWAC,QAAQG,OAAO,CAACC,QAASL,EAASG,KAAMG,OAAQN,EAASM,UAXzD,0DAAH,wDAeNQ,EAAU,uCAAG,WAAOxB,EAAkBC,GAAzB,uBAAAC,EAAA,sEAELZ,EAAcK,IACdQ,EAHK,OAGGb,QAHH,IAGGA,OAHH,EAGGA,EAAac,aACrBC,EAAS,CACXC,QAAS,CAAEC,cAAc,UAAD,OAAYJ,KAL7B,SAOYK,IAAMe,IAAN,WAAgCvB,EAAhC,UAAkDC,EAAQI,GAPtE,cAOLK,EAPK,yBAQJC,QAAQC,QAAQF,EAASG,OARrB,yCAULH,EAAW,KAAMA,SAVZ,kBAWJC,QAAQG,OAAO,CAACC,QAASL,EAASG,KAAMG,OAAQN,EAASM,UAXrD,0DAAH,wDAeVS,EAAS,uCAAG,WAAOzB,EAAkBC,GAAzB,uBAAAC,EAAA,sEAEJZ,EAAcK,IACdQ,EAHI,OAGIb,QAHJ,IAGIA,OAHJ,EAGIA,EAAac,aACrBC,EAAS,CACXC,QAAS,CAAEC,cAAc,UAAD,OAAYJ,IACpCF,UANM,SAQaO,IAAMkB,OAAN,WAAoC1B,EAApC,SAAqDK,GARlE,cAQJK,EARI,yBASHC,QAAQC,QAAQF,EAASG,OATtB,yCAWJH,EAAW,KAAMA,SAXb,kBAYHC,QAAQG,OAAO,CAACC,QAASL,EAASG,KAAMG,OAAQN,EAASM,UAZtD,0DAAH,wDAgBTW,EAAU,uCAAG,WAAO3B,EAAkBC,GAAzB,uBAAAC,EAAA,sEAELZ,EAAcK,IACdQ,EAHK,OAGGb,QAHH,IAGGA,OAHH,EAGGA,EAAac,aACrBC,EAAS,CACXC,QAAS,CAAEC,cAAc,UAAD,OAAYJ,IACpCF,UANO,SAQYO,IAAMkB,OAAN,WAAmC1B,EAAnC,UAAqDK,GARjE,cAQLK,EARK,yBASJC,QAAQC,QAAQF,EAASG,OATrB,yCAWLH,EAAW,KAAMA,SAXZ,kBAYJC,QAAQG,OAAO,CAACC,QAASL,EAASG,KAAMG,OAAQN,EAASM,UAZrD,0DAAH,wDAgBHY,EAAe,CACxB7B,QAAYA,EACZkB,OAAYA,EACZC,QAAYA,EACZC,iBAAkBA,EAClBC,OAAYA,EACZE,OAAYA,EACZE,WAAYA,EACZE,OAAYD,EACZE,WAAYA,G,SC1JVE,EAAU,QAiBVC,EAAY,uCAAG,oCAAA5B,EAAA,yDACXZ,EAAcK,IADH,wDAIXQ,EAJW,OAIHb,QAJG,IAIHA,OAJG,EAIHA,EAAayC,cAErB1B,EAAS,CACXC,QAAS,CAAEC,cAAc,UAAD,OAAYJ,KAPvB,SASIK,IAAMa,KAAN,UAA4BQ,EAA5B,iBAA+CG,EAAW3B,GAT9D,OASbK,EATa,OAUTN,EAAiBM,EAASG,KAA1BT,aACRf,EAAe,2BACRC,GADO,IAEVc,aAAcA,KAbD,4CAAH,qDAkBZ6B,EAAK,uCAAG,2CAAA/B,EAAA,6DAASgC,EAAT,EAASA,SAAUC,EAAnB,EAAmBA,SAAnB,kBAEiB3B,IAAMa,KAAN,UAA0BQ,EAA1B,UAA2C,CAAEK,WAAUC,aAFxE,cAEAzB,EAFA,SAGkCA,EAASG,KAAzCT,EAHF,EAGEA,aAAc2B,EAHhB,EAGgBA,cAChBK,EAAeC,YAAsBjC,GAC3Cf,EAAe,CACXe,eACA2B,gBACAO,YAAaF,EAAaE,cARxB,kBAUC3B,QAAQC,WAVT,yCAYAF,EAAW,KAAMA,SAZjB,kBAaCC,QAAQG,OAAO,CAACC,QAASL,EAASG,KAAMG,OAAQN,EAASM,UAb1D,0DAAH,sDAiBLuB,EAAM,uCAAG,sBAAArC,EAAA,sEACLM,IAAMC,IAAN,UAAaoB,EAAb,YADK,cFlCbtC,aAAaiD,WAAWpD,GEkCX,kBAGJuB,QAAQC,QAAQ,WAHZ,2CAAH,qDAMN6B,EAAQ,uCAAG,uCAAAvC,EAAA,6DACbwC,EADa,EACbA,WACAC,EAFa,EAEbA,UACAC,EAHa,EAGbA,MACAV,EAJa,EAIbA,SACAC,EALa,EAKbA,SALa,kBAcU3B,IAAMa,KAAN,UAA4BQ,EAA5B,aAAgD,CAC/Da,aACAC,YACAC,QACAV,WACAC,aAnBK,qEAuBHzB,EAAW,KAAMA,SAvBd,kBAwBFC,QAAQG,OAAO,CAACC,QAASL,EAASG,KAAMG,OAAQN,EAASM,UAxBvD,yDAAH,sDA4BR6B,EAAW,uCAAG,0CAAA3C,EAAA,sEAEZ4B,IACMxC,EAAcK,IACdQ,EAJM,OAIEb,QAJF,IAIEA,OAJF,EAIEA,EAAac,aACrBC,EAAS,CACXC,QAAS,CAAEC,cAAc,UAAD,OAAYJ,KAN5B,SAQSK,IAAMC,IAAN,UAA2BoB,EAA3B,SAA2CxB,GARpD,cAQRK,EARQ,SASqBA,EAASG,KAAlCiC,EATI,EASJA,GAAIC,EATA,EASAA,SAAUC,EATV,EASUA,OATV,kBAWLrC,QAAQC,QAAQ,CAAEkC,KAAIC,WAAUC,YAX3B,2DAiBLrC,QAAQG,OAAR,OAjBK,0DAAH,qDAqBVmC,EAAU,uCAAG,6BAAA/C,EAAA,yDACD,OADUc,EAAT,EAASA,SACQ,MAAXA,GAA6B,MAAXA,EADxB,yBAGRc,IAHQ,wEAKDnB,QAAQG,UALP,gCAQTH,QAAQC,WARC,yDAAH,sDA6BJsC,EAA8B,CACvCjB,MAAOA,EACPgB,WAAYA,EACZE,UArBc,WACd,IAEI,OADArB,IACOnB,QAAQC,UACjB,MAAOwC,GACL,OAAOzC,QAAQG,WAiBnByB,OAAQA,EACRM,YAAaA,EACbQ,eAfmB,WACnB,IAEI,OADAvB,IACOnB,QAAQC,UACjB,MAAOwC,GACL,OAAOzC,QAAQG,WAWnB2B,SAAUA,G,wGCvJRa,GAAYC,aAAW,SAAAC,GAAK,YAAK,CACnCC,MAAI,GACAC,QAAS,QADT,cAECF,EAAMG,YAAYC,KAAK,MAAQ,CAC5BF,QAAS,SAHb,2BAKW,UALX,oBAMKF,EAAMK,QAAQ,IANnB,GAQJC,SAAU,CACNC,MAAOP,EAAMQ,QAAQC,UAAUC,OAEnCC,SAAU,CACNJ,MAAOP,EAAMQ,QAAQI,QAAQF,WAgBtBG,GAZF,WACT,IAAMC,EAAUhB,KAChB,OACI,uBAAKiB,UAAWD,EAAQb,KAAxB,UACI,eAAC,KAAD,CAA0Bc,UAAWD,EAAQR,WAC7C,eAACU,EAAA,EAAD,CAAYC,QAAQ,KAAKF,UAAWD,EAAQH,SAA5C,0BCnBNb,GAAYC,YAAW,CACzBmB,MAAO,CACHC,KAAM,EACNC,aAAc,WACdC,WAAY,SACZC,SAAU,UAEdC,OAAQ,CACJJ,KAAM,KAIRK,GAAoBC,sBAAqB,SAACC,EAAOC,GACjCC,cAClB,OACI,eAACC,EAAA,EAAD,CACIF,IAAKA,EACLG,GAAG,iBACHC,YAAY,gBACZC,SAAU,eAAC,IAAD,IACVC,QAASP,EAAMO,QACfC,eAAa,OAKnBC,GAAiB,SAACT,GAAD,OACnB,eAACU,EAAA,EAAD,2BAAcV,GAAd,aACI,eAACF,GAAD,QAoBOa,GAhBM,SAACX,GAClB,IAAMZ,EAAUhB,KAChB,OACI,gBAACwC,EAAA,EAAD,2BAAYZ,GAAZ,IAAmBa,UAAW,EAAGC,SAAU,eAAC,GAAD,IAA3C,UACI,eAACxB,EAAA,EAAD,CACIC,QAAQ,KACRV,MAAM,UACNQ,UAAWD,EAAQI,MACnB5B,GAAG,sBAEP,eAAC,GAAD,IACA,uBAAMyB,UAAWD,EAAQS,c,kICrC/BzB,GAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCyC,KAAM,CAAEC,SAAU1C,EAAMK,QAAQ,IAChC6B,cAAe,CACX,MAAO,CACHS,WAAY,sDACZC,YAAa5C,EAAMK,QAAQ,KAGnCwC,gBAAiB,CACb,MAAO,CACHF,WAAY,sDACZC,YAAa5C,EAAMK,QAAQ,SA4DxByC,GA9CC,SAACpB,GACb,IAAQqB,EAAsDrB,EAAtDqB,aAAcC,EAAwCtB,EAAxCsB,OAAQC,EAAgCvB,EAAhCuB,KAAMR,EAA0Bf,EAA1Be,KAAMS,EAAoBxB,EAApBwB,SAAUC,EAAUzB,EAAVyB,MAC9CC,EAAYxB,cACZd,EAAUhB,KACVoC,EAAgBmB,cAClB,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,GAAGC,eAGtBC,EACF,gBAACC,GAAA,EAAD,CAAUR,MAAOA,EAAOS,QAAM,EAAC3B,QAASc,EAAxC,UACI,eAACc,GAAA,EAAD,CAAc9C,UAAWD,EAAQ2B,KAAjC,SACKO,EAAS,eAAC,KAAD,IAAiBP,IAE/B,eAACzB,EAAA,EAAD,CAAYC,QAAQ,UAAUV,MAAM,gBAApC,SACK6C,EAAUH,QAKvB,OACI,gBAAC,WAAD,WACKf,GAAiBc,EACdU,EAEA,eAACI,GAAA,EAAD,CAAS5C,MAAOkC,EAAUH,GAAOc,UAAU,QAA3C,SACKL,IAGT,eAACM,GAAA,EAAD,CAAUC,GAAIjB,EAAQkB,QAAQ,OAAOC,eAAa,EAAlD,SACI,eAACC,GAAA,EAAD,CACIjB,MAAOA,EACPkB,UAAU,MACVC,gBAAc,EACdvD,UACImB,EACMpB,EAAQoB,cACRpB,EAAQ+B,gBAPtB,SAUKK,U,6NC/ERqB,GAAU,CACnB,qBACA,uBACA,uBACA,4BACFC,KAAI,SAAAC,GAAM,MAAK,CAAEnF,GAAImF,EAAQxB,KAAMwB,M,uCCG/B3E,GAAYC,YAAW,CACzBP,OAAQ,CACJkF,MAAO,GACPC,OAAQ,GACRC,gBAAiB,aAErBC,IAAK,CACDC,UAAW,WAEfC,MAAO,CACHL,MAAO,GACPC,OAAQ,IAEZK,MAAO,CACHN,MAAO,GACPC,OAAQ,MAIHM,GAAgB,SAAC,GAMvB,IALHC,EAKE,EALFA,OAKE,IAJFC,YAIE,MAJK,QAIL,EACIrE,EAAUhB,KAChB,OAAKoF,EACDA,EAAOE,KASP,eAAC,KAAD,CACIC,IAAKC,GAAyBJ,EAAOE,KACrCG,IAAKL,EAAOjC,KACZlC,UAAWD,EAAQtB,OACnBgG,SAAU,CAAEzE,UAAW0E,aAAK3E,EAAQ+D,IAAK/D,EAAQqE,OAZrD,eAAC,KAAD,CACII,IAAKL,EAAOjC,KACZlC,UAAWD,EAAQtB,OAFvB,SAII,eAAC,KAAD,MANY,M,UCzBlBM,GAAYC,aAA8B,SAAAC,GAAK,MAAK,CACtD0F,MAAO,CACHhB,MAAO,SAAAhD,GAAK,OAAIA,EAAMgD,YAIxBiB,GAAc,CAChBC,OAAQ,GACRb,MAAO,IAGEc,GAAe,SAAC,GAUtB,IATHX,EASE,EATFA,OASE,IARFY,cAQE,MARK,MAQL,MAPF5E,aAOE,MAPI,WAOJ,MANFiE,KAOMrE,EAAUhB,GAAU,CAAC4E,MAAOiB,QADhC,MANK,SAML,KAEF,OAAKT,EAGD,eAACa,GAAA,EAAD,CACIb,OAAQA,EACRY,OAAQA,EACR5E,MAAOA,EACPJ,QAASA,IAPG,MClBlBhB,GAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCgG,MAAO,CACHrB,OAAQ,IACRD,MAAO,IACPxE,QAAS,OACT+F,cAAe,SACfC,eAAgB,gBAChBC,QAAS,MACTC,SAAU,YAEdC,SAAU,CACNnG,QAAS,OACT+F,cAAe,SACfK,WAAY,UAEhBrD,KAAM,CACFsD,UAAW,SACXC,UAAWxG,EAAMK,QAAQ,IAE7BoG,MAAO,CACHvG,QAAS,OACTgG,eAAgB,eAChBxB,MAAO,QAEXgC,WAAY,CACRxG,QAAS,OACToG,WAAY,UAEhBK,SAAU,CACNC,YAAa5G,EAAMK,QAAQ,IAE/BwG,SAAU,CACNT,SAAU,WACVU,IAAK,EACLC,MAAO,GAEXC,WAAY,CACRZ,SAAU,WACVU,IAAK9G,EAAMK,QAAQ,GACnB4G,KAAM,OAIDC,GAAc,SAAC,GAAqC,IAAnChC,EAAkC,EAAlCA,OACpBpE,EAAUhB,KAChB,EAAkCqH,mBAAS,GAA3C,oBAAO5E,EAAP,KAAkB6E,EAAlB,KACA,EAAyDC,eAA9BC,GAA3B,EAAQjK,KAAR,EAAckK,IAAd,EAAmBC,OAAnB,EAA2BF,cAAcG,EAAzC,EAAyCA,YACzC,OACI,eAAC,KAAD,CACIpD,UAAWqD,KACX5F,GAAI6F,aAAa,aAAczC,EAAO5F,GAAI,QAC1CsI,UAAU,OACVC,aAAc,kBAAMT,EAAa,IACjCU,aAAc,kBAAMV,EAAa,IALrC,SAOI,gBAACW,GAAA,EAAD,CAAOhH,UAAWD,EAAQkF,MAAOzD,UAAWA,EAA5C,UACI,eAACyF,GAAA,EAAD,CACIC,KAAK,QACLC,QAAST,EAAYU,SAASjD,EAAO5F,IACrC8I,UAAW,EACXC,eAAa,EACbtH,UAAWD,EAAQ+F,SACnB5E,QAAS,SAACqG,GACNA,EAAEC,kBACFjB,EAAapC,EAAO5F,OAG5B,eAAC0B,EAAA,EAAD,CACIC,QAAQ,QACRV,MAAM,gBACNQ,UAAWD,EAAQkG,WAHvB,oBAKS9B,EAAO5F,MAEhB,uBAAKyB,UAAWD,EAAQuF,SAAxB,UACI,eAAC,GAAD,CAAenB,OAAQA,IACvB,uBAAKnE,UAAWD,EAAQmC,KAAxB,UACI,gBAACuF,GAAA,EAAD,CAAKtI,QAAQ,OAAOoG,WAAW,SAA/B,UACA,eAACtF,EAAA,EAAD,CAAYC,QAAQ,YAApB,SACKiE,EAAOjC,OAEZ,eAACwF,GAAA,EAAD,CACIvD,OAAQA,EACRY,OAAO,aACP4C,UAAU,YACVC,MAAM,EAJV,SAMI,eAAC,GAAD,CAAcxD,KAAK,eAGtBD,EAAO0D,UACJ,eAACC,GAAA,EAAD,CACIC,MAAO5D,EAAO0D,SACd3H,QAAQ,WACRkE,KAAK,UAGb,eAAC4D,GAAA,EAAD,CACIxI,MAAM,gBACNuF,OAAO,SACPkD,QAASzE,GACTW,OAAQA,UAIpB,uBAAKnE,UAAWD,EAAQ2F,MAAxB,UACI,uBAAK1F,UAAWD,EAAQ4F,WAAxB,UACI,eAAC,KAAD,CACInG,MAAM,WACNQ,UAAWD,EAAQ6F,WAEvB,iCACI,eAAC3F,EAAA,EAAD,CACIC,QAAQ,YACRgI,MAAO,CAAEC,cAAe,GAF5B,SAIKhE,EAAOiE,cAEZ,eAACnI,EAAA,EAAD,CAAYC,QAAQ,UAAUV,MAAM,gBAApC,SACK2E,EAAOiE,YAAc,EAChB,WACA,kBAIlB,uBAAKpI,UAAWD,EAAQ4F,WAAxB,UACI,eAAC,KAAD,CACInG,MAAM,WACNQ,UAAWD,EAAQ6F,WAEvB,iCACI,eAAC3F,EAAA,EAAD,CACIC,QAAQ,YACRgI,MAAO,CAAEC,cAAe,GAF5B,SAIKhE,EAAOkE,WAEZ,eAACpI,EAAA,EAAD,CAAYC,QAAQ,UAAUV,MAAM,gBAApC,SACK2E,EAAOkE,SAAW,EAAI,QAAU,wBCjJ3DtJ,GAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCqJ,SAAU,CACNnJ,QAAS,OACToJ,SAAU,OACV5E,MAAQ,OACR6E,IAAK,MACLrD,eAAgB,UAEpBF,MAAO,CACHrB,OAAQ,IACRD,MAAO,IACPxE,QAAS,OACT+F,cAAe,SACfrB,gBAAiB5E,EAAMQ,QAAQgJ,KAAK,UAOtCC,GAAkB,WACpB,IAJWC,EAAoBC,EAIzB7I,EAAUhB,KAChB,OACI,eAAC0I,GAAA,EAAD,CAAKzH,UAAWD,EAAQuI,SAAxB,UANOK,EAOI,GAPgBC,EAOZ,SAAAC,GAAG,OACV,eAAC7B,GAAA,EAAD,CAAOhH,UAAWD,EAAQkF,OAAY4D,IAPlDC,MAAMC,KAAK,CAAEC,OAAQL,IAAc,SAACM,EAAGJ,GAAJ,OAAYD,EAAGC,UAahDK,GAAiB,WACnB,MAAsB5C,eAAdE,EAAR,EAAQA,IAAKlK,EAAb,EAAaA,KACPyD,EAAUhB,KAEhB,OAAKyH,GAAQlK,EAGT,eAACmL,GAAA,EAAD,CAAKzH,UAAWD,EAAQuI,SAAxB,SACK9B,EAAI/C,KAAI,SAAClF,GAAD,OACL,eAAC,GAAD,CAAsB4F,OAAQ7H,EAAKiC,IAAjBA,QALJ,MAWjB4K,GAAW,WAEpB,OADmB7C,eAAXG,OACQ,eAAC,GAAD,IAAqB,eAAC,GAAD,K,6FCxD5B2C,GAAY,CACrB,cACA,eACA,WACA,qBACF3F,KAAI,SAAA2F,GAAS,MAAK,CAAE7K,GAAI6K,EAAWlH,KAAMkH,MCF9BC,GAAU,SAAC,GAAD,IAAGlF,EAAH,EAAGA,OAAH,OACnB,qCACMA,GACM,eAAC2D,GAAA,EAAD,CACAC,MAAO5D,EAAOjC,KACdkC,KAAK,QACL8D,MAAO,CACHrE,gBAAiBM,EAAO3E,MACxB8J,OAAQ,EACRC,OAAQ,gBCUtBxK,GAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCuK,UAAU,aACNC,OAAQ,EACRC,WAAYzK,EAAMK,QAAQ,GAC1BuG,YAAa5G,EAAMK,QAAQ,GAC3BqC,SAAU,QACT1C,EAAMG,YAAYC,KAAK,MAAQ,CAC5BF,QAAS,aAKRwK,GAAoB,WAC7B,IAAM5J,EAAUhB,KACRuG,EAAasE,eAAbtE,SACR,EAAsBuE,aAClB,OACA,CAAEC,KAAM,EAAGC,QAAS,IACpB,CAAEC,MAAO,OAAQP,MAAO,QAHpBnN,EAAR,EAAQA,KAAMkK,EAAd,EAAcA,IAKd,OACI,uBAAKxG,UAAWD,EAAQyJ,UAAxB,UACI,eAACS,GAAA,EAAD,IAEA,eAACC,GAAA,EAAD,CAAYnC,MAAM,WAAWrG,KAAM,eAAC,KAAD,IAAnC,SACK0H,GAAU3F,KAAI,SAAAoE,GAAQ,OACnB,eAACsC,GAAA,EAAD,CAEIpC,MAAOF,EAAS3F,KAChBkI,MAAO,CAAEvC,SAAUA,EAAStJ,KAFvBsJ,EAAStJ,SAO1B,eAAC2L,GAAA,EAAD,CAAYnC,MAAM,OAAOrG,KAAM,eAAC,KAAD,IAA/B,SACK8E,GACGlK,GACAkK,EAAI/C,KAAI,SAAAlF,GAAE,OACN,eAAC4L,GAAA,EAAD,CAEIpC,MAAO,eAAC,GAAD,CAAS5D,OAAQ7H,EAAKiC,KAC7B6L,MAAO,CAAEC,KAAM,CAAC9L,KAFXA,QAOrB,eAAC2L,GAAA,EAAD,CAAYnC,MAAM,SAASrG,KAAM,eAAC,KAAD,IAAjC,SACK8B,GAAQC,KAAI,SAAAC,GAAM,OACf,eAACyG,GAAA,EAAD,CAEIpC,MAAOrE,EAAOxB,KACdkI,MAAO,CAAE1G,OAAQA,EAAOnF,KAFnBmF,EAAOnF,SAOxB,eAAC2L,GAAA,EAAD,CACInC,MAAM,kBACNrG,KAAM,eAAC,KAAD,IAFV,SAII,eAACyI,GAAA,EAAD,CACIpC,MAAM,KACNqC,MAAO,CACHE,SAAUhF,GAAYA,EAAS/G,Y,wCC9DxCgM,GAfS,WACpB,MAAgCjE,eAAxBE,EAAR,EAAQA,IAAWgE,GAAnB,EAAalO,KAAb,EAAmBkO,UACnB,OACI,eAACC,GAAA,EAAD,CACIvJ,QAAS,SAACqG,GACNA,EAAEC,kBACFgD,EAAShE,IAEbuB,MAAM,aALV,SAOI,eAAC,KAAD,OCqBNhJ,GAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCyL,QAAS,GAGTC,aAAc,CACVjB,WAAYzK,EAAMK,QAAQ,IAE9BkB,OAAQ,GAGRoK,UAAU,aACNzL,QAAS,SACRF,EAAMG,YAAYyL,GAAG,MAAQ,CAC1B1L,QAAS,aAKf2L,GAAgB,CAClBC,YAAa,CAETC,eAAe,IAKjBC,GAAqB,SAACtK,GACxB,IAAMZ,EAAUhB,KAChB,OACI,gBAACmM,GAAA,EAAD,CAAYlL,UAAWD,EAAQ2K,QAA/B,UACI,sBAAK1K,UAAWD,EAAQ6K,UAAxB,SACI,eAACX,GAAA,EAAD,MAEJ,eAACkB,GAAA,EAAD,CAAYC,OAAQ,CAAC,KAAM,UAC3B,eAAC,GAAD,IACA,eAACC,GAAA,EAAD,IACA,eAAC,KAAD,2BAAkB1K,GAAWmK,KAC7B,eAACQ,GAAA,EAAD,CACIC,SAAS,aACTrL,QAAQ,YACR6H,MAAM,cACN/H,UAAWD,EAAQ4K,mB,iIChFtBa,GAAQ,CACjB,CAAEjN,GAAI,EAAG2D,KAAM,cACf,CAAE3D,GAAI,GAAI2D,KAAM,iBAChB,CAAE3D,GAAI,GAAI2D,KAAM,mBAChB,CAAE3D,GAAI,IAAK2D,KAAM,oBACjB,CAAE3D,GAAI,IAAK2D,KAAM,0BCMNuJ,GATU,SAAC9K,GAAD,OACrB,eAAC+K,GAAA,EAAD,2BACQ/K,GADR,IAEIgL,WAAY,SAAAxH,GAAM,OAAIA,EAASA,EAAOyH,YAAP,UAAwBzH,EAAOjC,KAA/B,aAAwCiC,EAAOyH,YAA/C,eAAmEzH,EAAOjC,MAAS,IAClH2J,YAAU,EACVC,YAAU,M,gBCkBZ/M,GAAYC,YAAW,CACzB+M,OAAQ,CACJ5M,QAAS,eACTuK,WAAY,MACZ,gBAAiB,CACbA,WAAY,MA6FlBsC,GAAe,SAAC,GAAD,IAAG7J,EAAH,EAAGA,SAAH,OAEjB,eAAC8J,GAAA,EAAD,UACI,gBAACxE,GAAA,EAAD,CAAKtI,QAAQ,OAAb,UACI,eAACsI,GAAA,EAAD,CAAKyE,WAAY,EAAjB,SACI,eAAC,KAAD,UACI,eAAC,KAAD,QAGR,eAACzE,GAAA,EAAD,CAAK0E,GAAI,EAAG/L,KAAK,IAAIgM,SAAU,IAA/B,SACKjK,UAMXkK,GAAgB,kBAClB,eAAC5E,GAAA,EAAD,CAAK6E,GAAI,EAAT,SACI,eAACC,GAAA,EAAD,O,gKCxIKC,GAAS,SAAC,GAAD,IAAGrI,EAAH,EAAGA,OAAH,OAClB,gBAAC,KAAD,CAAWG,IAAKH,EAAO1F,OAAvB,UACK0F,EAAOhG,WAAWsO,OAAO,GACzBtI,EAAO/F,UAAUqO,OAAO,OCL3BC,GAAqB,SAACjQ,GAAD,MACZ,SAAXA,EACM,UACW,SAAXA,EACA,UACW,QAAXA,EACA,UACW,gBAAXA,EACA,UACA,QAEGkQ,GAAS,SAAC,GAAD,IAAGlQ,EAAH,EAAGA,OAAH,OAClB,eAACgL,GAAA,EAAD,CACI9D,MAAO,GACPC,OAAQ,GACRzE,QAAQ,eACRyN,aAAc,EACdC,QAASH,GAAmBjQ,GAC5B6G,UAAU,U,4CCfZwJ,GAAmB,SAAC,GAAD,IAAG3I,EAAH,EAAGA,OAAWxD,EAAd,0BACrBwD,EACI,eAAC4I,GAAA,EAAD,yBACI5I,OAAQA,GACJxD,GAFR,IAGIuH,MAAO,CAAErE,gBAAiBM,EAAO3E,MAAO8J,OAAQ,GAChDhG,UAAU,UAEd,MAEFvE,GAAYC,YAAW,CACzBE,KAAM,CACFC,QAAS,kBAIJ6N,GAAW,SAAC,GAAqC,IAAnC7I,EAAkC,EAAlCA,OACjBpE,EAAUhB,KAChB,OAAKoF,EAED,eAAC8I,GAAA,EAAD,CACI9I,OAAQA,EACRoH,SAAS,YACT9P,SAAS,WACTsJ,OAAO,OACP4C,UAAU,OACV3H,UAAWD,EAAQb,KANvB,SAQI,eAACgO,GAAA,EAAD,CAAiBC,UAAU,EAAO7J,UAAU,OAA5C,SACI,eAAC,GAAD,CACIyB,OAAO,OACP7E,QAAQ,WACRkE,KAAK,cAdD,MCnBlBrF,GAAYC,YAAW,CACzB2F,MAAO,CACHZ,UAAW,aAIba,GAAc,CAChBC,OAAQ,GACRb,MAAO,IAGEoJ,GAAY,SAAC,GAQnB,IAPHjJ,EAOE,EAPFA,OAOE,KANFY,OAME,EALFX,aAKE,MALK,SAKL,EACIrE,EAAUhB,KAChB,OAAKoF,EACDA,EAAOE,KAMP,sBACIC,IAAKC,GAAyBJ,EAAOE,KACrCG,IAAKL,EAAOjC,KACZ/B,MAAOgE,EAAOjC,KACdyB,MAAOiB,GAAYR,GACnBR,OAAQgB,GAAYR,GACpBpE,UAAWD,EAAQ4E,QAXvB,eAAC,KAAD,UACI,eAAC,KAAD,MAHY,M,8NC1BX0I,GAAS,CAClB,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WCmBSC,GAAe,SAAC,GAMtB,IALHnJ,EAKE,EALFA,OACAwD,EAIE,EAJFA,UAKA,EAAwBvB,oBAAS,GAAjC,oBAAOmH,EAAP,KAAaC,EAAb,KACA,EAAoCpH,mBAAS,IAA7C,oBAAOqH,EAAP,KAAmBC,EAAnB,KACA,EAAsCtH,mBAASiH,GAAO,IAAtD,oBAAOM,EAAP,KAAoBC,EAApB,KACA,EAAgCxH,mBAA6B,MAA7D,oBAAOyH,EAAP,KAAiBC,EAAjB,KACA,EAA8B1H,mBAAS,GAAvC,oBAAO2H,EAAP,KAAgBC,EAAhB,KACA,EAAgC5H,oBAAS,GAAzC,oBAAO6H,EAAP,KAAiBC,EAAjB,KAEA,EAA+BrE,aAC3B,OACA,CAAEC,KAAM,EAAGC,QAAS,IACpB,CAAEC,MAAO,OAAQP,MAAO,OACxB,GACA,CAAEsE,YALQI,EAAd,EAAQ7R,KAAekK,EAAvB,EAAuBA,IAOvB,EAA+B4H,aAAW,OAAQjK,EAAOkG,KAAM,CAC3DgE,QAASlK,EAAOkG,MAAQlG,EAAOkG,KAAKrB,OAAS,IADnCqB,EAAd,EAAQ/N,KAGR,GAHA,EAAoBmK,OAGH6H,gBAAVvR,EAAP,qBACA,EAAiBwR,eAAV1R,EAAP,qBAEM2R,EAAmBhI,GAAOA,EAAIiI,QAAO,SAAAlQ,GAAE,OAAK4F,EAAOkG,KAAKjD,SAAS7I,MAiBjEmQ,EAAe,SAACnQ,GAClB,IAAM8L,EAAkB,uBAAOlG,EAAOkG,MAAd,CAAoB9L,IAC5CxB,EAAO4K,EAAWxD,EAAO5F,GAAI,CAAE8L,QAAQlG,GACvC2J,EAAY,OAGVa,EAAyB,WAC3BnB,GAAQ,GACRM,EAAY,MACZI,GAAY,IAsChB,OACI,uCACK7D,EAAK5G,KAAI,SAAAmL,GAAG,OACT,eAACnH,GAAA,EAAD,CAAKoH,GAAI,EAAGvC,GAAI,EAAhB,SACI,eAACxE,GAAA,EAAD,CACI1D,KAAK,QACLlE,QAAQ,WACR4O,SAAU,kBA7DN,SAACvQ,GACrB,IAAM8L,EAAqBlG,EAAOkG,KAAKoE,QACnC,SAACM,GAAD,OAAuBA,IAAUxQ,KAErCxB,EAAO4K,EAAWxD,EAAO5F,GAAI,CAAE8L,QAAQlG,GAyDP6K,CAAgBJ,EAAIrQ,KACpCwJ,MAAO6G,EAAI1M,KACXgG,MAAO,CAAErE,gBAAiB+K,EAAIpP,MAAO8J,OAAQ,MAN7BsF,EAAIrQ,OAUhC,eAACkJ,GAAA,EAAD,CAAKoH,GAAI,EAAT,SACI,eAAC/G,GAAA,EAAD,CACIpG,KAAM,eAAC,KAAD,IACN0C,KAAK,QACLlE,QAAQ,WACRgB,QAhFG,SAAC+N,GAChBnB,EAAYmB,EAAMC,gBAgFNnH,MAAM,UACNvI,MAAM,cAGd,gBAAC,KAAD,CACI+N,KAAM4B,QAAQtB,GACduB,QAnFQ,WAChBtB,EAAY,OAmFJD,SAAUA,EAHd,iBAKKW,QALL,IAKKA,OALL,EAKKA,EAAkB/K,KAAI,SAAAlF,GAAE,OACrB,eAACqE,GAAA,EAAD,CAAmB1B,QAAS,kBAAMwN,EAAanQ,IAA/C,SACI,eAACuJ,GAAA,EAAD,CACI1D,KAAK,QACLlE,QAAQ,WACR6H,MAAOoG,GAAWA,EAAQ5P,GAAI2D,KAC9BgG,MAAO,CACHrE,gBAAiBsK,GAAWA,EAAQ5P,GAAIiB,MACxC8J,OAAQ,GAEZpI,QAAS,kBAAMwN,EAAanQ,OATrBA,MAanB,eAACqE,GAAA,EAAD,CAAU1B,QAASyN,EAAnB,SACI,eAAC7G,GAAA,EAAD,CACIpG,KAAM,eAAC,KAAD,IACN0C,KAAK,QACLlE,QAAQ,WACRgB,QAASyN,EACTnP,MAAM,UACNuI,MAAM,wBAIlB,eAACsH,GAAA,EAAD,CACI9B,KAAMA,EACN6B,QAAS,kBAAM5B,GAAQ,IACvB,kBAAgB,oBAHpB,SAKI,wBAAM8B,SAvFM,SAACL,GACrBA,EAAMM,iBACNrB,GAAY,GACZrR,EACI,OACA,CAAEqF,KAAMuL,EAAYjO,MAAOmO,GAC3B,CACI6B,UAAW,YAAe,IAAZlT,EAAW,EAAXA,KACVS,EACI4K,EACAxD,EAAO5F,GACP,CAAE8L,KAAK,GAAD,oBAAMlG,EAAOkG,MAAb,CAAmB/N,EAAKiC,MAC9B4F,EACA,CACIqL,UAAW,WACP9B,EAAc,IACdE,EAAeP,GAAO,IACtBG,GAAQ,GAERQ,GAAW,SAAAyB,GAAC,OAAIA,EAAI,YAoEpC,UACI,eAACC,GAAA,EAAD,CAAanR,GAAG,oBAAhB,8BAGA,gBAACoR,GAAA,EAAD,WACI,eAAC,KAAD,CACIC,WAAS,EACT7H,MAAM,WACN8H,WAAS,EACTzF,MAAOqD,EACPqC,SAvGO,SAC3Bb,GAEAvB,EAAcuB,EAAMc,OAAO3F,UAsGX,eAAC3C,GAAA,EAAD,CAAKtI,QAAQ,OAAOoJ,SAAS,OAAO5E,MAAO,IAAKkL,GAAI,EAApD,SACKxB,GAAO5J,KAAI,SAAAjE,GAAK,OACb,eAAC,GAAD,CAEIA,MAAOA,EACPwQ,SAAUxQ,IAAUmO,EACpBsC,YAAa,WACTrC,EAAepO,KAJdA,WAUrB,gBAAC0Q,GAAA,EAAD,WACI,eAAC,KAAD,CAAQhP,QAAS,kBAAMsM,GAAQ,IAAQhO,MAAM,UAA7C,oBAGA,eAAC,KAAD,CACI2Q,KAAK,SACL3Q,MAAM,UACNyO,SAAUA,EAHd,iCAclBlP,GAAYC,YAAW,CACzBE,KAAM,CACFyE,MAAO,GACPC,OAAQ,GACRgJ,aAAc,GACdzN,QAAS,eACTiR,OAAQ,KAIVC,GAAc,SAAC,GAA2C,IAAzC7Q,EAAwC,EAAxCA,MAAOyQ,EAAiC,EAAjCA,YAAaD,EAAoB,EAApBA,SACjCjQ,EAAUhB,KAChB,OACI,yBACIoR,KAAK,SACLnQ,UAAWD,EAAQb,KACnBgJ,MAAO,CACHrE,gBAAiBrE,EACjB8J,OAAQ0G,EAAW,iBAAmB,QAE1C9O,QAAS+O,KC3NflR,GAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,KAAM,CACFC,QAAS,OACT+F,cAAe,UAEnBoL,QAAQ,aACJ3M,MAAO,IACPhC,SAAU,IACV+H,WAAYzK,EAAMK,QAAQ,IACzBL,EAAMG,YAAYC,KAAK,MAAO,CAC3BF,QAAS,SAGjBoR,UAAU,eACLtR,EAAMG,YAAYyL,GAAG,MAAO,CACzB1L,QAAS,SAGjBqR,cAAe,CACV/K,UAAWxG,EAAMK,QAAQ,GACzBoK,WAAYzK,EAAMK,QAAQ,GAC1BuG,YAAa5G,EAAMK,QAAQ,QAIvBmR,GAAe,SAAC,GAMtB,IALHtM,EAKE,EALFA,OAKE,IAJFyD,YAIE,MAJK,OAIL,EACI7H,EAAUhB,KAChB,EAA0BqH,oBAAS,GAAnC,oBAAOnE,EAAP,KAAeuL,EAAf,KACA,OAAKrJ,EAGD,uBAAKnE,UAAWD,EAAQb,KAAxB,UACA,eAACuI,GAAA,EAAD,CAAKjC,UAAU,SAAS8G,GAAI,EAA5B,SACc,SAAT1E,EACG,eAAC8I,GAAA,EAAD,CACInF,SAAS,aACTpH,OAAQA,EACR4D,MAAM,iBAGV,eAAC4I,GAAA,EAAD,CACIpF,SAAS,aACTpH,OAAQA,EACR4D,MAAM,mBAIlB,sBAAK/H,UAAWD,EAAQuQ,QAAxB,SAGI,eAAC,GAAD,CAAcnM,OAAQA,MAG1B,sBAAKnE,UAAWD,EAAQwQ,UAAxB,SACI,eAACK,GAAA,EAAD,CACI1P,QAAS,kBAAMsM,GAAQ,IACvBhO,MAAM,YAFV,SAII,eAAC,KAAD,QAGR,eAACqR,GAAA,EAAD,CACIC,OAAO,QACPvD,KAAMtL,EAAQmN,QAAS,kBAAM5B,GAAQ,IAFzC,SAII,sBAAKxN,UAAWD,EAAQyQ,cAAxB,SACI,eAAC,GAAD,CAAcrM,OAAQA,WAtCd,MA8ClB4M,GAAe,SAAC,GAAD,IACjB5M,EADiB,EACjBA,OADiB,OAKjBA,EACI,uCACI,eAAClE,EAAA,EAAD,CAAYC,QAAQ,YAApB,0BACA,eAACqM,GAAA,EAAD,IAEA,gBAAC9E,GAAA,EAAD,CAAKoH,GAAI,EAAT,sBACa,eAAClI,GAAA,EAAD,CAAMqK,KAAM7M,EAAO8M,QAASlB,OAAO,SAASmB,IAAI,aAAhD,SAA8D/M,EAAO8M,UAC9E,wBAFJ,aAGc,eAACtK,GAAA,EAAD,CAAMqK,KAAM7M,EAAOgN,SAAUpB,OAAO,SAASmB,IAAI,aAAjD,yBAEd,gBAACzJ,GAAA,EAAD,CAAKoH,GAAI,EAAT,uBACc,eAACuC,GAAA,EAAD,CAAWrM,OAAO,WAAWZ,OAAQA,OAElDA,EAAOkN,gBACJ,gBAAC5J,GAAA,EAAD,CAAKoH,GAAI,EAAT,0BACiB,eAACnH,GAAA,EAAD,CACLvD,OAAQA,EACRY,OAAO,iBACP4C,UAAU,YAHL,SAKL,eAACyJ,GAAA,EAAD,CAAWrM,OAAO,OAAOZ,OAAQA,SAKhDA,EAAOmN,cACJ,gBAAC7J,GAAA,EAAD,CAAKoH,GAAI,EAAT,UACI,eAACuC,GAAA,EAAD,CAAWrM,OAAO,eAAeZ,OAAQA,IAAW,IACpD,eAAClE,EAAA,EAAD,CAAYC,QAAQ,QAAQV,MAAM,gBAAgB8D,UAAU,OAA5D,qBAIR,gBAACmE,GAAA,EAAD,CAAKoH,GAAI,EAAGvC,GAAI,EAAhB,UACI,eAAC8E,GAAA,EAAD,CAAWrM,OAAO,YAClB,wBACA,eAACqM,GAAA,EAAD,CAAWrM,OAAO,SAHtB,IAGgC,eAACqM,GAAA,EAAD,CAAWrM,OAAO,YAAa,IAC3D,eAACqM,GAAA,EAAD,CAAWrM,OAAO,iBAGtB,eAAC9E,EAAA,EAAD,CAAYC,QAAQ,YAApB,wBACA,eAACqM,GAAA,EAAD,IAEA,gBAAC9E,GAAA,EAAD,CAAKoH,GAAI,EAAT,UACI,eAAC5O,EAAA,EAAD,CACIC,QAAQ,QACRV,MAAM,gBACN8D,UAAU,OAHd,sBAMc,IACd,eAACiO,GAAA,EAAD,CACIxM,OAAO,aACPyM,QAAS,CAAEC,KAAM,UAAWC,MAAO,OAAQC,IAAK,WAChDnS,MAAM,kBAEV,wBACA,eAACS,EAAA,EAAD,CACIqD,UAAU,OACVpD,QAAQ,QACRV,MAAM,gBAHV,yBAMc,IACd,eAACkI,GAAA,EAAD,CACIjM,SAAS,YACTsJ,OAAO,WACP4C,UAAU,QAHd,SAKI,eAACiK,GAAA,EAAD,CACI7M,OAAO,YACP8M,OAAQ,SAAA1N,GAAM,OACVA,EAAM,UACGA,EAAOhG,WADV,YACwBgG,EAAO/F,WAC/B,WAMtB,gBAACqJ,GAAA,EAAD,CAAK6E,GAAI,EAAT,UACI,eAACrM,EAAA,EAAD,CAAYC,QAAQ,YAApB,kBACA,eAACqM,GAAA,EAAD,IACA,eAAC,GAAD,CAAcpI,OAAQA,EAAQwD,UAAU,iBAG5C,gBAACF,GAAA,EAAD,CAAK6E,GAAI,EAAT,UACI,eAACrM,EAAA,EAAD,CAAYC,QAAQ,YAApB,0BACA,eAACqM,GAAA,EAAD,IAEA,eAAC9E,GAAA,EAAD,CAAKoH,GAAI,EAAT,SACI,eAAC5B,GAAA,EAAD,CAAqBlF,MAAM,OAAOJ,UAAU,WAAW5C,OAAO,eAA9D,SACI,eAACmI,GAAA,EAAD,UACI,eAACH,GAAA,EAAD,CACIhI,OAAO,QACP7E,QAAQ,WACRV,MAAM,YACN4E,KAAK,sBAO7B,MClNK0N,GAAS,CAClB,cACA,gBACA,iBACA,MACA,OACA,WAGSC,GAAa,CACtBC,YAAa,cACb,gBAAiB,gBACjB,iBAAkB,iBAClBC,IAAK,MACLC,KAAM,OACNC,QAAS,WAGAC,GAAeN,GAAOrO,KAAI,SAAA0M,GAAI,MAAK,CAC5C5R,GAAI4R,EAEJjO,KAAM6P,GAAW5B,O,kDCdfpR,GAAYC,YAAW,CACzBE,KAAM,CACFyE,MAAO,OAIF0O,GAAiB,SAAC,GAAgD,IAA9C5V,EAA6C,EAA7CA,OAAQ6V,EAAqC,EAArCA,UAAqC,IAA1BtS,iBAA0B,MAAd,GAAc,EACpED,EAAUhB,KAChB,OACI,gBAAC,KAAD,CACIwT,QAAM,EACNnI,MAAO3N,EACPqT,SAAU,SAACb,GACPqD,EAAUrD,EAAMc,OAAO3F,QAE3BlK,QAAQ,SACR6H,OAAO,EACPqI,OAAO,OACPhM,KAAK,QACLpE,UAAW0E,aAAK1E,EAAWD,EAAQb,MAVvC,UAYI,gBAAC0D,GAAA,EAAD,CAAUwH,MAAM,OAAhB,kBACS,eAAC,GAAD,CAAQ3N,OAAO,YAExB,gBAACmG,GAAA,EAAD,CAAUwH,MAAM,OAAhB,kBACS,eAAC,GAAD,CAAQ3N,OAAO,YAExB,gBAACmG,GAAA,EAAD,CAAUwH,MAAM,MAAhB,iBACQ,eAAC,GAAD,CAAQ3N,OAAO,WAEvB,gBAACmG,GAAA,EAAD,CAAUwH,MAAM,cAAhB,yBACgB,eAAC,GAAD,CAAQ3N,OAAO,uBCfrCsC,GAAYC,aAAyB,SAAAC,GAAK,MAAK,CACjDC,KAAM,CACFuG,UAAWxG,EAAMK,QAAQ,GACzB6I,aAAclJ,EAAMK,QAAQ,IAEhCoL,QAAS,CACLvL,QAAS,OACTgG,eAAgB,gBAChBM,UAAWxG,EAAMK,QAAQ,IAE7B0E,MAAO,CACH6B,YAAa,MACb,0BAA2B,CACvBqG,WAAY,KAGpBsG,eAAgB,CACZrK,aAAclJ,EAAMK,QAAQ,IAEhCmT,iBAAkB,CACdtT,QAAS,QAEbuT,WAAY,CACRtS,KAAM,GAEVuS,gBAAiB,CACbvS,KAAM,EACNsJ,WAAYzK,EAAMK,QAAQ,GAC1BuC,YAAa5C,EAAMK,QAAQ,GAC3BsT,aAAc3T,EAAMK,QAAQ,GAC5BuT,YAAa5T,EAAMQ,QAAQI,QAAQiT,KACnC3T,QAAS,qBAAE4T,QAAwB,QAAU,aAIxCC,GAAU,SAAC,GAMjB,IALHC,EAKE,EALFA,WACAtL,EAIE,EAJFA,UAKA,EAA8BvB,oBAAS,GAAvC,oBAAO2M,EAAP,KAAgBG,EAAhB,KACMnT,EAAUhB,GAAU,CAACgU,YACrB5O,EAASgP,eACT1X,EAAW2X,eACjB,EAAwBhN,mBAAS,IAAjC,oBAAOiN,EAAP,KAAaC,EAAb,KACA,EAA4BlN,mBAASjC,GAAUA,EAAO1H,QAAtD,oBAAOA,EAAP,KAAe6V,EAAf,KACA,EAAwBlM,mBAASmN,MAAjC,oBAAOC,EAAP,KAAaC,EAAb,KACA,EAA8BlF,eAA9B,oBAAO1R,EAAP,KAAiB6W,EAAjB,KAAiBA,QACjB,EAAiBpF,eAAVvR,EAAP,qBAEM4W,EAAUC,eACVC,EAASC,eACPxO,EAAasE,eAAbtE,SACR,IAAKnB,IAAWmB,EAAU,OAAO,KA+BjC,OACI,sBAAKtF,UAAWD,EAAQb,KAAxB,SACI,wBAAMoQ,SA/BO,SAACL,GAAuC,IAAD,EACxDA,EAAMM,iBACN,IAAMjT,GAAS,mBACVyX,GAAkBpM,GAAaxD,EAAO5F,IAD5B,yBAED+G,EAAS/G,IAFR,qBAGXiV,GAHW,qBAIXH,GAJW,GAyBf,OAnBIJ,IACA3W,EAAKG,OAASA,GAElBM,EACI4K,EACExD,GAAUA,EAAO5F,GACnB,CACIyV,UAAWR,EACX/W,UAEJ0H,GAEJtH,EAAOpB,EAAUa,EAAM,CACnBkT,UAAW,WACP8D,EAAQ,IACRO,EAAO,0BAA2B,QAClCF,QAGD,GAIH,UACI,sBAAK3T,UAAWD,EAAQyS,eAAxB,SACI,eAAC,KAAD,CACItS,QAAS6S,EAAU,YAAa,WAChCvT,MAAM,UACN0B,QAAS,kBAAKgS,GAAYH,IAH9B,wBAMJ,uBAAK/S,UAAWD,EAAQ0S,iBAAxB,UACI,sBAAKzS,UAAWD,EAAQ2S,WAAxB,SACI,eAAC,KAAD,CACI3K,MAAM,aACN7H,QAAQ,SACRkE,KAAK,QACLyL,WAAS,EACToE,WAAS,EACT7J,MAAOiJ,EACPvD,SAAU,SAACb,GAAD,OACNqE,EAAQrE,EAAMc,OAAO3F,YAIjC,eAACpD,GAAA,EAAD,CAAOhH,UAAWD,EAAQ4S,gBAA1B,SACI,eAAC,KAAD,CAAexQ,SAAUkR,EAAMa,cAAe,CAACC,aAGvD,uBAAKnU,UAAWD,EAAQ2K,QAAxB,UACI,gCACK2I,EACG,uCACKJ,GACG,eAAC,GAAD,CACIxW,OAAQA,EACR6V,UAAWA,EACXtS,UAAWD,EAAQiE,QAG3B,eAAC,KAAD,CACImM,KAAK,iBACLjQ,QAAQ,SACRkE,KAAK,QACLgG,MAAOoJ,EACP1D,SAAU,SAACb,GACPwE,EAAQxE,EAAMc,OAAO3F,QAEzBpK,UAAWD,EAAQiE,WAG3B,OAER,eAAC,KAAD,CACImM,KAAK,SACLjQ,QAAQ,YACRV,MAAM,UACNyO,UAAWoF,GAAQK,EAJvB,oCAcdH,GAAiB,WACnB,IAAMa,EAAM,IAAIC,KAEhB,OADAD,EAAIE,WAAWF,EAAIG,aAAeH,EAAII,qBAC/BJ,EAAIK,cAAcC,MAAM,GAAI,IAGjCX,GAAoB,CACtBY,SAAU,aACVC,MAAO,UACPC,UAAW,aACXC,SAAU,c,wCC9JR/V,GAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,KAAM,CACFiJ,aAAclJ,EAAMK,QAAQ,IAEhCyV,SAAU,CACN5M,aAAclJ,EAAMK,QAAQ,GAC5BE,MAAOP,EAAMQ,QAAQ4T,KAAK3T,WAE9BsV,SAAU,CACN9I,WAAY,GACZrK,YAAa,GACb+Q,aAAc,GACdqC,cAAe,GACfC,WAAY,KAEhBC,QAAS,CACLhW,QAAS,OACTgG,eAAgB,WAChBM,UAAWxG,EAAMK,QAAQ,IAE7B8V,OAAQ,CACJvP,YAAa5G,EAAMK,QAAQ,IAE/B+V,QAAS,CACLxR,gBAAiB5E,EAAMQ,QAAQgJ,KAAK,KACpCrD,QAAS,QACTwH,aAAc,GACdzN,QAAS,OACToG,WAAY,UACZ4C,aAAclJ,EAAMK,QAAQ,IAEhC+T,KAAM,CACFjT,KAAM,GAEVkV,UAAW,CACPC,WAAYtW,EAAMuW,WAAWD,WAC7BE,SAAUxW,EAAMuW,WAAWE,MAAMD,SACjCP,WAAY,EACZzP,UAAWxG,EAAMK,QAAQ,GACzB6I,aAAclJ,EAAMK,QAAQ,IAEhCoL,QAAS,CACLhB,WAAYzK,EAAMK,QAAQ,GAC1BqW,WAAY,SACZxW,QAAS,OACT+F,cAAe,SACfC,eAAgB,oBAIXyQ,GAAO,SAAC,GAUd,IATH3C,EASE,EATFA,WACA4C,EAQE,EARFA,KAEAlO,GAME,EAPFmO,OAOE,EANFnO,WAOA,EAA4BvB,oBAAS,GAArC,oBAAO2P,EAAP,KAAgBC,EAAhB,KACA,EAAgC5P,oBAAS,GAAzC,oBAAO6P,EAAP,KAAkBC,EAAlB,KACA,EAAgC9P,mBAASyP,EAAKxC,MAA9C,oBAAO8C,EAAP,KAAiBC,EAAjB,KACM3a,EAAW2X,eACXjP,EAASgP,eACTU,EAASC,eACT/T,EAAUhB,KAChB,EAA8BuP,eAA9B,oBAAOvR,EAAP,KAAiB2W,EAAjB,KAAiBA,QAEjB,EAAuB2C,aAAU5a,EAAUoa,EAAKtX,GAAIsX,EAAM,CACtDS,aAAc,WACd9G,UAAW,WACPqE,EAAO,eAAgB,YAAQpW,GAAW,GAC1CV,EACI4K,EACAxD,EAAO5F,GACP,CAAE8J,SAAUlE,EAAOkE,SAAW,GAC9BlE,MARLoS,EAAP,qBAsCA,OACI,uBACIvW,UAAWD,EAAQb,KACnB4H,aAAc,kBAAMkP,GAAS,IAC7BjP,aAAc,kBAAMiP,GAAS,IAHjC,UAKI,uBAAKhW,UAAWD,EAAQgV,SAAxB,UACI,eAACrN,GAAA,EAAD,CACIvD,OAAQ0R,EACRpa,SAAS,eACTsJ,OAAO,WACP4C,UAAU,QACV4D,SAAS,gBALb,SAOI,eAAC6F,GAAA,EAAD,CAAWrM,OAAO,aAAa7E,QAAQ,YACzB,IAClB,gBAACD,EAAA,EAAD,CAAYqD,UAAU,OAAOpD,QAAQ,QAArC,4BACoB,OAEpB,eAACqR,GAAA,EAAD,CACIxM,OAAO,OACPZ,OAAQ0R,EACR3V,QAAQ,QACRsW,UAAQ,EACRC,QAAQ,KACRjF,QAAS,CACLkF,UAAW,OACXC,UAAW,WAEhB,IACF1D,GAAc,eAAC,GAAD,CAAQxW,OAAQoZ,EAAKpZ,YAEvCwZ,EACG,wBAAM3G,SA5CO,SAACL,GACtBA,EAAMM,iBACNxS,EAAOtB,EAAUoa,EAAKtX,GAAI,CAAE8U,KAAM8C,GAAYN,EAAM,CAChDrG,UAAW,WACP0G,GAAW,GACXE,EAAYP,EAAKxC,MACjB2C,GAAS,OAsCT,UACI,eAACY,GAAA,EAAD,CACIxM,MAAO+L,EACPrG,SAnDK,SAACb,GACtBmH,EAAYnH,EAAMc,OAAO3F,QAmDTyF,WAAS,EACToE,WAAS,EACTjU,UAAWD,EAAQiV,SACnBpF,WAAS,IAEb,uBAAK5P,UAAWD,EAAQoV,QAAxB,UACI,eAAC,KAAD,CACInV,UAAWD,EAAQqV,OACnBlU,QAlEC,WACrBgV,GAAW,GACXE,EAAYP,EAAKxC,MACjB2C,GAAS,IAgEWxW,MAAM,UAHV,oBAOA,eAAC,KAAD,CACI2Q,KAAK,SACL3Q,MAAM,UACNU,QAAQ,YACR+N,SAAUyF,EAJd,+BAWR,uBACI1T,UAAWD,EAAQsV,QACnBnU,QAAS,kBAAM8U,GAAS,IAF5B,UAII,sBAAKhW,UAAWD,EAAQsT,KAAxB,SACI,eAAC,KAAD,CAAelR,SAAU0T,EAAKxC,KAAMa,cAAe,CAACC,UAExD,uBACInU,UAAWD,EAAQ2K,QACnBxC,MAAO,CAAEyN,WAAYI,EAAU,UAAY,UAF/C,UAII,eAAChT,GAAA,EAAD,CAAS5C,MAAM,YAAf,SACI,eAACyQ,GAAA,EAAD,CACIxM,KAAK,QACLlD,QApGA,WACxBgV,GAAW,IAiGS,SAII,eAAC,KAAD,QAGR,eAACnT,GAAA,EAAD,CAAS5C,MAAM,cAAf,SACI,eAACyQ,GAAA,EAAD,CAAYxM,KAAK,QAAQlD,QAASqV,EAAlC,SACI,eAAC,KAAD,kBClN1BxX,GAAYC,YAAW,CACzBE,KAAM,CACFuG,UAAW,WAINoR,GAAgB,SAAC,GAMvB,IALH5D,EAKE,EALFA,WACAtL,EAIE,EAJFA,UAKM5H,EAAUhB,KAChB,EAA8BuH,eAAtBhK,EAAR,EAAQA,KAAMkK,EAAd,EAAcA,IACd,OADA,EAAmBC,OAGf,uCACI,eAAC,GAAD,CAASwM,WAAYA,EAAYtL,UAAWA,IAC5C,sBAAK3H,UAAWD,EAAQb,KAAxB,SACKsH,EAAI/C,KAAI,SAAClF,EAAIuY,GAAL,OACL,eAAC,GAAD,CACIjB,KAAMvZ,EAAKiC,GACXuX,OAAQgB,IAAUtQ,EAAIwC,OAAS,EAC/BiK,WAAYA,EACZtL,UAAWA,GACNmP,WAXL,M,gCC+BlBC,GAAqB,WACvB,MAA2BC,eAAnB7S,EAAR,EAAQA,OAAQsC,EAAhB,EAAgBA,OAChB,EAA0BL,mBAAS,GAAnC,oBAAOgE,EAAP,KAAc6M,EAAd,KAIA,OAAKxQ,GAAWtC,EAEZ,gBAACsD,GAAA,EAAD,CAAKoH,GAAI,EAAG1P,QAAQ,OAApB,UACI,eAACsI,GAAA,EAAD,CAAKrH,KAAK,IAAV,SACI,eAAC8W,GAAA,EAAD,UACI,gBAACjL,GAAA,EAAD,WACI,gBAACxE,GAAA,EAAD,CAAKtI,QAAQ,OAAOmN,GAAI,EAAxB,UACI,eAAC,GAAD,CAAWnI,OAAQA,IACnB,gBAACsD,GAAA,EAAD,CAAK0E,GAAI,EAAG/L,KAAK,IAAjB,UACI,gBAACqH,GAAA,EAAD,CAAKtI,QAAQ,OAAOgY,QAAS,EAA7B,UACI,eAAClX,EAAA,EAAD,CAAYC,QAAQ,KAApB,SAA0BiE,EAAOjC,OAChCiC,EAAO0D,UACJ,eAACC,GAAA,EAAD,CACIC,MAAO5D,EAAO0D,SACd3H,QAAQ,WACRkE,KAAK,aAIjB,eAACnE,EAAA,EAAD,CACIC,QAAQ,QACRV,MAAM,gBAFV,oBAIS2E,EAAO5F,GAJhB,SAMC4F,EAAOT,QACA,gBAACzD,EAAA,EAAD,CAAYC,QAAQ,QAApB,UACI,eAACkR,GAAA,EAAD,CAAWrM,OAAO,WADtB,IACmC,IAC/B,eAACiD,GAAA,EAAD,CACIjD,OAAO,OACPkD,QAASuD,WAK7B,eAAC/D,GAAA,EAAD,UACI,eAACC,GAAA,EAAD,CACI3C,OAAO,aACP4C,UAAU,YACVC,MAAM,EAHV,SAKI,eAAC,GAAD,WAIZ,gBAACwP,GAAA,EAAD,CACIhN,MAAOA,EACPiN,eAAe,UACfC,UAAU,UACVxH,SApDH,SAACb,EAAwBsI,GAC1CN,EAASM,IA+CO,UAMI,eAACC,GAAA,EAAD,CACIzP,MACwB,IAApB5D,EAAOkE,SACD,SADN,UAESlE,EAAOkE,SAFhB,YAKR,eAACmP,GAAA,EAAD,CACIzP,MAC2B,IAAvB5D,EAAOiE,YACD,YADN,UAESjE,EAAOiE,YAFhB,eAKPjE,EAAOsT,UACJ,eAACD,GAAA,EAAD,CACIzP,MACwB,IAApB5D,EAAOsT,SACD,SADN,UAEStT,EAAOsT,SAFhB,eAOhB,eAAClL,GAAA,EAAD,IACA,eAAC,GAAD,CAAUnC,MAAOA,EAAO0M,MAAO,EAA/B,SACI,eAACY,GAAA,EAAD,CACI/P,UAAU,eACVoI,OAAO,aACP4H,KAAM,CAAE3N,MAAO,OAAQP,MAAO,QAHlC,SAKK,eAAC,GAAD,CAAe9B,UAAU,kBAGlC,eAAC,GAAD,CAAUyC,MAAOA,EAAO0M,MAAO,EAA/B,SACI,eAACY,GAAA,EAAD,CACI/P,UAAU,WACVoI,OAAO,aACP4H,KAAM,CAAE3N,MAAO,YAAaP,MAAO,OAHvC,SAKI,eAAC,GAAD,QAGR,eAAC,GAAD,CAAUW,MAAOA,EAAO0M,MAAO,EAA/B,SACI,eAACY,GAAA,EAAD,CACI/P,UAAU,QACVoI,OAAO,aACP4H,KAAM,CAAE3N,MAAO,OAAQP,MAAO,OAHlC,SAKI,eAAC,GAAD,eAMpB,eAAC,GAAD,CAActF,OAAQA,OA1GC,MAqH7ByT,GAAW,SAACjX,GACd,IAAQwB,EAAqCxB,EAArCwB,SAAUiI,EAA2BzJ,EAA3ByJ,MAAO0M,EAAoBnW,EAApBmW,MAAUe,EAAnC,aAA6ClX,EAA7C,IAEA,OACI,8CACImX,KAAK,WACLC,OAAQ3N,IAAU0M,EAClBvY,GAAE,2BAAsBuY,GACxB,wCAAgCA,IAC5Be,GALR,aAOK1V,MAKP6V,GAAmB,WACrB,MAA8B1R,eAAtBhK,EAAR,EAAQA,KAAMkK,EAAd,EAAcA,IAAKC,EAAnB,EAAmBA,OACbtC,EAASgP,eAETiB,EAAMC,KAAKD,MACjB,OAAK3N,EAED,gBAACgB,GAAA,EAAD,WACI,eAACpE,GAAA,EAAD,UACKmD,EAAI/C,KAAI,SAAAlF,GACL,IAAM0Z,EAAU3b,EAAKiC,GACrB,OACI,gBAAC2Z,GAAA,EAAD,CACIrV,QAAM,EAENS,UAAW6U,KACXpX,GAAE,oBAAexC,EAAf,SAJN,UAMI,eAAC6Z,GAAA,EAAD,UACI,eAAC,GAAD,CAAQjU,OAAQ8T,MAEpB,eAACI,GAAA,EAAD,CACIxY,QAAO,UAAKoY,EAAQ9Z,WAAb,YAA2B8Z,EAAQ7Z,WAC1CsB,UACI,uCACKuY,EAAQ9X,MAAO,IADpB,YAEU8X,EAAQ5P,SAFlB,WAGI,eAAC,GAAD,CAAUlE,OAAQ8T,SAI9B,eAACK,GAAA,EAAD,UACI,gBAACrY,EAAA,EAAD,CAAYC,QAAQ,QAAQV,MAAM,gBAAlC,0BACkB,IACb+Y,aACG,IAAIlE,KAAK4D,EAAQjE,WACjBI,GACD,IALP,OAMQ,eAAC,GAAD,CAAQ3X,OAAQwb,EAAQxb,gBAxB/B8B,QA+BrB,eAACkJ,GAAA,EAAD,CAAKjC,UAAU,SAASqJ,GAAI,EAA5B,SACI,eAAC,GAAD,CAA4B1K,OAAQA,SAzC5B,MA+ClBqU,GAA6B,SAAC,GAAD,IAAGrU,EAAH,EAAGA,OAAH,OAC/B,eAAC,KAAD,CACIb,UAAW6U,KACXpX,GAAI,CACA0X,SAAU,mBACVlW,MAAO,CAAE4B,OAAQ,CAAEuU,WAAYvU,EAAO5F,MAE1CiB,MAAM,UACNU,QAAQ,YACRkE,KAAK,QACLuU,UAAW,eAAC,KAAD,IATf,0BAeEC,GAAgB,WAClB,MAA8BtS,eAAtBhK,EAAR,EAAQA,KAAMkK,EAAd,EAAcA,IAAKC,EAAnB,EAAmBA,OAEb2N,EAAMC,KAAKD,MACjB,OAAK3N,EAED,eAACgB,GAAA,EAAD,UACI,eAACpE,GAAA,EAAD,UACKmD,EAAI/C,KAAI,SAAAlF,GACL,IAAMsa,EAAOvc,EAAKiC,GAClB,OACI,gBAAC2Z,GAAA,EAAD,CACIrV,QAAM,EAENS,UAAW6U,KACXpX,GAAE,iBAAYxC,EAAZ,SAJN,UAMI,eAAC8Z,GAAA,EAAD,CACIxY,QAASgZ,EAAK3W,KACdxC,UACI,uCAEKqS,GAAW8G,EAAKC,OAFrB,IAE8B,IACzBD,EAAKE,OAAOC,eAAe,QAAS,CACjCC,SAAU,UACV/Q,MAAO,WACPgR,SAAU,MACVC,gBAAiB,eACjBC,yBAA0B,IARlC,KAUOP,EAAK1I,UAIpB,eAACmI,GAAA,EAAD,UACI,gBAACrY,EAAA,EAAD,CACIC,QAAQ,QACRV,MAAM,gBACN8D,UAAU,OAHd,0BAKkB,IACbiV,aACG,IAAIlE,KAAKwE,EAAKQ,YACdjF,GACD,IATP,MAUQ,WAhCP7V,UATT,M,0BC9OlBQ,GAAYC,YAAW,CACzB+M,OAAQ,CACJ5M,QAAS,eACTuK,WAAY,MACZ,gBAAiB,CACbA,WAAY,MAuFlBsC,GAAe,SAACrL,GAClB,IAAMwD,EAASgP,aAAiBxS,GAChC,OACI,eAACsL,GAAA,EAAD,UACI,gBAACxE,GAAA,EAAD,CAAKtI,QAAQ,OAAb,UACI,eAAC,GAAD,CAAWgF,OAAQA,IACnB,eAACsD,GAAA,EAAD,CAAK0E,GAAI,EAAG/L,KAAK,IAAIgM,SAAU,IAA/B,SACKzL,EAAMwB,iBAOrBkK,GAAgB,kBAClB,eAAC5E,GAAA,EAAD,CAAK6E,GAAI,EAAT,SACI,eAACC,GAAA,EAAD,OC/HO,IACX+M,KlBauB,SAAC3Y,GACxB,IAAQ2E,EAAasE,eAAbtE,SACR,OAAOA,EACH,eAAC,KAAD,2BACQ3E,GADR,IAEI4Y,QAAS,eAAC,GAAD,IACTC,MAAO,eAAC,GAAD,IACPC,oBAAqB,CAAEnP,SAAQ,OAAEhF,QAAF,IAAEA,OAAF,EAAEA,EAAU/G,IAC3Cmb,WAAY,eAACC,GAAA,EAAD,CAAYC,mBAAoB,CAAC,GAAI,GAAI,GAAI,IAAK,OAC9D7P,QAAS,GACT4N,KAAM,CAAE3N,MAAO,OAAQP,MAAO,OAC9BnG,UAAU,MARd,SAUI,eAAC,GAAD,OAEJ,MkB3BJzG,Of0ByB,SAAC8D,GAC1B,IAAMZ,EAAUhB,KACRuG,EAAasE,eAAbtE,SAER,IAAKA,EAAU,OAAO,KAItB,OACI,eAACuU,GAAA,EAAD,2BAAYlZ,GAAZ,IAAmB4Y,SAAS,EAA5B,SACI,gBAACO,GAAA,EAAD,CACIxW,UAAW0I,GACX+N,cANgB,iBAAO,CAAEzP,SAAUhF,IAAQ,OAAIA,QAAJ,IAAIA,OAAJ,EAAIA,EAAU/G,MAOzDyb,SAAS,OAHb,UAKI,eAACC,GAAA,EAAD,CAAWlV,OAAO,OAAOmV,SAAUC,eAAYtK,WAAS,IACxD,eAACuK,GAAA,EAAD,CACIrV,OAAO,SACPkD,QAASzE,GACT6W,cAAe3V,aAAK3E,EAAQgM,OAAQ,iBAExC,eAACqO,GAAA,EAAD,CACIrV,OAAO,OACPkD,QAASuD,GACT6O,cAAeta,EAAQgM,SAE3B,eAACqO,GAAA,EAAD,CACIrV,OAAO,WACPkD,QAASmB,GACTiR,cAAeta,EAAQgM,SAE3B,eAACuO,GAAA,EAAD,UACK,gBAAGC,EAAH,EAAGA,SAAH,yBAAgD,eAArBA,EAAS1S,UACjC,eAAC2S,GAAA,EAAD,CACIzV,OAAO,iBACP4C,UAAU,YAFd,SAII,eAAC,GAAD,SAKZ,eAAC8S,GAAA,EAAD,CAAqB1V,OAAO,eAAe4C,UAAU,WAArD,SACI,eAAC+S,GAAA,EAAD,CAAwB3V,OAAO,YAGnC,eAAC,GAAD,IACA,eAACkV,GAAA,EAAD,CAAWlV,OAAO,UAAU8K,WAAS,EAAC8K,YAAY,IAClD,eAACV,GAAA,EAAD,CACIlV,OAAO,OACPsV,cAAe3V,aAAK3E,EAAQgM,OAAQ,iBAExC,eAACkO,GAAA,EAAD,CAAWlV,OAAO,UAAUsV,cAAeta,EAAQgM,SACnD,eAACkO,GAAA,EAAD,CAAWlV,OAAO,YAAYsV,cAAeta,EAAQgM,SACrD,eAACyO,GAAA,EAAD,CACIzV,OAAO,aACP4C,UAAU,YAFd,SAII,eAAC+D,GAAA,EAAD,CAAmBC,WAAW,eAElC,eAAC,GAAD,IACA,eAACsO,GAAA,EAAD,CAAWlV,OAAO,UAAU8K,WAAS,EAAC8K,YAAY,IAClD,eAACV,GAAA,EAAD,CAAWlV,OAAO,WAAW8K,WAAS,EAAC8K,YAAY,IACnD,eAACV,GAAA,EAAD,CAAWlV,OAAO,OAAO8K,WAAS,IAClC,eAAC,GAAD,IACA,eAACoK,GAAA,EAAD,CACIlV,OAAO,eACPsV,cAAe3V,aAAK3E,EAAQgM,OAAQ,eACpC4O,YAAY,IAEhB,eAACH,GAAA,EAAD,CACIzV,OAAO,WACP4C,UAAU,QACVI,MAAM,kBACNsS,cAAeta,EAAQgM,OACvB4O,YAAY,EALhB,SAOI,eAACP,GAAA,EAAD,CACIzO,WAAY,SAACiP,GAAD,gBACLA,EAAMzc,WADD,YACeyc,EAAMxc,uBexGrDyc,KD8BuB,SAACla,GACxB,IAAMZ,EAAUhB,KAChB,OACI,eAAC,KAAD,2BAAU4B,GAAV,IAAiB6Y,MAAO,eAAC,GAAD,CAAc5R,KAAK,SAAW2R,SAAS,EAA/D,SACI,gBAACO,GAAA,EAAD,CAAYxW,UAAW0I,GAAcgO,SAAS,OAA9C,UACI,eAACC,GAAA,EAAD,CAAWlV,OAAO,OAAOmV,SAAUC,eAAYtK,WAAS,IACxD,eAACuK,GAAA,EAAD,CACIrV,OAAO,SACPkD,QAASzE,GACT6W,cAAe3V,aAAK3E,EAAQgM,OAAQ,iBAExC,eAACqO,GAAA,EAAD,CACIrV,OAAO,OACPkD,QAASuD,GACT6O,cAAeta,EAAQgM,SAE3B,eAACqO,GAAA,EAAD,CACIrV,OAAO,WACPkD,QAASmB,GACTiR,cAAeta,EAAQgM,SAE3B,eAACuO,GAAA,EAAD,UACK,gBAAGC,EAAH,EAAGA,SAAH,yBAAgD,eAArBA,EAAS1S,UACjC,eAAC2S,GAAA,EAAD,CACIzV,OAAO,iBACP4C,UAAU,YAFd,SAII,eAAC,GAAD,SAKZ,eAAC8S,GAAA,EAAD,CAAqB1V,OAAO,eAAe4C,UAAU,WAArD,SACI,eAAC+S,GAAA,EAAD,CAAwB/O,WAAW,YAGvC,eAAC,GAAD,IACA,eAACsO,GAAA,EAAD,CAAWlV,OAAO,UAAU8K,WAAS,EAAC8K,YAAY,IAClD,eAACV,GAAA,EAAD,CACIlV,OAAO,OACPsV,cAAe3V,aAAK3E,EAAQgM,OAAQ,iBAExC,eAACkO,GAAA,EAAD,CAAWlV,OAAO,UAAUsV,cAAeta,EAAQgM,SACnD,eAACkO,GAAA,EAAD,CAAWlV,OAAO,YAAYsV,cAAeta,EAAQgM,SACrD,eAACyO,GAAA,EAAD,CACIzV,OAAO,aACP4C,UAAU,YAFd,SAII,eAAC+D,GAAA,EAAD,CAAmBC,WAAW,eAElC,eAAC,GAAD,IACA,eAACsO,GAAA,EAAD,CAAWlV,OAAO,UAAU8K,WAAS,EAAC8K,YAAY,IAClD,eAACV,GAAA,EAAD,CAAWlV,OAAO,WAAW8K,WAAS,EAAC8K,YAAY,IACnD,eAACV,GAAA,EAAD,CAAWlV,OAAO,OAAO8K,WAAS,IAClC,eAAC,GAAD,IACA,eAACoK,GAAA,EAAD,CACIlV,OAAO,eACPsV,cAAe3V,aAAK3E,EAAQgM,OAAQ,eACpC4O,YAAY,IAEhB,eAACH,GAAA,EAAD,CACIzV,OAAO,WACP4C,UAAU,QACVI,MAAM,kBACNsS,cAAeta,EAAQgM,OACvB4O,YAAY,EALhB,SAOI,eAACP,GAAA,EAAD,CACIzO,WAAY,SAACiP,GAAD,gBACLA,EAAMzc,WADD,YACeyc,EAAMxc,uBClGrD0c,KFoCuB,SAACna,GAAD,OACvB,eAACoa,GAAA,EAAD,2BAAcpa,GAAd,aACI,eAAC,GAAD,QErCJe,KAAMsZ,M,UCKGC,GAAe,SAAC,GAAD,IAAG9W,EAAH,EAAGA,OAAH,IAAWyD,YAAX,MAAkB,OAAlB,SACxB,gBAACH,GAAA,EAAD,CAAK0E,GAAI,EAAGxI,MAAO,IAAKhC,SAAU,IAAlC,UACI,eAAC8F,GAAA,EAAD,CAAKjC,UAAU,SAAS8G,GAAI,EAA5B,SACc,SAAT1E,EACG,eAAC8I,GAAA,EAAD,CACInF,SAAS,YACTpH,OAAQA,EACR4D,MAAM,iBAGV,eAAC4I,GAAA,EAAD,CACIpF,SAAS,YACTpH,OAAQA,EACR4D,MAAM,mBAKlB,eAAC9H,EAAA,EAAD,CAAYC,QAAQ,YAApB,2BACA,eAACqM,GAAA,EAAD,IAEA,eAAC9E,GAAA,EAAD,CAAKoH,GAAI,EAAT,SACI,eAACqM,GAAA,EAAD,CAAYnW,OAAO,YAGvB,gBAAC0C,GAAA,EAAD,CAAKoH,GAAI,EAAT,UACI,eAACuC,GAAA,EAAD,CAAWrM,OAAO,kBAAmB,IACrC,eAAC9E,EAAA,EAAD,CAAYC,QAAQ,QAAQV,MAAM,gBAAgB8D,UAAU,OAA5D,qBAKJ,gBAACmE,GAAA,EAAD,CAAK6E,GAAI,EAAT,UACI,eAAC8E,GAAA,EAAD,CAAWrM,OAAO,kBAAmB,IACrC,eAAC9E,EAAA,EAAD,CAAYC,QAAQ,QAAQV,MAAM,gBAAgB8D,UAAU,OAA5D,qBAKJ,eAACmE,GAAA,EAAD,CAAK6E,GAAI,EAAT,SACI,eAACrM,EAAA,EAAD,CAAYC,QAAQ,QAApB,SACuB,SAAlBiE,EAAOgX,OAAoB,SAAW,cAI/C,eAAClb,EAAA,EAAD,CAAYC,QAAQ,YAApB,wBACA,eAACqM,GAAA,EAAD,IAEA,eAAC9E,GAAA,EAAD,CAAKoH,GAAI,EAAT,SAAa1K,GAAUA,EAAOiX,aAC9B,gBAAC3T,GAAA,EAAD,CAAKoH,GAAI,EAAGvC,GAAI,EAAhB,UACI,eAACrM,EAAA,EAAD,CAAYqD,UAAU,OAAOpD,QAAQ,QAAQV,MAAM,gBAAnD,sBAEc,IACd,eAAC+R,GAAA,EAAD,CACIxM,OAAO,aACPyM,QAAS,CAAEC,KAAM,UAAWC,MAAO,OAAQC,IAAK,WAChDnS,MAAM,kBAEV,wBACA,eAACS,EAAA,EAAD,CAAYqD,UAAU,OAAOpD,QAAQ,QAAQV,MAAM,gBAAnD,0BAEc,IACd,eAAC+R,GAAA,EAAD,CACIxM,OAAO,YACPyM,QAAS,CAAEC,KAAM,UAAWC,MAAO,OAAQC,IAAK,WAChDnS,MAAM,kBAEV,wBACA,eAACS,EAAA,EAAD,CAAYqD,UAAU,OAAOpD,QAAQ,QAAQV,MAAM,gBAAnD,yBAEc,IACd,eAACkI,GAAA,EAAD,CACIjM,SAAS,WACTsJ,OAAO,WACP4C,UAAU,QAHd,SAKI,eAACiK,GAAA,EAAD,CACI7M,OAAO,YACP8M,OAAQ,SAAA1N,GAAM,OACVA,EAAM,UAAMA,EAAOhG,WAAb,YAA2BgG,EAAO/F,WAAc,WAMtE,gBAACqJ,GAAA,EAAD,CAAK6E,GAAI,EAAT,UACI,eAACrM,EAAA,EAAD,CAAYC,QAAQ,YAApB,kBACA,eAACqM,GAAA,EAAD,IACA,eAAC,GAAD,CAAcpI,OAAQA,EAAQwD,UAAU,gBAG5C,gBAACF,GAAA,EAAD,WACI,eAACxH,EAAA,EAAD,CAAYC,QAAQ,YAApB,mBACA,eAACqM,GAAA,EAAD,IACA,eAACmL,GAAA,EAAD,CACIjc,SAAS,WACTsU,OAAO,aACPpI,UAAU,QAHd,SAKI,eAAC,GAAD,aAMV0T,GAAgB,WAClB,MAA+B/U,eAAvBhK,EAAR,EAAQA,KAAMkK,EAAd,EAAcA,IACd,OADA,EAAmBkN,SACW,IAAflN,EAAIwC,OAAqB,KAIhC,eAAC3F,GAAA,EAAD,UACKmD,EAAI/C,KAAI,SAAAlF,GACL,IAAM+c,EAAOhf,EAAKiC,GAClB,OACI,eAAC2Z,GAAA,EAAD,CAAmBqD,gBAAc,EAAjC,SACI,gBAAC9T,GAAA,EAAD,WACI,eAACxH,EAAA,EAAD,CAAYC,QAAQ,QAApB,SACKob,EAAKjI,OAEV,gBAACpT,EAAA,EAAD,CACIC,QAAQ,QACRV,MAAM,gBAFV,gBAIQ,IACJ,eAAC+R,GAAA,EAAD,CACIxM,OAAO,WACPZ,OAAQmX,WAZT/c,SC7GjCid,GAAqB,WACvB,MAA2BxE,eAAnB7S,EAAR,EAAQA,OACR,OADA,EAAgBsC,QACAtC,EAEZ,gBAACsD,GAAA,EAAD,CAAKoH,GAAI,EAAG1P,QAAQ,OAApB,UACI,eAACsI,GAAA,EAAD,CAAKrH,KAAK,IAAV,SACI,eAAC8W,GAAA,EAAD,UACI,gBAACjL,GAAA,EAAD,WACI,gBAACxE,GAAA,EAAD,CAAKtI,QAAQ,OAAb,UACI,eAAC,GAAD,CAAQgF,OAAQA,IAChB,gBAACsD,GAAA,EAAD,CAAK0E,GAAI,EAAG/L,KAAK,IAAjB,UACI,gBAACH,EAAA,EAAD,CAAYC,QAAQ,KAApB,UACKiE,EAAOhG,WADZ,IACyBgG,EAAO/F,aAEhC,gBAAC6B,EAAA,EAAD,CAAYC,QAAQ,QAApB,qBACSiE,EAAO5F,GADhB,OAEK4F,EAAOhE,MAFZ,MAEsB,IAClB,eAACuH,GAAA,EAAD,CACI3C,OAAO,aACP4C,UAAU,YACVC,KAAK,OAHT,SAKI,eAACwJ,GAAA,EAAD,CAAWrM,OAAO,iBAI9B,eAAC0C,GAAA,EAAD,UACI,eAACC,GAAA,EAAD,CACI3C,OAAO,aACP4C,UAAU,YACVC,KAAK,OAHT,SAKI,eAAC,GAAD,WAIZ,eAAC8P,GAAA,EAAD,CACI3H,OAAO,aACPpI,UAAU,eACVgQ,KAAM,CAAE3N,MAAO,OAAQP,MAAO,QAHlC,SAKI,eAAC,GAAD,CAAewJ,YAAU,EAACtL,UAAU,sBAKpD,eAAC,GAAD,CAAcxD,OAAQA,OA5CC,M,4FCJ7BpF,GAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCuK,UAAU,aACNC,OAAQ,EACRC,WAAYzK,EAAMK,QAAQ,GAC1BuG,YAAa5G,EAAMK,QAAQ,GAC3BqC,SAAU,QACT1C,EAAMG,YAAYC,KAAK,MAAQ,CAC5BF,QAAS,aAKRsc,GAAoB,WAC7B,IAAM1b,EAAUhB,KACRuG,EAAasE,eAAbtE,SACR,EAAsBuE,aAClB,OACA,CAAEC,KAAM,EAAGC,QAAS,IACpB,CAAEC,MAAO,OAAQP,MAAO,QAHpBnN,EAAR,EAAQA,KAAMkK,EAAd,EAAcA,IAKd,OACI,uBAAKxG,UAAWD,EAAQyJ,UAAxB,UACI,eAACS,GAAA,EAAD,IACA,gBAACC,GAAA,EAAD,CAAYnC,MAAM,YAAYrG,KAAM,eAAC,KAAD,IAApC,UACI,eAACyI,GAAA,EAAD,CACIpC,MAAM,QACNqC,MAAO,CACHsR,cAAeC,eAAiBlH,cAChCmH,mBAAene,KAGvB,eAAC0M,GAAA,EAAD,CACIpC,MAAM,YACNqC,MAAO,CACHsR,cAAeG,aAAY,IAAIxH,MAAQI,cACvCmH,mBAAene,KAGvB,eAAC0M,GAAA,EAAD,CACIpC,MAAM,mBACNqC,MAAO,CACHsR,mBAAeje,EACfme,cAAeC,aAAY,IAAIxH,MAAQI,iBAG/C,eAACtK,GAAA,EAAD,CACIpC,MAAM,oBACNqC,MAAO,CACHsR,mBAAeje,EACfme,cAAeE,aAAa,IAAIzH,MAAQI,iBAGhD,eAACtK,GAAA,EAAD,CACIpC,MAAM,oBACNqC,MAAO,CACHsR,mBAAeje,EACfme,cAAeG,aACXD,aAAa,IAAIzH,MACjB,GACFI,oBAId,gBAACvK,GAAA,EAAD,CAAYnC,MAAM,SAASrG,KAAM,eAAC,KAAD,IAAjC,UACI,eAACyI,GAAA,EAAD,CACIpC,MACI,+CACS,eAAC,GAAD,CAAQtL,OAAO,YAG5B2N,MAAO,CACH3N,OAAQ,UAGhB,eAAC0N,GAAA,EAAD,CACIpC,MACI,+CACS,eAAC,GAAD,CAAQtL,OAAO,YAG5B2N,MAAO,CACH3N,OAAQ,UAGhB,eAAC0N,GAAA,EAAD,CACIpC,MACI,8CACQ,eAAC,GAAD,CAAQtL,OAAO,WAG3B2N,MAAO,CACH3N,OAAQ,SAGhB,eAAC0N,GAAA,EAAD,CACIpC,MACI,sDACgB,eAAC,GAAD,CAAQtL,OAAO,mBAGnC2N,MAAO,CACH3N,OAAQ,oBAIpB,eAACyN,GAAA,EAAD,CAAYnC,MAAM,OAAOrG,KAAM,eAAC,KAAD,IAA/B,SACK8E,GACGlK,GACAkK,EAAI/C,KAAI,SAAAlF,GAAE,OACN,eAAC4L,GAAA,EAAD,CAEIpC,MAAO,eAAC,GAAD,CAAS5D,OAAQ7H,EAAKiC,KAC7B6L,MAAO,CAAEC,KAAM,CAAC9L,KAFXA,QAMrB,eAAC2L,GAAA,EAAD,CACInC,MAAM,kBACNrG,KAAM,eAAC,KAAD,IAFV,SAII,eAACyI,GAAA,EAAD,CACIpC,MAAM,KACNqC,MAAO,CACHE,SAAUhF,GAAYA,EAAS/G,YCzGjDyd,GAAqB,WACvB,MAAyD1V,eAAjDhK,EAAR,EAAQA,KAAMkK,EAAd,EAAcA,IAAKC,EAAnB,EAAmBA,OAAQF,EAA3B,EAA2BA,aAAcG,EAAzC,EAAyCA,YAGnC0N,EAAMC,KAAKD,MACjB,OAAe,IAAX3N,EACO,eAACwV,GAAA,EAAD,CAAmBC,qBAAmB,EAACC,kBAAgB,IAI9D,eAAC9Y,GAAA,EAAD,UACKmD,EAAI/C,KAAI,SAAAlF,GACL,IAAM0Z,EAAU3b,EAAKiC,GACrB,OACI,gBAAC2Z,GAAA,EAAD,CACIrV,QAAM,EAENS,UAAWqD,KACX5F,GAAE,oBAAexC,EAAf,SAJN,UAMI,eAACuE,GAAA,EAAD,UACI,eAACmE,GAAA,EAAD,CACIC,KAAK,QACLC,QAAST,EAAYU,SAAS7I,GAC9B8I,UAAW,EACXC,eAAa,EACbpG,QAAS,SAAAqG,GACLA,EAAEC,kBACFjB,EAAahI,QAIzB,eAAC6Z,GAAA,EAAD,UACI,eAAC,GAAD,CAAQjU,OAAQ8T,MAEpB,eAACI,GAAA,EAAD,CACIxY,QAAO,UAAKoY,EAAQ9Z,WAAb,YAA2B8Z,EAAQ7Z,WAC1CsB,UACI,kDACSuY,EAAQ1Z,GADjB,OAEK0Z,EAAQ9X,MAFb,MAEuB,IACnB,eAACuH,GAAA,EAAD,CACIvD,OAAQ8T,EACRlT,OAAO,aACP4C,UAAU,YACV4D,SAAS,aACT3D,MAAM,EALV,SAOI,eAACwJ,GAAA,EAAD,CAAWrM,OAAO,WACJ,MACfkT,EAAQ5P,UAAV,YACQ4P,EAAQ5P,SADhB,WAED,eAAC,GAAD,CAAUlE,OAAQ8T,SAI9B,eAACK,GAAA,EAAD,UACI,gBAACrY,EAAA,EAAD,CAAYC,QAAQ,QAAQV,MAAM,gBAAlC,0BACkB,IACb+Y,aACG,IAAIlE,KAAK4D,EAAQjE,WACjBI,GACD,IALP,OAMQ,eAAC,GAAD,CAAQ3X,OAAQwb,EAAQxb,gBA/C/B8B,SAyDvB6d,GAAWpd,aAAW,SAAAC,GAAK,MAAK,CAClC0L,aAAc,CACVjB,WAAYzK,EAAMK,QAAQ,IAE9BsL,UAAU,aACNzL,QAAS,SACRF,EAAMG,YAAYyL,GAAG,MAAQ,CAC1B1L,QAAS,aAIfkd,GAAqB,SAAC1b,GACxB,IAAMZ,EAAUqc,KAChB,OACI,gBAAClR,GAAA,EAAD,WACI,sBAAKlL,UAAWD,EAAQ6K,UAAxB,SACI,eAACX,GAAA,EAAD,MAEJ,eAACkB,GAAA,EAAD,CAAYC,OAAQ,CAAC,KAAM,YAAa,aAAc,eACtD,eAACC,GAAA,EAAD,IACA,eAAC,KAAD,eAAkB1K,IAClB,eAAC2K,GAAA,EAAD,CACIC,SAAS,YACTrL,QAAQ,YACR6H,MAAM,cACN/H,UAAWD,EAAQ4K,mB,uECtH7B2R,GAAS,kBAAM,eAAC7U,GAAA,EAAD,CAAK9D,MAAO,GAAIL,UAAU,UAEzCiZ,GAAqB,WACvB,MAAiCC,eAAzBrY,EAAR,EAAQA,OAAQsC,EAAhB,EAAgBA,OAAQgW,EAAxB,EAAwBA,KACxB,OAAKhW,GAAWtC,EAEZ,gBAACsD,GAAA,EAAD,CAAKoH,GAAI,EAAG1P,QAAQ,OAApB,UACI,eAACsI,GAAA,EAAD,CAAKrH,KAAK,IAAV,SACI,eAACsc,GAAA,EAAD,CACIvY,OAAQA,EACR6V,SAAS,OACTyC,KAAMA,EACN5K,OAAQ,SAAA8K,GAAS,OACb,gBAACzF,GAAA,EAAD,WACI,eAACjL,GAAA,EAAD,UACI,eAACxE,GAAA,EAAD,UACI,gBAACA,GAAA,EAAD,CAAKtI,QAAQ,OAAb,UACI,eAACsI,GAAA,EAAD,CAAKmV,GAAI,EAAT,SACI,eAAC,GAAD,CAAQzY,OAAQA,MAEpB,gBAACsD,GAAA,EAAD,CAAKrH,KAAK,IAAIyO,IAAK,EAAnB,UACI,gBAACpH,GAAA,EAAD,CAAKtI,QAAQ,OAAb,UACI,eAAC8a,GAAA,EAAD,CAAWlV,OAAO,eAClB,eAAC,GAAD,IACA,eAACkV,GAAA,EAAD,CAAWlV,OAAO,iBAEtB,gBAAC0C,GAAA,EAAD,CAAKtI,QAAQ,OAAb,UACI,eAAC8a,GAAA,EAAD,CAAWlV,OAAO,UAClB,eAAC,GAAD,IACA,eAACyV,GAAA,EAAD,CACIzV,OAAO,aACP4C,UAAU,YAFd,SAII,eAAC+D,GAAA,EAAD,CAAmBC,WAAW,cAGtC,eAACY,GAAA,EAAD,IACA,eAAC9E,GAAA,EAAD,CAAKoH,GAAI,EAAGlL,MAAO,IAAnB,SACI,eAACsW,GAAA,EAAD,CACIlV,OAAO,QACP8K,WAAS,MAGjB,gBAACpI,GAAA,EAAD,CAAKtI,QAAQ,OAAb,UACI,eAAC8a,GAAA,EAAD,CAAWlV,OAAO,kBAClB,eAAC,GAAD,IACA,eAACkV,GAAA,EAAD,CAAWlV,OAAO,qBAEtB,eAACwH,GAAA,EAAD,IACA,gBAAC9E,GAAA,EAAD,CAAKoH,GAAI,EAAGlL,MAAO,IAAnB,UACI,eAACsW,GAAA,EAAD,CACIlV,OAAO,aACPkP,WAAS,EACTpE,WAAS,IAEb,eAACoK,GAAA,EAAD,CACIlV,OAAO,SACP8K,WAAS,IAEb,eAACgN,GAAA,EAAD,CAAc9X,OAAO,gCAMzC,eAAC+X,GAAA,EAAD,eACQC,KAAKJ,EAAW,CAEhB,cACA,6BACA,uBACA,kBACA,sBACA,gBACA,0BACA,cACA,eACA,eACA,kBACA,aACA,oBAOxB,eAAC,GAAD,CAAcxY,OAAQA,EAAQyD,KAAK,YAnFZ,MCF7B7I,GAAYC,YAAW,CACzB+M,OAAQ,CACJ5M,QAAS,eACTuK,WAAY,MACZ,gBAAiB,CACbA,WAAY,MAuFlBsC,GAAe,SAAC,GAAD,IAAG7J,EAAH,EAAGA,SAAH,OAEjB,eAAC8J,GAAA,EAAD,UACI,gBAACxE,GAAA,EAAD,CAAKtI,QAAQ,OAAb,UACI,eAACsI,GAAA,EAAD,CAAKyE,WAAY,EAAjB,SACI,eAAC,KAAD,MAEJ,eAACzE,GAAA,EAAD,CAAK0E,GAAI,EAAG/L,KAAK,IAAIgM,SAAU,IAA/B,SACKjK,UAMXkK,GAAgB,kBAClB,eAAC5E,GAAA,EAAD,CAAK6E,GAAI,EAAT,SACI,eAACC,GAAA,EAAD,O,qBC1HO,IACX+M,KHuIuB,SAAC3Y,GACxB,IAAQ2E,EAAasE,eAAbtE,SACR,OAAOA,EACH,eAAC,KAAD,2BACQ3E,GADR,IAEI4Y,QAAS,eAAC,GAAD,IACTC,MAAO,eAAC,GAAD,IACPzP,QAAS,GACT2P,WAAY,eAACC,GAAA,EAAD,CAAYC,mBAAoB,CAAC,GAAI,GAAI,GAAI,OACzDH,oBAAqB,CAAEnP,SAAQ,OAAEhF,QAAF,IAAEA,OAAF,EAAEA,EAAU/G,IAC3CoZ,KAAM,CAAE3N,MAAO,YAAaP,MAAO,QAPvC,SASI,eAAC,GAAD,OAEJ,MGpJJqR,KLQuB,SAACna,GAAD,OACvB,eAACoa,GAAA,EAAD,2BAAcpa,GAAd,aACI,eAAC,GAAD,QKTJka,KFqGuB,SAACla,GAAD,OACvB,eAACqc,GAAA,EAAD,2BAAcrc,GAAd,aACI,eAAC,GAAD,QEtGJ9D,ODqByB,SAAC8D,GAC1B,IAAMZ,EAAUhB,KACRuG,EAAasE,eAAbtE,SAER,IAAKA,EAAU,OAAO,KAStB,OACI,eAACuU,GAAA,EAAD,2BAAYlZ,GAAZ,IAAmB4Y,SAAS,EAA5B,SACI,gBAACO,GAAA,EAAD,CACIxW,UAAW0I,GACXgO,SAAS,OACTD,cAZgB,iBAAO,CAAEzP,SAAUhF,IAAQ,OAAIA,QAAJ,IAAIA,OAAJ,EAAIA,EAAU/G,MAazD0e,UAZM,SAAC3gB,GAAD,mBAAC,eACZA,GADW,IAEd0X,UAAW,IAAIK,KACfhK,KAAM,MAKF,UAMI,eAAC4P,GAAA,EAAD,CACIlV,OAAO,aACPmV,SAAU,CAACC,gBACXE,cAAe3V,aAAK3E,EAAQgM,OAAQ,iBAExC,eAACkO,GAAA,EAAD,CACIlV,OAAO,YACPmV,SAAU,CAACC,gBACXE,cAAeta,EAAQgM,SAE3B,eAAC,GAAD,IACA,eAACkO,GAAA,EAAD,CACIlV,OAAO,QACPsV,cAAe3V,aAAK3E,EAAQgM,OAAQ,iBAExC,eAACyO,GAAA,EAAD,CACIzV,OAAO,aACP4C,UAAU,YACV0S,cAAeta,EAAQgM,OAH3B,SAKI,eAACL,GAAA,EAAD,CAAmBC,WAAW,WAElC,eAAC,GAAD,IACA,eAACsO,GAAA,EAAD,CACIlV,OAAO,QACP8K,WAAS,IAEb,eAACoK,GAAA,EAAD,CAAWlV,OAAO,gBACdsV,cAAe3V,aAAK3E,EAAQgM,OAAQ,iBACxC,eAACkO,GAAA,EAAD,CAAWlV,OAAO,gBACdsV,cAAeta,EAAQgM,SAC3B,eAAC,GAAD,IACA,eAACkO,GAAA,EAAD,CACIlV,OAAO,aACPkP,WAAS,EACTpE,WAAS,IAEb,eAACoK,GAAA,EAAD,CACIlV,OAAO,SACP8K,WAAS,IAEb,eAAC2K,GAAA,EAAD,CACIzV,OAAO,WACP4C,UAAU,QACVI,MAAM,kBACN4S,YAAY,EAJhB,SAMI,eAACP,GAAA,EAAD,CACIzO,WAAY,SAACiP,GAAD,gBACLA,EAAMzc,WADD,YACeyc,EAAMxc,gBAIzC,eAACye,GAAA,EAAD,CAAc9X,OAAO,0BC9FjCrD,KAAMwb,MCKGC,GAAY,SAAC,GAAD,IAAGhZ,EAAH,EAAGA,OAAH,IAAWyD,YAAX,MAAkB,OAAlB,SACrB,eAACH,GAAA,EAAD,CAAK0E,GAAI,EAAGxI,MAAO,IAAKhC,SAAU,IAAlC,SACI,eAAC8F,GAAA,EAAD,CAAKjC,UAAU,SAAS8G,GAAI,EAA5B,SACc,SAAT1E,EACG,eAAC8I,GAAA,EAAD,CACInF,SAAS,SACTpH,OAAQA,EACR4D,MAAM,cAGV,eAAC4I,GAAA,EAAD,CACIpF,SAAS,SACTpH,OAAQA,EACR4D,MAAM,mBCRpBqV,GAAkB,WACpB,MAA2BpG,eAAnB7S,EAAR,EAAQA,OACR,OADA,EAAgBsC,QACAtC,EAEZ,gBAACsD,GAAA,EAAD,CAAKoH,GAAI,EAAG1P,QAAQ,OAApB,UACI,eAACsI,GAAA,EAAD,CAAKrH,KAAK,IAAV,SACI,eAAC8W,GAAA,EAAD,UACI,eAACjL,GAAA,EAAD,UACI,gBAACxE,GAAA,EAAD,CAAKtI,QAAQ,OAAb,UACI,gBAACsI,GAAA,EAAD,CAAK0E,GAAI,EAAG/L,KAAK,IAAjB,UACI,gBAACH,EAAA,EAAD,CAAYC,QAAQ,KAApB,UACKiE,EAAOhG,WADZ,IACyBgG,EAAO/F,aAEhC,gBAAC6B,EAAA,EAAD,CAAYC,QAAQ,QAApB,UACKiE,EAAOhE,MADZ,MACsB,IAClB,eAACuH,GAAA,EAAD,CACI3C,OAAO,aACP4C,UAAU,YACVC,KAAK,OAHT,SAKI,eAACwJ,GAAA,EAAD,CAAWrM,OAAO,iBAI9B,eAAC0C,GAAA,EAAD,UACI,eAACC,GAAA,EAAD,CACI3C,OAAO,aACP4C,UAAU,YACVC,KAAK,OAHT,SAKI,eAAC,GAAD,iBAOxB,eAAC,GAAD,CAAWzD,OAAQA,OAnCI,M,+BCxBtBkZ,GAAW,CACpB,CAAC9e,GAAI,UAAW2D,KAAM,UAAW1C,MAAO,WACxC,CAACjB,GAAI,OAAQ2D,KAAM,OAAQ1C,MAAO,WAClC,CAACjB,GAAI,YAAa2D,KAAM,YAAa1C,MAAO,YCEnC8d,GAAa,SAAC,GAAoC,IAAlC7gB,EAAiC,EAAjCA,OACnB8gB,EAAaF,GAASG,MAAK,SAAAC,GAAI,OAAIA,EAAKlf,KAAO9B,KAC/CihB,EAAcH,EAAaA,EAAW/d,MAAQ,OACpD,OACI,eAACiI,GAAA,EAAD,CACI9D,MAAO,GACPC,OAAQ,GACRzE,QAAQ,eACRyN,aAAc,EACdC,QAAS6Q,EACTpa,UAAU,UCMTqa,GAAiB,WAC1B,IAAQrY,EAAasE,eAAbtE,SACR,OACI,gBAACmC,GAAA,EAAD,CAAK9D,MAAM,OAAO8F,MAAM,KAAK5D,YAAY,MAAzC,UACI,eAACoE,GAAA,EAAD,IACA,gBAACC,GAAA,EAAD,CAAYnC,MAAM,WAAWrG,KAAM,eAAC,KAAD,IAAnC,UACI,eAACyI,GAAA,EAAD,CACIpC,MAAM,QACNqC,MAAO,CACHwT,aAAcjC,eAAiBlH,cAC/BoJ,kBAAcpgB,KAGtB,eAAC0M,GAAA,EAAD,CACIpC,MAAM,YACNqC,MAAO,CACHwT,aAAc/B,aAAY,IAAIxH,MAAQI,cACtCoJ,kBAAcpgB,KAGtB,eAAC0M,GAAA,EAAD,CACIpC,MAAM,mBACNqC,MAAO,CACHwT,kBAAcngB,EACdogB,aAAchC,aAAY,IAAIxH,MAAQI,iBAG9C,eAACtK,GAAA,EAAD,CACIpC,MAAM,oBACNqC,MAAO,CACHwT,kBAAcngB,EACdogB,aAAc/B,aAAa,IAAIzH,MAAQI,iBAG/C,eAACtK,GAAA,EAAD,CACIpC,MAAM,oBACNqC,MAAO,CACHwT,kBAAcngB,EACdogB,aAAc9B,aACVD,aAAa,IAAIzH,MACjB,GACFI,oBAId,eAACvK,GAAA,EAAD,CAAYnC,MAAM,SAASrG,KAAM,eAAC,KAAD,IAAjC,SACK2b,GAAS5Z,KAAI,SAAAhH,GAAM,OAChB,eAAC0N,GAAA,EAAD,CACApC,MACI,uCACKtL,EAAOyF,KADZ,IACkB,eAAC,GAAD,CAAYzF,OAAQA,EAAO8B,QAGjD6L,MAAO,CACH3N,OAAQA,EAAO8B,WAK3B,eAAC2L,GAAA,EAAD,CACInC,MAAM,kBACNrG,KAAM,eAAC,KAAD,IAFV,SAII,eAACyI,GAAA,EAAD,CACIpC,MAAM,KACNqC,MAAO,CACHE,SAAUhF,GAAYA,EAAS/G,Y,+BClFjDuf,GAAY,CAAErhB,OAAQ,QAYbshB,GAVQ,SAACpd,GAAD,OACnB,eAACqd,GAAA,EAAD,2BACQrd,GADR,IAEIoH,MAAM,eACNzL,KAAMwhB,GACNpc,KAAM,eAAC,KAAD,IACN4U,aAAa,kBC+Bf2H,GAAkB,WACpB,MAAyD3X,eAAjDhK,EAAR,EAAQA,KAAMkK,EAAd,EAAcA,IAAKC,EAAnB,EAAmBA,OAAQF,EAA3B,EAA2BA,aAAcG,EAAzC,EAAyCA,YAGnC0N,EAAMC,KAAKD,MACjB,OAAe,IAAX3N,EACO,eAACwV,GAAA,EAAD,CAAmBC,qBAAmB,EAACC,kBAAgB,IAI9D,eAAC9Y,GAAA,EAAD,UACKmD,EAAI/C,KAAI,SAAAlF,GACL,IAAM+c,EAAOhf,EAAKiC,GAClB,OACI,gBAAC2Z,GAAA,EAAD,CACIrV,QAAM,EAENS,UAAWqD,KACX5F,GAAE,iBAAYxC,GAJlB,UAMI,eAACuE,GAAA,EAAD,UACI,eAACmE,GAAA,EAAD,CACIC,KAAK,QACLC,QAAST,EAAYU,SAAS7I,GAC9B8I,UAAW,EACXC,eAAa,EACbpG,QAAS,SAAAqG,GACLA,EAAEC,kBACFjB,EAAahI,QAIzB,eAAC6Z,GAAA,EAAD,UACI,eAAC,KAAD,UACI,eAAC,KAAD,QAGR,eAACC,GAAA,EAAD,CACIxY,QACI,qCACCyb,EAAKjI,SAId,eAACiF,GAAA,EAAD,UACI,gBAACrY,EAAA,EAAD,CAAYC,QAAQ,QAAQV,MAAM,gBAAlC,mBACW,IACN+Y,aACG,IAAIlE,KAAKiH,EAAK4C,UACd9J,GAEH,IAAI,eAAC,GAAD,CAAY3X,OAAQ6e,EAAK7e,gBAnCjC8B,SA6CvB4f,GAAkBnf,aAAW,SAAAC,GAAK,MAAK,CACzC0L,aAAc,CACVjB,WAAYzK,EAAMK,QAAQ,QAG5B8e,GAAkB,SAACzd,GACrB,IAAMZ,EAAUoe,KAChB,OACI,gBAACjT,GAAA,EAAD,WACI,eAACC,GAAA,EAAD,CAAYC,OAAQ,CAAC,cACrB,eAACC,GAAA,EAAD,IACA,eAAC,KAAD,eAAkB1K,IAClB,eAAC2K,GAAA,EAAD,CACIC,SAAS,SACTrL,QAAQ,YACR6H,MAAM,WACN/H,UAAWD,EAAQ4K,mBAM7B0T,GAAwB,SAAC1d,GAAD,OAC1B,gBAAC,WAAD,WACI,eAAC,GAAD,eAAoBA,IAEpB,eAAC2d,GAAA,EAAD,eAAsB3d,Q,UCzGxB5B,GAAYC,YAAW,CACzB+M,OAAQ,CACJ5M,QAAS,eACTuK,WAAY,MACZ,gBAAiB,CACbA,WAAY,MAKlB6U,GAAkB,WACpB,IAAMxe,EAAUhB,KAChB,EAAiCyd,eAAzBrY,EAAR,EAAQA,OAAQsC,EAAhB,EAAgBA,OAAQgW,EAAxB,EAAwBA,KACxB,OAAKhW,GAAWtC,EAEZ,gBAACsD,GAAA,EAAD,CAAKoH,GAAI,EAAG1P,QAAQ,OAApB,UACI,eAACsI,GAAA,EAAD,CAAKrH,KAAK,IAAV,SACI,eAACsc,GAAA,EAAD,CACIvY,OAAQA,EACR6V,SAAS,OACTyC,KAAMA,EACN5K,OAAQ,SAAA8K,GAAS,OACb,gBAACzF,GAAA,EAAD,WACI,eAACjL,GAAA,EAAD,UACI,eAACxE,GAAA,EAAD,UACI,gBAACA,GAAA,EAAD,CAAKtI,QAAQ,OAAb,UACI,eAACsI,GAAA,EAAD,CAAKmV,GAAI,EAAT,SACA,eAAC,KAAD,UACI,eAAC,KAAD,QAGJ,gBAACnV,GAAA,EAAD,CAAKrH,KAAK,IAAIyO,IAAK,EAAnB,UACI,eAACoL,GAAA,EAAD,CACIlV,OAAO,OACPgD,MAAM,OACNmS,SAAU,CAACC,gBACXtK,WAAS,IAEb,eAAC2O,GAAA,EAAD,CACIzZ,OAAO,WACPsV,cAAe3V,aAAK3E,EAAQgM,OAAQ,iBAExC,eAACqO,GAAA,EAAD,CACIrV,OAAO,SACPkD,QAASoV,GACThD,cAAeta,EAAQgM,SAE3B,eAACyO,GAAA,EAAD,CACIzV,OAAO,WACP4C,UAAU,QACVI,MAAM,kBACN4S,YAAY,EACZN,cAAeta,EAAQgM,OAL3B,SAOI,eAACqO,GAAA,EAAD,CACIzO,WAAY,SAACiP,GAAD,gBACLA,EAAMzc,WADD,YACeyc,EAAMxc,0BAQzD,eAAC0e,GAAA,EAAD,eACQC,KAAKJ,EAAW,CAEhB,cACA,6BACA,uBACA,kBACA,sBACA,gBACA,0BACA,cACA,eACA,eACA,kBACA,aACA,oBAOxB,eAAC,GAAD,CAAWxY,OAAQA,EAAQyD,KAAK,YAzET,MCb7B7I,GAAYC,YAAW,CACzB+M,OAAQ,CACJ5M,QAAS,eACTuK,WAAY,MACZ,gBAAiB,CACbA,WAAY,MAkDlBsC,GAAe,SAAC,GAAD,IAAG7J,EAAH,EAAGA,SAAH,OAEjB,eAAC8J,GAAA,EAAD,UACI,gBAACxE,GAAA,EAAD,CAAKtI,QAAQ,OAAb,UACI,eAACsI,GAAA,EAAD,CAAKyE,WAAY,EAAjB,SACI,eAAC,KAAD,UACI,eAAC,KAAD,QAGR,eAACzE,GAAA,EAAD,CAAK0E,GAAI,EAAG/L,KAAK,IAAIgM,SAAU,IAA/B,SACKjK,U,UCpFF,IACXmX,KH+HoB,SAAC3Y,GACrB,IAAQ2E,EAAasE,eAAbtE,SACR,OAAOA,EACH,eAAC,KAAD,2BACQ3E,GADR,IAEI4Y,QAAS,eAAC,GAAD,IACTC,MAAO,eAAC,GAAD,IACPiF,kBAAmB,eAAC,GAAD,IACnB1U,QAAS,GACT2P,WAAY,eAACC,GAAA,EAAD,CAAYC,mBAAoB,CAAC,GAAI,GAAI,GAAI,OACzDH,oBAAqB,CAAEnP,SAAQ,OAAEhF,QAAF,IAAEA,OAAF,EAAEA,EAAU/G,GAAI9B,OAAQ,WACvDkb,KAAM,CAAE3N,MAAO,WAAYP,MAAO,QARtC,SAUI,eAAC,GAAD,OAEJ,MG7IJqR,KROoB,SAACna,GAAD,OACpB,eAACoa,GAAA,EAAD,2BAAcpa,GAAd,aACI,eAAC,GAAD,QQRJka,KF2GoB,SAACla,GAAD,OACpB,eAACqc,GAAA,EAAD,2BAAcrc,GAAd,aACI,eAAC,GAAD,QE5GJ9D,OD0BsB,SAAC8D,GACvB,IAAMZ,EAAUhB,KACRuG,EAAasE,eAAbtE,SAER,IAAKA,EAAU,OAAO,KAWtB,OACI,eAACuU,GAAA,EAAD,2BAAYlZ,GAAZ,IAAmB4Y,SAAS,EAA5B,SACI,gBAACO,GAAA,EAAD,CACIxW,UAAW0I,GACXgO,SAAS,OACTD,cAdS,iBAAO,CACxBmE,SAAU,IAAI7J,KACd5X,OAAQ,YAaAwgB,UAXM,SAAC3gB,GAAD,mBAAC,eACZA,GADW,IAEdgO,SAAUhF,IAAQ,OAAIA,QAAJ,IAAIA,OAAJ,EAAIA,EAAU/G,OAK5B,UAMI,eAAC0b,GAAA,EAAD,CACIlV,OAAO,OACPgD,MAAM,OACNmS,SAAU,CAACC,gBACXtK,WAAS,IAEb,eAAC2O,GAAA,EAAD,CACIzZ,OAAO,WACPsV,cAAe3V,aAAK3E,EAAQgM,OAAQ,iBAExC,eAACqO,GAAA,EAAD,CACIrV,OAAO,SACPkD,QAASoV,GACThD,cAAeta,EAAQgM,gBC7DvCrK,K,QAAMgd,G,yFCHJ3f,GAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,KAAM,CACFiJ,aAAclJ,EAAMK,QAAQ,IAEhCqf,YAAa,CACTvZ,QAASnG,EAAMK,QAAQ,GACvBH,QAAS,QAEbyf,SAAU,CACNlV,WAAYzK,EAAMK,QAAQ,QAIrBuf,GAAW,SAAC,GAAoD,IAAlDhG,EAAiD,EAAjDA,KAAM/B,EAA2C,EAA3CA,MACvB/W,EAAUhB,KACVib,EAAW8E,eACjB,IAAKjG,EAAM,OAAO,KAElB,IAAM5I,EAAc,WAChB+J,EAAS,UAAD,OAAWnB,EAAKta,GAAhB,WAEZ,OACI,eAAC,KAAD,CAAWwgB,YAAaC,OAAOnG,EAAKta,IAAKuY,MAAOA,EAAhD,SACK,SAACmI,EAAUC,GAAX,OACG,0DACIlf,UAAWD,EAAQb,MACf+f,EAASE,gBACTF,EAASG,iBAHjB,IAIIxe,IAAKqe,EAASI,SACdne,QAAS+O,EALb,SAOI,eAACiH,GAAA,EAAD,CACIhP,MAAO,CACHoX,QAASJ,EAASK,WAAa,GAAM,EACrCtC,UAAWiC,EAASK,WACd,gBACA,IAEV/d,UAAW0d,EAASK,WAAa,EAAI,EAPzC,SASI,gBAAC9X,GAAA,EAAD,CAAK+X,EAAG,EAAGrgB,QAAQ,OAAnB,UACI,eAACuI,GAAA,EAAD,CACI3C,OAAO,aACPZ,OAAQ0U,EACRlR,UAAU,YACVlM,SAAS,QACT8P,SAAS,SALb,SAOI,eAAC,GAAD,CAAWnH,KAAK,YAEpB,gBAACqD,GAAA,EAAD,CAAK0E,GAAI,EAAT,UACI,eAAClM,EAAA,EAAD,CAAYC,QAAQ,QAAQuf,cAAY,EAAxC,SACK5G,EAAK3W,OAEV,gBAACjC,EAAA,EAAD,CACIC,QAAQ,UACRV,MAAM,gBAFV,UAIKqZ,EAAKE,OAAOC,eAAe,QAAS,CACjCC,SAAU,UACV/Q,MAAO,WACPgR,SAAU,MACVC,gBAAiB,eACjBC,yBAA0B,IATlC,KAWOP,EAAK1I,uBChEtCpR,GAAYC,YAAW,CACzBE,KAAM,CACFkB,KAAM,EACN8L,WAAY,EACZ+I,cAAe,GACfpR,gBAAiB,UACjB,gBAAiB,CACbhC,YAAa,EACb6d,oBAAqB,GAEzB,eAAgB,CACZ9M,aAAc,EACd+M,qBAAsB,IAG9BC,UAAW,CACPzgB,QAAS,OACT+F,cAAe,SACf0H,aAAc,EACdxH,QAAS,EACT,mBAAoB,CAChBvB,gBAAiB,cAKhBgc,GAAa,SAAC,GAQpB,IAPH/G,EAOE,EAPFA,MACAgH,EAME,EANFA,QACAxjB,EAKE,EALFA,KAMMyD,EAAUhB,KAChB,OACI,uBAAKiB,UAAWD,EAAQb,KAAxB,UACI,eAACe,EAAA,EAAD,CAAY8f,MAAM,SAAS7f,QAAQ,YAAnC,SAEK6R,GAAW+G,KAEhB,eAAC,KAAD,CAAWkH,YAAalH,EAAxB,SACK,SAACmH,EAAmBf,GAApB,OACG,+CACIte,IAAKqf,EAAkBZ,UACnBY,EAAkBC,gBAF1B,IAGIlgB,UACID,EAAQ6f,WACPV,EAASiB,eAAiB,kBAAoB,IALvD,UAQKL,EAAQrc,KAAI,SAAClF,EAAIuY,GAAL,OACT,eAAC,GAAD,CAAmBA,MAAOA,EAAO+B,KAAMvc,EAAKiC,IAA7BA,MAElB0hB,EAAkBG,uBC5CrCC,GAA8BvO,GAAOwO,QACvC,SAACC,EAAKzH,GAAN,mBAAC,eAAqByH,GAAtB,kBAA4BzH,EAAQ,OACpC,IAGE0H,GAAmB,SACrBha,EACAlK,GAGA,IAAMmkB,EAAUja,EAAI8Z,QAChB,SAACI,EAAKniB,GAEF,OADAmiB,EAAIpkB,EAAKiC,GAAIua,OAAO6H,KAAKpiB,GAClBmiB,IAEX5O,GAAOwO,QAAO,SAACC,EAAKzH,GAAN,mBAAC,eAAqByH,GAAtB,kBAA4BzH,EAAQ,OAAO,KAQ7D,OALAhH,GAAO8O,SAAQ,SAAA9H,GACX2H,EAAQ3H,GAAS2H,EAAQ3H,GAAOnB,MAC5B,SAAChc,EAAeklB,GAAhB,OAAkCvkB,EAAKX,GAAGmb,MAAQxa,EAAKukB,GAAG/J,YAG3D2J,GAGEK,GAAkB,WAC3B,MAQIxa,eAPAhK,EADJ,EACIA,KACAkK,EAFJ,EAEIA,IACAC,EAHJ,EAGIA,OACAqD,EAJJ,EAIIA,KACAC,EALJ,EAKIA,QACAgX,EANJ,EAMIA,YACAC,EAPJ,EAOIA,aAGJ,EAA0B5a,mBACtBK,EAAS+Z,GAAiBha,EAAKlK,GAAQ+jB,IAD3C,oBAAOzL,EAAP,KAAcqM,EAAd,KAIM5jB,EAAe6jB,qBAAWC,MAGhC,EAAkBC,aAAY,CAC1B3lB,SAAU,QACV0U,KAAM,UACNkR,QAAS,CACL3H,WAAY,CAAE5P,OAAMC,WACpB4N,KAAMoJ,EACNtS,OAAQuS,KANTrN,EAAP,qBAoBA,GATA2N,qBAAU,WACN,GAAK7a,EAAL,CACA,IAAM8a,EAAWf,GAAiBha,EAAKlK,GACnCklB,KAAQ5M,EAAO2M,IAGnBN,EAASM,MACV,CAACjlB,EAAMkK,EAAKC,KAEVA,EAAQ,OAAO,KAEpB,IAAMgb,EAA6B,uCAAG,WAAMC,GAAN,+CAAA/lB,EAAA,yDAC1BgmB,EAAqCD,EAArCC,YAAa5c,EAAwB2c,EAAxB3c,OAAQga,EAAgB2C,EAAhB3C,YAExB4C,EAH6B,oDAQ9BA,EAAY3B,cAAgBjb,EAAOib,aACnC2B,EAAY7K,QAAU/R,EAAO+R,MATC,oDAc9B/R,EAAOib,cAAgB2B,EAAY3B,YAdL,wBAiBxB4B,EAAS9Y,MAAMC,KAAK6L,EAAM7P,EAAOib,cACjC6B,EAAavlB,EAAKslB,EAAO7c,EAAO+R,QAChCgL,EAAkBxlB,EAAKslB,EAAOD,EAAY7K,QAIhD8K,EAAOG,OAAOhd,EAAO+R,MAAO,GAE5B8K,EAAOG,OAAOJ,EAAY7K,MAAO,EAAGkL,OAAOjD,IAC3CkC,EAAS,2BACFrM,GADC,kBAEH7P,EAAOib,YAAc4B,KA5BI,UAiCMvkB,EAAa7B,QAAQ,QAAS,CAC9Dmc,KAAM,CAAE3N,MAAO,QAASP,MAAO,OAC/BiQ,WAAY,CAAE5P,KAAM,EAAGC,QAAS,KAChC0E,OAAQ,CAAEqK,MAAO/T,EAAOib,eApCE,oBAiChBiC,EAjCgB,EAiCtB3lB,OAMJyI,EAAO+R,MAAQ6K,EAAY7K,OAvCD,kCA6CpB1a,QAAQ8lB,IAAR,uBAECD,EACExT,QACG,SAAAoK,GAAI,OACAA,EAAK/B,OAASgL,EAAgBhL,OAC9B+B,EAAK/B,MAAQ+K,EAAW/K,SAE/BrT,KAAI,SAAAoV,GAAI,OACLxb,EAAaN,OAAO,QAAS,CACzBwB,GAAIsa,EAAKta,GACTjC,KAAM,CAAEwa,MAAO+B,EAAK/B,MAAQ,GAC5BqL,aAActJ,QAZxB,CAgBFxb,EAAaN,OAAO,QAAS,CACzBwB,GAAIsjB,EAAWtjB,GACfjC,KAAM,CAAEwa,MAAOgL,EAAgBhL,OAC/BqL,aAAcN,OAhEI,QAoE1BlO,IApE0B,yCA2EpBvX,QAAQ8lB,IAAR,uBAECD,EACExT,QACG,SAAAoK,GAAI,OACAA,EAAK/B,OAASgL,EAAgBhL,OAC9B+B,EAAK/B,MAAQ+K,EAAW/K,SAE/BrT,KAAI,SAAAoV,GAAI,OACLxb,EAAaN,OAAO,QAAS,CACzBwB,GAAIsa,EAAKta,GACTjC,KAAM,CAAEwa,MAAO+B,EAAK/B,MAAQ,GAC5BqL,aAActJ,QAZxB,CAgBFxb,EAAaN,OAAO,QAAS,CACzBwB,GAAIsjB,EAAWtjB,GACfjC,KAAM,CAAEwa,MAAOgL,EAAgBhL,OAC/BqL,aAAcN,OA9FI,QAkG1BlO,IAlG0B,uCAuGxByO,EAAetZ,MAAMC,KAAK6L,EAAM7P,EAAOib,cACvCqC,EAAoBvZ,MAAMC,KAC5B6L,EAAM+M,EAAY3B,cAEhB6B,EAAavlB,EAAK8lB,EAAard,EAAO+R,QACtCgL,EAAkBxlB,EAAK+lB,EAAkBV,EAAY7K,QAG3DsL,EAAaL,OAAOhd,EAAO+R,MAAO,GAClCuL,EAAkBN,OAAOJ,EAAY7K,MAAO,EAAGiI,GAC/CkC,EAAS,2BACFrM,GADC,uBAEH7P,EAAOib,YAAcoC,GAFlB,cAGHT,EAAY3B,YAAcqC,GAHvB,KAjHsB,UA4HpBjmB,QAAQ8lB,IAAI,CAClB7kB,EAAa7B,QAAQ,QAAS,CAC1Bmc,KAAM,CAAE3N,MAAO,QAASP,MAAO,OAC/BiQ,WAAY,CAAE5P,KAAM,EAAGC,QAAS,KAChC0E,OAAQ,CAAEqK,MAAO/T,EAAOib,eAE5B3iB,EAAa7B,QAAQ,QAAS,CAC1Bmc,KAAM,CAAE3N,MAAO,QAASP,MAAO,OAC/BiQ,WAAY,CAAE5P,KAAM,EAAGC,QAAS,KAChC0E,OAAQ,CAAEqK,MAAO6I,EAAY3B,iBArIP,4CA0HlBsC,EA1HkB,KA0HxBhmB,KACMimB,EA3HkB,KA2HxBjmB,KA3HwB,UAyIxBF,QAAQ8lB,IAAR,uBAECI,EACE7T,QAAO,SAAAoK,GAAI,OAAIA,EAAK/B,MAAQ+K,EAAW/K,SACvCrT,KAAI,SAAAoV,GAAI,OACLxb,EAAaN,OAAO,QAAS,CACzBwB,GAAIsa,EAAKta,GACTjC,KAAM,CAAEwa,MAAO+B,EAAK/B,MAAQ,GAC5BqL,aAActJ,QARxB,aAYC0J,EACE9T,QAAO,SAAAoK,GAAI,QACRiJ,GACMjJ,EAAK/B,OAASgL,EAAgBhL,SAGvCrT,KAAI,SAAAoV,GAAI,OACLxb,EAAaN,OAAO,QAAS,CACzBwB,GAAIsa,EAAKta,GACTjC,KAAM,CAAEwa,MAAO+B,EAAK/B,MAAQ,GAC5BqL,aAActJ,QAtBxB,CA0BFxb,EAAaN,OAAO,QAAS,CACzBwB,GAAIsjB,EAAWtjB,GACfjC,KAAM,CACFwa,MAAOgL,EACDA,EAAgBhL,MACfyL,EAAiBvZ,OAAS,EAC3BuZ,EAAiBC,MAAO1L,MAAQ,EAChC,EACNgC,MAAO6I,EAAY3B,aAEvBmC,aAAcN,OA7KQ,QAiL9BlO,IAjL8B,4CAAH,sDAqLnC,OACI,eAAC,KAAD,CAAiB8N,UAAWA,EAA5B,SACI,eAACha,GAAA,EAAD,CAAKtI,QAAQ,OAAb,SACK2S,GAAOrO,KAAI,SAAAqV,GAAK,OACb,eAAC,GAAD,CACIA,MAAOA,EACPgH,QAASlL,EAAMkE,GACfxc,KAAMA,GACDwc,W,oBC5QhB2J,GARQ,CACjB,QACA,cACA,gBACA,YACA,kBAG6Bhf,KAAI,SAAA0M,GAAI,MAAK,CAAE5R,GAAI4R,EAAMjO,KAAMiO,MCa1DpR,GAAYC,YAAW,CACzBE,KAAM,CACFyE,MAAO,OAIF+e,GAAa,SAAC,GAAiC,IAA/BnV,EAA8B,EAA9BA,KACnBxN,EAAUhB,KACVib,EAAW8E,eACXzhB,EAAeslB,eACbrd,EAAasE,eAAbtE,SA8BR,OACI,eAAC+J,GAAA,EAAD,CAAQ9B,KAAMA,EAAM6B,QA7BJ,WAChB4K,EAAS,WA4BT,SACI,eAACH,GAAA,EAAD,CACIpe,SAAS,QACT8P,SAAS,SACTvL,UAAWD,EAAQb,KACnBsQ,UA9BM,SAAC,GAAoC,IAA5BqJ,EAA2B,EAAjCvc,KACjB0d,EAAS,UAET3c,EACK7B,QAAQ,QAAS,CACdke,WAAY,CAAE5P,KAAM,EAAGC,QAAS,IAChC4N,KAAM,CAAE3N,MAAO,KAAMP,MAAO,OAC5BgF,OAAQ,CAAEqK,MAAOD,EAAKC,SAEzB8J,MAAK,gBAAShO,EAAT,EAAGtY,KAAH,OACFF,QAAQ8lB,IACJtN,EACKnG,QAAO,SAAAoU,GAAO,OAAIA,EAAQtkB,KAAOsa,EAAKta,MACtCkF,KAAI,SAAAof,GAAO,OACRxlB,EAAaN,OAAO,QAAS,CACzBwB,GAAIskB,EAAQtkB,GACZjC,KAAM,CAAEwa,MAAO+L,EAAQ/L,MAAQ,GAC/BqL,aAAcU,YASlC,SAMI,gBAAC/I,GAAA,EAAD,CAAYC,cAAe,CAAEjD,MAAO,EAAGxM,SAAUhF,IAAQ,OAAIA,QAAJ,IAAIA,OAAJ,EAAIA,EAAU/G,KAAvE,UACI,eAAC0b,GAAA,EAAD,CACIlV,OAAO,OACPgD,MAAM,YACN8H,WAAS,EACTqK,SAAU,CAACC,kBAEf,eAACF,GAAA,EAAD,CACIlV,OAAO,cACPkP,WAAS,EACT6O,KAAM,EACNjT,WAAS,IAEb,eAAC2K,GAAA,EAAD,CACIzV,OAAO,aACP4C,UAAU,YACVkI,WAAS,EACTqK,SAAU,CAACC,gBAJf,SAMI,eAACzO,GAAA,EAAD,CAAmBC,WAAW,WAElC,eAACyO,GAAA,EAAD,CACIrV,OAAO,QACPkD,QAASmK,GACTvC,WAAS,EACTqK,SAAU,CAACC,gBACX4I,aAAa,gBAEjB,eAAC3I,GAAA,EAAD,CACIrV,OAAO,OACPkD,QAASwa,GACT5S,WAAS,IAEb,eAACmT,GAAA,EAAD,CAAaje,OAAO,SAAS8K,WAAS,EAACkT,aAAc,IACrD,eAACvI,GAAA,EAAD,CACIzV,OAAO,WACP4C,UAAU,QACVI,MAAM,kBACN4S,YAAY,EACZ9K,WAAS,EALb,SAOI,eAACuK,GAAA,EAAD,CACIzO,WAAY,SAACiP,GAAD,gBACLA,EAAMzc,WADD,YACeyc,EAAMxc,wB,UC1GvDW,GAAYC,YAAW,CACzBikB,GAAI,CACAC,UAAW,OACX9d,QAAS,EACTgL,OAAQ,EACRjR,QAAS,gBAEbgkB,GAAI,CACAhkB,QAAS,SACT,UAAW,CACPkW,QAAS,QAEb,qBAAsB,CAClBA,QAAS,SAKR+N,GAAc,WACvB,MAA8B9c,eAAtBE,EAAR,EAAQA,IAAKlK,EAAb,EAAaA,KAAMmK,EAAnB,EAAmBA,OACb1G,EAAUhB,KAChB,OAAK0H,EAED,qBAAIzG,UAAWD,EAAQkjB,GAAvB,SACKzc,EAAI/C,KAAI,SAAAlF,GAAE,OACP,qBAAayB,UAAWD,EAAQojB,GAAhC,SACI,gBAACxc,GAAA,EAAD,CACIrD,UAAW6U,KACXpX,GAAE,oBAAexC,GACjB2B,QAAQ,YAHZ,UAKK5D,EAAKiC,GAAIJ,WALd,IAK2B7B,EAAKiC,GAAIH,cAN/BG,QAJD,sBAAK2J,MAAO,CAAEtE,OAAQ,UCGxC7E,GAAYC,YAAW,CACzBqkB,OAAQ,CACJhe,SAAU,WACVU,IAAK,MAIAud,GAAW,SAAC,GAAqD,IAAnD/V,EAAkD,EAAlDA,KAAMhP,EAA4C,EAA5CA,GACvByb,EAAW8E,eACX/e,EAAUhB,KAMhB,OACI,eAACsQ,GAAA,EAAD,CACI9B,KAAMA,EACN6B,QAPY,WAChB4K,EAAS,WAOLnK,WAAS,EACTzD,SAAS,KACTrM,QAAS,CAAEkF,MAAOlF,EAAQsjB,QAL9B,SAOI,eAAC1T,GAAA,EAAD,UACI,eAACoL,GAAA,EAAD,CAAUtf,SAAS,QAAQ8P,SAAS,SAAShN,GAAIA,EAAjD,SACI,eAAC,GAAD,WAOdglB,GAAkB,WACpB,IAAMpf,EAASgP,eACT9V,EAAeslB,eACf3I,EAAW8E,eACXnL,EAAUC,eAEhB,IAAKzP,EAAQ,OAAO,KAEpB,IAAM2K,EAAQ,uCAAG,8BAAAnT,EAAA,sEACuB0B,EAAa7B,QAAQ,QAAS,CAC9Dmc,KAAM,CAAE3N,MAAO,QAASP,MAAO,OAC/BiQ,WAAY,CAAE5P,KAAM,EAAGC,QAAS,KAChC0E,OAAQ,CAAEqK,MAAO3U,EAAO6b,eAJf,uBACCiC,EADD,EACL3lB,KADK,SAMPF,QAAQ8lB,IAAR,uBACCD,EACExT,QACG,SAAAoK,GAAI,OAAIA,EAAK/B,MAAQ3S,EAAO2S,SAE/BrT,KAAI,SAAAoV,GAAI,OACLxb,EAAaN,OAAO,QAAS,CACzBwB,GAAIsa,EAAKta,GACTjC,KAAM,CAAEwa,MAAO+B,EAAK/B,MAAQ,GAC5BqL,aAActJ,QATxB,CAaFxb,EAAaF,OAAO,QAAS,CACzBoB,GAAI4F,EAAO5F,GACX4jB,aAAche,OArBT,OAwBb6V,EAAS,UACTrG,IAzBa,2CAAH,qDA4Bd,OACI,qCACI,gBAAClM,GAAA,EAAD,CAAKtI,QAAQ,OAAb,UACI,gBAACsI,GAAA,EAAD,CACI9D,MAAO,IACPxE,QAAQ,OACR+F,cAAc,SACdK,WAAW,SAJf,UAMI,eAACmC,GAAA,EAAD,CACI3C,OAAO,aACP4C,UAAU,YACVC,KAAK,OAHT,SAKI,eAAC,GAAD,MAEJ,eAACF,GAAA,EAAD,CACI3C,OAAO,aACP4C,UAAU,YACVC,KAAK,OAHT,SAKI,eAACwJ,GAAA,EAAD,CACIrM,OAAO,OACPgb,MAAM,SACNzc,UAAU,aAItB,gBAACmE,GAAA,EAAD,CAAK0E,GAAI,EAAG/L,KAAK,IAAjB,UACI,gBAACqH,GAAA,EAAD,CAAKtI,QAAQ,OAAOgG,eAAe,gBAAnC,UACI,eAAClF,EAAA,EAAD,CAAYC,QAAQ,KAApB,SAA0BiE,EAAOjC,OACjC,eAAC,KAAD,CACIhC,QAAQ,YACRyY,UAAW,eAAC,KAAD,IACXzX,QAAS,SAACqG,GACNA,EAAEC,kBACFsH,KALR,uBAYJ,gBAACrH,GAAA,EAAD,CAAKtI,QAAQ,OAAO0P,GAAI,EAAxB,UACI,gBAACpH,GAAA,EAAD,CAAKtI,QAAQ,OAAOyd,GAAI,EAAG1X,cAAc,SAAzC,UACI,eAACjF,EAAA,EAAD,CAAYT,MAAM,gBAAgBU,QAAQ,QAA1C,mBAGA,eAACD,EAAA,EAAD,CAAYC,QAAQ,YAApB,SACKsjB,aAAO,IAAInP,KAAKlQ,EAAOsf,UAAW,WAI3C,gBAAChc,GAAA,EAAD,CAAKtI,QAAQ,OAAOyd,GAAI,EAAG1X,cAAc,SAAzC,UACI,eAACjF,EAAA,EAAD,CAAYT,MAAM,gBAAgBU,QAAQ,QAA1C,oBAGA,eAACD,EAAA,EAAD,CAAYC,QAAQ,YAApB,SACKiE,EAAO4U,OAAOC,eAAe,QAAS,CACnCC,SAAU,UACV/Q,MAAO,WACPgR,SAAU,MACVC,gBAAiB,eACjBC,yBAA0B,SAKtC,gBAAC3R,GAAA,EAAD,CAAKtI,QAAQ,OAAOyd,GAAI,EAAG1X,cAAc,SAAzC,UACI,eAACjF,EAAA,EAAD,CAAYT,MAAM,gBAAgBU,QAAQ,QAA1C,kBAGA,eAACD,EAAA,EAAD,CAAYC,QAAQ,YAApB,SACKiE,EAAOgM,UAIhB,gBAAC1I,GAAA,EAAD,CAAKtI,QAAQ,OAAOyd,GAAI,EAAG1X,cAAc,SAAzC,UACI,eAACjF,EAAA,EAAD,CAAYT,MAAM,gBAAgBU,QAAQ,QAA1C,mBAGA,eAACD,EAAA,EAAD,CAAYC,QAAQ,YAApB,SAEK6R,GAAW5N,EAAO2U,eAK/B,eAACrR,GAAA,EAAD,CAAKoH,GAAI,EAAGvC,GAAI,EAAhB,SACI,gBAAC7E,GAAA,EAAD,CACItI,QAAQ,OACRyd,GAAI,EACJ1X,cAAc,SACdwe,UAAW,GAJf,UAMI,eAACzjB,EAAA,EAAD,CAAYT,MAAM,gBAAgBU,QAAQ,QAA1C,sBAGA,eAAC+M,GAAA,EAAD,CACIlI,OAAO,cACP4C,UAAU,WAFd,SAII,eAAC,GAAD,WAKZ,gBAACF,GAAA,EAAD,CAAKoH,GAAI,EAAGvC,GAAI,EAAGpE,MAAO,CAAE5H,WAAY,YAAxC,UACI,eAACL,EAAA,EAAD,CAAYT,MAAM,gBAAgBU,QAAQ,QAA1C,yBAGA,eAACD,EAAA,EAAD,UAAakE,EAAOwf,iBAGxB,eAACpX,GAAA,EAAD,IAEA,eAAC9E,GAAA,EAAD,CAAKoH,GAAI,EAAT,SACI,eAAC6I,GAAA,EAAD,CACI3H,OAAO,UACPpI,UAAU,YACVgQ,KAAM,CAAE3N,MAAO,OAAQP,MAAO,QAHlC,SAKI,eAAC,GAAD,CAAe9B,UAAU,uB,8BCvN/C5I,GAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,KAAM,CACFiJ,aAAclJ,EAAMK,QAAQ,GAC5BoK,WAAYzK,EAAMK,QAAQ,QAIrBskB,GAAgB,SAAC,GAAwC,EAAtCC,SAAuC,IACnE,EAIIC,eAHA9C,EADJ,EACIA,aACA+C,EAFJ,EAEIA,iBACAC,EAHJ,EAGIA,WAEI1e,EAAasE,eAAbtE,SACFvF,EAAUhB,KAUhB,OACI,sBAAKiB,UAAWD,EAAQb,KAAxB,SACI,eAAC+kB,GAAA,EAAD,CACIC,QACI,eAACC,GAAA,EAAD,CACIhd,QAA0C,qBAA1B6Z,EAAa1W,SAC7BwF,SAfC,WACjB,IAAMsU,EAAe,eAAQpD,GACQ,qBAA1BA,EAAa1W,gBACb8Z,EAAgB9Z,SAEvB8Z,EAAgB9Z,SAAWhF,IAAQ,OAAIA,QAAJ,IAAIA,OAAJ,EAAIA,EAAU/G,IAErDylB,EAAWI,EAAiBL,IASZvkB,MAAM,UACN0C,KAAK,aAGb6F,MAAM,+BAMtB6b,GAAcS,aAAe,CAAEtf,OAAQ,YCzBhC,IA8BDuf,GAAc,CAChB,eAACC,GAAA,EAAD,CAAaxf,OAAO,IAAI8e,UAAQ,IAChC,eAAC,GAAD,CAAeA,UAAQ,IACvB,eAACzJ,GAAA,EAAD,CAAarV,OAAO,OAAOkD,QAASwa,MAGlCtE,GAAkBnf,aAAW,SAAAC,GAAK,MAAK,CACzC0L,aAAc,CACVjB,WAAYzK,EAAMK,QAAQ,QAG5BklB,GAAc,WAChB,IAAMzkB,EAAUoe,KAChB,OACI,gBAACjT,GAAA,EAAD,WACI,eAACuZ,GAAA,EAAD,IACA,eAACpZ,GAAA,EAAD,IACA,eAACC,GAAA,EAAD,CACIC,SAAS,SACTrL,QAAQ,YACR6H,MAAM,WACN/H,UAAWD,EAAQ4K,mB,qBCpEpB,IACX2O,KDgBoB,SAAC3Y,GACrB,IAAQ2E,EAAasE,eAAbtE,SACR,OAAOA,EACH,uCACI,eAAC,KAAD,2BACQ3E,GADR,IAEIoJ,QAAS,IACT4N,KAAM,CAAE3N,MAAO,QAASP,MAAO,OAC/Bib,QAASJ,GACT7K,oBAAqB,CAAEnP,SAAUhF,IAAQ,OAAIA,QAAJ,IAAIA,OAAJ,EAAIA,EAAU/G,KACvDgb,QAAS,eAAC,GAAD,IACTG,YAAY,EACZpW,UAAU,MARd,SAUI,eAAC,GAAD,OAEJ,eAAC,KAAD,CAAOqhB,KAAK,gBAAZ,SACK,gBAAGC,EAAH,EAAGA,MAAH,OAAe,eAAC,GAAD,CAAYrX,OAAQqX,OAExC,eAAC,KAAD,CAAOD,KAAK,kBAAZ,SACK,kBAAGC,EAAH,EAAGA,MAAH,OACKA,EACE,eAAC,GAAD,CAAUrX,OAAQqX,EAAOrmB,GAAE,OAAEqmB,QAAF,IAAEA,GAAF,UAAEA,EAAOlpB,cAAT,aAAE,EAAe6C,KAC5C,WAIhB,MC1CJmD,KAAMmjB,M,+BCGJ9lB,GAAYC,YAAW,CACzBP,OAAQ,CACJkF,MAAO,GACPC,OAAQ,IAGZE,IAAK,CACDC,UAAW,WAEfC,MAAO,CACHL,MAAO,GACPC,OAAQ,IAEZK,MAAO,CACHN,MAAO,GACPC,OAAQ,MAIHkhB,GAAgB,SAAC,GAMvB,IALH3gB,EAKE,EALFA,OAKE,IAJFC,YAIE,MAJK,QAIL,EACIrE,EAAUhB,KAChB,OAAKoF,GACL4gB,QAAQC,IAAI7gB,EAAOQ,OACfR,EAAOQ,MASP,eAAC,KAAD,CACIL,IAAKC,GAAyBJ,EAAOQ,MACrCH,IAAKL,EAAO8gB,MACZjlB,UAAWD,EAAQtB,OACnBgG,SAAU,CAAEzE,UAAW0E,aAAK3E,EAAQ+D,IAAK/D,EAAQqE,OAZrD,eAAC,KAAD,CACII,IAAKL,EAAO8gB,MACZjlB,UAAWD,EAAQtB,OAFvB,SAII,eAAC,KAAD,OAPY,MCxBlBM,GAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCgG,MAAO,CACHrB,OAAQ,IACRD,MAAO,IACPxE,QAAS,OACT+F,cAAe,SACfC,eAAgB,gBAChBC,QAAS,MACTC,SAAU,YAEdC,SAAU,CACNnG,QAAS,OACT+F,cAAe,SACfK,WAAY,UAEhBrD,KAAM,CACFsD,UAAW,SACXC,UAAWxG,EAAMK,QAAQ,IAE7B4lB,OAAQ,CACJ1f,UAAW,SACXC,UAAWxG,EAAMK,QAAQ,IAE7BoG,MAAO,CACHvG,QAAS,OACTgG,eAAgB,eAChBxB,MAAO,QAEXgC,WAAY,CACRxG,QAAS,OACToG,WAAY,UAEhBK,SAAU,CACNC,YAAa5G,EAAMK,QAAQ,IAE/BqF,MAAO,CACHhB,MAAO,GACPC,OAAQ,QAIHuhB,GAAc,SAAC,GAAqC,IAAnChhB,EAAkC,EAAlCA,OACpBpE,EAAUhB,KAChB,EAAkCqH,mBAAS,GAA3C,oBAAO5E,EAAP,KAAkB6E,EAAlB,KACA,OACI,eAAC,KAAD,CACI/C,UAAWqD,KACX5F,GAAI6F,aAAa,YAAazC,EAAO5F,GAAI,QACzCsI,UAAU,OACVC,aAAc,kBAAMT,EAAa,IACjCU,aAAc,kBAAMV,EAAa,IALrC,SAOI,gBAACW,GAAA,EAAD,CAAOhH,UAAWD,EAAQkF,MAAOzD,UAAWA,EAA5C,UACI,eAACiG,GAAA,EAAD,CAAKpC,SAAS,WAAWU,IAAK,GAAIC,MAAO,GAAzC,SACI,eAAC0B,GAAA,EAAD,CACIvD,OAAQA,EACRY,OAAO,aACP4C,UAAU,YACVC,KAAK,OAJT,SAMI,eAAC5C,GAAA,EAAD,CACID,OAAO,OACP5E,MAAM,QACNJ,QAASA,QAIrB,uBAAKC,UAAWD,EAAQuF,SAAxB,UACI,eAAC,GAAD,CAAenB,OAAQA,IACvB,sBAAKnE,UAAWD,EAAQmC,KAAxB,SACI,eAACuF,GAAA,EAAD,CAAKtI,QAAQ,OAAOoG,WAAW,SAA/B,SACA,eAACtF,EAAA,EAAD,CAAYC,QAAQ,YAApB,SACKiE,EAAO8gB,YAKhB,sBAAKjlB,UAAWD,EAAQmlB,OAAxB,SACI,gBAACjlB,EAAA,EAAD,CAAYC,QAAQ,QAApB,sBACc,IACV,eAACwH,GAAA,EAAD,CACIvD,OAAQA,EACRY,OAAO,YACP4C,UAAU,kBACVC,KAAK,OAJT,SAMI,eAACwJ,GAAA,EAAD,CAAWrM,OAAO,mBAMlC,uBAAK/E,UAAWD,EAAQ2F,MAAxB,UACI,uBAAK1F,UAAWD,EAAQ4F,WAAxB,UACI,eAAC,KAAD,CACInG,MAAM,WACNQ,UAAWD,EAAQ6F,WAEvB,iCACI,eAAC3F,EAAA,EAAD,CACIC,QAAQ,YACRgI,MAAO,CAAEC,cAAe,GAF5B,SAIKhE,EAAOkE,WAEZ,eAACpI,EAAA,EAAD,CAAYC,QAAQ,UAAUV,MAAM,gBAApC,SACK2E,EAAOkE,SAAW,EAAI,QAAU,eAI7C,uBAAKrI,UAAWD,EAAQ4F,WAAxB,UACI,eAAC,KAAD,CACInG,MAAM,WACNQ,UAAWD,EAAQ6F,WAEvB,iCACI,eAAC3F,EAAA,EAAD,CACIC,QAAQ,YACRgI,MAAO,CAAEC,cAAe,GAF5B,SAIKhE,EAAOihB,gBAEZ,eAACnlB,EAAA,EAAD,CAAYC,QAAQ,UAAUV,MAAM,gBAApC,SACK2E,EAAOihB,cAAgB,EAAI,aAAe,4BC9HrErmB,GAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCqJ,SAAU,CACNnJ,QAAS,OACToJ,SAAU,OACV5E,MAAQ,OACR6E,IAAK,MACLrD,eAAgB,UAEpBF,MAAO,CACHrB,OAAQ,IACRD,MAAO,IACPxE,QAAS,OACT+F,cAAe,SACfC,eAAgB,gBAChBI,WAAY,SACZH,QAAS,MACTvB,gBAAiB5E,EAAMQ,QAAQgJ,KAAK,UAOtCC,GAAkB,WACpB,IAJWC,EAAoBC,EAIzB7I,EAAUhB,KAChB,OACI,eAAC0I,GAAA,EAAD,CAAKzH,UAAWD,EAAQuI,SAAxB,UANOK,EAOI,GAPgBC,EAOZ,SAAAC,GAAG,OACV,gBAAC7B,GAAA,EAAD,CAAOhH,UAAWD,EAAQkF,MAA1B,UACA,eAACogB,GAAA,EAAD,CAAUnlB,QAAQ,SAASyD,MAAO,GAAIC,OAAQ,GAAK0hB,UAAU,SAC7D,eAACD,GAAA,EAAD,CAAUnlB,QAAQ,OAAOolB,UAAU,OAAO3hB,MAAO,MACjD,eAAC0hB,GAAA,EAAD,CAAUnlB,QAAQ,OAAOolB,UAAU,OAAO3hB,MAAO,MACjD,eAAC0hB,GAAA,EAAD,CAAUnlB,QAAQ,OAAOyD,MAAO,IAAKC,OAAQ,OAJPiF,IAPlDC,MAAMC,KAAK,CAAEC,OAAQL,IAAc,SAACM,EAAGJ,GAAJ,OAAYD,EAAGC,UAkBhDK,GAAiB,WACnB,MAAsB5C,eAAdE,EAAR,EAAQA,IAAKlK,EAAb,EAAaA,KACPyD,EAAUhB,KAEhB,OAAKyH,GAAQlK,EAGT,eAACmL,GAAA,EAAD,CAAKzH,UAAWD,EAAQuI,SAAxB,SACK9B,EAAI/C,KAAI,SAAClF,GAAD,OACL,eAAC,GAAD,CAAsB4F,OAAQ7H,EAAKiC,IAAjBA,QALJ,MAWjBgnB,GAAkB,WAC3B,MAA4Bjf,eAA5B,EAAQG,OACR,OADA,EAAgBiN,QACC,eAAC,GAAD,IAAsB,eAAC,GAAD,K,qBCnD9B8R,GAAoB,WACR5b,eAAbtE,SAAR,IACA,EAA6CuE,aACzC,kBACA,CAAEC,KAAM,EAAGC,QAAS,IACpB,CAAEC,MAAO,OAAQP,MAAO,QAHdgc,EAAd,EAAQnpB,KAAuBopB,EAA/B,EAA0Blf,IAK1B,OACI,gBAACiB,GAAA,EAAD,CAAK9D,MAAM,OAAO8F,MAAM,KAAK5D,YAAY,MAAMyG,GAAI,EAAnD,UACI,eAACrC,GAAA,EAAD,IAEA,eAACC,GAAA,EAAD,CAAYnC,MAAM,WAAWrG,KAAM,eAAC,KAAD,IAAnC,SACKgkB,GACGD,GACAC,EAAUjiB,KAAI,SAAAlF,GAAE,OACZ,eAAC4L,GAAA,EAAD,CAEIpC,MAAO,eAACD,GAAA,EAAD,CAAMC,MAAO0d,EAAWlnB,GAAI2D,KAAMkC,KAAK,UAC9CgG,MAAO,CAAEub,UAAWpnB,IAFfA,YCK3B4f,GAAkBnf,aAAW,SAAAC,GAAK,MAAK,CACzC0L,aAAc,CACVjB,WAAYzK,EAAMK,QAAQ,QAI5BsmB,GAAqB,SAACjlB,GACxB,IAAMZ,EAAUoe,KAChB,OACI,gBAACjT,GAAA,EAAD,WACI,eAACG,GAAA,EAAD,IACA,eAAC,KAAD,eAAkB1K,IAClB,eAAC2K,GAAA,EAAD,CACIC,SAAS,YACTrL,QAAQ,YACR6H,MAAM,cACN/H,UAAWD,EAAQ4K,mB,2DClC7B5L,GAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,KAAM,CACFC,QAAS,OACT+F,cAAe,cAIV2gB,GAAqB,WAC9B,IAAM9lB,EAAUhB,KAChB,EAAuC+mB,eAA/BrX,EAAR,EAAQA,OAAQsX,EAAhB,EAAgBA,SAAUC,EAA1B,EAA0BA,SAC1B,EAAwB5f,mBAASqI,GAAU,IAA3C,oBAAOvM,EAAP,KAAa+jB,EAAb,KACA,EAAwB7f,mBAAS,IAAjC,oBAAO8f,EAAP,KAAaC,EAAb,KACA,EAAgC/f,mBAAS,IAAzC,oBAAOggB,EAAP,KAAiBC,EAAjB,KACA,EAAiB9X,aAAU,iBAApB1R,EAAP,qBAyBA,OACI,gBAACwS,GAAA,EAAD,CAAQ9B,MAAI,EAAC6B,QAAS2W,EAAtB,UACI,eAACrW,GAAA,EAAD,4CACA,wBAAMJ,SA1BO,SAACL,GAClBA,EAAMM,iBACN1S,EACI,CACIwkB,QAAS,CACL/kB,KAAM,CACF4F,KAAMA,EACNgkB,KAAMA,EACNE,SAAUA,KAItB,CACI5W,UAAW,YAAwC,IAArClT,EAAoC,EAApCA,KACV2pB,EAAQ,IACRE,EAAQ,IACRE,EAAY,IACZL,EAAS1pB,OASjB,UACI,eAACqT,GAAA,EAAD,UACI,uBAAK3P,UAAWD,EAAQb,KAAxB,UACI,eAAC,KAAD,CACI6I,MAAM,gBACNqC,MAAOlI,EACP4N,SAAU,SAAAb,GAAK,OAAIgX,EAAQhX,EAAMc,OAAO3F,QACxCwF,WAAS,EACTuK,UAAQ,IAEZ,eAAC,KAAD,CACIpS,MAAM,OACNqC,MAAO8b,EACPpW,SAAU,SAAAb,GAAK,OAAIkX,EAAQlX,EAAMc,OAAO3F,UAE5C,eAAC,KAAD,CACIrC,MAAM,4BACNqC,MAAOgc,EACPtW,SAAU,SAAAb,GAAK,OAAIoX,EAAYpX,EAAMc,OAAO3F,eAIxD,gBAAC8F,GAAA,EAAD,WACI,eAAC,KAAD,CAAQC,KAAK,SAASlC,UAAW/L,EAAjC,iBACA,eAAC,KAAD,CAAQhB,QAAS6kB,EAAjB,8BC1DdhnB,GAAYC,aAAW,SAAAC,GAAK,MAAK,CACnC8M,OAAQ,CACJ5M,QAAS,eACTuK,WAAY,MACZ,gBAAiB,CACbA,WAAY,IAGpB4c,kBAAmB,CACfnnB,QAAS,OACTqJ,IAAKvJ,EAAMK,QAAQ,GACnBqC,SAAU,a,UC5BZ5C,GAAYC,YAAW,CACzB2F,MAAO,CACHZ,UAAW,aAIba,GAAc,CAChBC,OAAQ,GACRb,MAAO,IAGEuiB,GAAoB,SAAC,GAQ3B,IAPHpiB,EAOE,EAPFA,OAOE,KANFY,OAME,EALFX,aAKE,MALK,SAKL,EACIrE,EAAUhB,KAChB,OAAKoF,EACDA,EAAOQ,MAMP,sBACIL,IAAKC,GAAyBJ,EAAOQ,MACrCH,IAAKL,EAAO8gB,MACZ9kB,MAAOgE,EAAO8gB,MACdthB,MAAOiB,GAAYR,GACnBR,OAAQgB,GAAYR,GACpBpE,UAAWD,EAAQ4E,QAXvB,eAAC,KAAD,UACI,eAAC,KAAD,MAHY,MCbX6hB,GAAe,SAAC,GAAD,IACxBriB,EADwB,EACxBA,OADwB,IAExByD,YAFwB,MAEjB,OAFiB,SAOxBzD,EACI,gBAACsD,GAAA,EAAD,CAAK0E,GAAI,EAAGxI,MAAO,IAAKhC,SAAU,IAAlC,UACI,eAAC8F,GAAA,EAAD,CAAKjC,UAAU,SAAS8G,GAAI,EAA5B,SACc,SAAT1E,EACG,eAAC8I,GAAA,EAAD,CACInF,SAAS,YACTpH,OAAQA,EACR4D,MAAM,iBAGV,eAAC4I,GAAA,EAAD,CACIpF,SAAS,YACTpH,OAAQA,EACR4D,MAAM,mBAKlB,eAAC9H,EAAA,EAAD,CAAYC,QAAQ,YAApB,0BACA,eAACqM,GAAA,EAAD,IAEA,gBAAC9E,GAAA,EAAD,CAAKoH,GAAI,EAAG1P,QAAQ,OAAOgY,QAAS,EAApC,qBAEI,eAACzP,GAAA,EAAD,CACIvD,OAAQA,EACRY,OAAO,aACP4C,UAAU,YACVC,KAAK,OAJT,SAMI,eAACwJ,GAAA,EAAD,CAAWrM,OAAO,cAI1B,gBAAC0C,GAAA,EAAD,CAAKoH,GAAI,EAAG1P,QAAQ,OAAOgY,QAAS,EAApC,oBAEI,eAACzP,GAAA,EAAD,CACIvD,OAAQA,EACRY,OAAO,YACP4C,UAAU,kBACVC,KAAK,OAJT,SAMI,eAACwJ,GAAA,EAAD,CAAWrM,OAAO,cAI1B,gBAAC0C,GAAA,EAAD,CAAKoH,GAAI,EAAT,mBACU,eAACuC,GAAA,EAAD,CAAWrM,OAAO,OAAOZ,OAAQA,OAE1CA,EAAO8M,SACJ,gBAACxJ,GAAA,EAAD,CAAKoH,GAAI,EAAT,sBACa,eAAClI,GAAA,EAAD,CAAMqK,KAAM7M,EAAO8M,QAASlB,OAAO,SAASmB,IAAI,aAAhD,qBAIjB,gBAACzJ,GAAA,EAAD,CAAKoH,GAAI,EAAT,UACI,eAAC5O,EAAA,EAAD,CAAYC,QAAQ,YAApB,yBACA,eAACqM,GAAA,EAAD,IAEA,eAAC9E,GAAA,EAAD,CAAKoH,GAAI,EAAT,SACI,eAACuC,GAAA,EAAD,CAAWrM,OAAO,wBAK9B,M,gCCtCF0hB,GAAqB,WACvB,MAA2BzP,eAAnB7S,EAAR,EAAQA,OAAQsC,EAAhB,EAAgBA,OAChB,EAA0BL,mBAAS,GAAnC,oBAAOgE,EAAP,KAAc6M,EAAd,KAIA,OAAKxQ,GAAWtC,EAEZ,gBAACsD,GAAA,EAAD,CAAKoH,GAAI,EAAG1P,QAAQ,OAApB,UACI,eAACsI,GAAA,EAAD,CAAKrH,KAAK,IAAV,SACI,eAAC8W,GAAA,EAAD,UACI,gBAACjL,GAAA,EAAD,WACI,gBAACxE,GAAA,EAAD,CAAKtI,QAAQ,OAAOmN,GAAI,EAAxB,UACI,eAAC,GAAD,CAAmBnI,OAAQA,IAC3B,eAACsD,GAAA,EAAD,CAAK0E,GAAI,EAAG/L,KAAK,IAAjB,SACI,eAACqH,GAAA,EAAD,CAAKtI,QAAQ,OAAOgY,QAAS,EAA7B,SACI,eAAClX,EAAA,EAAD,CAAYC,QAAQ,KAApB,SAA0BiE,EAAO8gB,eAI7C,gBAAC7N,GAAA,EAAD,CACIhN,MAAOA,EACPiN,eAAe,UACfC,UAAU,UACVxH,SArBH,SAACb,EAAwBsI,GAC1CN,EAASM,IAgBO,UAMI,eAACC,GAAA,EAAD,CACIzP,MACI5D,EAAOkE,SAAW,EAAlB,UACSlE,EAAOkE,SADhB,oBAESlE,EAAOkE,SAFhB,WAKR,eAACmP,GAAA,EAAD,CACIzP,MACI5D,EAAOihB,cAAgB,EAAvB,UACSjhB,EAAOihB,cADhB,yBAESjhB,EAAOihB,cAFhB,kBAMZ,eAAC7Y,GAAA,EAAD,IACA,eAAC,GAAD,CAAUnC,MAAOA,EAAO0M,MAAO,EAA/B,SACI,eAACY,GAAA,EAAD,CACI/P,UAAU,eACVoI,OAAO,aAFX,SAIK,eAAC,GAAD,CAAepI,UAAU,iBAGlC,eAAC,GAAD,CAAUyC,MAAOA,EAAO0M,MAAO,EAA/B,SACI,eAACY,GAAA,EAAD,CAAoB/P,UAAU,oBAAoBoI,OAAO,aAAa2W,UAAU,EAAhF,SACI,gBAACC,GAAA,EAAD,WACI,eAACjf,GAAA,EAAD,CACQ3C,OAAO,UACP4C,UAAU,gBACVC,MAAM,EAHd,SAKI,eAACwJ,GAAA,EAAD,CAAWrM,OAAO,WAEtB,eAACqM,GAAA,EAAD,CAAWrM,OAAO,mBAClB,eAAC2C,GAAA,EAAD,CACQ3C,OAAO,UACP4C,UAAU,gBACVC,MAAM,EAHd,SAKI,eAACwJ,GAAA,EAAD,CAAWrM,OAAO,WAEtB,eAACqM,GAAA,EAAD,CAAWrM,OAAO,4BAQ1C,eAAC,GAAD,CAAcZ,OAAQA,OAtEC,MAiF7ByT,GAAW,SAACjX,GACd,IAAQwB,EAAqCxB,EAArCwB,SAAUiI,EAA2BzJ,EAA3ByJ,MAAO0M,EAAoBnW,EAApBmW,MAAUe,EAAnC,aAA6ClX,EAA7C,IAEA,OACI,8CACImX,KAAK,WACLC,OAAQ3N,IAAU0M,EAClBvY,GAAE,2BAAsBuY,GACxB,wCAAgCA,IAC5Be,GALR,aAOK1V,MC3HPpD,GAAYC,YAAW,CACzB+M,OAAQ,CACJ5M,QAAS,eACTuK,WAAY,MACZ,gBAAiB,CACbA,WAAY,M,UCrBT,IACX4P,KPSuB,SAAC3Y,GAExB,OADqBiJ,eAAbtE,SAEJ,eAAC,KAAD,2BACQ3E,GADR,IAEI4Y,QAAS,eAAC,GAAD,IACTC,MAAO,eAAC,GAAD,IACPC,oBAAqB,GACrBC,WAAY,eAACC,GAAA,EAAD,CAAYC,mBAAoB,CAAC,GAAI,GAAI,GAAI,OACzD7P,QAAS,GACT4N,KAAM,CAAE3N,MAAO,QAASP,MAAO,OAC/BnG,UAAU,MARd,SAUI,eAAC,GAAD,OAEJ,MOvBJzG,OL8ByB,SAAC8D,GACV5B,KACK6K,eAAbtE,SACMshB,eAId,OACI,eAAC/M,GAAA,EAAD,2BAAYlZ,GAAZ,IAAmB4Y,SAAS,EAA5B,SACI,gBAACsN,GAAA,EAAD,WACI,gBAACC,GAAA,EAAD,CAAS/e,MAAM,UAAf,UACI,eAACyS,GAAA,EAAD,CACIzS,MAAM,UACNhD,OAAO,aACP4C,UAAU,YACVkI,WAAS,EAJb,SAMI,eAACnE,GAAA,EAAD,CAAmBC,WAAW,WAElC,eAAC6O,GAAA,EAAD,CACIzS,MAAM,iBACNhD,OAAO,YACP4C,UAAU,kBACVkI,WAAS,EAJb,SAMI,eAACnE,GAAA,EAAD,CAAmBC,WAAW,WAElC,eAACsO,GAAA,EAAD,CAAWlV,OAAO,QAAQmV,SAAUC,eAAYtK,WAAS,IACzD,eAACoK,GAAA,EAAD,CAAWlV,OAAO,OAAO8K,WAAS,IAClC,eAACoK,GAAA,EAAD,CAAWlV,OAAO,UAAU8K,WAAS,IACrC,eAACoK,GAAA,EAAD,CAAWlV,OAAO,QAAQ8K,WAAS,IACnC,eAACoK,GAAA,EAAD,CACIlV,OAAO,cACPkP,WAAS,EACT6O,KAAM,EACNjT,WAAS,OAGjB,eAACiX,GAAA,EAAD,CAAS/e,MAAM,aAAf,SACI,eAACgf,GAAA,EAAD,CACIhiB,OAAO,aADX,SAGI,gBAACiiB,GAAA,EAAD,WACQ,eAACxM,GAAA,EAAD,CACIzV,OAAO,UACP4C,UAAU,gBACVI,MAAM,OAHV,SAKI,eAAC2D,GAAA,EAAD,CACIC,WAAW,OACX9O,OAAQ,eAAC,GAAD,QAGhB,eAACod,GAAA,EAAD,CAAWlV,OAAO,iBAAiBgD,MAAM,UACzC,eAACkS,GAAA,EAAD,CAAWlV,OAAO,YAAagD,MAAM,4BKnFjE8S,KD2BuB,SAACla,GACR5B,KAChB,OACI,eAAC,KAAD,2BACQ4B,GADR,IAEI6Y,MAAO,eAAC,GAAD,CAAc5R,KAAK,SAC1B2R,SAAS,EAHb,SAKI,gBAACsN,GAAA,EAAD,CACI7M,SAAS,OADb,UAGI,gBAAC8M,GAAA,EAAD,CAAS/e,MAAM,UAAf,UACI,eAACyS,GAAA,EAAD,CACIzS,MAAM,UACNhD,OAAO,aACP4C,UAAU,YACVkI,WAAS,EAJb,SAMI,eAACnE,GAAA,EAAD,CAAmBC,WAAW,WAElC,eAAC6O,GAAA,EAAD,CACIzS,MAAM,iBACNhD,OAAO,YACP4C,UAAU,kBACVkI,WAAS,EAJb,SAMI,eAACnE,GAAA,EAAD,CAAmBC,WAAW,WAElC,eAACsO,GAAA,EAAD,CAAWlV,OAAO,QAAQmV,SAAUC,eAAYtK,WAAS,IACzD,eAACoK,GAAA,EAAD,CAAWlV,OAAO,OAAO8K,WAAS,IAClC,eAACoK,GAAA,EAAD,CAAWlV,OAAO,UAAU8K,WAAS,IACrC,eAACoK,GAAA,EAAD,CAAWlV,OAAO,QAAQ8K,WAAS,IACnC,eAACoK,GAAA,EAAD,CACIlV,OAAO,cACPkP,WAAS,EACT6O,KAAM,EACNjT,WAAS,OAGjB,eAACiX,GAAA,EAAD,CAAS/e,MAAM,aAAf,SACI,eAACgf,GAAA,EAAD,CACIhiB,OAAO,aADX,SAGI,gBAACiiB,GAAA,EAAD,WACQ,eAACxM,GAAA,EAAD,CACIzV,OAAO,UACP4C,UAAU,gBACVI,MAAM,OAHV,SAKI,eAAC2D,GAAA,EAAD,CACIC,WAAW,OACX9O,OAAQ,eAAC,GAAD,QAGhB,eAACod,GAAA,EAAD,CAAWlV,OAAO,iBAAiBgD,MAAM,UACzC,eAACkS,GAAA,EAAD,CAAWlV,OAAO,YAAagD,MAAM,4BCjFjE+S,KF+BuB,SAACna,GAAD,OACvB,eAACoa,GAAA,EAAD,2BAAcpa,GAAd,aACI,eAAC,GAAD,QEhCJe,K,QAAMulB,GCPGza,GAAS,SAAC,GAAD,IAAGrI,EAAH,EAAGA,OAAH,OAClB,eAAC,KAAD,CAAWG,IAAKH,EAAOQ,MAAvB,SACKR,EAAOjC,QCIHglB,GAA0B,WAEnC,OACI,eAACzf,GAAA,EAAD,CAAK9D,MAAM,OAAO8F,MAAM,KAAK5D,YAAY,MAAzC,SACI,eAACoE,GAAA,EAAD,OCqBNkd,GAA2B,WAC7B,MAAyD7gB,eAAjDhK,EAAR,EAAQA,KAAMkK,EAAd,EAAcA,IAAKC,EAAnB,EAAmBA,OAAQF,EAA3B,EAA2BA,aAAcG,EAAzC,EAAyCA,YAG7B2N,KAAKD,MACjB,OAAe,IAAX3N,EACO,eAACwV,GAAA,EAAD,CAAmBC,qBAAmB,EAACC,kBAAgB,IAI9D,eAAC9Y,GAAA,EAAD,UACKmD,EAAI/C,KAAI,SAAAlF,GACL,IAAM4F,EAAS7H,EAAKiC,GACpB,OACI,gBAAC2Z,GAAA,EAAD,CACIrV,QAAM,EAENS,UAAWqD,KACX5F,GAAE,2BAAsBxC,EAAtB,SAJN,UAMI,eAACuE,GAAA,EAAD,UACI,eAACmE,GAAA,EAAD,CACIC,KAAK,QACLC,QAAST,EAAYU,SAAS7I,GAC9B8I,UAAW,EACXC,eAAa,EACbpG,QAAS,SAAAqG,GACLA,EAAEC,kBACFjB,EAAahI,QAIzB,eAAC6Z,GAAA,EAAD,UACI,eAAC,GAAD,CAAQjU,OAAQA,MAEpB,eAACkU,GAAA,EAAD,CACIxY,QAAO,UAAKsE,EAAOjC,MACnBxC,UACI,uCACKyE,EAAOjC,KADZ,MACqB,IACjB,eAACwF,GAAA,EAAD,CACIvD,OAAQA,EACRY,OAAO,cACP4C,UAAU,mBACV4D,SAAS,oBACT3D,MAAM,EALV,SAOI,eAACwJ,GAAA,EAAD,CAAWrM,OAAO,gBAKlC,eAACuT,GAAA,EAAD,MApCK/Z,SA8CvB4f,GAAkBnf,aAAW,SAAAC,GAAK,MAAK,CACzC0L,aAAc,CACVjB,WAAYzK,EAAMK,QAAQ,QAG5B8nB,GAA2B,WAC7B,IAAMrnB,EAAUoe,KAChB,OACI,gBAACjT,GAAA,EAAD,WACI,eAACC,GAAA,EAAD,CAAYC,OAAQ,CAAC,YAAa,aAAc,eAChD,eAACC,GAAA,EAAD,IACA,eAACC,GAAA,EAAD,CACIC,SAAS,mBACTrL,QAAQ,YACR6H,MAAM,UACN/H,UAAWD,EAAQ4K,mBCnGtB0c,GAAiB,WAC1B,MAAuCvB,eAA/BrX,EAAR,EAAQA,OAAQsX,EAAhB,EAAgBA,SAAUC,EAA1B,EAA0BA,SAC1B,EAAyB5f,mBAASqI,GAAU,IAA5C,oBAAOvM,EAAP,KAAa+U,EAAb,KACA,EAAiB1I,aAAU,oBAApB1R,EAAP,qBAqBA,OACI,eAACwS,GAAA,EAAD,CAAQ9B,MAAI,EAAC6B,QAAS2W,EAAtB,SACI,wBAAMzW,SArBO,SAACL,GAClBA,EAAMM,iBACN1S,EACI,CACIwkB,QAAS,CACL/kB,KAAM,CACF4F,KAAMA,KAIlB,CACIsN,UAAW,YAAwC,IAArClT,EAAoC,EAApCA,KACV2a,EAAS,IACT+O,EAAS1pB,OAQjB,UACI,eAACqT,GAAA,EAAD,UACI,eAAC,KAAD,CACI5H,MAAM,oBACNqC,MAAOlI,EACP4N,SAAU,SAAAb,GAAK,OAAIgI,EAAShI,EAAMc,OAAO3F,QACzCwF,WAAS,MAGjB,gBAACM,GAAA,EAAD,WACI,eAAC,KAAD,CAAQC,KAAK,SAAb,kBACA,eAAC,KAAD,CAAQjP,QAAS6kB,EAAjB,6BChBdhnB,GAAYC,YAAW,CACzB+M,OAAQ,CACJ5M,QAAS,eACTuK,WAAY,MACZ,gBAAiB,CACbA,WAAY,MA+ClBsC,GAAe,SAAC,GAAD,IAAG7J,EAAH,EAAGA,SAAH,OAEjB,eAAC8J,GAAA,EAAD,UACI,gBAACxE,GAAA,EAAD,CAAKtI,QAAQ,OAAb,UACI,eAACsI,GAAA,EAAD,CAAKyE,WAAY,EAAjB,SACI,eAAC,KAAD,MAEJ,eAACzE,GAAA,EAAD,CAAK0E,GAAI,EAAG/L,KAAK,IAAIgM,SAAU,IAA/B,SACKjK,U,UCvEJmlB,GAAqB,SAAC,GAAD,IAC9BnjB,EAD8B,EAC9BA,OAD8B,IAE9ByD,YAF8B,MAEvB,OAFuB,SAO9BzD,EACI,gBAACsD,GAAA,EAAD,CAAK0E,GAAI,EAAGxI,MAAO,IAAKhC,SAAU,IAAlC,UACI,eAAC8F,GAAA,EAAD,CAAKjC,UAAU,SAAS8G,GAAI,EAA5B,SACc,SAAT1E,EACG,gBAACH,GAAA,EAAD,WACI,eAACiJ,GAAA,EAAD,CACInF,SAAS,mBACTpH,OAAQA,IAEZ,eAACojB,GAAA,EAAD,CACIhc,SAAS,wBAIjB,eAACoF,GAAA,EAAD,CACIpF,SAAS,mBACTpH,OAAQA,MAKpB,eAAClE,EAAA,EAAD,CAAYC,QAAQ,YAApB,yBACA,eAACqM,GAAA,EAAD,IACA,gBAAC9E,GAAA,EAAD,CAAKoH,GAAI,EAAG1P,QAAQ,OAAOgY,QAAS,EAApC,UACI,eAAClX,EAAA,EAAD,wBACA,eAACyH,GAAA,EAAD,CACIvD,OAAQA,EACRY,OAAO,cACP4C,UAAU,mBACVC,KAAK,OAJT,SAMI,eAACwJ,GAAA,EAAD,CAAWrM,OAAO,cAIzBZ,EAAO8M,SACJ,gBAACxJ,GAAA,EAAD,CAAKoH,GAAI,EAAT,sBACa,eAAClI,GAAA,EAAD,CAAMqK,KAAM7M,EAAO8M,QAASlB,OAAO,SAASmB,IAAI,aAAhD,wBAKzB,MCnDEsW,GAA2B,WAC7B,MAAiChL,eAAzBrY,EAAR,EAAQA,OAAQsC,EAAhB,EAAgBA,OAAQgW,EAAxB,EAAwBA,KACxB,OAAKhW,GAAWtC,EAEZ,gBAACsD,GAAA,EAAD,CAAKoH,GAAI,EAAG1P,QAAQ,OAApB,UACI,eAACsI,GAAA,EAAD,CAAKrH,KAAK,IAAV,SACI,eAACsc,GAAA,EAAD,CACIvY,OAAQA,EACR6V,SAAS,OACTyC,KAAMA,EACN5K,OAAQ,SAAA8K,GAAS,OACb,gBAACzF,GAAA,EAAD,WACI,eAACjL,GAAA,EAAD,UACI,eAACxE,GAAA,EAAD,UACI,gBAACA,GAAA,EAAD,CAAKtI,QAAQ,OAAb,UACI,eAACsI,GAAA,EAAD,CAAKmV,GAAI,EAAT,SACI,eAAC,GAAD,CAAQzY,OAAQA,MAEpB,gBAACsD,GAAA,EAAD,CAAKrH,KAAM,EAAX,UACI,eAACoa,GAAA,EAAD,CACIzV,OAAO,cACP4C,UAAU,mBACVkI,WAAS,EAHb,SAKI,eAACnE,GAAA,EAAD,CACIC,WAAW,OACX9O,OAAQ,eAAC,GAAD,QAGhB,eAACod,GAAA,EAAD,CAAWlV,OAAO,OAAO8K,WAAS,IAClC,eAACoK,GAAA,EAAD,CAAWlV,OAAO,UAAU8K,WAAS,IACrC,eAACoK,GAAA,EAAD,CAAWlV,OAAO,QAAQ8K,WAAS,IACnC,eAACoK,GAAA,EAAD,CACIlV,OAAO,cACPkP,WAAS,EACT6O,KAAM,EACNjT,WAAS,cAO7B,eAACiN,GAAA,EAAD,eACQC,KAAKJ,EAAW,CAEhB,cACA,6BACA,uBACA,kBACA,sBACA,gBACA,0BACA,cACA,eACA,eACA,kBACA,aACA,oBAOxB,eAAC,GAAD,CAAoBxY,OAAQA,EAAQyD,KAAK,YA/DlB,MCA7B6f,GAA2B,WAC7B,MAA2BzQ,eAAnB7S,EAAR,EAAQA,OACR,OADA,EAAgBsC,QACAtC,EAEZ,gBAACsD,GAAA,EAAD,CAAKoH,GAAI,EAAG1P,QAAQ,OAApB,UACI,eAACsI,GAAA,EAAD,CAAKrH,KAAK,IAAV,SACI,eAAC8W,GAAA,EAAD,UACI,gBAACjL,GAAA,EAAD,WACI,gBAACxE,GAAA,EAAD,CAAKtI,QAAQ,OAAb,UACI,eAAC,GAAD,CAAQgF,OAAQA,IAChB,gBAACsD,GAAA,EAAD,CAAK0E,GAAI,EAAG/L,KAAK,IAAjB,UACI,eAACH,EAAA,EAAD,CAAYC,QAAQ,KAApB,SACKiE,EAAOjC,OAEZ,gBAACjC,EAAA,EAAD,CAAYC,QAAQ,QAApB,UACKiE,EAAOhE,MADZ,MACsB,IAClB,eAACuH,GAAA,EAAD,CACI3C,OAAO,cACP4C,UAAU,mBACVC,KAAK,OAHT,SAKI,eAACwJ,GAAA,EAAD,CAAWrM,OAAO,oBAKlC,eAAC0C,GAAA,EAAD,CAAKoH,GAAI,EAAG2Q,EAAG,EAAf,SACI,eAAC9H,GAAA,EAAD,CACI/P,UAAU,WACVoI,OAAO,YACPhI,MAAM,WAHV,SAKI,eAAC,GAAD,eAMpB,eAAC,GAAD,CAAoB5D,OAAQA,OApCL,MCnBpB,IACXmV,KN+G6B,SAAC3Y,GAE9B,OADqBiJ,eAAbtE,SAEJ,eAAC,KAAD,2BACQ3E,GADR,IAEI4Y,QAAS,eAAC,GAAD,IACTC,MAAO,eAAC,GAAD,IACPzP,QAAS,GACT2P,WAAY,eAACC,GAAA,EAAD,CAAYC,mBAAoB,CAAC,GAAI,GAAI,GAAI,OACzDH,oBAAqB,GANzB,SASI,eAAC,GAAD,OAEJ,MM5HJ5c,OJqC+B,SAAC8D,GAChB5B,KAOhB,OACI,eAAC8a,GAAA,EAAD,2BAAYlZ,GAAZ,IAAmB4Y,SAAS,EAA5B,SACI,gBAACO,GAAA,EAAD,CACIxW,UAAW0I,GACXgO,SAAS,OACTD,cAVgB,iBAAO,IAWvBkD,UAVM,SAAC3gB,GAAD,sBACXA,IAKC,UAMI,eAACke,GAAA,EAAD,CACIzV,OAAO,cACP4C,UAAU,mBACVkI,WAAS,EAHb,SAKI,eAACnE,GAAA,EAAD,CACIC,WAAW,OACX9O,OAAQ,eAAC,GAAD,QAGhB,eAACod,GAAA,EAAD,CAAWlV,OAAO,OAAO8K,WAAS,IAClC,eAACoK,GAAA,EAAD,CAAWlV,OAAO,UAAU8K,WAAS,IACrC,eAACoK,GAAA,EAAD,CAAWlV,OAAO,QAAQ8K,WAAS,IACnC,eAACoK,GAAA,EAAD,CACIlV,OAAO,cACPkP,WAAS,EACT6O,KAAM,EACNjT,WAAS,WIrEzBgL,KFkF6B,SAACla,GAAD,OAC7B,eAACqc,GAAA,EAAD,2BAAcrc,GAAd,aACI,eAAC,GAAD,QEnFJma,KDO6B,SAACna,GAAD,OAC7B,eAACoa,GAAA,EAAD,2BAAcpa,GAAd,aACI,eAAC,GAAD,QCRJe,KAAMgmB,MC4HJ3oB,GAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,KAAM,CACFuG,UAAWxG,EAAMK,QAAQ,GACzB6I,aAAclJ,EAAMK,QAAQ,GAC5BsC,WAAY3C,EAAM0oB,YAAY9qB,OAAO,QAAS,CAC1C+qB,OAAQ3oB,EAAM0oB,YAAYC,OAAOC,MACjCC,SAAU7oB,EAAM0oB,YAAYG,SAASC,iBAG7Cxa,KAAM,CACF5J,MAAO,KAEXqkB,OAAQ,CACJrkB,MAAO,QAIAskB,GA5HF,SAAC,GAAkC,IAAD,MAA/B7lB,aAA+B,SAC3C,EAA0BgE,mBAAS,CAC/B8hB,SAAS,EACTC,aAAa,EACbC,eAAe,IAHnB,oBAAO7lB,EAAP,KAAc8lB,EAAd,KAMM9a,GADY1M,cACLyB,cAAY,SAACC,GAAD,OAAuBA,EAAMC,MAAMC,GAAGC,gBAC/DJ,cAAY,SAACC,GAAD,OAAqBA,EAAMtD,SACvC,IAAMc,EAAUhB,KAEViD,EAAe,SAACsmB,GAClBD,GAAS,SAAA9lB,GAAK,kCAAUA,GAAV,kBAAkB+lB,GAAQ/lB,EAAM+lB,SAGlD,OACI,uBACItoB,UAAWuoB,KAAWxoB,EAAQb,MAAT,mBAChBa,EAAQwN,KAAOA,GADC,cAEhBxN,EAAQioB,QAAUza,GAFF,IADzB,UAMK,IACD,eAACib,GAAA,EAAD,IACA,gBAAC,GAAD,CACIxmB,aAAc,kBAAMA,EAAa,YACjCC,OAAQM,EAAM2lB,QACdhmB,KAAK,MACLR,KAAM,eAACmT,GAAUnT,KAAX,IACNU,MAAOA,EALX,UAOI,eAACtB,EAAA,EAAD,CACIC,GAAI,CACA0X,SAAU,aACVlW,MAAO,CAAEkmB,cAAc,IAE3BznB,YAAY,YACZC,SAAU,eAAC4T,GAAUnT,KAAX,IACVU,MAAOA,IAEX,eAACtB,EAAA,EAAD,CACIC,GAAI,CACA0X,SAAU,YACVlW,MAAO,CAAEkmB,cAAc,IAE3BznB,YAAY,WACZC,SAAU,eAAC0T,GAASjT,KAAV,IACVU,MAAOA,IAEX,eAACtB,EAAA,EAAD,CACIC,GAAI,CACA0X,SAAU,SACVlW,MAAO,CAAEkmB,cAAc,IAE3BznB,YAAY,QACZC,SAAU,eAAC,GAAMS,KAAP,IACVU,MAAOA,IAEX,eAACtB,EAAA,EAAD,CACIC,GAAI,CACA0X,SAAU,SACVlW,MAAO,CAAEkmB,cAAc,IAE3BznB,YAAY,OACZC,SAAU,eAACynB,GAAMhnB,KAAP,IACVU,MAAOA,OAGf,gBAAC,GAAD,CACIJ,aAAc,kBAAMA,EAAa,gBACjCC,OAAQM,EAAM4lB,YACdjmB,KAAK,WACLR,KAAM,eAACoT,GAASpT,KAAV,IACNU,MAAOA,EALX,UAOI,eAACtB,EAAA,EAAD,CACIC,GAAI,CACA0X,SAAU,YACVlW,MAAO,CAAEkmB,cAAc,IAE3BznB,YAAY,WACZC,SAAU,eAAC6T,GAASpT,KAAV,IACVU,MAAOA,IAEX,eAACtB,EAAA,EAAD,CACIC,GAAI,CACA0X,SAAU,mBACVlW,MAAO,CAAEkmB,cAAc,IAE3BznB,YAAY,WACZC,SAAU,eAAC0nB,GAAgBjnB,KAAjB,IACVU,MAAOA,IAEX,eAACtB,EAAA,EAAD,CACIC,GAAI,CACA0X,SAAU,oBACVlW,MAAO,CAAEkmB,cAAc,IAE3BznB,YAAY,aACZC,SAAU,eAAC0nB,GAAgBjnB,KAAjB,IACVU,MAAOA,WCjIdwmB,GAAY,CACrBnpB,QAAS,CACLI,QAAS,CACLiT,KAAM,WAEVpT,UAAW,CACPoT,KAAM,WAEV3C,KAAM,QAEV0Y,QAAS,CACLllB,MAAO,KAEXmlB,UAAW,CACPC,UAAW,CACPC,eAAgB,CACZxpB,MAAO,YACPqE,gBAAiB,cAGzBolB,cAAe,CACX/pB,KAAM,CACF,wBAAyB,CAKrBmW,QAAS,KACTlW,QAAS,QACTwE,MAAO,OACPC,OAAQ,OACRyB,SAAU,WACVU,IAAK,EACLC,MAAO,EACPnC,gBAAiB,eACjByb,QAAS,GACT1S,aAAc,cAK9BjM,MAAO,CACHsoB,cAAe,CAEX3hB,eAAe,KAKd4hB,GAAa,CACtBzpB,QAAS,CACLI,QAAS,CACLiT,KAAM,WAEVpT,UAAW,CACPC,MAAO,UACPmT,KAAM,UACNqW,KAAM,UACNC,aAAc,QAElBhO,WAAY,CACRiO,QAAS,WAEblZ,KAAM,SAEVmZ,MAAO,CACH1c,aAAc,IAElBic,QAAS,CACLllB,MAAO,KAEXmlB,UAAW,CACPS,eAAgB,CACZrqB,KAAM,CACFsqB,WAAY,kBAEhBC,OAAQ,CACJD,WAAY,sBAGpBE,SAAU,CACNC,WAAY,CACRC,UAAW,QAEf1qB,KAAM,CACFoK,OAAQ,oBACRugB,eAAgB,gBAGxBC,UAAW,CACPC,UAAW,CACPlmB,gBAAiB,OACjBrE,MAAO,UACPoqB,UAAW,SAGnBX,cAAe,CACX/pB,KAAM,CACF,wBAAyB,CAKrBmW,QAAS,KACTlW,QAAS,QACTwE,MAAO,OACPC,OAAQ,OACRyB,SAAU,WACVU,IAAK,EACLC,MAAO,EACPnC,gBAAiB,eACjByb,QAAS,GACT1S,aAAc,aAI1Bmc,UAAW,CACPC,eAAgB,CACZxpB,MAAO,UACPqE,gBAAiB,SAGzBmmB,kBAAmB,CACfC,aAAc,CACVpmB,gBAAiB,WAErBqmB,gBAAiB,CACbrmB,gBAAiB,YAGzBsmB,eAAgB,CACZjrB,KAAM,CACF2E,gBAAiB,sBACjB,aAAc,CACVA,gBAAiB,yBAI7BumB,mBAAoB,CAChBlrB,KAAM,CACFoK,OAAQ,UAIpB3I,MAAO,CACHsoB,cAAe,CAEX3hB,eAAe,KC3IZ,YAAC3G,GACZ,IAAM1B,EAAQqD,cAAY,SAACC,GAAD,MACN,SAAhBA,EAAMtD,MAAmB2pB,GAAYM,MAEzC,OAAO,eAACmB,GAAA,EAAD,2BAAY1pB,GAAZ,IAAmB2pB,OAAQ/oB,GAAQ+mB,KAAML,GAAMhpB,MAAOA,M,oGCW3DF,GAAYC,aAAW,SAAAC,GAAK,MAAK,CACnC6T,KAAM,CACF3T,QAAS,OACT+F,cAAe,SACfwe,UAAW,QACXne,WAAY,SACZJ,eAAgB,aAChBolB,gBAAiB,6EACjBC,iBAAkB,YAClBC,eAAgB,SAEpBC,KAAM,CACF/oB,SAAU,IACV8D,UAAW,OAEfhH,OAAQ,CACJ2R,OAAQ,MACRjR,QAAS,OACTgG,eAAgB,UAEpBzD,KAAM,CACFmC,gBAAiB5E,EAAMQ,QAAQC,UAAUoT,MAE7C6X,KAAM,CACFllB,UAAW,MACXtG,QAAS,OACTgG,eAAgB,SAChB3F,MAAOP,EAAMQ,QAAQgJ,KAAK,MAE9BmiB,KAAM,CACFxlB,QAAS,iBAEbylB,MAAO,CACHplB,UAAW,OAEf8T,QAAS,CACLnU,QAAS,gBACTjG,QAAS,OACT+F,cAAe,cAIjB4lB,GAAc,SAAC,GAAD,QAChBC,KAAQC,GADQ,aACW,CAAEA,SAAS,EAAOnsB,WAAOpB,GADpC,GACRutB,QAASnsB,EADD,EACCA,MACLosB,EAFI,mBAEhBJ,OACGlqB,EAHa,0BAKhB,eAAC,KAAD,qCACI9B,SAAUmsB,IAAWnsB,GACrB8b,WAAYqQ,GAAWnsB,GACnBosB,GACAtqB,GAJR,IAKIkP,WAAS,MASTqb,GAASC,eAATD,KAEFE,GAAQ,WACV,MAA8BhlB,oBAAS,GAAvC,oBAAOsN,EAAP,KAAgB2X,EAAhB,KACMhpB,EAAYxB,cACZd,EAAUhB,KACV8U,EAASC,eACTpW,EAAQ4tB,eACRC,EAAWC,eAsCjB,OACI,eAACN,GAAD,CACI5b,SAtCa,SAACmc,GAClBJ,GAAW,GACX3tB,EAAM+tB,EAAMF,EAAShpB,MAAQgpB,EAAShpB,MAAMmpB,aAAe,KAAKC,OAC5D,SAAC9sB,GACGwsB,GAAW,GACXxX,EACqB,kBAAVhV,EACDA,EACiB,qBAAVA,GAA0BA,EAAMrC,QAEvCqC,EAAMrC,QADN,wBAEN,UACA,CACIyM,EACqB,kBAAVpK,EACDA,EACAA,GAASA,EAAMrC,QACfqC,EAAMrC,aACNiB,QAqBtByc,SAdS,SAAC0R,GACd,IAAMC,EAAqB,GAO3B,OANKD,EAAOjuB,WACRkuB,EAAOluB,SAAW0E,EAAU,2BAE3BupB,EAAOhuB,WACRiuB,EAAOjuB,SAAWyE,EAAU,2BAEzBwpB,GAOHha,OAAQ,gBAAGia,EAAH,EAAGA,aAAH,OACJ,uBAAMxc,SAAUwc,EAAcC,YAAU,EAAxC,SACI,uBAAK/rB,UAAWD,EAAQ+S,KAAxB,UACI,gBAACoE,GAAA,EAAD,CAAMlX,UAAWD,EAAQ2qB,KAAzB,UACI,sBAAK1qB,UAAWD,EAAQtB,OAAxB,SACI,eAAC,KAAD,CAAQuB,UAAWD,EAAQ2B,KAA3B,SACI,eAAC,KAAD,QAGR,sBAAK1B,UAAWD,EAAQ4qB,KAAxB,iCAGA,uBAAK3qB,UAAWD,EAAQ6qB,KAAxB,UACI,sBAAK5qB,UAAWD,EAAQ8qB,MAAxB,SACI,eAAC,KAAD,CACIjb,WAAS,EACT1N,KAAK,WAELoB,UAAWwnB,GACX/iB,MAAO1F,EAAU,oBACjB4L,SAAUyF,MAGlB,sBAAK1T,UAAWD,EAAQ8qB,MAAxB,SACI,eAAC,KAAD,CACI3oB,KAAK,WAELoB,UAAWwnB,GACX/iB,MAAO1F,EAAU,oBACjB8N,KAAK,WACLlC,SAAUyF,SAItB,gBAACsY,GAAA,EAAD,CAAahsB,UAAWD,EAAQwZ,QAAhC,UACI,gBAAC,KAAD,CACIrZ,QAAQ,YACRiQ,KAAK,SACL3Q,MAAM,UACNyO,SAAUyF,EACV7D,WAAS,EALb,UAOK6D,GACG,eAACuY,GAAA,EAAD,CACI7nB,KAAM,GACN8nB,UAAW,IAGlB7pB,EAAU,sBAEf,eAACpC,EAAA,EAAD,CAAYC,QAAQ,QAApB,gBACA,eAACyG,GAAA,EAAD,CACInH,MAAM,gBACN8D,UAAW6U,KACXpX,GAAG,YACHb,QAAQ,QAJZ,4BAUR,eAACisB,GAAA,EAAD,aAsBTC,GANQ,SAACzrB,GAAD,OACnB,eAAC0rB,GAAA,EAAD,CAAeptB,MAAOqtB,YAAYpD,IAAlC,SACI,eAAC,GAAD,eAAWvoB,O,oBC3MN4rB,GAAc,WACvB,IAAQjnB,EAAasE,eAAbtE,SACR,EAKIuE,aACA,WACA,CAAEC,KAAM,EAAGC,QAAS,IACpB,CAAEC,MAAO,YAAaP,MAAO,QAC7B,CAAEhN,OAAQ,MAAO6N,SAAQ,OAAEhF,QAAF,IAAEA,OAAF,EAAEA,EAAU/G,IACrC,CAAE8P,QAAS2T,OAAOwK,UAAP,OAAiBlnB,QAAjB,IAAiBA,OAAjB,EAAiBA,EAAU/G,MAThCkuB,EADV,EACInwB,KACKowB,EAFT,EAEIlmB,IACOmmB,EAHX,EAGIC,MACQC,EAJZ,EAIIpmB,OAQJ,OACI,uCACI,gBAACgB,GAAA,EAAD,CAAKtI,QAAQ,OAAOoG,WAAW,SAAS4C,aAAa,MAArD,UACI,eAACV,GAAA,EAAD,CAAK0E,GAAI,EAAGyQ,GAAI,EAAGzd,QAAQ,OAA3B,SACI,eAAC,KAAD,CAAcK,MAAM,WAAWiW,SAAS,YAE5C,eAAC9O,GAAA,EAAD,CACIE,UAAU,OACV3G,QAAQ,KACRV,MAAM,gBACN8D,UAAW6U,KACXpX,GAAG,YALP,6BAUJ,eAACmW,GAAA,EAAD,UACI,eAAC4V,GAAA,EAAD,CACIvhB,SAAS,YACT4B,SAAS,OACT3G,IAAKkmB,EACLpwB,KAAMmwB,EACNG,MAAOD,EACPlmB,OAAQomB,EACR7rB,YAAa,SAAAiX,GAAO,gBACbA,EAAQ9Z,WADK,YACS8Z,EAAQ7Z,YAErC2uB,cAAe,SAAA9U,GAAO,OAClBM,aACI,IAAIlE,KAAK4D,EAAQjE,WACjB,IAAIK,KACJ,CACI2Y,WAAW,KAIvBC,WAAY,SAAAhV,GAAO,OAAI,eAAC,GAAD,CAAQ9T,OAAQ8T,aC1CrDlZ,GAAYC,aAAW,SAAAC,GAAK,MAAK,CACnC4W,KAAM,CACF1N,aAAclJ,EAAMK,QAAQ,IAEhC6W,SAAU,CACNtS,gBAAiB5E,EAAMQ,QAAQgJ,KAAK,KACpCrD,QAASnG,EAAMK,QAAQ,GACvBsN,aAAc,IAElBsgB,aAAc,CACV/tB,QAAS,cACT,qBAAsB,EACtB,qBAAsB,WACtBoB,SAAU,cAIL4sB,GAAc,WACvB,IAAMptB,EAAUhB,KACRuG,EAAasE,eAAbtE,SACR,EAIIuE,aACA,eACA,CAAEC,KAAM,EAAGC,QAAS,GACpB,CAAEC,MAAO,OAAQP,MAAO,QACxB,CAAEa,SAAQ,OAAEhF,QAAF,IAAEA,OAAF,EAAEA,EAAU/G,IACtB,CAAE8P,QAAS2T,OAAOwK,UAAP,OAAiBlnB,QAAjB,IAAiBA,OAAjB,EAAiBA,EAAU/G,MARhC6uB,EADV,EACI9wB,KACK+wB,EAFT,EAEI7mB,IACQ8mB,EAHZ,EAGI7mB,OAQJ,EAIIoD,aACA,YACA,CAAEC,KAAM,EAAGC,QAAS,GACpB,CAAEC,MAAO,OAAQP,MAAO,QACxB,CAAEa,SAAQ,OAAEhF,QAAF,IAAEA,OAAF,EAAEA,EAAU/G,IACtB,CAAE8P,QAAS2T,OAAOwK,UAAP,OAAiBlnB,QAAjB,IAAiBA,OAAjB,EAAiBA,EAAU/G,MARhCgvB,EADV,EACIjxB,KACKkxB,EAFT,EAEIhnB,IACQinB,EAHZ,EAGIhnB,OAQJ,EAIIoD,aACA,eACA,CAAEC,KAAM,EAAGC,QAAS,GACpB,CAAEC,MAAO,OAAQP,MAAO,QACxB,CAAEa,SAAQ,OAAEhF,QAAF,IAAEA,OAAF,EAAEA,EAAU/G,IACtB,CAAE8P,QAAS2T,OAAOwK,UAAP,OAAiBlnB,QAAjB,IAAiBA,OAAjB,EAAiBA,EAAU/G,MARhCmvB,EADV,EACIpxB,KACKqxB,EAFT,EAEInnB,IACQonB,EAHZ,EAGInnB,OAQJ,IAAK6mB,IAAuBG,IAAoBG,EAC5C,OAAO,KAGX,IACKP,IACAD,IACAI,IACAD,IACAI,IACAD,EAED,OAAO,KAGX,IAAMG,EAAY,GACbC,OACGT,EAAgB5pB,KAAI,SAAAlF,GAAE,kCACf6uB,EAAiB7uB,IADF,IAElB4R,KAAM,mBAEVqd,EAAa/pB,KAAI,SAAAlF,GAAE,kCACZgvB,EAAchvB,IADF,IAEf4R,KAAM,gBAEVwd,EAAgBlqB,KAAI,SAAAlF,GAAE,kCACfmvB,EAAiBnvB,IADF,IAElB4R,KAAM,oBAGbwH,MAAK,SAAChc,EAAGklB,GAAJ,OAAU,IAAIxM,KAAKwM,EAAErN,MAAMua,UAAY,IAAI1Z,KAAK1Y,EAAE6X,MAAMua,aAC7DrZ,MAAM,EAAG,GAEd,OACI,uCACI,gBAACjN,GAAA,EAAD,CAAKtI,QAAQ,OAAOoG,WAAW,SAAS4C,aAAa,MAArD,UACI,eAACV,GAAA,EAAD,CAAK0E,GAAI,EAAGyQ,GAAI,EAAGzd,QAAQ,OAA3B,SACI,eAAC,KAAD,CAAUK,MAAM,WAAWiW,SAAS,YAExC,eAACxV,EAAA,EAAD,CAAYC,QAAQ,KAAKV,MAAM,gBAA/B,gCAIJ,eAAC0X,GAAA,EAAD,UACI,eAACjL,GAAA,EAAD,UACK4hB,EAASpqB,KAAI,SAAAoS,GAAI,OACd,uBACItX,GAAE,UAAKsX,EAAK1F,KAAV,YAAkB0F,EAAKtX,IAEzByB,UAAWD,EAAQ8V,KAHvB,UAKI,gBAAC5V,EAAA,EAAD,CAAYT,MAAM,gBAAgBigB,cAAY,EAA9C,eACO,IACH,eAAC,GAAD,CAAY5J,KAAMA,IAFtB,UAGY,IACP0C,aACG,IAAIlE,KAAKwB,EAAKrC,MACd,IAAIa,KACJ,CACI2Y,WAAW,OAIvB,sBAAKhtB,UAAWD,EAAQoW,SAAxB,SACI,eAAC,KAAD,CAAehU,SAAU0T,EAAKxC,KAAMa,cAAe,CAACC,YAlB5D,UAEY0B,EAAK1F,KAFjB,YAEyB0F,EAAKtX,gBA0BhDyvB,GAAa,SAAC,GAAmB,IAAjBnY,EAAgB,EAAhBA,KAClB,MAAkB,aAAdA,EAAK1F,KACE,eAAC,GAAD,CAAM0F,KAAMA,IAEA,gBAAdA,EAAK1F,KACH,eAAC,GAAD,CAAS0F,KAAMA,IAEH,gBAAdA,EAAK1F,KACH,eAAC,GAAD,CAAS0F,KAAMA,IAEnB,MAGLoY,GAAO,SAAC,GAAD,IAAGpY,EAAH,EAAGA,KAAH,OACT,8CACS,IACL,eAACnO,GAAA,EAAD,CACIvD,OAAQ0R,EACR9Q,OAAO,UACP4C,UAAU,QACV4D,SAAS,SACT3D,KAAK,OALT,SAOI,eAACwJ,GAAA,EAAD,CAAWrM,OAAO,OAAO7E,QAAQ,gBAKvCguB,GAAU,SAAC,GAAD,IAAGrY,EAAH,EAAGA,KAAH,OACZ,iDACY,IACR,eAACnO,GAAA,EAAD,CACIvD,OAAQ0R,EACR9Q,OAAO,aACP4C,UAAU,WACV4D,SAAS,YACT3D,KAAK,OALT,SAOI,eAACgK,GAAA,EAAD,CACI1R,QAAQ,QACR2R,OAAQ,SAAAoG,GAAO,OACXA,EAAO,UAAMA,EAAQ9Z,WAAd,YAA4B8Z,EAAQ7Z,WAAc,YAOvE+vB,GAAU,SAAC,GAAD,IAAGtY,EAAH,EAAGA,KAAH,OACZ,iDACY,IACR,eAACnO,GAAA,EAAD,CACIvD,OAAQ0R,EACR9Q,OAAO,aACP4C,UAAU,YACV4D,SAAS,aACT3D,KAAK,OALT,SAOI,eAACwJ,GAAA,EAAD,CAAWrM,OAAO,OAAO7E,QAAQ,gB,wCCjLvCkuB,GAAMC,gBAAK,YAA+B,IAA7BC,EAA4B,EAA5BA,kBACf,EAA8BzkB,aAC1B,YACA,CAAEE,QAAS,IAAMD,KAAM,IAFnBxN,EAAR,EAAQA,KAAMkK,EAAd,EAAcA,IAId,IAJA,EAAmBC,OAIN,OAAO,KAEpB,IAAM8nB,EAAaC,eACdC,OAAO,CAAC,EAAGC,aAAIloB,EAAI/C,KAAI,SAAAlF,GAAE,OAAIjC,EAAKiC,GAAIowB,mBACtCC,MAAM,CACH,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGR,OACI,eAAC,iBAAD,CACI,WAAS,GACTC,WAAW,wBACXC,iBAAkB,CACdC,OAAQ,EAAE,IAAO,GAAM,GACvBC,MAAO,KALf,SAQI,eAAC,iBAAD,CACIC,OAAQ,CAAC,EAAG,GACZC,KAAM,EAFV,SAII,eAAC,eAAD,CAAaC,UApC3B,yGAoCc,SACK,gBAAGC,EAAH,EAAGA,YAAH,OACG,qCACKA,EACA3rB,KAAI,SAAA4rB,GACD,IAAQC,EAAWD,EAAIE,WAAfD,OACFE,EAAMhpB,EAAIgX,MAAK,SAAAjf,GAAE,OAAIjC,EAAKiC,GAAIkxB,OAASH,KAC7C,OACI,eAAC,aAAD,CAEQH,UAAWE,EACXK,KAAMF,EAAMjB,EAAWjyB,EAAKkzB,GAAKb,cAAgB,UACjDgB,OAAO,UACP7oB,aAAc,WACV,MAA0BuoB,EAAIE,WAAtBK,EAAR,EAAQA,KACFjB,GADN,EAAckB,QACOL,EAAMlzB,EAAKkzB,GAAKb,aAAe,GACpDL,EAAkB,GAAD,OAAIsB,EAAJ,cAAcjB,KAEnC5nB,aAAc,WACVunB,EAAkB,MAVjBe,EAAIS,uBAuCxCC,GAAe,WACxB,MAA8B3pB,mBAAS,IAAvC,oBAAOiP,EAAP,KAAgB2a,EAAhB,KAEA,OACI,iCACI,eAAC5B,GAAD,CAAKE,kBAAmB0B,IACxB,eAAC,KAAD,UAAe3a,QCxGd4a,GAAY,WACrB,OACI,qCACI,gBAACC,GAAA,EAAD,CAAM1mB,WAAS,EAAClK,QAAS,EAAzB,UACI,eAAC4wB,GAAA,EAAD,CAAMzS,MAAI,EAAC0S,GAAI,GAAIC,GAAI,EAAvB,SACI,eAAC,GAAD,MAEJ,eAACF,GAAA,EAAD,CAAMzS,MAAI,EAAC0S,GAAI,GAAIC,GAAI,EAAvB,SACI,eAAC,GAAD,MAEJ,eAACF,GAAA,EAAD,CAAMzS,MAAI,EAAC0S,GAAI,GAAf,SACI,eAAC,GAAD,Y,sECSdpxB,GAAYC,aAAW,SAACC,GAAD,MAAmB,CAC5C2rB,KAAM,CACFxlB,QAAS,iBAEbylB,MAAO,CACHplB,UAAW,OAEf5C,OAAQ,CACJc,MAAO,QAEXjC,KAAM,CACFmE,YAAa5G,EAAMK,QAAQ,IAE/Bia,QAAS,CACLnU,QAAS,gBACTjG,QAAS,OACT+F,cAAe,cAIjBmrB,GAAQ,SAAC,GAAD,QACVtF,KAAQC,EADE,EACFA,QAASnsB,EADP,EACOA,MACVosB,EAFG,EAEVJ,MACGlqB,EAHO,0BAQV,eAAC,KAAD,qCACI9B,SAAUmsB,IAAWnsB,GACrB8b,WAAYqQ,GAAWnsB,GACnBosB,GACAtqB,GAJR,IAKIkP,WAAS,MAoNFygB,GAhNM,SAAC,GACsB,IADpBC,EACmB,EADnBA,WAEpB,EAA8BC,cAAgB,GAA9C,oBAAO9c,EAAP,KAAgB2X,EAAhB,KACMhpB,EAAYxB,cACZnD,EAAQ4tB,eACRzX,EAASC,eAET/T,GADW+e,eACD/f,MAiCV0xB,EAAM,uCAAG,uCAAA90B,EAAA,6DACXwC,EADW,EACXA,WACAC,EAFW,EAEXA,UACAC,EAHW,EAGXA,MACAV,EAJW,EAIXA,SACAC,EALW,EAKXA,SALW,EAMX8yB,QASArF,GAAW,GAfA,kBAiBYpvB,IAAMa,KAAN,UAjGf,QAiGe,aAAgD,CAC/DqB,aACAC,YACAC,QACAV,WACAC,aAtBG,cAyBXytB,GAAW,GACX3tB,EAAM,CAAEC,WAAUC,YAAY2yB,GA1BnB,qDA4BPlF,GAAW,GAEY,KADN,KAAMlvB,SACVM,OA9BN,wBA+BKD,EAAY,KAAML,SAASG,KAA3BE,QACRqX,EAAO,SAAD,OAAUrX,GAAW,WAhCxB,kBAiCIJ,QAAQG,OAAOC,IAjCnB,iCAmCAJ,QAAQG,OAAR,OAnCA,0DAAH,sDAuCZ,OACI,eAAC,KAAD,CACI+S,SAAUmhB,EACVvW,SAzES,SAAC,GAeX,IAdH/b,EAcE,EAdFA,WACAC,EAaE,EAbFA,UACAC,EAYE,EAZFA,MACAV,EAWE,EAXFA,SACAC,EAUE,EAVFA,SACA8yB,EASE,EATFA,QAkBA,MARe,CACXvyB,WAAaA,OAAmDV,EAAtC4E,EAAU,0BACpCjE,UAAYA,OAAkDX,EAAtC4E,EAAU,0BAClChE,MAAQA,OAA8CZ,EAAtC4E,EAAU,0BAC1B1E,SAAWA,OAAiDF,EAAtC4E,EAAU,0BAChCzE,SAAWA,OAAiDH,EAAtC4E,EAAU,0BAChCquB,QAAS9yB,IAAa8yB,EAAU,0CAAsCjzB,IAoDtEoU,OAAQ,gBAAGia,EAAH,EAAGA,aAAH,OACJ,wBAAM9rB,UAAWD,EAAQ6qB,KAAMtb,SAAUwc,EAAcC,YAAU,EAAjE,UACI,eAAC9f,GAAA,EAAD,UACI,eAAC0kB,GAAA,EAAD,CAAWvkB,SAAS,KAApB,SACA,gBAAC8jB,GAAA,EAAD,CAAM1mB,WAAS,EAAClK,QAAS,EAAzB,UACI,eAAC4wB,GAAA,EAAD,CAAMzS,MAAI,EAAC0S,GAAI,GAAIC,GAAI,EAAvB,SACI,sBAAKpwB,UAAWD,EAAQ8qB,MAAxB,SACI,eAAC,KAAD,CACIjb,WAAS,EACTrR,GAAG,aACH2D,KAAK,aACLoB,UAAW+sB,GACXtoB,MAAM,aACNkG,SAAUyF,EACVyG,UAAQ,QAIpB,eAAC+V,GAAA,EAAD,CAAMzS,MAAI,EAAC0S,GAAI,GAAIC,GAAI,EAAvB,SACI,sBAAKpwB,UAAWD,EAAQ8qB,MAAxB,SACI,eAAC,KAAD,CACIjb,WAAS,EACTrR,GAAG,YACH2D,KAAK,YACLoB,UAAW+sB,GACXtoB,MAAM,YACNkG,SAAUyF,EACVyG,UAAQ,QAIpB,eAAC+V,GAAA,EAAD,CAAMzS,MAAI,EAAC0S,GAAI,GAAf,SACI,sBAAKnwB,UAAWD,EAAQ8qB,MAAxB,SACI,eAAC,KAAD,CACIjb,WAAS,EACTrR,GAAG,QACH2D,KAAK,QACLoB,UAAW+sB,GACXtoB,MAAM,gBACNkG,SAAUyF,EACVyG,UAAQ,QAIpB,eAAC+V,GAAA,EAAD,CAAMzS,MAAI,EAAC0S,GAAI,GAAf,SACI,sBAAKnwB,UAAWD,EAAQ8qB,MAAxB,SACI,eAAC,KAAD,CACIjb,WAAS,EACTrR,GAAG,WACH2D,KAAK,WACLoB,UAAW+sB,GACXtoB,MAAO1F,EAAU,oBACjB4L,SAAUyF,EACVyG,UAAQ,QAIpB,eAAC+V,GAAA,EAAD,CAAMzS,MAAI,EAAC0S,GAAI,GAAf,SACI,sBAAKnwB,UAAWD,EAAQ8qB,MAAxB,SACI,eAAC,KAAD,CACItsB,GAAG,WACH2D,KAAK,WACLoB,UAAW+sB,GACXtoB,MAAO1F,EAAU,oBACjB8N,KAAK,WACLlC,SAAUyF,EACVkd,aAAa,mBACbzW,UAAQ,QAIpB,eAAC+V,GAAA,EAAD,CAAMzS,MAAI,EAAC0S,GAAI,GAAf,SACI,sBAAKnwB,UAAWD,EAAQ8qB,MAAxB,SACI,eAAC,KAAD,CACItsB,GAAG,UACH2D,KAAK,UACLoB,UAAW+sB,GACXtoB,MAAM,mBACNoI,KAAK,WACLlC,SAAUyF,EACVkd,aAAa,mBACbzW,UAAQ,eAO5B,gBAAC6R,GAAA,EAAD,CAAahsB,UAAWD,EAAQwZ,QAAhC,UACI,gBAAC,KAAD,CACIrZ,QAAQ,YACRiQ,KAAK,SACL3Q,MAAM,UACNyO,SAAUyF,EACV1T,UAAWD,EAAQ8C,OACnBgN,WAAS,EANb,UAQK6D,GACG,eAACuY,GAAA,EAAD,CACI7nB,KAAM,GACN8nB,UAAW,IAXvB,cAgBA,eAACjsB,EAAA,EAAD,CAAYC,QAAQ,QAApB,gBACA,eAACyG,GAAA,EAAD,CACInH,MAAM,gBACN8D,UAAW6U,KACXpX,GAAG,SACHb,QAAQ,QAJZ,6BC3OlBnB,GAAYC,aAAW,SAACC,GAAD,MAAmB,CACxC6T,KAAM,CACF3T,QAAS,OACT+F,cAAe,SACfwe,UAAW,QACX9f,OAAQ,MACR2B,WAAY,SACZJ,eAAgB,aAChBqlB,iBAAkB,YAClBC,eAAgB,QAChBF,gBACI,8EAERG,KAAM,CACF/oB,SAAU,IACV8D,UAAW,OAEfhH,OAAQ,CACJ2R,OAAQ,MACRjR,QAAS,OACTgG,eAAgB,UAEpBzD,KAAM,CACFmC,gBAAiB5E,EAAMQ,QAAQC,UAAUoT,SAGjD,CAAE5Q,KAAM,aAGN2uB,GAAW,WACb,IAAM9wB,EAAUhB,KAChB,OACQ,uBAAKiB,UAAWD,EAAQ+S,KAAxB,UACI,gBAACoE,GAAA,EAAD,CAAMlX,UAAWD,EAAQ2qB,KAAzB,UACI,sBAAK1qB,UAAWD,EAAQtB,OAAxB,SACI,eAAC,KAAD,CAAQuB,UAAWD,EAAQ2B,KAA3B,SACI,eAAC,KAAD,QAGR,eAAC,GAAD,OAEJ,eAACyqB,GAAA,EAAD,QAWD2E,GANW,SAACnwB,GAAD,OACtB,eAAC0rB,GAAA,EAAD,CAAeptB,MAAOqtB,YAAYpD,IAAlC,SACI,eAAC,GAAD,eAAcvoB,O,6BCjETowB,GAAc,SAAC9xB,GAAD,MAAuB,CAC9CkR,KAHwB,eAIxBkR,QAASpiB,ICIPF,GAAYC,YAAW,CACzB+I,MAAO,CAAEpE,MAAO,OAAQxE,QAAS,gBACjC0D,OAAQ,CAAEuN,OAAQ,SAiEP4gB,GA9DO,WAClB,IAAM3uB,EAAYxB,cACZowB,EAASC,eACTC,EAAYC,eACZrxB,EAAUhB,KACVE,EAAQqD,cAAY,SAACC,GAAD,OAAqBA,EAAMtD,SAC/CoyB,EAAWC,eACjB,OACI,gBAACpa,GAAA,EAAD,WACI,eAACqa,GAAA,EAAD,CAAOpxB,MAAOkC,EAAU,uBACxB,gBAAC4J,GAAA,EAAD,WACI,sBAAKjM,UAAWD,EAAQgI,MAAxB,SACK1F,EAAU,oBAEf,eAAC,KAAD,CACInC,QAAQ,YACRF,UAAWD,EAAQ8C,OACnBrD,MAAiB,UAAVP,EAAoB,UAAY,UACvCiC,QAAS,kBAAMmwB,EAASN,GAAY,WAJxC,SAMK1uB,EAAU,qBAEf,eAAC,KAAD,CACInC,QAAQ,YACRF,UAAWD,EAAQ8C,OACnBrD,MAAiB,SAAVP,EAAmB,UAAY,UACtCiC,QAAS,kBAAMmwB,EAASN,GAAY,UAJxC,SAMK1uB,EAAU,uBAGnB,gBAAC4J,GAAA,EAAD,WACI,sBAAKjM,UAAWD,EAAQgI,MAAxB,SAAgC1F,EAAU,kBAC1C,eAAC,KAAD,CACInC,QAAQ,YACRF,UAAWD,EAAQ8C,OACnBrD,MAAkB,OAAXyxB,EAAkB,UAAY,UACrC/vB,QAAS,kBAAMiwB,EAAU,OAJ7B,gBAQA,eAAC,KAAD,CACIjxB,QAAQ,YACRF,UAAWD,EAAQ8C,OACnBrD,MAAkB,OAAXyxB,EAAkB,UAAY,UACrC/vB,QAAS,kBAAMiwB,EAAU,OAJ7B,gBAQA,eAAC,KAAD,CACIjxB,QAAQ,YACRF,UAAWD,EAAQ8C,OACnBrD,MAAkB,OAAXyxB,EAAkB,UAAY,UACrC/vB,QAAS,kBAAMiwB,EAAU,OAJ7B,uBC1DHK,GAAe,CACxB,eAACC,GAAA,EAAD,CAAoBC,OAAK,EAAC/M,KAAK,YAAYrhB,UAAWutB,KACtD,eAAC,KAAD,CAAOa,OAAK,EAAC/M,KAAK,iBAAiB9S,OAAQ,kBAAM,eAAC,GAAD,Q,UCAtC8f,GALiC,eACzCC,MCoBD3yB,GAGIqtB,YAAYuF,KAEhBC,GAAeC,aAAqB,SAAAd,GACtC,MAAe,OAAXA,EACO,+BAAoBrO,MAAK,SAAAoP,GAAQ,OAAIA,EAAS3I,YAEzDtE,QAAQC,IAAIiM,GACG,OAAXA,EACO,+BAAoBrO,MAAK,SAAAoP,GAAQ,OAAIA,EAAS3I,WAIlDuI,MACR,MAgCYK,GA9BH,kBACR,gBAACC,EAAA,EAAD,CACIV,aAAcA,GACdn0B,aAAcA,EACdsB,aAAcA,EACdwzB,UAAW/G,GACXgH,OAAQ/H,GACRgI,UAAWpC,GACXhxB,MAAOA,GACP6yB,aAAcA,GARlB,UAUI,eAACQ,EAAA,EAAD,aAAUpwB,KAAK,SAAY0S,KAC3B,eAAC0d,EAAA,EAAD,aAAUpwB,KAAK,YAAeyS,KAC9B,eAAC2d,EAAA,EAAD,aAAUpwB,KAAK,aAAgB2S,KAC/B,eAACyd,EAAA,EAAD,aAAUpwB,KAAK,YAAe4S,KAC9B,eAACwd,EAAA,EAAD,CAAUpwB,KAAK,sBACf,eAACowB,EAAA,EAAD,CAAUpwB,KAAK,kBACf,eAACowB,EAAA,EAAD,CAAUpwB,KAAK,iBACf,eAACowB,EAAA,EAAD,CAAUpwB,KAAK,iBACf,eAACowB,EAAA,EAAD,CAAUpwB,KAAK,iBACf,eAACowB,EAAA,EAAD,CAAUpwB,KAAK,cACf,eAACowB,EAAA,EAAD,aAAUpwB,KAAK,mBAAsBymB,KACrC,eAAC2J,EAAA,EAAD,CAAUpwB,KAAK,mBAAmBoX,KAAMiZ,IAAa1X,KAAM2X,IAAa1X,KAAM2X,MAC9E,eAACH,EAAA,EAAD,aAAUpwB,KAAK,SAAYwmB,KAC3B,eAAC4J,EAAA,EAAD,CAAUpwB,KAAK,QAAQoX,KAAMiZ,MAC7B,eAACD,EAAA,EAAD,CAAUpwB,KAAK,OAAOoX,KAAMiZ,MAC5B,eAACD,EAAA,EAAD,CAAUpwB,KAAK,YAAYoX,KAAMiZ,UCtD1BG,GAdS,SAAAC,GAChBA,GAAeA,aAAuBC,UACtC,+BAAqBhQ,MACjB,YAAkD,IAA/CiQ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC/BJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFxBO,IAASrhB,OACL,gBAAC,IAAMshB,WAAP,WACI,eAACC,EAAA,EAAD,IACA,eAAC,GAAD,OAEJC,SAASC,eAAe,SAM5BZ,O","file":"static/js/main.5483bbd7.chunk.js","sourcesContent":["import axios, { AxiosError } from 'axios';\r\n\r\nconst baseURL = \"/auth\";\r\n\r\nexport type Credentials = {\r\n  access_token: string;\r\n  refresh_token: string;\r\n  permissions: string;\r\n};\r\n\r\nconst CREDENTIALS_LOCAL_STORAGE_ITEM = \"credentials\";\r\n\r\nexport function isAuthenticated(): boolean {\r\n  return Boolean(getCredentials());\r\n}\r\n\r\nexport function setCredentials(credentials: Credentials) {\r\n  localStorage.setItem(\r\n    CREDENTIALS_LOCAL_STORAGE_ITEM,\r\n    JSON.stringify(credentials)\r\n  );\r\n}\r\n\r\nexport function getCredentials(): Credentials | null {\r\n  const raw = localStorage.getItem(CREDENTIALS_LOCAL_STORAGE_ITEM);\r\n  if (raw === null) {\r\n    return null;\r\n  }\r\n  return JSON.parse(raw);\r\n}\r\n\r\nexport function removeCredentials(): void {\r\n  localStorage.removeItem(CREDENTIALS_LOCAL_STORAGE_ITEM);\r\n}\r\n","import axios, { AxiosError } from 'axios';\r\nimport { \r\n    GetListResult,\r\n    GetOneResult,\r\n    GetManyResult,\r\n    GetManyReferenceResult,\r\n    CreateResult,\r\n    UpdateResult,\r\n    UpdateManyResult,\r\n    DeleteResult,\r\n    DeleteManyResult,\r\n}  from 'react-admin'\r\n\r\nimport {\r\n    getCredentials,\r\n} from \"./auth\"\r\n\r\n\r\nconst getList = async (resource: string, params: any): Promise<GetListResult<any>> => {\r\n    try{\r\n        const credentials = getCredentials();\r\n        const token = credentials?.access_token;\r\n        const config = {\r\n            headers: { Authorization: `Bearer ${token}` },\r\n            params,\r\n        };\r\n        const response = await axios.get<GetListResult<any>>(`/${resource}/list`, config)\r\n        return Promise.resolve(response.data);\r\n    } catch (error: any) {\r\n        const response = error.response;\r\n        return Promise.reject({message: response.data, status: response.status});\r\n    }\r\n};\r\n\r\nconst getOne = async (resource: string, params: any): Promise<GetOneResult<any>> => {\r\n    try{\r\n        const credentials = getCredentials();\r\n        const token = credentials?.access_token;\r\n        const config = {\r\n            headers: { Authorization: `Bearer ${token}` },\r\n            params,\r\n        };\r\n        const response = await axios.get<GetOneResult<any>>(`/${resource}/item`, config)\r\n        return Promise.resolve(response.data);\r\n    } catch (error: any) {\r\n        const response = error.response;\r\n        return Promise.reject({message: response.data, status: response.status});\r\n    }\r\n};\r\n\r\nconst getMany = async (resource: string, params: any): Promise<GetManyResult<any>> => {\r\n    try{\r\n        const credentials = getCredentials();\r\n        const token = credentials?.access_token;\r\n        const config = {\r\n            headers: { Authorization: `Bearer ${token}` },\r\n            params,\r\n        };\r\n        const response = await axios.get<GetManyResult<any>>(`/${resource}/items`, config)\r\n        return Promise.resolve(response.data);\r\n    } catch (error: any) {\r\n        const response = error.response;\r\n        return Promise.reject({message: response.data, status: response.status});\r\n    }\r\n};\r\n\r\nconst getManyReference = async (resource: string, params: any): Promise<GetManyReferenceResult<any>>  => {\r\n    try{\r\n        const credentials = getCredentials();\r\n        const token = credentials?.access_token;\r\n        const config = {\r\n            headers: { Authorization: `Bearer ${token}` },\r\n            params,\r\n        };\r\n        const response = await axios.get<GetManyReferenceResult<any>>(`/${resource}/refs`, config)\r\n        return Promise.resolve(response.data);\r\n    } catch (error: any) {\r\n        const response = error.response;\r\n        return Promise.reject({message: response.data, status: response.status});\r\n    }\r\n};\r\n\r\nconst create = async (resource: string, params: any): Promise<CreateResult<any>> => {\r\n    try{\r\n        const credentials = getCredentials();\r\n        const token = credentials?.access_token;\r\n        const config = {\r\n            headers: { Authorization: `Bearer ${token}` },\r\n        };\r\n        const response = await axios.post<CreateResult<any>>(`/${resource}/item`, params, config)\r\n        return Promise.resolve(response.data);\r\n    } catch (error: any) {\r\n        const response = error.response;\r\n        return Promise.reject({message: response.data, status: response.status});\r\n    }\r\n};\r\n\r\nconst update = async (resource: string, params: any): Promise<UpdateResult<any>> => {\r\n    try{\r\n        const credentials = getCredentials();\r\n        const token = credentials?.access_token;\r\n        const config = {\r\n            headers: { Authorization: `Bearer ${token}` },\r\n        };\r\n        const response = await axios.put<UpdateResult<any>>(`/${resource}/item`, params, config)\r\n        return Promise.resolve(response.data);\r\n    } catch (error: any) {\r\n        const response = error.response;\r\n        return Promise.reject({message: response.data, status: response.status});\r\n    }\r\n};\r\n\r\nconst updateMany = async (resource: string, params: any): Promise<UpdateManyResult> => {\r\n    try{\r\n        const credentials = getCredentials();\r\n        const token = credentials?.access_token;\r\n        const config = {\r\n            headers: { Authorization: `Bearer ${token}` },\r\n        };\r\n        const response = await axios.put<UpdateManyResult>(`/${resource}/items`, params, config)\r\n        return Promise.resolve(response.data);\r\n    } catch (error: any) {\r\n        const response = error.response;\r\n        return Promise.reject({message: response.data, status: response.status});\r\n    }\r\n};\r\n\r\nconst deleteOne = async (resource: string, params: any): Promise<DeleteResult<any>> => {\r\n    try{\r\n        const credentials = getCredentials();\r\n        const token = credentials?.access_token;\r\n        const config = {\r\n            headers: { Authorization: `Bearer ${token}` },\r\n            params,\r\n        };\r\n        const response = await axios.delete<DeleteResult<any>>(`/${resource}/item`, config)\r\n        return Promise.resolve(response.data);\r\n    } catch (error: any) {\r\n        const response = error.response;\r\n        return Promise.reject({message: response.data, status: response.status});\r\n    }\r\n};\r\n\r\nconst deleteMany = async (resource: string, params: any): Promise<DeleteManyResult> => {\r\n    try{\r\n        const credentials = getCredentials();\r\n        const token = credentials?.access_token;\r\n        const config = {\r\n            headers: { Authorization: `Bearer ${token}` },\r\n            params,\r\n        };\r\n        const response = await axios.delete<DeleteManyResult>(`/${resource}/items`, config)\r\n        return Promise.resolve(response.data);\r\n    } catch (error: any) {\r\n        const response = error.response;\r\n        return Promise.reject({message: response.data, status: response.status});\r\n    }\r\n};\r\n\r\nexport const dataProvider = {\r\n    getList:    getList,\r\n    getOne:     getOne,\r\n    getMany:    getMany,\r\n    getManyReference: getManyReference,\r\n    create:     create,\r\n    update:     update,\r\n    updateMany: updateMany,\r\n    delete:     deleteOne,\r\n    deleteMany: deleteMany,\r\n}\r\n","import { AuthProvider } from 'react-admin';\r\nimport decodeJwt, { JwtPayload } from 'jwt-decode';\r\nimport axios, { AxiosError } from 'axios';\r\nimport {\r\n    isAuthenticated,\r\n    setCredentials,\r\n    getCredentials,\r\n    removeCredentials,\r\n} from \"./auth\"\r\n\r\ninterface RefreshToken {\r\n    access_token: string;\r\n  }\r\n\r\nconst baseURL = \"/auth\";\r\n\r\ninterface Permission {\r\n    permissions: string;\r\n}\r\n\r\ninterface LoginToken {\r\n    access_token: string;\r\n    refresh_token: string;\r\n}\r\n\r\ninterface UserIdentity {\r\n    id: number;\r\n    fullName: string;\r\n    avatar: string;\r\n}\r\n\r\nconst refreshToken = async () => {\r\n    const credentials = getCredentials();\r\n    if(!credentials) return;\r\n  \r\n    const token = credentials?.refresh_token;\r\n  \r\n    const config = {\r\n        headers: { Authorization: `Bearer ${token}` }\r\n    };\r\n    let response = await axios.post<RefreshToken>(`${baseURL}/refresh`, undefined, config)\r\n    const { access_token } = response.data;\r\n    setCredentials({\r\n        ...credentials,\r\n        access_token: access_token,\r\n    });\r\n};\r\n\r\n\r\nconst login = async ({ username, password }: {username: string; password:string;}) => {\r\n    try{\r\n        const response = await axios.post<LoginToken>(`${baseURL}/login`, { username, password })\r\n        const { access_token, refresh_token } = response.data;\r\n        const decodedToken = decodeJwt<Permission>(access_token);\r\n        setCredentials({\r\n            access_token,\r\n            refresh_token,\r\n            permissions: decodedToken.permissions,\r\n        });\r\n        return Promise.resolve();\r\n    } catch (error: any) {\r\n        const response = error.response;\r\n        return Promise.reject({message: response.data, status: response.status});\r\n    }\r\n};\r\n\r\nconst logout = async () => {\r\n    await axios.get(`${baseURL}/logout`)\r\n    removeCredentials();\r\n    return Promise.resolve('/login');\r\n}\r\n\r\nconst register = async ({ \r\n    first_name,\r\n    last_name,\r\n    email,\r\n    username, \r\n    password\r\n}: { \r\n    first_name: string;\r\n    last_name: string;\r\n    email: string;\r\n    username: string;\r\n    password: string;\r\n}) => {\r\n    try{\r\n    const response = await axios.post<ResponseType>(`${baseURL}/register`, { \r\n            first_name,\r\n            last_name,\r\n            email,\r\n            username, \r\n            password\r\n        })\r\n\r\n    } catch (error: any) {\r\n        const response = error.response;\r\n        return Promise.reject({message: response.data, status: response.status});\r\n    }\r\n}\r\n\r\nconst getIdentity = async () => { \r\n    try{\r\n        refreshToken();\r\n        const credentials = getCredentials();\r\n        const token = credentials?.access_token;\r\n        const config = {\r\n            headers: { Authorization: `Bearer ${token}` }\r\n        };\r\n        let response = await axios.get<UserIdentity>(`${baseURL}/user`, config)\r\n        const { id, fullName, avatar } = response.data;\r\n        \r\n        return Promise.resolve({ id, fullName, avatar });\r\n    } catch (error: any) {\r\n        // const response = error.response;\r\n        // removeCredentials();\r\n        // return Promise.reject({message: response.data, status: response.status});\r\n\r\n        return Promise.reject(error);\r\n    }\r\n };\r\n\r\n const checkError = async ({ status }: any) => {\r\n    if (status === 401 || status === 403 || status === 422) {\r\n        try{\r\n            refreshToken();\r\n        } catch (error: any) {\r\n            return Promise.reject();\r\n        }\r\n    }\r\n    return Promise.resolve();\r\n};\r\n\r\nconst checkAuth = () => {\r\n    try{\r\n        refreshToken();\r\n        return Promise.resolve();\r\n    } catch (error: any) {\r\n        return Promise.reject();\r\n    }\r\n}\r\n\r\nconst getPermissions = () => {\r\n    try{\r\n        refreshToken();\r\n        return Promise.resolve();\r\n    } catch (error: any) {\r\n        return Promise.reject();\r\n    }\r\n}\r\n\r\nexport const authProvider: AuthProvider =  {\r\n    login: login,\r\n    checkError: checkError,\r\n    checkAuth: checkAuth,\r\n    logout: logout,\r\n    getIdentity: getIdentity,\r\n    getPermissions: getPermissions,\r\n    register: register,\r\n};","import * as React from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AccountBalanceWalletIcon from '@material-ui/icons/AccountBalanceWallet';\r\nimport classNames from 'classnames';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        display: \"flex\",\r\n        [theme.breakpoints.down(\"xs\")]: {\r\n            display: \"none\",\r\n        },\r\n        alignItems:\"center\",\r\n        gap: theme.spacing(1)\r\n    },\r\n    logoIcon: {\r\n        color: theme.palette.secondary.light,\r\n    },\r\n    logoText: {\r\n        color: theme.palette.primary.light,\r\n    }\r\n}));\r\n\r\nconst Logo = () => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.root}>\r\n            <AccountBalanceWalletIcon className={classes.logoIcon} />\r\n            <Typography variant=\"h6\" className={classes.logoText} >\r\n                Assistor\r\n            </Typography>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Logo;\r\n","import * as React from 'react';\r\nimport { forwardRef } from 'react';\r\nimport { AppBar, UserMenu, MenuItemLink, useTranslate } from 'react-admin';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport Logo from './Logo';\r\n\r\nconst useStyles = makeStyles({\r\n    title: {\r\n        flex: 1,\r\n        textOverflow: 'ellipsis',\r\n        whiteSpace: 'nowrap',\r\n        overflow: 'hidden',\r\n    },\r\n    spacer: {\r\n        flex: 1,\r\n    },\r\n});\r\n\r\nconst ConfigurationMenu = forwardRef<any, any>((props, ref) => {\r\n    const translate = useTranslate();\r\n    return (\r\n        <MenuItemLink\r\n            ref={ref}\r\n            to=\"/configuration\"\r\n            primaryText=\"Configuration\"\r\n            leftIcon={<SettingsIcon />}\r\n            onClick={props.onClick}\r\n            sidebarIsOpen\r\n        />\r\n    );\r\n});\r\n\r\nconst CustomUserMenu = (props: any) => (\r\n    <UserMenu {...props}>\r\n        <ConfigurationMenu />\r\n    </UserMenu>\r\n);\r\n\r\nconst CustomAppBar = (props: any) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <AppBar {...props} elevation={1} userMenu={<CustomUserMenu />}>\r\n            <Typography\r\n                variant=\"h6\"\r\n                color=\"inherit\"\r\n                className={classes.title}\r\n                id=\"react-admin-title\"\r\n            />\r\n            <Logo />\r\n            <span className={classes.spacer} />\r\n        </AppBar>\r\n    );\r\n};\r\n\r\nexport default CustomAppBar;\r\n","import * as React from 'react';\r\nimport { Fragment, ReactElement, ReactNode } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport {\r\n    List,\r\n    MenuItem,\r\n    ListItemIcon,\r\n    Typography,\r\n    Collapse,\r\n    Tooltip,\r\n} from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ExpandMore from '@material-ui/icons/ExpandMore';\r\nimport { useTranslate, ReduxState } from 'react-admin';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    icon: { minWidth: theme.spacing(5) },\r\n    sidebarIsOpen: {\r\n        '& a': {\r\n            transition: 'padding-left 195ms cubic-bezier(0.4, 0, 0.6, 1) 0ms',\r\n            paddingLeft: theme.spacing(4),\r\n        },\r\n    },\r\n    sidebarIsClosed: {\r\n        '& a': {\r\n            transition: 'padding-left 195ms cubic-bezier(0.4, 0, 0.6, 1) 0ms',\r\n            paddingLeft: theme.spacing(2),\r\n        },\r\n    },\r\n}));\r\n\r\ninterface Props {\r\n    dense: boolean;\r\n    handleToggle: () => void;\r\n    icon: ReactElement;\r\n    isOpen: boolean;\r\n    name: string;\r\n    children: ReactNode;\r\n}\r\n\r\nconst SubMenu = (props: Props) => {\r\n    const { handleToggle, isOpen, name, icon, children, dense } = props;\r\n    const translate = useTranslate();\r\n    const classes = useStyles();\r\n    const sidebarIsOpen = useSelector<ReduxState, boolean>(\r\n        state => state.admin.ui.sidebarOpen\r\n    );\r\n\r\n    const header = (\r\n        <MenuItem dense={dense} button onClick={handleToggle}>\r\n            <ListItemIcon className={classes.icon}>\r\n                {isOpen ? <ExpandMore /> : icon}\r\n            </ListItemIcon>\r\n            <Typography variant=\"inherit\" color=\"textSecondary\">\r\n                {translate(name)}\r\n            </Typography>\r\n        </MenuItem>\r\n    );\r\n\r\n    return (\r\n        <Fragment>\r\n            {sidebarIsOpen || isOpen ? (\r\n                header\r\n            ) : (\r\n                <Tooltip title={translate(name)} placement=\"right\">\r\n                    {header}\r\n                </Tooltip>\r\n            )}\r\n            <Collapse in={isOpen} timeout=\"auto\" unmountOnExit>\r\n                <List\r\n                    dense={dense}\r\n                    component=\"div\"\r\n                    disablePadding\r\n                    className={\r\n                        sidebarIsOpen\r\n                            ? classes.sidebarIsOpen\r\n                            : classes.sidebarIsClosed\r\n                    }\r\n                >\r\n                    {children}\r\n                </List>\r\n            </Collapse>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default SubMenu;\r\n","export const sectors = [\r\n    'Factory Automation',\r\n    'Logistics Automation',\r\n    'Warehouse Automation',\r\n    'Consulting & Development',\r\n].map(sector => ({ id: sector, name: sector }));\r\n","import * as React from 'react';\r\nimport { Avatar } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport BusinessIcon from '@material-ui/icons/Business';\r\nimport clsx from 'clsx';\r\n\r\nimport { Company } from '../types';\r\n\r\nconst useStyles = makeStyles({\r\n    avatar: {\r\n        width: 60,\r\n        height: 60,\r\n        backgroundColor: 'aliceblue',\r\n    },\r\n    img: {\r\n        objectFit: 'contain',\r\n    },\r\n    small: {\r\n        width: 20,\r\n        height: 20,\r\n    },\r\n    large: {\r\n        width: 40,\r\n        height: 40,\r\n    },\r\n});\r\n\r\nexport const CompanyAvatar = ({\r\n    record,\r\n    size = 'large',\r\n}: {\r\n    record?: Company;\r\n    size?: 'small' | 'large';\r\n}) => {\r\n    const classes = useStyles();\r\n    if (!record) return null;\r\n    if(!record.logo) return (\r\n        <Avatar\r\n            alt={record.name}\r\n            className={classes.avatar}\r\n        >\r\n            <BusinessIcon />\r\n        </Avatar>\r\n    )\r\n    return (\r\n        <Avatar\r\n            src={process.env.PUBLIC_URL + record.logo}\r\n            alt={record.name}\r\n            className={classes.avatar}\r\n            imgProps={{ className: clsx(classes.img, classes[size]) }}\r\n        />\r\n    );\r\n};\r\n","import * as React from 'react';\r\nimport { Theme } from '@material-ui/core';\r\nimport BusinessIcon from '@material-ui/icons/Business';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { ImageField } from 'react-admin';\r\n\r\nexport interface StyleProps {\r\n    width: number;\r\n}\r\n\r\nconst useStyles = makeStyles<Theme, StyleProps>(theme => ({\r\n    image: {\r\n        width: props => props.width\r\n    },\r\n}));\r\n\r\nconst sizeInPixel = {\r\n    medium: 42,\r\n    small: 20,\r\n};\r\n\r\nexport const CountryField = ({\r\n    record,\r\n    source=\"url\",\r\n    title=\"nicename\",\r\n    size = 'medium',\r\n}: {\r\n    record?: { logo: string; name: string };\r\n    source?: string;\r\n    title?: string;\r\n    size?: 'small' | 'medium';\r\n}) => {\r\n    const classes = useStyles({width: sizeInPixel[size]});\r\n    if (!record) return null;\r\n\r\n    return (\r\n        <ImageField \r\n            record={record as any}\r\n            source={source} \r\n            title={title}\r\n            classes={classes}\r\n        />\r\n    );\r\n};\r\n","import * as React from 'react';\r\nimport { useState } from 'react';\r\nimport { Paper, Typography, Link as MuiLink, Box, Chip, Checkbox } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ContactsIcon from '@material-ui/icons/AccountCircle';\r\nimport DealIcon from '@material-ui/icons/MonetizationOn';\r\nimport NoteIcon from '@material-ui/icons/Note';\r\nimport { linkToRecord, SelectField, ReferenceField, useListContext } from 'react-admin';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { sectors } from './sectors';\r\nimport { CompanyAvatar } from './CompanyAvatar';\r\nimport { Company } from '../types';\r\nimport { CountryField } from './CountryField';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    paper: {\r\n        height: 200,\r\n        width: 185,\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'space-between',\r\n        padding: '1em',\r\n        position: 'relative',\r\n    },\r\n    identity: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    name: {\r\n        textAlign: 'center',\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    stats: {\r\n        display: 'flex',\r\n        justifyContent: 'space-around',\r\n        width: '100%',\r\n    },\r\n    singleStat: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    },\r\n    statIcon: {\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    checkbox: {\r\n        position: 'absolute',\r\n        top: 0,\r\n        right: 0,\r\n    },\r\n    identifier: {\r\n        position: 'absolute',\r\n        top: theme.spacing(1),\r\n        lrft: 0,\r\n    }\r\n}));\r\n\r\nexport const CompanyCard = ({ record }: { record: Company }) => {\r\n    const classes = useStyles();\r\n    const [elevation, setElevation] = useState(1);\r\n    const { data, ids, loaded, onToggleItem, selectedIds } = useListContext<Company>();\r\n    return (\r\n        <MuiLink\r\n            component={Link}\r\n            to={linkToRecord('/companies', record.id, 'show')}\r\n            underline=\"none\"\r\n            onMouseEnter={() => setElevation(3)}\r\n            onMouseLeave={() => setElevation(1)}\r\n        >\r\n            <Paper className={classes.paper} elevation={elevation}>\r\n                <Checkbox\r\n                    edge=\"start\"\r\n                    checked={selectedIds.includes(record.id)}\r\n                    tabIndex={-1}\r\n                    disableRipple\r\n                    className={classes.checkbox}\r\n                    onClick={(e: any )=> {\r\n                        e.stopPropagation();\r\n                        onToggleItem(record.id);\r\n                    }}\r\n                />\r\n                <Typography \r\n                    variant=\"body2\" \r\n                    color=\"textSecondary\"\r\n                    className={classes.identifier}\r\n                >\r\n                    {`#${record.id}`}\r\n                </Typography>\r\n                <div className={classes.identity}>\r\n                    <CompanyAvatar record={record} />\r\n                    <div className={classes.name}>\r\n                        <Box display=\"flex\" alignItems=\"center\">\r\n                        <Typography variant=\"subtitle2\">\r\n                            {record.name}\r\n                        </Typography>\r\n                        <ReferenceField\r\n                            record={record}\r\n                            source=\"country_id\"\r\n                            reference=\"countries\"\r\n                            link={false}\r\n                        >\r\n                            <CountryField size='small' />\r\n                        </ReferenceField>\r\n                        </Box>\r\n                        {record.relation && (\r\n                            <Chip \r\n                                label={record.relation} \r\n                                variant=\"outlined\" \r\n                                size=\"small\"\r\n                            />\r\n                        )}\r\n                        <SelectField\r\n                            color=\"textSecondary\"\r\n                            source=\"sector\"\r\n                            choices={sectors}\r\n                            record={record}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className={classes.stats}>\r\n                    <div className={classes.singleStat}>\r\n                        <ContactsIcon\r\n                            color=\"disabled\"\r\n                            className={classes.statIcon}\r\n                        />\r\n                        <div>\r\n                            <Typography\r\n                                variant=\"subtitle2\"\r\n                                style={{ marginBottom: -8 }}\r\n                            >\r\n                                {record.nb_contacts}\r\n                            </Typography>\r\n                            <Typography variant=\"caption\" color=\"textSecondary\">\r\n                                {record.nb_contacts > 1\r\n                                    ? 'contacts'\r\n                                    : 'contact'}\r\n                            </Typography>\r\n                        </div>\r\n                    </div>\r\n                    <div className={classes.singleStat}>\r\n                        <NoteIcon\r\n                            color=\"disabled\"\r\n                            className={classes.statIcon}\r\n                        />\r\n                        <div>\r\n                            <Typography\r\n                                variant=\"subtitle2\"\r\n                                style={{ marginBottom: -8 }}\r\n                            >\r\n                                {record.nb_notes}\r\n                            </Typography>\r\n                            <Typography variant=\"caption\" color=\"textSecondary\">\r\n                                {record.nb_notes > 1 ? 'notes' : 'note'}\r\n                            </Typography>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Paper>\r\n        </MuiLink>\r\n    );\r\n};\r\n","import * as React from 'react';\r\nimport { Box, Paper } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useListContext, Identifier } from 'react-admin';\r\n\r\nimport { CompanyCard } from './CompanyCard';\r\nimport { Company } from '../types';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    gridList: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        width:  '100%',\r\n        gap: '5px',\r\n        justifyContent: 'center',\r\n    },\r\n    paper: {\r\n        height: 200,\r\n        width: 194,\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        backgroundColor: theme.palette.grey[200],\r\n    },\r\n}));\r\n\r\nconst times = (nbChildren: number, fn: (key: number) => any) =>\r\n    Array.from({ length: nbChildren }, (_, key) => fn(key));\r\n\r\nconst LoadingGridList = () => {\r\n    const classes = useStyles();\r\n    return (\r\n        <Box className={classes.gridList}>\r\n            {times(15, key => (\r\n                <Paper className={classes.paper} key={key} />\r\n            ))}\r\n        </Box>\r\n    );\r\n};\r\n\r\nconst LoadedGridList = () => {\r\n    const { ids, data } = useListContext<Company>();\r\n    const classes = useStyles();\r\n\r\n    if (!ids || !data) return null;\r\n\r\n    return (\r\n        <Box className={classes.gridList}>\r\n            {ids.map((id: Identifier) => (\r\n                <CompanyCard key={id} record={data[id]} />\r\n            ))}\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport const GridList = () => {\r\n    const { loaded } = useListContext();\r\n    return loaded ? <LoadedGridList /> : <LoadingGridList />;\r\n};\r\n","export const relations = [\r\n    'Distributor',\r\n    'End-customer',\r\n    'Prospect',\r\n    'System Integrator'\r\n].map(relations => ({ id: relations, name: relations }));","import { Box, Chip } from '@material-ui/core';\r\nimport { Tag } from '../types'\r\n\r\nexport const TagChip = ({ record }: { record: Tag; }) => (\r\n    <>\r\n        { record && (\r\n                <Chip\r\n                label={record.name}\r\n                size=\"small\"\r\n                style={{\r\n                    backgroundColor: record.color,\r\n                    border: 0,\r\n                    cursor: 'pointer',\r\n                }}\r\n            />\r\n        )}\r\n    </>\r\n);","/* eslint-disable import/no-anonymous-default-export */\r\nimport * as React from 'react';\r\nimport {\r\n    FilterList,\r\n    FilterLiveSearch,\r\n    FilterListItem,\r\n    useGetIdentity,\r\n    useGetList,\r\n} from 'react-admin';\r\nimport { Box, Chip } from '@material-ui/core';\r\nimport BusinessIcon from '@material-ui/icons/Business';\r\nimport LocalShippingIcon from '@material-ui/icons/LocalShipping';\r\nimport SupervisorAccountIcon from '@material-ui/icons/SupervisorAccount';\r\nimport LocalOfferIcon from '@material-ui/icons/LocalOffer';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { sizes } from './sizes';\r\nimport { sectors } from './sectors';\r\nimport { relations } from './relations';\r\nimport { TagChip } from '../tags/TagChip';\r\nimport { Tag } from '../types';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    container: {\r\n        order: -1,\r\n        marginLeft: theme.spacing(1),\r\n        marginRight: theme.spacing(1),\r\n        minWidth: '13em',\r\n        [theme.breakpoints.down('xs')]: {\r\n            display: 'none',\r\n        }\r\n    },\r\n}));\r\n\r\nexport const CompanyListFilter = () => {\r\n    const classes = useStyles();\r\n    const { identity } = useGetIdentity();\r\n    const { data, ids } = useGetList<Tag>(\r\n        'tags',\r\n        { page: 1, perPage: 10 },\r\n        { field: 'name', order: 'ASC' }\r\n    );\r\n    return (\r\n        <div className={classes.container}>\r\n            <FilterLiveSearch />\r\n\r\n            <FilterList label=\"Relation\" icon={<BusinessIcon />}>\r\n                {relations.map(relation => (\r\n                    <FilterListItem\r\n                        key={relation.id}\r\n                        label={relation.name}\r\n                        value={{ relation: relation.id }}\r\n                    />\r\n                ))}\r\n            </FilterList>\r\n\r\n            <FilterList label=\"Tags\" icon={<LocalOfferIcon />}>\r\n                {ids &&\r\n                    data &&\r\n                    ids.map(id => (\r\n                        <FilterListItem\r\n                            key={id}\r\n                            label={<TagChip record={data[id]}/>}\r\n                            value={{ tags: [id] }}\r\n                        />\r\n                    ))}\r\n            </FilterList>\r\n\r\n            <FilterList label=\"Sector\" icon={<LocalShippingIcon />}>\r\n                {sectors.map(sector => (\r\n                    <FilterListItem\r\n                        key={sector.id}\r\n                        label={sector.name}\r\n                        value={{ sector: sector.id }}\r\n                    />\r\n                ))}\r\n            </FilterList>\r\n\r\n            <FilterList\r\n                label=\"Account manager\"\r\n                icon={<SupervisorAccountIcon />}\r\n            >\r\n                <FilterListItem\r\n                    label=\"Me\"\r\n                    value={{\r\n                        sales_id: identity && identity.id,\r\n                    }}\r\n                />\r\n            </FilterList>\r\n        </div>\r\n    );\r\n};\r\n","// in ./MarkDoneButton.js\r\nimport * as React from 'react';\r\nimport { Button, useListContext } from 'react-admin';\r\nimport DoneAllIcon from '@material-ui/icons/DoneAll';\r\nimport { Company } from '../types';\r\n\r\nconst doneState = { status: 'Done' };\r\n\r\nconst SelectAllButton = () => {\r\n    const { ids, data, onSelect } = useListContext<Company>();\r\n    return (\r\n        <Button\r\n            onClick={(e:any) =>{\r\n                e.stopPropagation();\r\n                onSelect(ids);\r\n            }}\r\n            label=\"Select All\"\r\n        >\r\n            <DoneAllIcon />\r\n        </Button>\r\n    );\r\n};\r\n\r\nexport default SelectAllButton;","import * as React from 'react';\r\nimport {\r\n    List,\r\n    ListProps,\r\n    TopToolbar,\r\n    ExportButton,\r\n    CreateButton,\r\n    Pagination,\r\n    useGetIdentity,\r\n    ListActionsProps,\r\n    SortButton,\r\n    FilterLiveSearch,\r\n} from 'react-admin';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { GridList } from './GridList';\r\nimport { CompanyListFilter } from './CompanyListFilter';\r\nimport { ImportButton } from 'react-admin-import-csv';\r\nimport SelectAllButton from './SelectAllButton';\r\nimport { Box } from '@material-ui/core';\r\n\r\nexport const CompanyList = (props: ListProps) => {\r\n    const { identity } = useGetIdentity();\r\n    return identity ? (\r\n        <List\r\n            {...props}\r\n            actions={<CompanyListActions />}\r\n            aside={<CompanyListFilter />}\r\n            filterDefaultValues={{ sales_id: identity?.id }}\r\n            pagination={<Pagination rowsPerPageOptions={[15, 25, 50, 100, 1000]} />}\r\n            perPage={25}\r\n            sort={{ field: 'name', order: 'ASC' }}\r\n            component=\"div\"\r\n        >\r\n            <GridList />\r\n        </List>\r\n    ) : null;\r\n};\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    toolbar: {\r\n        \r\n    },\r\n    createButton: {\r\n        marginLeft: theme.spacing(2),\r\n    },\r\n    spacer: {\r\n\r\n    },\r\n    searchbox: {\r\n        display: 'block',\r\n        [theme.breakpoints.up('sm')]: {\r\n            display: 'none',\r\n        }\r\n    }\r\n}));\r\n\r\nconst importOptions = {\r\n    parseConfig: {\r\n        // For all options see: https://www.papaparse.com/docs#config\r\n        dynamicTyping: true\r\n    }\r\n}\r\n\r\n\r\nconst CompanyListActions = (props: ListActionsProps) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <TopToolbar className={classes.toolbar} >\r\n            <div className={classes.searchbox}>\r\n                <FilterLiveSearch />\r\n            </div>\r\n            <SortButton fields={['id', 'name']} />\r\n            <SelectAllButton />\r\n            <ExportButton />\r\n            <ImportButton {...props} {...importOptions}/>\r\n            <CreateButton\r\n                basePath=\"/companies\"\r\n                variant=\"contained\"\r\n                label=\"New Company\"\r\n                className={classes.createButton}\r\n            />\r\n        </TopToolbar>\r\n    );\r\n};\r\n","export const sizes = [\r\n    { id: 1, name: '1 employee' },\r\n    { id: 10, name: '2-9 employees' },\r\n    { id: 50, name: '10-49 employees' },\r\n    { id: 250, name: '50-249 employees' },\r\n    { id: 500, name: '250 or more employees' },\r\n];\r\n","import { AutocompleteInput, AutocompleteInputProps } from 'react-admin';\r\n\r\nconst DistributorInput = (props: AutocompleteInputProps) => (\r\n    <AutocompleteInput \r\n        {...props}\r\n        optionText={record => record ? record.country_iso ? `${record.name} (${record.country_iso})` : `${record.name}` : ''} \r\n        allowEmpty\r\n        resettable\r\n    />\r\n);\r\n\r\nexport default DistributorInput;","import * as React from 'react';\r\nimport {\r\n    Create,\r\n    CreateProps,\r\n    ReferenceInput,\r\n    SimpleForm,\r\n    TextInput,\r\n    SelectInput,\r\n    required,\r\n    AutocompleteInput,\r\n    useGetIdentity,\r\n    FormDataConsumer,\r\n    ReferenceArrayInput,\r\n    AutocompleteArrayInput,\r\n} from 'react-admin';\r\nimport { Box, CardContent, Divider, Avatar } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport BusinessIcon from '@material-ui/icons/Business';\r\nimport clsx from 'clsx';\r\n\r\nimport { sectors } from './sectors';\r\nimport { sizes } from './sizes';\r\nimport { relations } from './relations';\r\nimport DistributorInput from './DistributorInput';\r\n\r\nconst useStyles = makeStyles({\r\n    inline: {\r\n        display: 'inline-block',\r\n        marginLeft: '1em',\r\n        '&.first-child': {\r\n            marginLeft: 0,\r\n        },\r\n    },\r\n});\r\n\r\nexport const CompanyCreate = (props: CreateProps) => {\r\n    const classes = useStyles();\r\n    const { identity } = useGetIdentity();\r\n\r\n    if (!identity) return null;\r\n\r\n    const companyDefaultValue = () => ({ sales_id: identity && identity?.id });\r\n\r\n    return (\r\n        <Create {...props} actions={false}>\r\n            <SimpleForm \r\n                component={CustomLayout} \r\n                initialValues={companyDefaultValue}\r\n                redirect=\"show\"\r\n            >\r\n                <TextInput source=\"name\" validate={required()} fullWidth />\r\n                <SelectInput\r\n                    source=\"sector\"\r\n                    choices={sectors}\r\n                    formClassName={clsx(classes.inline, 'first-child')}\r\n                />\r\n                <SelectInput\r\n                    source=\"size\"\r\n                    choices={sizes}\r\n                    formClassName={classes.inline}\r\n                />\r\n                <SelectInput\r\n                    source=\"relation\"\r\n                    choices={relations}\r\n                    formClassName={classes.inline}\r\n                />\r\n                <FormDataConsumer>\r\n                    {({ formData, ...rest }) => formData.relation != 'Distributor' &&\r\n                        <ReferenceInput\r\n                            source=\"distributor_id\"\r\n                            reference=\"companies\"\r\n                        >\r\n                            <DistributorInput />\r\n                        </ReferenceInput>\r\n                    }\r\n                </FormDataConsumer>\r\n\r\n                <ReferenceArrayInput source=\"use_products\" reference=\"products\">\r\n                    <AutocompleteArrayInput source=\"model\" />\r\n                </ReferenceArrayInput>\r\n\r\n                <CustomDivider />\r\n                <TextInput source=\"address\" fullWidth helperText={false} />\r\n                <TextInput\r\n                    source=\"city\"\r\n                    formClassName={clsx(classes.inline, 'first-child')}\r\n                />\r\n                <TextInput source=\"zipcode\" formClassName={classes.inline} />\r\n                <TextInput source=\"stateAbbr\" formClassName={classes.inline} />\r\n                <ReferenceInput\r\n                    source=\"country_id\"\r\n                    reference=\"countries\"\r\n                >\r\n                    <AutocompleteInput optionText=\"nicename\" />\r\n                </ReferenceInput>\r\n                <CustomDivider />\r\n                <TextInput source=\"website\" fullWidth helperText={false} />\r\n                <TextInput source=\"linkedIn\" fullWidth helperText={false} />\r\n                <TextInput source=\"logo\" fullWidth />\r\n                <CustomDivider />\r\n                <TextInput\r\n                    source=\"phone_number\"\r\n                    formClassName={clsx(classes.inline, 'first-child')}\r\n                    helperText={false}\r\n                />\r\n                <ReferenceInput\r\n                    source=\"sales_id\"\r\n                    reference=\"sales\"\r\n                    label=\"Account manager\"\r\n                    formClassName={classes.inline}\r\n                    helperText={false}\r\n                >\r\n                    <SelectInput\r\n                        optionText={(sales: any) =>\r\n                            `${sales.first_name} ${sales.last_name}`\r\n                        }\r\n                    />\r\n                </ReferenceInput>\r\n            </SimpleForm>\r\n        </Create>\r\n    );\r\n};\r\n\r\nconst CustomLayout = ({ children }: \r\n    {children: any;}) => (\r\n    <CardContent>\r\n        <Box display=\"flex\">\r\n            <Box paddingTop={1}>\r\n                <Avatar>\r\n                    <BusinessIcon />\r\n                </Avatar>\r\n            </Box>\r\n            <Box ml={2} flex=\"1\" maxWidth={796}>\r\n                {children}\r\n            </Box>\r\n        </Box>\r\n    </CardContent>\r\n);\r\n\r\nconst CustomDivider = () => (\r\n    <Box mb={2}>\r\n        <Divider />\r\n    </Box>\r\n);\r\n","import * as React from 'react';\r\nimport { Avatar as MuiAvatar } from '@material-ui/core';\r\n\r\nimport { Contact } from '../types';\r\n\r\nexport const Avatar = ({ record }: { record: Contact }) => (\r\n    <MuiAvatar src={record.avatar}>\r\n        {record.first_name.charAt(0)}\r\n        {record.last_name.charAt(0)}\r\n    </MuiAvatar>\r\n);\r\n","import * as React from 'react';\r\nimport { Box } from '@material-ui/core';\r\n\r\nconst getColorFromStatus = (status: string) =>\r\n    status === 'cold'\r\n        ? '#7dbde8'\r\n        : status === 'warm'\r\n        ? '#e8cb7d'\r\n        : status === 'hot'\r\n        ? '#e88b7d'\r\n        : status === 'in-contract'\r\n        ? '#a4e87d'\r\n        : '#000';\r\n\r\nexport const Status = ({ status }: { status: string }) => (\r\n    <Box\r\n        width={10}\r\n        height={10}\r\n        display=\"inline-block\"\r\n        borderRadius={5}\r\n        bgcolor={getColorFromStatus(status)}\r\n        component=\"span\"\r\n    />\r\n);\r\n","import * as React from 'react';\r\nimport { ReferenceArrayField, SingleFieldList, ChipField } from 'react-admin';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { Contact } from '../types';\r\n\r\nconst ColoredChipField = ({ record, ...props }: any) =>\r\n    record ? (\r\n        <ChipField\r\n            record={record}\r\n            {...props}\r\n            style={{ backgroundColor: record.color, border: 0 }}\r\n            component=\"span\"\r\n        />\r\n    ) : null;\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        display: 'inline-block',\r\n    },\r\n});\r\n\r\nexport const TagsList = ({ record }: { record: Contact }) => {\r\n    const classes = useStyles();\r\n    if (!record) return null;\r\n    return (\r\n        <ReferenceArrayField\r\n            record={record}\r\n            basePath=\"/contacts\"\r\n            resource=\"contacts\"\r\n            source=\"tags\"\r\n            reference=\"tags\"\r\n            className={classes.root}\r\n        >\r\n            <SingleFieldList linkType={false} component=\"span\">\r\n                <ColoredChipField\r\n                    source=\"name\"\r\n                    variant=\"outlined\"\r\n                    size=\"small\"\r\n                />\r\n            </SingleFieldList>\r\n        </ReferenceArrayField>\r\n    );\r\n};\r\n","import * as React from 'react';\r\nimport { Avatar } from '@material-ui/core';\r\nimport BusinessIcon from '@material-ui/icons/Business';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles({\r\n    image: {\r\n        objectFit: 'contain',\r\n    },\r\n});\r\n\r\nconst sizeInPixel = {\r\n    medium: 42,\r\n    small: 20,\r\n};\r\n\r\nexport const LogoField = ({\r\n    record,\r\n    source,\r\n    size = 'medium',\r\n}: {\r\n    record?: { logo: string; name: string };\r\n    source?: string;\r\n    size?: 'small' | 'medium';\r\n}) => {\r\n    const classes = useStyles();\r\n    if (!record) return null;\r\n    if(!record.logo) return (\r\n        <Avatar>\r\n            <BusinessIcon />\r\n        </Avatar>\r\n    )\r\n    return (\r\n        <img\r\n            src={process.env.PUBLIC_URL + record.logo}\r\n            alt={record.name}\r\n            title={record.name}\r\n            width={sizeInPixel[size]}\r\n            height={sizeInPixel[size]}\r\n            className={classes.image}\r\n        />\r\n    );\r\n};\r\n","export const colors = [\r\n    '#eddcd2',\r\n    '#fff1e6',\r\n    '#fde2e4',\r\n    '#fad2e1',\r\n    '#c5dedd',\r\n    '#dbe7e4',\r\n    '#f0efeb',\r\n    '#d6e2e9',\r\n    '#bcd4e6',\r\n    '#99c1de',\r\n];\r\n","import * as React from 'react';\r\nimport { useState, FormEvent } from 'react';\r\nimport {\r\n    useGetMany,\r\n    useCreate,\r\n    useUpdate,\r\n    useGetList,\r\n    Identifier,\r\n} from 'react-admin';\r\nimport {\r\n    Chip,\r\n    Box,\r\n    Button,\r\n    Dialog,\r\n    DialogTitle,\r\n    DialogContent,\r\n    DialogActions,\r\n    TextField,\r\n    MenuItem,\r\n    Menu,\r\n} from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ControlPointIcon from '@material-ui/icons/ControlPoint';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\n\r\nimport { colors } from './colors';\r\nimport { Contact, Company, Product } from '../types';\r\nimport { Tag } from '../types';\r\n\r\nexport const TagsListEdit = ({ \r\n    record,\r\n    reference, \r\n}: { \r\n    record: Contact | Company | Product;\r\n    reference: 'companies' | 'contacts' | 'products';\r\n}) => {\r\n    const [open, setOpen] = useState(false);\r\n    const [newTagName, setNewTagName] = useState('');\r\n    const [newTagColor, setNewTagColor] = useState(colors[0]);\r\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\r\n    const [version, setVersion] = useState(0); // used to force the refresh of useGetList without refreshing the whole page\r\n    const [disabled, setDisabled] = useState(false);\r\n\r\n    const { data: allTags, ids } = useGetList<Tag>(\r\n        'tags',\r\n        { page: 1, perPage: 10 },\r\n        { field: 'name', order: 'ASC' },\r\n        {},\r\n        { version } as any // FIXME UseDataProviderOptions don't allow [key: string]: any\r\n    );\r\n    const { data: tags, loaded } = useGetMany('tags', record.tags, {\r\n        enabled: record.tags && record.tags.length > 0,\r\n    });\r\n    const [update] = useUpdate();\r\n    const [create] = useCreate();\r\n\r\n    const unselectedTagIds = ids && ids.filter(id => !record.tags.includes(id));\r\n\r\n    const handleOpen = (event: React.MouseEvent<HTMLDivElement>) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const handleDeleteTag = (id: Identifier) => {\r\n        const tags: Identifier[] = record.tags.filter(\r\n            (tagId: Identifier) => tagId !== id\r\n        );\r\n        update(reference, record.id, { tags }, record);\r\n    };\r\n\r\n    const handleAddTag = (id: Identifier) => {\r\n        const tags: Identifier[] = [...record.tags, id];\r\n        update(reference, record.id, { tags }, record);\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const handleOpenCreateDialog = () => {\r\n        setOpen(true);\r\n        setAnchorEl(null);\r\n        setDisabled(false);\r\n    };\r\n\r\n    const handleNewTagNameChange = (\r\n        event: React.ChangeEvent<HTMLInputElement>\r\n    ) => {\r\n        setNewTagName(event.target.value);\r\n    };\r\n\r\n    const handleCreateTag = (event: FormEvent<HTMLFormElement>) => {\r\n        event.preventDefault();\r\n        setDisabled(true);\r\n        create(\r\n            'tags',\r\n            { name: newTagName, color: newTagColor },\r\n            {\r\n                onSuccess: ({ data }) => {\r\n                    update(\r\n                        reference,\r\n                        record.id,\r\n                        { tags: [...record.tags, data.id] },\r\n                        record,\r\n                        {\r\n                            onSuccess: () => {\r\n                                setNewTagName('');\r\n                                setNewTagColor(colors[0]);\r\n                                setOpen(false);\r\n\r\n                                setVersion(v => v + 1);\r\n                            },\r\n                        }\r\n                    );\r\n                },\r\n            }\r\n        );\r\n    };\r\n\r\n    // if (!loaded || !tags) return null;\r\n    return (\r\n        <>\r\n            {tags.map(tag => (\r\n                <Box mt={1} mb={1} key={tag.id}>\r\n                    <Chip\r\n                        size=\"small\"\r\n                        variant=\"outlined\"\r\n                        onDelete={() => handleDeleteTag(tag.id)}\r\n                        label={tag.name}\r\n                        style={{ backgroundColor: tag.color, border: 0 }}\r\n                    />\r\n                </Box>\r\n            ))}\r\n            <Box mt={1}>\r\n                <Chip\r\n                    icon={<ControlPointIcon />}\r\n                    size=\"small\"\r\n                    variant=\"outlined\"\r\n                    onClick={handleOpen}\r\n                    label=\"Add tag\"\r\n                    color=\"primary\"\r\n                />\r\n            </Box>\r\n            <Menu\r\n                open={Boolean(anchorEl)}\r\n                onClose={handleClose}\r\n                anchorEl={anchorEl}\r\n            >\r\n                {unselectedTagIds?.map(id => (\r\n                    <MenuItem key={id} onClick={() => handleAddTag(id)}>\r\n                        <Chip\r\n                            size=\"small\"\r\n                            variant=\"outlined\"\r\n                            label={allTags && allTags[id].name}\r\n                            style={{\r\n                                backgroundColor: allTags && allTags[id].color,\r\n                                border: 0,\r\n                            }}\r\n                            onClick={() => handleAddTag(id)}\r\n                        />\r\n                    </MenuItem>\r\n                ))}\r\n                <MenuItem onClick={handleOpenCreateDialog}>\r\n                    <Chip\r\n                        icon={<EditIcon />}\r\n                        size=\"small\"\r\n                        variant=\"outlined\"\r\n                        onClick={handleOpenCreateDialog}\r\n                        color=\"primary\"\r\n                        label=\"Create new tag\"\r\n                    />\r\n                </MenuItem>\r\n            </Menu>\r\n            <Dialog\r\n                open={open}\r\n                onClose={() => setOpen(false)}\r\n                aria-labelledby=\"form-dialog-title\"\r\n            >\r\n                <form onSubmit={handleCreateTag}>\r\n                    <DialogTitle id=\"form-dialog-title\">\r\n                        Create a new tag\r\n                    </DialogTitle>\r\n                    <DialogContent>\r\n                        <TextField\r\n                            autoFocus\r\n                            label=\"Tag name\"\r\n                            fullWidth\r\n                            value={newTagName}\r\n                            onChange={handleNewTagNameChange}\r\n                        />\r\n                        <Box display=\"flex\" flexWrap=\"wrap\" width={230} mt={2}>\r\n                            {colors.map(color => (\r\n                                <RoundButton\r\n                                    key={color}\r\n                                    color={color}\r\n                                    selected={color === newTagColor}\r\n                                    handleClick={() => {\r\n                                        setNewTagColor(color);\r\n                                    }}\r\n                                />\r\n                            ))}\r\n                        </Box>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={() => setOpen(false)} color=\"primary\">\r\n                            Cancel\r\n                        </Button>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            color=\"primary\"\r\n                            disabled={disabled}\r\n                        >\r\n                            Add tag\r\n                        </Button>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: 30,\r\n        height: 30,\r\n        borderRadius: 15,\r\n        display: 'inline-block',\r\n        margin: 8,\r\n    },\r\n});\r\n\r\nconst RoundButton = ({ color, handleClick, selected }: any) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <button\r\n            type=\"button\"\r\n            className={classes.root}\r\n            style={{\r\n                backgroundColor: color,\r\n                border: selected ? '2px solid grey' : 'none',\r\n            }}\r\n            onClick={handleClick}\r\n        />\r\n    );\r\n};\r\n","import * as React from 'react';\r\nimport { useState } from 'react';\r\nimport {\r\n    TextField,\r\n    DateField,\r\n    FunctionField,\r\n    ReferenceField,\r\n    EditButton,\r\n    DeleteButton,\r\n    ReferenceArrayField,\r\n    SingleFieldList,\r\n    ChipField,\r\n    ShowButton,\r\n} from 'react-admin';\r\nimport { Box, Typography, Divider, Link, Drawer, IconButton } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport MenuOpenIcon from '@material-ui/icons/MenuOpen';\r\nimport clsx from 'clsx';\r\n\r\nimport { Company, Sale } from '../types';\r\nimport { TagsListEdit } from '../tags/TagsListEdit';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    sideBig: {\r\n        width: 250,\r\n        minWidth: 250,\r\n        marginLeft: theme.spacing(2),\r\n        [theme.breakpoints.down('xs')]:{\r\n            display: 'none',\r\n        }\r\n    },\r\n    sideSmall: {\r\n        [theme.breakpoints.up('sm')]:{\r\n            display: 'none',\r\n        }\r\n    },\r\n    drawerContent: {\r\n         marginTop: theme.spacing(2),\r\n         marginLeft: theme.spacing(1),\r\n         marginRight: theme.spacing(1),\r\n    }\r\n}));\r\n\r\nexport const CompanyAside = ({\r\n    record,\r\n    link = 'edit',\r\n}: {\r\n    record?: Company;\r\n    link?: string;\r\n}) => {\r\n    const classes = useStyles();\r\n    const [isOpen, setOpen] = useState(false);\r\n    if (!record) return null;\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n        <Box textAlign=\"center\" mb={2}>\r\n            {link === 'edit' ? (\r\n                <EditButton\r\n                    basePath=\"/companies\"\r\n                    record={record}\r\n                    label=\"Edit Company\"\r\n                />\r\n            ) : (\r\n                <ShowButton\r\n                    basePath=\"/companies\"\r\n                    record={record}\r\n                    label=\"Show Company\"\r\n                />\r\n            )}\r\n        </Box>\r\n        <div className={classes.sideBig}>\r\n\r\n            \r\n            <AsideContent record={record} />\r\n            \r\n        </div>\r\n        <div className={classes.sideSmall}>\r\n            <IconButton \r\n                onClick={() => setOpen(true)}\r\n                color=\"secondary\"\r\n            >\r\n                <MenuOpenIcon />\r\n            </IconButton>\r\n        </div>\r\n        <Drawer \r\n            anchor=\"right\" \r\n            open={isOpen} onClose={() => setOpen(false)}\r\n        >\r\n            <div className={classes.drawerContent}>\r\n                <AsideContent record={record} />\r\n            </div>\r\n        </Drawer>\r\n        </div>\r\n    )\r\n};\r\n    \r\n\r\nconst AsideContent = ({ \r\n    record \r\n}: { \r\n    record?: Company;\r\n}) => \r\n    record ? (\r\n        <>\r\n            <Typography variant=\"subtitle2\">Company info</Typography>\r\n            <Divider />\r\n\r\n            <Box mt={2}>\r\n                Website: <Link href={record.website} target=\"_blank\" rel=\"noreferrer\">{record.website}</Link>\r\n                <br />\r\n                LinkedIn: <Link href={record.linkedIn} target=\"_blank\" rel=\"noreferrer\">LinkedIn</Link>\r\n            </Box>\r\n            <Box mt={1}>\r\n                Relation: <TextField source=\"relation\" record={record} />\r\n            </Box>\r\n            {record.distributor_id && (\r\n                <Box mt={1}>\r\n                    Distributor: <ReferenceField\r\n                            record={record}\r\n                            source=\"distributor_id\"\r\n                            reference=\"companies\"\r\n                        >\r\n                            <TextField source=\"name\" record={record} />\r\n                        </ReferenceField>\r\n                </Box>\r\n            )}\r\n\r\n            {record.phone_number && (\r\n                <Box mt={1}>\r\n                    <TextField source=\"phone_number\" record={record} />{' '}\r\n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"span\">Main</Typography>\r\n                </Box>\r\n            )}\r\n\r\n            <Box mt={1} mb={3}>\r\n                <TextField source=\"address\" />\r\n                <br />\r\n                <TextField source=\"city\" /> <TextField source=\"zipcode\" />{' '}\r\n                <TextField source=\"stateAbbr\" />\r\n            </Box>\r\n\r\n            <Typography variant=\"subtitle2\">Background</Typography>\r\n            <Divider />\r\n\r\n            <Box mt={3}>\r\n                <Typography\r\n                    variant=\"body2\"\r\n                    color=\"textSecondary\"\r\n                    component=\"span\"\r\n                >\r\n                    Added on\r\n                </Typography>{' '}\r\n                <DateField\r\n                    source=\"created_at\"\r\n                    options={{ year: 'numeric', month: 'long', day: 'numeric' }}\r\n                    color=\"textSecondary\"\r\n                />\r\n                <br />\r\n                <Typography\r\n                    component=\"span\"\r\n                    variant=\"body2\"\r\n                    color=\"textSecondary\"\r\n                >\r\n                    Followed by\r\n                </Typography>{' '}\r\n                <ReferenceField\r\n                    resource=\"companies\"\r\n                    source=\"sales_id\"\r\n                    reference=\"sales\"\r\n                >\r\n                    <FunctionField<Sale>\r\n                        source=\"last_name\"\r\n                        render={record =>\r\n                            record\r\n                                ? `${record.first_name} ${record.last_name}`\r\n                                : ''\r\n                        }\r\n                    />\r\n                </ReferenceField>\r\n            </Box>\r\n\r\n            <Box mb={3}>\r\n                <Typography variant=\"subtitle2\">Tags</Typography>\r\n                <Divider />\r\n                <TagsListEdit record={record} reference=\"companies\" />\r\n            </Box>\r\n\r\n            <Box mb={3}>\r\n                <Typography variant=\"subtitle2\">Use Products</Typography>\r\n                <Divider />\r\n\r\n                <Box mt={1}>\r\n                    <ReferenceArrayField label=\"Tags\" reference=\"products\" source=\"use_products\">\r\n                        <SingleFieldList>\r\n                            <ChipField \r\n                                source=\"model\" \r\n                                variant=\"outlined\" \r\n                                color=\"secondary\"\r\n                                size=\"small\"\r\n                            />\r\n                        </SingleFieldList>\r\n                    </ReferenceArrayField>\r\n                </Box>\r\n            </Box>\r\n        </>\r\n    ) : null;","export const stages = [\r\n    'opportunity',\r\n    'proposal-sent',\r\n    'in-negociation',\r\n    'won',\r\n    'lost',\r\n    'delayed',\r\n];\r\n\r\nexport const stageNames = {\r\n    opportunity: 'Opportunity',\r\n    'proposal-sent': 'Proposal Sent',\r\n    'in-negociation': 'In Negociation',\r\n    won: 'Won',\r\n    lost: 'Lost',\r\n    delayed: 'Delayed',\r\n};\r\n\r\nexport const stageChoices = stages.map(type => ({\r\n    id: type,\r\n    /* @ts-ignore */\r\n    name: stageNames[type],\r\n}));\r\n","import * as React from 'react';\r\nimport { TextField, MenuItem } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport clsx from 'clsx';\r\n\r\nimport { Status } from '../misc/Status';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: 150,\r\n    },\r\n});\r\n\r\nexport const StatusSelector = ({ status, setStatus, className = '' }: any) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <TextField\r\n            select\r\n            value={status}\r\n            onChange={(event: React.ChangeEvent<{ value: unknown }>) => {\r\n                setStatus(event.target.value);\r\n            }}\r\n            variant=\"filled\"\r\n            label={false}\r\n            margin=\"none\"\r\n            size=\"small\"\r\n            className={clsx(className, classes.root)}\r\n        >\r\n            <MenuItem value=\"cold\">\r\n                Cold <Status status=\"cold\" />\r\n            </MenuItem>\r\n            <MenuItem value=\"warm\">\r\n                Warm <Status status=\"warm\" />\r\n            </MenuItem>\r\n            <MenuItem value=\"hot\">\r\n                Hot <Status status=\"hot\" />\r\n            </MenuItem>\r\n            <MenuItem value=\"in-contract\">\r\n                In Contract <Status status=\"in-contract\" />\r\n            </MenuItem>\r\n        </TextField>\r\n    );\r\n};\r\n","import * as React from 'react';\r\nimport { useState, FormEvent } from 'react';\r\nimport {\r\n    useRecordContext,\r\n    useCreate,\r\n    useUpdate,\r\n    useRefresh,\r\n    useNotify,\r\n    useGetIdentity,\r\n    Identifier,\r\n    useResourceContext,\r\n} from 'react-admin';\r\nimport { TextField as TextInput, Button, Paper } from '@material-ui/core';\r\nimport { makeStyles, Theme } from '@material-ui/core/styles';\r\nimport ReactMarkdown from 'react-markdown';\r\nimport remarkGfm from 'remark-gfm';\r\n\r\nimport { StatusSelector } from './StatusSelector';\r\n\r\ntype Props = {\r\n    preview: Boolean;\r\n}\r\n\r\nconst useStyles = makeStyles<Theme, Props>(theme => ({\r\n    root: {\r\n        marginTop: theme.spacing(4),\r\n        marginBottom: theme.spacing(1),\r\n    },\r\n    toolbar: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    small: {\r\n        marginRight: '1em',\r\n        '& .MuiFilledInput-input': {\r\n            paddingTop: 10,\r\n        },\r\n    },\r\n    buttonSwitcher: {\r\n        marginBottom: theme.spacing(1),\r\n    },\r\n    previewConatiner: {\r\n        display: 'flex',\r\n    },\r\n    previewRaw: {\r\n        flex: 1,\r\n    },\r\n    previewMarkdown: {\r\n        flex: 1,\r\n        marginLeft: theme.spacing(1),\r\n        paddingLeft: theme.spacing(1),\r\n        paddingRight: theme.spacing(1),\r\n        borderColor: theme.palette.primary.main,\r\n        display: ({preview}) => (preview ? 'block' : 'none'),\r\n    },\r\n}));\r\n\r\nexport const NewNote = ({\r\n    showStatus,\r\n    reference,\r\n}: {\r\n    showStatus?: boolean;\r\n    reference: 'companies' | 'contacts' | 'deals' | 'products';\r\n}) => {\r\n    const [preview, setPreview] = useState(false);\r\n    const classes = useStyles({preview});\r\n    const record = useRecordContext();\r\n    const resource = useResourceContext();\r\n    const [text, setText] = useState('');\r\n    const [status, setStatus] = useState(record && record.status);\r\n    const [date, setDate] = useState(getCurrentDate());\r\n    const [create, { loading }] = useCreate();\r\n    const [update] = useUpdate();\r\n    // FIXME: use refetch instead when ReferenceManyField exposes it in the ListContext\r\n    const refresh = useRefresh();\r\n    const notify = useNotify();\r\n    const { identity } = useGetIdentity();\r\n    if (!record || !identity) return null;\r\n\r\n    const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\r\n        event.preventDefault();\r\n        const data: any = {\r\n            [foreignKeyMapping[reference]]: record.id,\r\n            sales_id: identity.id,\r\n            date,\r\n            text,\r\n        };\r\n        if (showStatus) {\r\n            data.status = status;\r\n        }\r\n        update(\r\n            reference,\r\n            ((record && record.id) as unknown) as Identifier,\r\n            {\r\n                last_seen: date,\r\n                status,\r\n            },\r\n            record\r\n        );\r\n        create(resource, data, {\r\n            onSuccess: () => {\r\n                setText('');\r\n                notify('Note added successfully', 'info');\r\n                refresh();\r\n            },\r\n        });\r\n        return false;\r\n    };\r\n    return (\r\n        <div className={classes.root}>\r\n            <form onSubmit={handleSubmit}>\r\n                <div className={classes.buttonSwitcher}>\r\n                    <Button \r\n                        variant={preview ? \"contained\": \"outlined\"} \r\n                        color=\"primary\"\r\n                        onClick={()=> setPreview(!preview)}\r\n                    >Markdown</Button>\r\n                </div>\r\n                <div className={classes.previewConatiner}>\r\n                    <div className={classes.previewRaw}>\r\n                        <TextInput\r\n                            label=\"Add a note\"\r\n                            variant=\"filled\"\r\n                            size=\"small\"\r\n                            fullWidth\r\n                            multiline\r\n                            value={text}\r\n                            onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\r\n                                setText(event.target.value)\r\n                            }\r\n                        />\r\n                    </div>\r\n                    <Paper className={classes.previewMarkdown}>\r\n                        <ReactMarkdown children={text} remarkPlugins={[remarkGfm]} />\r\n                    </Paper>\r\n                </div>\r\n                <div className={classes.toolbar}>\r\n                    <span>\r\n                        {text ? (\r\n                            <>\r\n                                {showStatus && (\r\n                                    <StatusSelector\r\n                                        status={status}\r\n                                        setStatus={setStatus}\r\n                                        className={classes.small}\r\n                                    />\r\n                                )}\r\n                                <TextInput\r\n                                    type=\"datetime-local\"\r\n                                    variant=\"filled\"\r\n                                    size=\"small\"\r\n                                    value={date}\r\n                                    onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\r\n                                        setDate(event.target.value);\r\n                                    }}\r\n                                    className={classes.small}\r\n                                />\r\n                            </>\r\n                        ) : null}\r\n                    </span>\r\n                    <Button\r\n                        type=\"submit\"\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        disabled={!text || loading}\r\n                    >\r\n                        Add this note\r\n                    </Button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst getCurrentDate = () => {\r\n    const now = new Date();\r\n    now.setMinutes(now.getMinutes() - now.getTimezoneOffset());\r\n    return now.toISOString().slice(0, -8);\r\n};\r\n\r\nconst foreignKeyMapping = {\r\n    contacts: 'contact_id',\r\n    deals: 'deal_id',\r\n    companies: 'company_id',\r\n    products: 'product_id',\r\n};\r\n","import * as React from 'react';\r\nimport { useState, FormEvent, ChangeEvent } from 'react';\r\nimport {\r\n    TextField,\r\n    ReferenceField,\r\n    DateField,\r\n    useResourceContext,\r\n    useDelete,\r\n    useUpdate,\r\n    useNotify,\r\n    useRecordContext,\r\n} from 'react-admin';\r\nimport {\r\n    Typography,\r\n    Tooltip,\r\n    IconButton,\r\n    FilledInput,\r\n    Button,\r\n} from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport TrashIcon from '@material-ui/icons/Delete';\r\nimport ReactMarkdown from 'react-markdown'\r\nimport remarkGfm from 'remark-gfm'\r\n\r\nimport { Status } from '../misc/Status';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        marginBottom: theme.spacing(2),\r\n    },\r\n    metadata: {\r\n        marginBottom: theme.spacing(1),\r\n        color: theme.palette.text.secondary,\r\n    },\r\n    textarea: {\r\n        paddingTop: 16,\r\n        paddingLeft: 14,\r\n        paddingRight: 60,\r\n        paddingBottom: 14,\r\n        lineHeight: 1.3,\r\n    },\r\n    buttons: {\r\n        display: 'flex',\r\n        justifyContent: 'flex-end',\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    cancel: {\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    content: {\r\n        backgroundColor: theme.palette.grey[200],\r\n        padding: '0 1em',\r\n        borderRadius: 10,\r\n        display: 'flex',\r\n        alignItems: 'stretch',\r\n        marginBottom: theme.spacing(1),\r\n    },\r\n    text: {\r\n        flex: 1,\r\n    },\r\n    paragraph: {\r\n        fontFamily: theme.typography.fontFamily,\r\n        fontSize: theme.typography.body1.fontSize,\r\n        lineHeight: 1,\r\n        marginTop: theme.spacing(1),\r\n        marginBottom: theme.spacing(1),\r\n    },\r\n    toolbar: {\r\n        marginLeft: theme.spacing(2),\r\n        visibility: 'hidden',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'space-around',\r\n    },\r\n}));\r\n\r\nexport const Note = ({\r\n    showStatus,\r\n    note,\r\n    isLast,\r\n    reference,\r\n}: {\r\n    showStatus?: boolean;\r\n    note: any;\r\n    isLast: boolean;\r\n    reference: string;\r\n}) => {\r\n    const [isHover, setHover] = useState(false);\r\n    const [isEditing, setEditing] = useState(false);\r\n    const [noteText, setNoteText] = useState(note.text);\r\n    const resource = useResourceContext();\r\n    const record = useRecordContext();\r\n    const notify = useNotify();\r\n    const classes = useStyles();\r\n    const [update, { loading }] = useUpdate();\r\n\r\n    const [handleDelete] = useDelete(resource, note.id, note, {\r\n        mutationMode: 'undoable',\r\n        onSuccess: () => {\r\n            notify('Note deleted', 'info', undefined, true);\r\n            update(\r\n                reference,\r\n                record.id,\r\n                { nb_notes: record.nb_notes - 1 },\r\n                record\r\n            );\r\n        },\r\n    });\r\n\r\n    const handleEnterEditMode = () => {\r\n        setEditing(true);\r\n    };\r\n\r\n    const handleCancelEdit = () => {\r\n        setEditing(false);\r\n        setNoteText(note.text);\r\n        setHover(false);\r\n    };\r\n\r\n    const handleTextChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setNoteText(event.target.value);\r\n    };\r\n\r\n    const handleNoteUpdate = (event: FormEvent<HTMLFormElement>) => {\r\n        event.preventDefault();\r\n        update(resource, note.id, { text: noteText }, note, {\r\n            onSuccess: () => {\r\n                setEditing(false);\r\n                setNoteText(note.text);\r\n                setHover(false);\r\n            },\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className={classes.root}\r\n            onMouseEnter={() => setHover(true)}\r\n            onMouseLeave={() => setHover(false)}\r\n        >\r\n            <div className={classes.metadata}>\r\n                <ReferenceField\r\n                    record={note}\r\n                    resource=\"contactNotes\"\r\n                    source=\"sales_id\"\r\n                    reference=\"sales\"\r\n                    basePath=\"/contactNotes\"\r\n                >\r\n                    <TextField source=\"first_name\" variant=\"body1\" />\r\n                </ReferenceField>{' '}\r\n                <Typography component=\"span\" variant=\"body1\">\r\n                    added a note on{' '}\r\n                </Typography>\r\n                <DateField\r\n                    source=\"date\"\r\n                    record={note}\r\n                    variant=\"body1\"\r\n                    showTime\r\n                    locales=\"en\"\r\n                    options={{\r\n                        dateStyle: 'full',\r\n                        timeStyle: 'short',\r\n                    }}\r\n                />{' '}\r\n                {showStatus && <Status status={note.status} />}\r\n            </div>\r\n            {isEditing ? (\r\n                <form onSubmit={handleNoteUpdate}>\r\n                    <FilledInput\r\n                        value={noteText}\r\n                        onChange={handleTextChange}\r\n                        fullWidth\r\n                        multiline\r\n                        className={classes.textarea}\r\n                        autoFocus\r\n                    />\r\n                    <div className={classes.buttons}>\r\n                        <Button\r\n                            className={classes.cancel}\r\n                            onClick={handleCancelEdit}\r\n                            color=\"primary\"\r\n                        >\r\n                            Cancel\r\n                        </Button>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            color=\"primary\"\r\n                            variant=\"contained\"\r\n                            disabled={loading}\r\n                        >\r\n                            Update Note\r\n                        </Button>\r\n                    </div>\r\n                </form>\r\n            ) : (\r\n                <div \r\n                    className={classes.content}\r\n                    onClick={() => setHover(true)}\r\n                >\r\n                    <div className={classes.text}>\r\n                        <ReactMarkdown children={note.text} remarkPlugins={[remarkGfm]} />\r\n                    </div>\r\n                    <div\r\n                        className={classes.toolbar}\r\n                        style={{ visibility: isHover ? 'visible' : 'hidden' }}\r\n                    >\r\n                        <Tooltip title=\"Edit note\">\r\n                            <IconButton\r\n                                size=\"small\"\r\n                                onClick={handleEnterEditMode}\r\n                            >\r\n                                <EditIcon />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip title=\"Delete note\">\r\n                            <IconButton size=\"small\" onClick={handleDelete}>\r\n                                <TrashIcon />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n","import * as React from 'react';\r\nimport { useListContext } from 'react-admin';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { Note } from './Note';\r\nimport { NewNote } from './NewNote';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        marginTop: '0.5em',\r\n    },\r\n});\r\n\r\nexport const NotesIterator = ({\r\n    showStatus,\r\n    reference,\r\n}: {\r\n    showStatus?: boolean;\r\n    reference: 'companies' | 'contacts' | 'deals' | 'products';\r\n}) => {\r\n    const classes = useStyles();\r\n    const { data, ids, loaded } = useListContext();\r\n    if (!loaded) return null;\r\n    return (\r\n        <>\r\n            <NewNote showStatus={showStatus} reference={reference} />\r\n            <div className={classes.root}>\r\n                {ids.map((id, index) => (\r\n                    <Note\r\n                        note={data[id]}\r\n                        isLast={index === ids.length - 1}\r\n                        showStatus={showStatus}\r\n                        reference={reference}\r\n                        key={index}\r\n                    />\r\n                ))}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n","import * as React from 'react';\r\nimport { useState, ChangeEvent } from 'react';\r\nimport {\r\n    ShowBase,\r\n    ShowProps,\r\n    TextField,\r\n    ReferenceManyField,\r\n    SelectField,\r\n    ReferenceField,\r\n    ImageField,\r\n    useShowContext,\r\n    useRecordContext,\r\n    useListContext,\r\n} from 'react-admin';\r\nimport {\r\n    Avatar as MuiAvatar,\r\n    Box,\r\n    Button,\r\n    Card,\r\n    CardContent,\r\n    Typography,\r\n    List,\r\n    ListItem,\r\n    ListItemAvatar,\r\n    ListItemText,\r\n    ListItemSecondaryAction,\r\n    Tabs,\r\n    Tab,\r\n    Chip,\r\n    Divider,\r\n} from '@material-ui/core';\r\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport { formatDistance } from 'date-fns';\r\nimport BusinessIcon from '@material-ui/icons/Business';\r\n\r\nimport { Avatar } from '../contacts/Avatar';\r\nimport { Status } from '../misc/Status';\r\nimport { TagsList } from '../tags/TagsList';\r\nimport { sizes } from './sizes';\r\nimport { LogoField } from './LogoField';\r\nimport { CompanyAside } from './CompanyAside';\r\nimport { Company, Deal, Contact } from '../types';\r\nimport { stageNames } from '../deals/stages';\r\nimport { NotesIterator } from '../notes';\r\nimport { CountryField } from './CountryField';\r\n\r\nexport const CompanyShow = (props: ShowProps) => (\r\n    <ShowBase {...props}>\r\n        <CompanyShowContent />\r\n    </ShowBase>\r\n);\r\n\r\nconst CompanyShowContent = () => {\r\n    const { record, loaded } = useShowContext<Company>();\r\n    const [value, setValue] = useState(0);\r\n    const handleChange = (event: ChangeEvent<{}>, newValue: number) => {\r\n        setValue(newValue);\r\n    };\r\n    if (!loaded || !record) return null;\r\n    return (\r\n        <Box mt={2} display=\"flex\">\r\n            <Box flex=\"1\">\r\n                <Card>\r\n                    <CardContent>\r\n                        <Box display=\"flex\" mb={1}>\r\n                            <LogoField record={record as any} />\r\n                            <Box ml={2} flex=\"1\">\r\n                                <Box display=\"flex\" gridGap={4}>\r\n                                    <Typography variant=\"h5\">{record.name}</Typography>\r\n                                    {record.relation && (\r\n                                        <Chip \r\n                                            label={record.relation} \r\n                                            variant=\"outlined\" \r\n                                            size=\"small\"\r\n                                        />\r\n                                    )}\r\n                                </Box>\r\n                                <Typography \r\n                                    variant=\"body2\" \r\n                                    color=\"textSecondary\"\r\n                                >\r\n                                    {`#${record.id} - `}\r\n                                </Typography>\r\n                                {record.sector && (\r\n                                        <Typography variant=\"body2\">\r\n                                            <TextField source=\"sector\" />,{' '}\r\n                                            <SelectField\r\n                                                source=\"size\"\r\n                                                choices={sizes}\r\n                                            />\r\n                                        </Typography>\r\n                                )}\r\n                            </Box>\r\n                            <Box>\r\n                                <ReferenceField\r\n                                    source=\"country_id\"\r\n                                    reference=\"countries\"\r\n                                    link={false}\r\n                                >\r\n                                    <CountryField />\r\n                                </ReferenceField>\r\n                            </Box>\r\n                        </Box>\r\n                        <Tabs\r\n                            value={value}\r\n                            indicatorColor=\"primary\"\r\n                            textColor=\"primary\"\r\n                            onChange={handleChange}\r\n                        >\r\n                            <Tab\r\n                                label={\r\n                                    record.nb_notes === 1\r\n                                        ? '1 Note'\r\n                                        : `${record.nb_notes} Notes`\r\n                                }\r\n                            />\r\n                            <Tab\r\n                                label={\r\n                                    record.nb_contacts === 1\r\n                                        ? '1 Contact'\r\n                                        : `${record.nb_contacts} Contacts`\r\n                                }\r\n                            />\r\n                            {record.nb_deals && (\r\n                                <Tab\r\n                                    label={\r\n                                        record.nb_deals === 1\r\n                                            ? '1 deal'\r\n                                            : `${record.nb_deals} Deals`\r\n                                    }\r\n                                />\r\n                            )}\r\n                        </Tabs>\r\n                        <Divider />\r\n                        <TabPanel value={value} index={0}>\r\n                            <ReferenceManyField\r\n                                reference=\"companyNotes\"\r\n                                target=\"company_id\"\r\n                                sort={{ field: 'date', order: 'DESC' }}\r\n                            >\r\n                                 <NotesIterator reference=\"companies\" />\r\n                            </ReferenceManyField>\r\n                        </TabPanel>\r\n                        <TabPanel value={value} index={1}>\r\n                            <ReferenceManyField\r\n                                reference=\"contacts\"\r\n                                target=\"company_id\"\r\n                                sort={{ field: 'last_name', order: 'ASC' }}\r\n                            >\r\n                                <ContactsIterator />\r\n                            </ReferenceManyField>\r\n                        </TabPanel>\r\n                        <TabPanel value={value} index={2}>\r\n                            <ReferenceManyField\r\n                                reference=\"deals\"\r\n                                target=\"company_id\"\r\n                                sort={{ field: 'name', order: 'ASC' }}\r\n                            >\r\n                                <DealsIterator />\r\n                            </ReferenceManyField>\r\n                        </TabPanel>\r\n                    </CardContent>\r\n                </Card>\r\n            </Box>\r\n            <CompanyAside record={record} />\r\n        </Box>\r\n    );\r\n};\r\n\r\ninterface TabPanelProps {\r\n    children?: React.ReactNode;\r\n    index: any;\r\n    value: any;\r\n}\r\n\r\nconst TabPanel = (props: TabPanelProps) => {\r\n    const { children, value, index, ...other } = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`wrapped-tabpanel-${index}`}\r\n            aria-labelledby={`wrapped-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {children}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst ContactsIterator = () => {\r\n    const { data, ids, loaded } = useListContext<Contact>();\r\n    const record = useRecordContext();\r\n\r\n    const now = Date.now();\r\n    if (!loaded) return null;\r\n    return (\r\n        <Box>\r\n            <List>\r\n                {ids.map(id => {\r\n                    const contact = data[id];\r\n                    return (\r\n                        <ListItem\r\n                            button\r\n                            key={id}\r\n                            component={RouterLink}\r\n                            to={`/contacts/${id}/show`}\r\n                        >\r\n                            <ListItemAvatar>\r\n                                <Avatar record={contact} />\r\n                            </ListItemAvatar>\r\n                            <ListItemText\r\n                                primary={`${contact.first_name} ${contact.last_name}`}\r\n                                secondary={\r\n                                    <>\r\n                                        {contact.title}{' '}\r\n                                        {`- ${contact.nb_notes} notes `}\r\n                                        <TagsList record={contact} />\r\n                                    </>\r\n                                }\r\n                            />\r\n                            <ListItemSecondaryAction>\r\n                                <Typography variant=\"body2\" color=\"textSecondary\">\r\n                                    last activity{' '}\r\n                                    {formatDistance(\r\n                                        new Date(contact.last_seen),\r\n                                        now\r\n                                    )}{' '}\r\n                                    ago <Status status={contact.status} />\r\n                                </Typography>\r\n                            </ListItemSecondaryAction>\r\n                        </ListItem>\r\n                    );\r\n                })}\r\n            </List>\r\n            <Box textAlign=\"center\" mt={1}>\r\n                <CreateRelatedContactButton record={record} />\r\n            </Box>\r\n        </Box>\r\n    );\r\n};\r\n\r\nconst CreateRelatedContactButton = ({ record }: any) => (\r\n    <Button\r\n        component={RouterLink}\r\n        to={{\r\n            pathname: '/contacts/create',\r\n            state: { record: { company_id: record.id } },\r\n        }}\r\n        color=\"primary\"\r\n        variant=\"contained\"\r\n        size=\"small\"\r\n        startIcon={<PersonAddIcon />}\r\n    >\r\n        Add contact\r\n    </Button>\r\n);\r\n\r\nconst DealsIterator = () => {\r\n    const { data, ids, loaded } = useListContext<Deal>();\r\n\r\n    const now = Date.now();\r\n    if (!loaded) return null;\r\n    return (\r\n        <Box>\r\n            <List>\r\n                {ids.map(id => {\r\n                    const deal = data[id];\r\n                    return (\r\n                        <ListItem\r\n                            button\r\n                            key={id}\r\n                            component={RouterLink}\r\n                            to={`/deals/${id}/show`}\r\n                        >\r\n                            <ListItemText\r\n                                primary={deal.name}\r\n                                secondary={\r\n                                    <>\r\n                                        {/* @ts-ignore */}\r\n                                        {stageNames[deal.stage]},{' '}\r\n                                        {deal.amount.toLocaleString('en-US', {\r\n                                            notation: 'compact',\r\n                                            style: 'currency',\r\n                                            currency: 'USD',\r\n                                            currencyDisplay: 'narrowSymbol',\r\n                                            minimumSignificantDigits: 3,\r\n                                        })}\r\n                                        , {deal.type}\r\n                                    </>\r\n                                }\r\n                            />\r\n                            <ListItemSecondaryAction>\r\n                                <Typography\r\n                                    variant=\"body2\"\r\n                                    color=\"textSecondary\"\r\n                                    component=\"span\"\r\n                                >\r\n                                    last activity{' '}\r\n                                    {formatDistance(\r\n                                        new Date(deal.updated_at),\r\n                                        now\r\n                                    )}{' '}\r\n                                    ago{' '}\r\n                                </Typography>\r\n                            </ListItemSecondaryAction>\r\n                        </ListItem>\r\n                    );\r\n                })}\r\n            </List>\r\n        </Box>\r\n    );\r\n};\r\n","import * as React from 'react';\r\nimport {\r\n    Edit,\r\n    EditProps,\r\n    ReferenceInput,\r\n    SimpleForm,\r\n    TextInput,\r\n    SelectInput,\r\n    useRecordContext,\r\n    AutocompleteInput,\r\n    ReferenceArrayInput,\r\n    AutocompleteArrayInput,\r\n    FormDataConsumer,\r\n    required,\r\n} from 'react-admin';\r\nimport { Box, CardContent, Divider } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport clsx from 'clsx';\r\n\r\nimport { CompanyAside } from './CompanyAside';\r\nimport { LogoField } from './LogoField';\r\nimport { sectors } from './sectors';\r\nimport { sizes } from './sizes';\r\nimport { relations } from './relations';\r\nimport DistributorInput from './DistributorInput';\r\n\r\nconst useStyles = makeStyles({\r\n    inline: {\r\n        display: 'inline-block',\r\n        marginLeft: '1em',\r\n        '&.first-child': {\r\n            marginLeft: 0,\r\n        },\r\n    },\r\n});\r\n\r\nconst renderDistributor = (choice: any) => {\r\n\r\n}\r\n\r\nexport const CompanyEdit = (props: EditProps) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <Edit {...props} aside={<CompanyAside link=\"show\" />} actions={false}>\r\n            <SimpleForm component={CustomLayout} redirect=\"show\">\r\n                <TextInput source=\"name\" validate={required()} fullWidth />\r\n                <SelectInput\r\n                    source=\"sector\"\r\n                    choices={sectors}\r\n                    formClassName={clsx(classes.inline, 'first-child')}\r\n                />\r\n                <SelectInput\r\n                    source=\"size\"\r\n                    choices={sizes}\r\n                    formClassName={classes.inline}\r\n                />\r\n                <SelectInput\r\n                    source=\"relation\"\r\n                    choices={relations}\r\n                    formClassName={classes.inline}\r\n                />\r\n                <FormDataConsumer>\r\n                    {({ formData, ...rest }) => formData.relation != 'Distributor' &&\r\n                        <ReferenceInput\r\n                            source=\"distributor_id\"\r\n                            reference=\"companies\"\r\n                        >\r\n                            <DistributorInput />\r\n                        </ReferenceInput>\r\n                    }\r\n                </FormDataConsumer>\r\n\r\n                <ReferenceArrayInput source=\"use_products\" reference=\"products\">\r\n                    <AutocompleteArrayInput optionText=\"model\" />\r\n                </ReferenceArrayInput>\r\n\r\n                <CustomDivider />\r\n                <TextInput source=\"address\" fullWidth helperText={false} />\r\n                <TextInput\r\n                    source=\"city\"\r\n                    formClassName={clsx(classes.inline, 'first-child')}\r\n                />\r\n                <TextInput source=\"zipcode\" formClassName={classes.inline} />\r\n                <TextInput source=\"stateAbbr\" formClassName={classes.inline} />\r\n                <ReferenceInput\r\n                    source=\"country_id\"\r\n                    reference=\"countries\"\r\n                >\r\n                    <AutocompleteInput optionText=\"nicename\" />\r\n                </ReferenceInput>\r\n                <CustomDivider />\r\n                <TextInput source=\"website\" fullWidth helperText={false} />\r\n                <TextInput source=\"linkedIn\" fullWidth helperText={false} />\r\n                <TextInput source=\"logo\" fullWidth />\r\n                <CustomDivider />\r\n                <TextInput\r\n                    source=\"phone_number\"\r\n                    formClassName={clsx(classes.inline, 'first-child')}\r\n                    helperText={false}\r\n                />\r\n                <ReferenceInput\r\n                    source=\"sales_id\"\r\n                    reference=\"sales\"\r\n                    label=\"Account manager\"\r\n                    formClassName={classes.inline}\r\n                    helperText={false}\r\n                >\r\n                    <SelectInput\r\n                        optionText={(sales: any) =>\r\n                            `${sales.first_name} ${sales.last_name}`\r\n                        }\r\n                    />\r\n                </ReferenceInput>\r\n            </SimpleForm>\r\n        </Edit>\r\n    );\r\n};\r\n\r\nconst CustomLayout = (props: any) => {\r\n    const record = useRecordContext(props);\r\n    return (\r\n        <CardContent>\r\n            <Box display=\"flex\">\r\n                <LogoField record={record as any} />\r\n                <Box ml={2} flex=\"1\" maxWidth={796}>\r\n                    {props.children}\r\n                </Box>\r\n            </Box>\r\n        </CardContent>\r\n    );\r\n};\r\n\r\nconst CustomDivider = () => (\r\n    <Box mb={2}>\r\n        <Divider />\r\n    </Box>\r\n);\r\n","/* eslint-disable import/no-anonymous-default-export */\r\nimport { CompanyList } from './CompanyList';\r\nimport { CompanyCreate } from './CompanyCreate';\r\nimport { CompanyShow } from './CompanyShow';\r\nimport { CompanyEdit } from './CompanyEdit';\r\nimport BusinessIcon from '@material-ui/icons/Business';\r\n\r\nexport default {\r\n    list: CompanyList,\r\n    create: CompanyCreate,\r\n    edit: CompanyEdit,\r\n    show: CompanyShow,\r\n    icon: BusinessIcon,\r\n};\r\n","import * as React from 'react';\r\nimport {\r\n    TextField,\r\n    EmailField,\r\n    DateField,\r\n    ReferenceManyField,\r\n    EditButton,\r\n    ShowButton,\r\n    useListContext,\r\n    ReferenceField,\r\n    FunctionField,\r\n} from 'react-admin';\r\nimport { Box, Typography, Divider, List, ListItem } from '@material-ui/core';\r\nimport { TagsListEdit } from '../tags/TagsListEdit';\r\n\r\nimport { Sale } from '../types';\r\n\r\nexport const ContactAside = ({ record, link = 'edit' }: any) => (\r\n    <Box ml={4} width={250} minWidth={250}>\r\n        <Box textAlign=\"center\" mb={2}>\r\n            {link === 'edit' ? (\r\n                <EditButton\r\n                    basePath=\"/contacts\"\r\n                    record={record}\r\n                    label=\"Edit Contact\"\r\n                />\r\n            ) : (\r\n                <ShowButton\r\n                    basePath=\"/contacts\"\r\n                    record={record}\r\n                    label=\"Show Contact\"\r\n                />\r\n            )}\r\n        </Box>\r\n\r\n        <Typography variant=\"subtitle2\">Personal info</Typography>\r\n        <Divider />\r\n\r\n        <Box mt={2}>\r\n            <EmailField source=\"email\" />\r\n        </Box>\r\n\r\n        <Box mt={1}>\r\n            <TextField source=\"phone_number1\" />{' '}\r\n            <Typography variant=\"body2\" color=\"textSecondary\" component=\"span\">\r\n                Work\r\n            </Typography>\r\n        </Box>\r\n\r\n        <Box mb={1}>\r\n            <TextField source=\"phone_number2\" />{' '}\r\n            <Typography variant=\"body2\" color=\"textSecondary\" component=\"span\">\r\n                Home\r\n            </Typography>\r\n        </Box>\r\n\r\n        <Box mb={3}>\r\n            <Typography variant=\"body2\">\r\n                {record.gender === 'male' ? 'He/Him' : 'She/Her'}\r\n            </Typography>\r\n        </Box>\r\n\r\n        <Typography variant=\"subtitle2\">Background</Typography>\r\n        <Divider />\r\n\r\n        <Box mt={2}>{record && record.background}</Box>\r\n        <Box mt={1} mb={3}>\r\n            <Typography component=\"span\" variant=\"body2\" color=\"textSecondary\">\r\n                Added on\r\n            </Typography>{' '}\r\n            <DateField\r\n                source=\"first_seen\"\r\n                options={{ year: 'numeric', month: 'long', day: 'numeric' }}\r\n                color=\"textSecondary\"\r\n            />\r\n            <br />\r\n            <Typography component=\"span\" variant=\"body2\" color=\"textSecondary\">\r\n                Last seen on\r\n            </Typography>{' '}\r\n            <DateField\r\n                source=\"last_seen\"\r\n                options={{ year: 'numeric', month: 'long', day: 'numeric' }}\r\n                color=\"textSecondary\"\r\n            />\r\n            <br />\r\n            <Typography component=\"span\" variant=\"body2\" color=\"textSecondary\">\r\n                Followed by\r\n            </Typography>{' '}\r\n            <ReferenceField\r\n                resource=\"contacts\"\r\n                source=\"sales_id\"\r\n                reference=\"sales\"\r\n            >\r\n                <FunctionField<Sale>\r\n                    source=\"last_name\"\r\n                    render={record =>\r\n                        record ? `${record.first_name} ${record.last_name}` : ''\r\n                    }\r\n                />\r\n            </ReferenceField>\r\n        </Box>\r\n\r\n        <Box mb={3}>\r\n            <Typography variant=\"subtitle2\">Tags</Typography>\r\n            <Divider />\r\n            <TagsListEdit record={record} reference=\"contacts\" />\r\n        </Box>\r\n\r\n        <Box>\r\n            <Typography variant=\"subtitle2\">Tasks</Typography>\r\n            <Divider />\r\n            <ReferenceManyField\r\n                resource=\"contacts\"\r\n                target=\"contact_id\"\r\n                reference=\"tasks\"\r\n            >\r\n                <TasksIterator />\r\n            </ReferenceManyField>\r\n        </Box>\r\n    </Box>\r\n);\r\n\r\nconst TasksIterator = () => {\r\n    const { data, ids, loading } = useListContext();\r\n    if (loading || ids.length === 0) return null;\r\n    return (\r\n\r\n\r\n            <List>\r\n                {ids.map(id => {\r\n                    const task = data[id];\r\n                    return (\r\n                        <ListItem key={id} disableGutters>\r\n                            <Box>\r\n                                <Typography variant=\"body2\">\r\n                                    {task.text}\r\n                                </Typography>\r\n                                <Typography\r\n                                    variant=\"body2\"\r\n                                    color=\"textSecondary\"\r\n                                >\r\n                                    due{' '}\r\n                                    <DateField\r\n                                        source=\"due_date\"\r\n                                        record={task}\r\n                                    />\r\n                                </Typography>\r\n                            </Box>\r\n                        </ListItem>\r\n                    );\r\n                })}\r\n            </List>\r\n    );\r\n};\r\n","import * as React from 'react';\r\nimport {\r\n    ShowBase,\r\n    ShowProps,\r\n    TextField,\r\n    ReferenceField,\r\n    ReferenceManyField,\r\n    useShowContext,\r\n} from 'react-admin';\r\nimport { Box, Card, CardContent, Typography } from '@material-ui/core';\r\n\r\nimport { Avatar } from './Avatar';\r\nimport { ContactAside } from './ContactAside';\r\nimport { LogoField } from '../companies/LogoField';\r\nimport { NotesIterator } from '../notes';\r\nimport { Contact } from '../types';\r\n\r\nexport const ContactShow = (props: ShowProps) => (\r\n    <ShowBase {...props}>\r\n        <ContactShowContent />\r\n    </ShowBase>\r\n);\r\n\r\nconst ContactShowContent = () => {\r\n    const { record, loaded } = useShowContext<Contact>();\r\n    if (!loaded || !record) return null;\r\n    return (\r\n        <Box mt={2} display=\"flex\">\r\n            <Box flex=\"1\">\r\n                <Card>\r\n                    <CardContent>\r\n                        <Box display=\"flex\">\r\n                            <Avatar record={record} />\r\n                            <Box ml={2} flex=\"1\">\r\n                                <Typography variant=\"h5\">\r\n                                    {record.first_name} {record.last_name}\r\n                                </Typography>\r\n                                <Typography variant=\"body2\">\r\n                                    {`#${record.id} - `}\r\n                                    {record.title} at{' '}\r\n                                    <ReferenceField\r\n                                        source=\"company_id\"\r\n                                        reference=\"companies\"\r\n                                        link=\"show\"\r\n                                    >\r\n                                        <TextField source=\"name\" />\r\n                                    </ReferenceField>\r\n                                </Typography>\r\n                            </Box>\r\n                            <Box>\r\n                                <ReferenceField\r\n                                    source=\"company_id\"\r\n                                    reference=\"companies\"\r\n                                    link=\"show\"\r\n                                >\r\n                                    <LogoField />\r\n                                </ReferenceField>\r\n                            </Box>\r\n                        </Box>\r\n                        <ReferenceManyField\r\n                            target=\"contact_id\"\r\n                            reference=\"contactNotes\"\r\n                            sort={{ field: 'date', order: 'DESC' }}\r\n                        >\r\n                            <NotesIterator showStatus reference=\"contacts\" />\r\n                        </ReferenceManyField>\r\n                    </CardContent>\r\n                </Card>\r\n            </Box>\r\n            <ContactAside record={record} />\r\n        </Box>\r\n    );\r\n};\r\n","/* eslint-disable import/no-anonymous-default-export */\r\nimport * as React from 'react';\r\nimport {\r\n    FilterList,\r\n    FilterLiveSearch,\r\n    FilterListItem,\r\n    useGetIdentity,\r\n    useGetList,\r\n} from 'react-admin';\r\nimport { Box, Chip } from '@material-ui/core';\r\nimport AccessTimeIcon from '@material-ui/icons/AccessTime';\r\nimport TrendingUpIcon from '@material-ui/icons/TrendingUp';\r\nimport LocalOfferIcon from '@material-ui/icons/LocalOffer';\r\nimport SupervisorAccountIcon from '@material-ui/icons/SupervisorAccount';\r\nimport { endOfYesterday, startOfWeek, startOfMonth, subMonths } from 'date-fns';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { Status } from '../misc/Status';\r\nimport { TagChip } from '../tags/TagChip';\r\nimport { Tag } from '../types';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    container: {\r\n        order: -1,\r\n        marginLeft: theme.spacing(1),\r\n        marginRight: theme.spacing(1),\r\n        minWidth: '13em',\r\n        [theme.breakpoints.down('xs')]: {\r\n            display: 'none',\r\n        }\r\n    },\r\n}));\r\n\r\nexport const ContactListFilter = () => {\r\n    const classes = useStyles();\r\n    const { identity } = useGetIdentity();\r\n    const { data, ids } = useGetList<Tag>(\r\n        'tags',\r\n        { page: 1, perPage: 10 },\r\n        { field: 'name', order: 'ASC' }\r\n    );\r\n    return (\r\n        <div className={classes.container}>\r\n            <FilterLiveSearch />\r\n            <FilterList label=\"Last seen\" icon={<AccessTimeIcon />}>\r\n                <FilterListItem\r\n                    label=\"Today\"\r\n                    value={{\r\n                        last_seen_gte: endOfYesterday().toISOString(),\r\n                        last_seen_lte: undefined,\r\n                    }}\r\n                />\r\n                <FilterListItem\r\n                    label=\"This week\"\r\n                    value={{\r\n                        last_seen_gte: startOfWeek(new Date()).toISOString(),\r\n                        last_seen_lte: undefined,\r\n                    }}\r\n                />\r\n                <FilterListItem\r\n                    label=\"Before this week\"\r\n                    value={{\r\n                        last_seen_gte: undefined,\r\n                        last_seen_lte: startOfWeek(new Date()).toISOString(),\r\n                    }}\r\n                />\r\n                <FilterListItem\r\n                    label=\"Before this month\"\r\n                    value={{\r\n                        last_seen_gte: undefined,\r\n                        last_seen_lte: startOfMonth(new Date()).toISOString(),\r\n                    }}\r\n                />\r\n                <FilterListItem\r\n                    label=\"Before last month\"\r\n                    value={{\r\n                        last_seen_gte: undefined,\r\n                        last_seen_lte: subMonths(\r\n                            startOfMonth(new Date()),\r\n                            1\r\n                        ).toISOString(),\r\n                    }}\r\n                />\r\n            </FilterList>\r\n            <FilterList label=\"Status\" icon={<TrendingUpIcon />}>\r\n                <FilterListItem\r\n                    label={\r\n                        <>\r\n                            Cold <Status status=\"cold\" />\r\n                        </>\r\n                    }\r\n                    value={{\r\n                        status: 'cold',\r\n                    }}\r\n                />\r\n                <FilterListItem\r\n                    label={\r\n                        <>\r\n                            Warm <Status status=\"warm\" />\r\n                        </>\r\n                    }\r\n                    value={{\r\n                        status: 'warm',\r\n                    }}\r\n                />\r\n                <FilterListItem\r\n                    label={\r\n                        <>\r\n                            Hot <Status status=\"hot\" />\r\n                        </>\r\n                    }\r\n                    value={{\r\n                        status: 'hot',\r\n                    }}\r\n                />\r\n                <FilterListItem\r\n                    label={\r\n                        <>\r\n                            In contract <Status status=\"in-contract\" />\r\n                        </>\r\n                    }\r\n                    value={{\r\n                        status: 'in-contract',\r\n                    }}\r\n                />\r\n            </FilterList>\r\n            <FilterList label=\"Tags\" icon={<LocalOfferIcon />}>\r\n                {ids &&\r\n                    data &&\r\n                    ids.map(id => (\r\n                        <FilterListItem\r\n                            key={id}\r\n                            label={<TagChip record={data[id]}/>}\r\n                            value={{ tags: [id] }}\r\n                        />\r\n                    ))}\r\n            </FilterList>\r\n            <FilterList\r\n                label=\"Account manager\"\r\n                icon={<SupervisorAccountIcon />}\r\n            >\r\n                <FilterListItem\r\n                    label=\"Me\"\r\n                    value={{\r\n                        sales_id: identity && identity.id,\r\n                    }}\r\n                />\r\n            </FilterList>\r\n        </div>\r\n    );\r\n};\r\n","/* eslint-disable import/no-anonymous-default-export */\r\nimport * as React from 'react';\r\nimport {\r\n    List as RaList,\r\n    ListProps,\r\n    SimpleListLoading,\r\n    ReferenceField,\r\n    TextField,\r\n    useListContext,\r\n    ExportButton,\r\n    SortButton,\r\n    TopToolbar,\r\n    CreateButton,\r\n    Pagination,\r\n    useGetIdentity,\r\n    ListActionsProps,\r\n    FilterLiveSearch,\r\n} from 'react-admin';\r\nimport {\r\n    List,\r\n    ListItem,\r\n    ListItemAvatar,\r\n    ListItemIcon,\r\n    ListItemSecondaryAction,\r\n    ListItemText,\r\n    Checkbox,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Link } from 'react-router-dom';\r\nimport { formatDistance } from 'date-fns';\r\n\r\nimport { Avatar } from './Avatar';\r\nimport { Status } from '../misc/Status';\r\nimport { TagsList } from '../tags/TagsList';\r\nimport { ContactListFilter } from './ContactListFilter';\r\nimport { Contact } from '../types';\r\nimport { ImportButton } from 'react-admin-import-csv';\r\n\r\nconst ContactListContent = () => {\r\n    const { data, ids, loaded, onToggleItem, selectedIds } = useListContext<\r\n        Contact\r\n    >();\r\n    const now = Date.now();\r\n    if (loaded === false) {\r\n        return <SimpleListLoading hasLeftAvatarOrIcon hasSecondaryText />;\r\n    }\r\n\r\n    return (\r\n        <List>\r\n            {ids.map(id => {\r\n                const contact = data[id];\r\n                return (\r\n                    <ListItem\r\n                        button\r\n                        key={id}\r\n                        component={Link}\r\n                        to={`/contacts/${id}/show`}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <Checkbox\r\n                                edge=\"start\"\r\n                                checked={selectedIds.includes(id)}\r\n                                tabIndex={-1}\r\n                                disableRipple\r\n                                onClick={e => {\r\n                                    e.stopPropagation();\r\n                                    onToggleItem(id);\r\n                                }}\r\n                            />\r\n                        </ListItemIcon>\r\n                        <ListItemAvatar>\r\n                            <Avatar record={contact} />\r\n                        </ListItemAvatar>\r\n                        <ListItemText\r\n                            primary={`${contact.first_name} ${contact.last_name}`}\r\n                            secondary={\r\n                                <>\r\n                                    {`#${contact.id} - `}\r\n                                    {contact.title} at{' '}\r\n                                    <ReferenceField\r\n                                        record={contact}\r\n                                        source=\"company_id\"\r\n                                        reference=\"companies\"\r\n                                        basePath=\"/companies\"\r\n                                        link={false}\r\n                                    >\r\n                                        <TextField source=\"name\" />\r\n                                    </ReferenceField>{' '}\r\n                                    {!!contact.nb_notes &&\r\n                                        `- ${contact.nb_notes} notes `}\r\n                                    <TagsList record={contact} />\r\n                                </>\r\n                            }\r\n                        />\r\n                        <ListItemSecondaryAction>\r\n                            <Typography variant=\"body2\" color=\"textSecondary\">\r\n                                last activity{' '}\r\n                                {formatDistance(\r\n                                    new Date(contact.last_seen),\r\n                                    now\r\n                                )}{' '}\r\n                                ago <Status status={contact.status} />\r\n                            </Typography>\r\n                        </ListItemSecondaryAction>\r\n                    </ListItem>\r\n                );\r\n            })}\r\n        </List>\r\n    );\r\n};\r\n\r\nconst useStyle = makeStyles(theme => ({\r\n    createButton: {\r\n        marginLeft: theme.spacing(2),\r\n    },\r\n    searchbox: {\r\n        display: 'block',\r\n        [theme.breakpoints.up('sm')]: {\r\n            display: 'none',\r\n        }\r\n    },\r\n}));\r\nconst ContactListActions = (props: ListActionsProps) => {\r\n    const classes = useStyle();\r\n    return (\r\n        <TopToolbar>            \r\n            <div className={classes.searchbox}>\r\n                <FilterLiveSearch />\r\n            </div>\r\n            <SortButton fields={['id', 'last_name', 'first_name', 'last_seen']} />\r\n            <ExportButton />\r\n            <ImportButton {...props} />\r\n            <CreateButton\r\n                basePath=\"/contacts\"\r\n                variant=\"contained\"\r\n                label=\"New Contact\"\r\n                className={classes.createButton}\r\n            />\r\n        </TopToolbar>\r\n    );\r\n};\r\n\r\nexport const ContactList = (props: ListProps) => {\r\n    const { identity } = useGetIdentity();\r\n    return identity ? (\r\n        <RaList\r\n            {...props}\r\n            actions={<ContactListActions />}\r\n            aside={<ContactListFilter />}\r\n            perPage={25}\r\n            pagination={<Pagination rowsPerPageOptions={[10, 25, 50, 100]} />}\r\n            filterDefaultValues={{ sales_id: identity?.id }}\r\n            sort={{ field: 'last_seen', order: 'DESC' }}\r\n        >\r\n            <ContactListContent />\r\n        </RaList>\r\n    ) : null;\r\n};\r\n","import * as React from 'react';\r\nimport {\r\n    EditBase,\r\n    EditProps,\r\n    TextInput,\r\n    ReferenceInput,\r\n    AutocompleteInput,\r\n    BooleanInput,\r\n    FormWithRedirect,\r\n    Toolbar,\r\n    useEditContext,\r\n} from 'react-admin';\r\nimport { Card, CardContent, Divider, Box } from '@material-ui/core';\r\nimport omit from 'lodash/omit';\r\n\r\nimport { Avatar } from './Avatar';\r\nimport { ContactAside } from './ContactAside';\r\nimport { Contact } from '../types';\r\n\r\nconst Spacer = () => <Box width={20} component=\"span\" />;\r\n\r\nconst ContactEditContent = () => {\r\n    const { record, loaded, save } = useEditContext<Contact>();\r\n    if (!loaded || !record) return null;\r\n    return (\r\n        <Box mt={2} display=\"flex\">\r\n            <Box flex=\"1\">\r\n                <FormWithRedirect\r\n                    record={record}\r\n                    redirect=\"show\"\r\n                    save={save}\r\n                    render={formProps => (\r\n                        <Card>\r\n                            <CardContent>\r\n                                <Box>\r\n                                    <Box display=\"flex\">\r\n                                        <Box mr={2}>\r\n                                            <Avatar record={record} />\r\n                                        </Box>\r\n                                        <Box flex=\"1\" mt={-1}>\r\n                                            <Box display=\"flex\">\r\n                                                <TextInput source=\"first_name\" />\r\n                                                <Spacer />\r\n                                                <TextInput source=\"last_name\" />\r\n                                            </Box>\r\n                                            <Box display=\"flex\">\r\n                                                <TextInput source=\"title\" />\r\n                                                <Spacer />\r\n                                                <ReferenceInput\r\n                                                    source=\"company_id\"\r\n                                                    reference=\"companies\"\r\n                                                >\r\n                                                    <AutocompleteInput optionText=\"name\" />\r\n                                                </ReferenceInput>\r\n                                            </Box>\r\n                                            <Divider />\r\n                                            <Box mt={2} width={430}>\r\n                                                <TextInput\r\n                                                    source=\"email\"\r\n                                                    fullWidth\r\n                                                />\r\n                                            </Box>\r\n                                            <Box display=\"flex\">\r\n                                                <TextInput source=\"phone_number1\" />\r\n                                                <Spacer />\r\n                                                <TextInput source=\"phone_number2\" />\r\n                                            </Box>\r\n                                            <Divider />\r\n                                            <Box mt={2} width={430}>\r\n                                                <TextInput\r\n                                                    source=\"background\"\r\n                                                    multiline\r\n                                                    fullWidth\r\n                                                />\r\n                                                <TextInput\r\n                                                    source=\"avatar\"\r\n                                                    fullWidth\r\n                                                />\r\n                                                <BooleanInput source=\"has_newsletter\" />\r\n                                            </Box>\r\n                                        </Box>\r\n                                    </Box>\r\n                                </Box>\r\n                            </CardContent>\r\n                            <Toolbar\r\n                                {...omit(formProps, [\r\n                                    // FIXME Not super user friendly way to remove warnings\r\n                                    'dirtyFields',\r\n                                    'dirtyFieldsSinceLastSubmit',\r\n                                    'dirtySinceLastSubmit',\r\n                                    'hasSubmitErrors',\r\n                                    'hasValidationErrors',\r\n                                    'initialValues',\r\n                                    'modifiedSinceLastSubmit',\r\n                                    'submitError',\r\n                                    'submitErrors',\r\n                                    'submitFailed',\r\n                                    'submitSucceeded',\r\n                                    'submitting',\r\n                                    'valid',\r\n                                ])}\r\n                            />\r\n                        </Card>\r\n                    )}\r\n                />\r\n            </Box>\r\n            <ContactAside record={record} link=\"show\" />\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport const ContactEdit = (props: EditProps) => (\r\n    <EditBase {...props}>\r\n        <ContactEditContent />\r\n    </EditBase>\r\n);\r\n","import * as React from 'react';\r\nimport {\r\n    Create,\r\n    CreateProps,\r\n    TextInput,\r\n    ReferenceInput,\r\n    SelectInput,\r\n    AutocompleteInput,\r\n    BooleanInput,\r\n    SimpleForm,\r\n    Toolbar,\r\n    required,\r\n    useGetIdentity,\r\n    useCreateContext,\r\n} from 'react-admin';\r\nimport { Card, CardContent, Divider, Box, Avatar } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport clsx from 'clsx';\r\n\r\nimport { Contact } from '../types';\r\n\r\nconst useStyles = makeStyles({\r\n    inline: {\r\n        display: 'inline-block',\r\n        marginLeft: '1em',\r\n        '&.first-child': {\r\n            marginLeft: 0,\r\n        },\r\n    },\r\n});\r\n\r\n\r\nexport const ContactCreate = (props: CreateProps) => {\r\n    const classes = useStyles();\r\n    const { identity } = useGetIdentity();\r\n    \r\n    if (!identity) return null;\r\n\r\n    const contactDefaultValue = () => ({ sales_id: identity && identity?.id });\r\n    const transform = (data: Contact) => ({\r\n        ...data,\r\n        last_seen: new Date(),\r\n        tags: [],\r\n    });\r\n    \r\n    return (\r\n        <Create {...props} actions={false}>\r\n            <SimpleForm \r\n                component={CustomLayout} \r\n                redirect=\"show\"\r\n                initialValues={contactDefaultValue}\r\n                transform={transform}\r\n            >\r\n                <TextInput \r\n                    source=\"first_name\" \r\n                    validate={[required()]} \r\n                    formClassName={clsx(classes.inline, 'first-child')}\r\n                />\r\n                <TextInput\r\n                    source=\"last_name\"\r\n                    validate={[required()]}\r\n                    formClassName={classes.inline}\r\n                />\r\n                <CustomDivider />\r\n                <TextInput \r\n                    source=\"title\"\r\n                    formClassName={clsx(classes.inline, 'first-child')}\r\n                />\r\n                <ReferenceInput\r\n                    source=\"company_id\"\r\n                    reference=\"companies\"\r\n                    formClassName={classes.inline}\r\n                >\r\n                    <AutocompleteInput optionText=\"name\" />\r\n                </ReferenceInput>\r\n                <CustomDivider />\r\n                <TextInput\r\n                    source=\"email\"\r\n                    fullWidth\r\n                />\r\n                <TextInput source=\"phone_number1\"\r\n                    formClassName={clsx(classes.inline, 'first-child')} />\r\n                <TextInput source=\"phone_number2\"\r\n                    formClassName={classes.inline} />\r\n                <CustomDivider />\r\n                <TextInput\r\n                    source=\"background\"\r\n                    multiline\r\n                    fullWidth\r\n                />\r\n                <TextInput\r\n                    source=\"avatar\"\r\n                    fullWidth\r\n                />\r\n                <ReferenceInput\r\n                    source=\"sales_id\"\r\n                    reference=\"sales\"\r\n                    label=\"Account manager\"\r\n                    helperText={false}\r\n                >\r\n                    <SelectInput\r\n                        optionText={(sales: any) =>\r\n                            `${sales.first_name} ${sales.last_name}`\r\n                        }\r\n                    />\r\n                </ReferenceInput>\r\n                <BooleanInput source=\"has_newsletter\" />\r\n            </SimpleForm>\r\n        </Create>\r\n    );\r\n};\r\n\r\n\r\nconst CustomLayout = ({ children }: \r\n    {children: any;}) => (\r\n    <CardContent>\r\n        <Box display=\"flex\">\r\n            <Box paddingTop={1}>\r\n                <Avatar />\r\n            </Box>\r\n            <Box ml={2} flex=\"1\" maxWidth={796}>\r\n                {children}\r\n            </Box>\r\n        </Box>\r\n    </CardContent>\r\n);\r\n\r\nconst CustomDivider = () => (\r\n    <Box mb={2}>\r\n        <Divider />\r\n    </Box>\r\n);","/* eslint-disable import/no-anonymous-default-export */\r\nimport { ContactShow } from './ContactShow';\r\nimport { ContactList } from './ContactList';\r\nimport { ContactEdit } from './ContactEdit';\r\nimport { ContactCreate } from './ContactCreate';\r\nimport ContactsIcon from '@material-ui/icons/Contacts';\r\n\r\nexport default {\r\n    list: ContactList,\r\n    show: ContactShow,\r\n    edit: ContactEdit,\r\n    create: ContactCreate,\r\n    icon: ContactsIcon,\r\n};\r\n","import * as React from 'react';\r\nimport {\r\n    TextField,\r\n    EmailField,\r\n    DateField,\r\n    ReferenceManyField,\r\n    EditButton,\r\n    ShowButton,\r\n    useListContext,\r\n    ReferenceField,\r\n    FunctionField,\r\n} from 'react-admin';\r\nimport { Box, Typography, Divider, List, ListItem } from '@material-ui/core';\r\nimport { TagsListEdit } from '../tags/TagsListEdit';\r\n\r\nimport { Sale } from '../types';\r\n\r\nexport const TaskAside = ({ record, link = 'edit' }: any) => (\r\n    <Box ml={4} width={250} minWidth={250}>\r\n        <Box textAlign=\"center\" mb={2}>\r\n            {link === 'edit' ? (\r\n                <EditButton\r\n                    basePath=\"/Tasks\"\r\n                    record={record}\r\n                    label=\"Edit Task\"\r\n                />\r\n            ) : (\r\n                <ShowButton\r\n                    basePath=\"/Tasks\"\r\n                    record={record}\r\n                    label=\"Show Task\"\r\n                />\r\n            )}\r\n        </Box>\r\n    </Box>\r\n);\r\n","import * as React from 'react';\r\nimport {\r\n    ShowBase,\r\n    ShowProps,\r\n    TextField,\r\n    ReferenceField,\r\n    ReferenceManyField,\r\n    useShowContext,\r\n} from 'react-admin';\r\nimport { Box, Card, CardContent, Typography } from '@material-ui/core';\r\n\r\nimport { TaskAside } from './TaskAside';\r\nimport { LogoField } from '../companies/LogoField';\r\nimport { NotesIterator } from '../notes';\r\nimport { Task } from '../types';\r\n\r\nexport const TaskShow = (props: ShowProps) => (\r\n    <ShowBase {...props}>\r\n        <TaskShowContent />\r\n    </ShowBase>\r\n);\r\n\r\nconst TaskShowContent = () => {\r\n    const { record, loaded } = useShowContext<Task>();\r\n    if (!loaded || !record) return null;\r\n    return (\r\n        <Box mt={2} display=\"flex\">\r\n            <Box flex=\"1\">\r\n                <Card>\r\n                    <CardContent>\r\n                        <Box display=\"flex\">\r\n                            <Box ml={2} flex=\"1\">\r\n                                <Typography variant=\"h5\">\r\n                                    {record.first_name} {record.last_name}\r\n                                </Typography>\r\n                                <Typography variant=\"body2\">\r\n                                    {record.title} at{' '}\r\n                                    <ReferenceField\r\n                                        source=\"company_id\"\r\n                                        reference=\"companies\"\r\n                                        link=\"show\"\r\n                                    >\r\n                                        <TextField source=\"name\" />\r\n                                    </ReferenceField>\r\n                                </Typography>\r\n                            </Box>\r\n                            <Box>\r\n                                <ReferenceField\r\n                                    source=\"company_id\"\r\n                                    reference=\"companies\"\r\n                                    link=\"show\"\r\n                                >\r\n                                    <LogoField />\r\n                                </ReferenceField>\r\n                            </Box>\r\n                        </Box>\r\n                    </CardContent>\r\n                </Card>\r\n            </Box>\r\n            <TaskAside record={record} />\r\n        </Box>\r\n    );\r\n};\r\n","export const statuses = [\r\n    {id: 'pending', name: 'Pending', color: '#FFA000'},\r\n    {id: 'done', name: 'Done', color: '#CDDC39'},\r\n    {id: 'postponed', name: 'Postponed', color: '#2196F3'},\r\n]","import * as React from 'react';\r\nimport { Box } from '@material-ui/core';\r\n\r\nimport { statuses } from './status';\r\n\r\nexport const TaskStatus = ({ status }: { status: string }) => {\r\n    const statusItem = statuses.find(item => item.id === status)\r\n    const statusColor = statusItem ? statusItem.color : \"#000\";\r\n    return (\r\n        <Box\r\n            width={10}\r\n            height={10}\r\n            display=\"inline-block\"\r\n            borderRadius={5}\r\n            bgcolor={statusColor}\r\n            component=\"span\"\r\n        />\r\n    );\r\n};","/* eslint-disable import/no-anonymous-default-export */\r\nimport * as React from 'react';\r\nimport {\r\n    FilterList,\r\n    FilterLiveSearch,\r\n    FilterListItem,\r\n    useGetIdentity,\r\n    useGetList,\r\n} from 'react-admin';\r\nimport { Box, Chip } from '@material-ui/core';\r\nimport AccessTimeIcon from '@material-ui/icons/AccessTime';\r\nimport TrendingUpIcon from '@material-ui/icons/TrendingUp';\r\nimport LocalOfferIcon from '@material-ui/icons/LocalOffer';\r\nimport SupervisorAccountIcon from '@material-ui/icons/SupervisorAccount';\r\nimport { endOfYesterday, startOfWeek, startOfMonth, subMonths } from 'date-fns';\r\n\r\nimport { TaskStatus } from './TaskStatus';\r\nimport { TagChip } from '../tags/TagChip';\r\nimport { Tag } from '../types';\r\nimport { statuses } from './status';\r\n\r\nexport const TaskListFilter = () => {\r\n    const { identity } = useGetIdentity();\r\n    return (\r\n        <Box width=\"15em\" order=\"-1\" marginRight=\"1em\">\r\n            <FilterLiveSearch />\r\n            <FilterList label=\"Due date\" icon={<AccessTimeIcon />}>\r\n                <FilterListItem\r\n                    label=\"Today\"\r\n                    value={{\r\n                        due_date_gte: endOfYesterday().toISOString(),\r\n                        due_date_lte: undefined,\r\n                    }}\r\n                />\r\n                <FilterListItem\r\n                    label=\"This week\"\r\n                    value={{\r\n                        due_date_gte: startOfWeek(new Date()).toISOString(),\r\n                        due_date_lte: undefined,\r\n                    }}\r\n                />\r\n                <FilterListItem\r\n                    label=\"Before this week\"\r\n                    value={{\r\n                        due_date_gte: undefined,\r\n                        due_date_lte: startOfWeek(new Date()).toISOString(),\r\n                    }}\r\n                />\r\n                <FilterListItem\r\n                    label=\"Before this month\"\r\n                    value={{\r\n                        due_date_gte: undefined,\r\n                        due_date_lte: startOfMonth(new Date()).toISOString(),\r\n                    }}\r\n                />\r\n                <FilterListItem\r\n                    label=\"Before last month\"\r\n                    value={{\r\n                        due_date_gte: undefined,\r\n                        due_date_lte: subMonths(\r\n                            startOfMonth(new Date()),\r\n                            1\r\n                        ).toISOString(),\r\n                    }}\r\n                />\r\n            </FilterList>\r\n            <FilterList label=\"Status\" icon={<TrendingUpIcon />}>\r\n                {statuses.map(status =>(\r\n                    <FilterListItem\r\n                    label={\r\n                        <>\r\n                            {status.name} <TaskStatus status={status.id} />\r\n                        </>\r\n                    }\r\n                    value={{\r\n                        status: status.id,\r\n                    }}\r\n                />\r\n                ))}\r\n            </FilterList>\r\n            <FilterList\r\n                label=\"Account manager\"\r\n                icon={<SupervisorAccountIcon />}\r\n            >\r\n                <FilterListItem\r\n                    label=\"Me\"\r\n                    value={{\r\n                        sales_id: identity && identity.id,\r\n                    }}\r\n                />\r\n            </FilterList>\r\n        </Box>\r\n    );\r\n};\r\n","// in ./MarkDoneButton.js\r\nimport * as React from 'react';\r\nimport { BulkUpdateButton, BulkActionProps } from 'react-admin';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\n\r\nconst doneState = { status: 'Done' };\r\n\r\nconst MarkDoneButton = (props: BulkActionProps) => (\r\n    <BulkUpdateButton\r\n        {...props}\r\n        label=\"Mark checked\"\r\n        data={doneState}\r\n        icon={<DoneIcon/>}\r\n        mutationMode=\"pessimistic\"\r\n    />\r\n);\r\n\r\nexport default MarkDoneButton;","/* eslint-disable import/no-anonymous-default-export */\r\nimport * as React from 'react';\r\nimport { Fragment } from 'react';\r\nimport {\r\n    List as RaList,\r\n    ListProps,\r\n    SimpleListLoading,\r\n    ReferenceField,\r\n    TextField,\r\n    useListContext,\r\n    ExportButton,\r\n    SortButton,\r\n    TopToolbar,\r\n    CreateButton,\r\n    Pagination,\r\n    BulkDeleteButton,\r\n    useGetIdentity,\r\n    BulkActionProps,\r\n    ListActionsProps,\r\n} from 'react-admin';\r\nimport {\r\n    List,\r\n    ListItem,\r\n    ListItemAvatar,\r\n    ListItemIcon,\r\n    ListItemSecondaryAction,\r\n    ListItemText,\r\n    Checkbox,\r\n    Typography,\r\n    Avatar,\r\n} from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Link } from 'react-router-dom';\r\nimport { formatDistance } from 'date-fns';\r\nimport AssignmentTurnedInIcon from '@material-ui/icons/AssignmentTurnedIn';\r\nimport { ImportButton } from \"react-admin-import-csv\";\r\n\r\nimport { Status } from '../misc/Status';\r\nimport { TagsList } from '../tags/TagsList';\r\nimport { TaskListFilter } from './TaskListFilter';\r\nimport { Task } from '../types';\r\nimport MarkDoneButton from './MarkDoneButton';\r\nimport { TaskStatus } from './TaskStatus';\r\n\r\nconst TaskListContent = () => {\r\n    const { data, ids, loaded, onToggleItem, selectedIds } = useListContext<\r\n        Task\r\n    >();\r\n    const now = Date.now();\r\n    if (loaded === false) {\r\n        return <SimpleListLoading hasLeftAvatarOrIcon hasSecondaryText />;\r\n    }\r\n\r\n    return (\r\n        <List>\r\n            {ids.map(id => {\r\n                const task = data[id];\r\n                return (\r\n                    <ListItem\r\n                        button\r\n                        key={id}\r\n                        component={Link}\r\n                        to={`/Tasks/${id}`}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <Checkbox\r\n                                edge=\"start\"\r\n                                checked={selectedIds.includes(id)}\r\n                                tabIndex={-1}\r\n                                disableRipple\r\n                                onClick={e => {\r\n                                    e.stopPropagation();\r\n                                    onToggleItem(id);\r\n                                }}\r\n                            />\r\n                        </ListItemIcon>\r\n                        <ListItemAvatar>\r\n                            <Avatar>\r\n                                <AssignmentTurnedInIcon />\r\n                            </Avatar>\r\n                        </ListItemAvatar>\r\n                        <ListItemText\r\n                            primary={\r\n                                <>\r\n                                {task.text} \r\n                                </>\r\n                            }\r\n                        />\r\n                        <ListItemSecondaryAction>\r\n                            <Typography variant=\"body2\" color=\"textSecondary\">\r\n                                due in{' '}\r\n                                {formatDistance(\r\n                                    new Date(task.due_date),\r\n                                    now\r\n                                )}\r\n                                {' '}<TaskStatus status={task.status} />\r\n                            </Typography>\r\n                        </ListItemSecondaryAction>\r\n                    </ListItem>\r\n                );\r\n            })}\r\n        </List>\r\n    );\r\n};\r\n\r\nconst useActionStyles = makeStyles(theme => ({\r\n    createButton: {\r\n        marginLeft: theme.spacing(2),\r\n    },\r\n}));\r\nconst TaskListActions = (props: ListActionsProps) => {\r\n    const classes = useActionStyles();\r\n    return (\r\n        <TopToolbar>\r\n            <SortButton fields={['due_date']} />\r\n            <ExportButton />\r\n            <ImportButton {...props} />\r\n            <CreateButton\r\n                basePath=\"/Tasks\"\r\n                variant=\"contained\"\r\n                label=\"New Task\"\r\n                className={classes.createButton}\r\n            />\r\n        </TopToolbar>\r\n    );\r\n};\r\n\r\nconst TaskBulkActionButtons = (props: BulkActionProps) => (\r\n    <Fragment>\r\n        <MarkDoneButton {...props} />\r\n        {/* default bulk delete action */}\r\n        <BulkDeleteButton {...props} />\r\n    </Fragment>\r\n);\r\n\r\nexport const TaskList = (props: ListProps) => {\r\n    const { identity } = useGetIdentity();\r\n    return identity ? (\r\n        <RaList\r\n            {...props}\r\n            actions={<TaskListActions />}\r\n            aside={<TaskListFilter />}\r\n            bulkActionButtons={<TaskBulkActionButtons />}\r\n            perPage={25}\r\n            pagination={<Pagination rowsPerPageOptions={[10, 25, 50, 100]} />}\r\n            filterDefaultValues={{ sales_id: identity?.id, status: 'pending' }}\r\n            sort={{ field: 'due_date', order: 'DESC' }}\r\n        >\r\n            <TaskListContent />\r\n        </RaList>\r\n    ) : null;\r\n};\r\n","import * as React from 'react';\r\nimport {\r\n    EditBase,\r\n    EditProps,\r\n    TextInput,\r\n    ReferenceInput,\r\n    AutocompleteInput,\r\n    BooleanInput,\r\n    FormWithRedirect,\r\n    required,\r\n    Toolbar,\r\n    useEditContext,\r\n    DateInput,\r\n    SelectInput,\r\n} from 'react-admin';\r\nimport { Card, CardContent, Divider, Box, Avatar } from '@material-ui/core';\r\nimport omit from 'lodash/omit';\r\nimport AssignmentTurnedInIcon from '@material-ui/icons/AssignmentTurnedIn';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport clsx from 'clsx';\r\n\r\nimport { TaskAside } from './TaskAside';\r\nimport { Task } from '../types';\r\nimport { statuses } from './status';\r\n\r\nconst Spacer = () => <Box width={20} component=\"span\" />;\r\nconst useStyles = makeStyles({\r\n    inline: {\r\n        display: 'inline-block',\r\n        marginLeft: '1em',\r\n        '&.first-child': {\r\n            marginLeft: 0,\r\n        },\r\n    },\r\n});\r\n\r\nconst TaskEditContent = () => {\r\n    const classes = useStyles();\r\n    const { record, loaded, save } = useEditContext<Task>();\r\n    if (!loaded || !record) return null;\r\n    return (\r\n        <Box mt={2} display=\"flex\">\r\n            <Box flex=\"1\">\r\n                <FormWithRedirect\r\n                    record={record}\r\n                    redirect=\"show\"\r\n                    save={save}\r\n                    render={formProps => (\r\n                        <Card>\r\n                            <CardContent>\r\n                                <Box>\r\n                                    <Box display=\"flex\">\r\n                                        <Box mr={2}>\r\n                                        <Avatar >\r\n                                            <AssignmentTurnedInIcon />\r\n                                        </Avatar>\r\n                                        </Box>\r\n                                        <Box flex=\"1\" mt={-1}>\r\n                                            <TextInput \r\n                                                source=\"text\"\r\n                                                label=\"Task\"\r\n                                                validate={[required()]}\r\n                                                fullWidth\r\n                                            />\r\n                                            <DateInput\r\n                                                source=\"due_date\"\r\n                                                formClassName={clsx(classes.inline, 'first-child')}\r\n                                            />\r\n                                            <SelectInput\r\n                                                source=\"status\"\r\n                                                choices={statuses}\r\n                                                formClassName={classes.inline}\r\n                                            />\r\n                                            <ReferenceInput\r\n                                                source=\"sales_id\"\r\n                                                reference=\"sales\"\r\n                                                label=\"Account manager\"\r\n                                                helperText={false}\r\n                                                formClassName={classes.inline}\r\n                                            >\r\n                                                <SelectInput\r\n                                                    optionText={(sales: any) =>\r\n                                                        `${sales.first_name} ${sales.last_name}`\r\n                                                    }\r\n                                                />\r\n                                            </ReferenceInput>\r\n                                        </Box>\r\n                                    </Box>\r\n                                </Box>\r\n                            </CardContent>\r\n                            <Toolbar\r\n                                {...omit(formProps, [\r\n                                    // FIXME Not super user friendly way to remove warnings\r\n                                    'dirtyFields',\r\n                                    'dirtyFieldsSinceLastSubmit',\r\n                                    'dirtySinceLastSubmit',\r\n                                    'hasSubmitErrors',\r\n                                    'hasValidationErrors',\r\n                                    'initialValues',\r\n                                    'modifiedSinceLastSubmit',\r\n                                    'submitError',\r\n                                    'submitErrors',\r\n                                    'submitFailed',\r\n                                    'submitSucceeded',\r\n                                    'submitting',\r\n                                    'valid',\r\n                                ])}\r\n                            />\r\n                        </Card>\r\n                    )}\r\n                />\r\n            </Box>\r\n            <TaskAside record={record} link=\"show\" />\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport const TaskEdit = (props: EditProps) => (\r\n    <EditBase {...props}>\r\n        <TaskEditContent />\r\n    </EditBase>\r\n);\r\n","import * as React from 'react';\r\nimport {\r\n    Create,\r\n    CreateProps,\r\n    TextInput,\r\n    ReferenceInput,\r\n    SelectInput,\r\n    AutocompleteInput,\r\n    BooleanInput,\r\n    SimpleForm,\r\n    Toolbar,\r\n    required,\r\n    useGetIdentity,\r\n    DateInput,\r\n    useCreateContext,\r\n    SelectField,\r\n} from 'react-admin';\r\nimport { Card, CardContent, Divider, Box, Avatar } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport clsx from 'clsx';\r\nimport AssignmentTurnedInIcon from '@material-ui/icons/AssignmentTurnedIn';\r\n\r\n\r\nimport { Task } from '../types';\r\nimport { statuses } from './status';\r\n\r\nconst useStyles = makeStyles({\r\n    inline: {\r\n        display: 'inline-block',\r\n        marginLeft: '1em',\r\n        '&.first-child': {\r\n            marginLeft: 0,\r\n        },\r\n    },\r\n});\r\n\r\n\r\nexport const TaskCreate = (props: CreateProps) => {\r\n    const classes = useStyles();\r\n    const { identity } = useGetIdentity();\r\n    \r\n    if (!identity) return null;\r\n\r\n    const defaultValue = () => ({\r\n        due_date: new Date(), \r\n        status: 'Pending',\r\n    });\r\n    const transform = (data: Task) => ({\r\n        ...data,\r\n        sales_id: identity && identity?.id, \r\n    });\r\n    \r\n    return (\r\n        <Create {...props} actions={false}>\r\n            <SimpleForm \r\n                component={CustomLayout} \r\n                redirect=\"show\"\r\n                initialValues={defaultValue}\r\n                transform={transform}\r\n            >\r\n                <TextInput \r\n                    source=\"text\"\r\n                    label=\"Task\"\r\n                    validate={[required()]}\r\n                    fullWidth\r\n                />\r\n                <DateInput\r\n                    source=\"due_date\"\r\n                    formClassName={clsx(classes.inline, 'first-child')}\r\n                />\r\n                <SelectInput\r\n                    source=\"status\"\r\n                    choices={statuses}\r\n                    formClassName={classes.inline}\r\n                />\r\n            </SimpleForm>\r\n        </Create>\r\n    );\r\n};\r\n\r\n\r\nconst CustomLayout = ({ children }: \r\n    {children: any;}) => (\r\n    <CardContent>\r\n        <Box display=\"flex\">\r\n            <Box paddingTop={1}>\r\n                <Avatar >\r\n                    <AssignmentTurnedInIcon />\r\n                </Avatar>\r\n            </Box>\r\n            <Box ml={2} flex=\"1\" maxWidth={796}>\r\n                {children}\r\n            </Box>\r\n        </Box>\r\n    </CardContent>\r\n);\r\n\r\nconst CustomDivider = () => (\r\n    <Box mb={2}>\r\n        <Divider />\r\n    </Box>\r\n);","/* eslint-disable import/no-anonymous-default-export */\r\nimport { TaskShow } from './TaskShow';\r\nimport { TaskList } from './TaskList';\r\nimport { TaskEdit } from './TaskEdit';\r\nimport { TaskCreate } from './TaskCreate';\r\nimport FormatListBulletedIcon from '@material-ui/icons/FormatListBulleted';\r\n\r\nexport default {\r\n    list: TaskList,\r\n    show: TaskShow,\r\n    edit: TaskEdit,\r\n    create: TaskCreate,\r\n    icon: FormatListBulletedIcon,\r\n};\r\n","import * as React from 'react';\r\nimport { ReferenceField, useRedirect } from 'react-admin';\r\nimport { Card, Typography, Box } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\n\r\nimport { LogoField } from '../companies/LogoField';\r\nimport { Deal } from '../types';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        marginBottom: theme.spacing(1),\r\n    },\r\n    cardContent: {\r\n        padding: theme.spacing(1),\r\n        display: 'flex',\r\n    },\r\n    cardText: {\r\n        marginLeft: theme.spacing(1),\r\n    },\r\n}));\r\n\r\nexport const DealCard = ({ deal, index }: { deal: Deal; index: number }) => {\r\n    const classes = useStyles();\r\n    const redirect = useRedirect();\r\n    if (!deal) return null;\r\n\r\n    const handleClick = () => {\r\n        redirect(`/deals/${deal.id}/show`);\r\n    };\r\n    return (\r\n        <Draggable draggableId={String(deal.id)} index={index}>\r\n            {(provided, snapshot) => (\r\n                <div\r\n                    className={classes.root}\r\n                    {...provided.draggableProps}\r\n                    {...provided.dragHandleProps}\r\n                    ref={provided.innerRef}\r\n                    onClick={handleClick}\r\n                >\r\n                    <Card\r\n                        style={{\r\n                            opacity: snapshot.isDragging ? 0.9 : 1,\r\n                            transform: snapshot.isDragging\r\n                                ? 'rotate(-2deg)'\r\n                                : '',\r\n                        }}\r\n                        elevation={snapshot.isDragging ? 3 : 1}\r\n                    >\r\n                        <Box p={1} display=\"flex\">\r\n                            <ReferenceField\r\n                                source=\"company_id\"\r\n                                record={deal}\r\n                                reference=\"companies\"\r\n                                resource=\"deals\"\r\n                                basePath=\"/deals\"\r\n                            >\r\n                                <LogoField size=\"small\" />\r\n                            </ReferenceField>\r\n                            <Box ml={1}>\r\n                                <Typography variant=\"body2\" gutterBottom>\r\n                                    {deal.name}\r\n                                </Typography>\r\n                                <Typography\r\n                                    variant=\"caption\"\r\n                                    color=\"textSecondary\"\r\n                                >\r\n                                    {deal.amount.toLocaleString('en-US', {\r\n                                        notation: 'compact',\r\n                                        style: 'currency',\r\n                                        currency: 'USD',\r\n                                        currencyDisplay: 'narrowSymbol',\r\n                                        minimumSignificantDigits: 3,\r\n                                    })}\r\n                                    , {deal.type}\r\n                                </Typography>\r\n                            </Box>\r\n                        </Box>\r\n                    </Card>\r\n                </div>\r\n            )}\r\n        </Draggable>\r\n    );\r\n};\r\n","import * as React from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Droppable } from 'react-beautiful-dnd';\r\nimport { Identifier, RecordMap } from 'react-admin';\r\n\r\nimport { DealCard } from './DealCard';\r\nimport { stageNames } from './stages';\r\nimport { Deal } from '../types';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        flex: 1,\r\n        paddingTop: 8,\r\n        paddingBottom: 16,\r\n        backgroundColor: '#eaeaee',\r\n        '&:first-child': {\r\n            paddingLeft: 5,\r\n            borderTopLeftRadius: 5,\r\n        },\r\n        '&:last-child': {\r\n            paddingRight: 5,\r\n            borderTopRightRadius: 5,\r\n        },\r\n    },\r\n    droppable: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        borderRadius: 5,\r\n        padding: 5,\r\n        '&.isDraggingOver': {\r\n            backgroundColor: '#dadadf',\r\n        },\r\n    },\r\n});\r\n\r\nexport const DealColumn = ({\r\n    stage,\r\n    dealIds,\r\n    data,\r\n}: {\r\n    stage: string;\r\n    dealIds: Identifier[];\r\n    data: RecordMap<Deal>;\r\n}) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.root}>\r\n            <Typography align=\"center\" variant=\"subtitle1\">\r\n                {/* @ts-ignore */}\r\n                {stageNames[stage]}\r\n            </Typography>\r\n            <Droppable droppableId={stage}>\r\n                {(droppableProvided, snapshot) => (\r\n                    <div\r\n                        ref={droppableProvided.innerRef}\r\n                        {...droppableProvided.droppableProps}\r\n                        className={\r\n                            classes.droppable +\r\n                            (snapshot.isDraggingOver ? ' isDraggingOver' : '')\r\n                        }\r\n                    >\r\n                        {dealIds.map((id, index) => (\r\n                            <DealCard key={id} index={index} deal={data[id]} />\r\n                        ))}\r\n                        {droppableProvided.placeholder}\r\n                    </div>\r\n                )}\r\n            </Droppable>\r\n        </div>\r\n    );\r\n};\r\n","import * as React from 'react';\r\nimport { useState, useEffect, useContext } from 'react';\r\nimport {\r\n    useMutation,\r\n    Identifier,\r\n    useListContext,\r\n    RecordMap,\r\n    DataProviderContext,\r\n} from 'react-admin';\r\nimport { Box } from '@material-ui/core';\r\nimport { DragDropContext, OnDragEndResponder } from 'react-beautiful-dnd';\r\nimport isEqual from 'lodash/isEqual';\r\n\r\nimport { DealColumn } from './DealColumn';\r\nimport { stages } from './stages';\r\nimport { Deal } from '../types';\r\n\r\ninterface DealsByColumn {\r\n    [stage: string]: Identifier[];\r\n}\r\n\r\nconst initialDeals: DealsByColumn = stages.reduce(\r\n    (obj, stage) => ({ ...obj, [stage]: [] }),\r\n    {}\r\n);\r\n\r\nconst getDealsByColumn = (\r\n    ids: Identifier[],\r\n    data: RecordMap<Deal>\r\n): DealsByColumn => {\r\n    // group deals by column\r\n    const columns = ids.reduce(\r\n        (acc, id) => {\r\n            acc[data[id].stage].push(id);\r\n            return acc;\r\n        },\r\n        stages.reduce((obj, stage) => ({ ...obj, [stage]: [] }), {} as any)\r\n    );\r\n    // order each column by index\r\n    stages.forEach(stage => {\r\n        columns[stage] = columns[stage].sort(\r\n            (a: Identifier, b: Identifier) => data[a].index - data[b].index\r\n        );\r\n    });\r\n    return columns;\r\n};\r\n\r\nexport const DealListContent = () => {\r\n    const {\r\n        data,\r\n        ids,\r\n        loaded,\r\n        page,\r\n        perPage,\r\n        currentSort,\r\n        filterValues,\r\n    } = useListContext<Deal>();\r\n\r\n    const [deals, setDeals] = useState<DealsByColumn>(\r\n        loaded ? getDealsByColumn(ids, data) : initialDeals\r\n    );\r\n    // we use the raw dataProvider to avoid too many updates to the Redux store after updates (which would create junk)\r\n    const dataProvider = useContext(DataProviderContext);\r\n\r\n    // FIXME: use refetch when available\r\n    const [refresh] = useMutation({\r\n        resource: 'deals',\r\n        type: 'getList',\r\n        payload: {\r\n            pagination: { page, perPage },\r\n            sort: currentSort,\r\n            filter: filterValues,\r\n        },\r\n    });\r\n\r\n    // update deals by columns when the dataProvider response updates\r\n    useEffect(() => {\r\n        if (!loaded) return;\r\n        const newDeals = getDealsByColumn(ids, data);\r\n        if (isEqual(deals, newDeals)) {\r\n            return;\r\n        }\r\n        setDeals(newDeals);\r\n    }, [data, ids, loaded]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    if (!loaded) return null;\r\n\r\n    const onDragEnd: OnDragEndResponder = async result => {\r\n        const { destination, source, draggableId } = result;\r\n\r\n        if (!destination) {\r\n            return;\r\n        }\r\n\r\n        if (\r\n            destination.droppableId === source.droppableId &&\r\n            destination.index === source.index\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        if (source.droppableId === destination.droppableId) {\r\n            // moving deal inside the same column\r\n\r\n            const column = Array.from(deals[source.droppableId]); // [4, 7, 23, 5] array of ids\r\n            const sourceDeal = data[column[source.index]];\r\n            const destinationDeal = data[column[destination.index]];\r\n\r\n            // update local state\r\n            // remove source deal from column\r\n            column.splice(source.index, 1);\r\n            // read source deal at destination\r\n            column.splice(destination.index, 0, Number(draggableId));\r\n            setDeals({\r\n                ...deals,\r\n                [source.droppableId]: column,\r\n            });\r\n\r\n            // update backend\r\n            // Fetch all the deals in this stage (because the list may be filtered, but we need to update even non-filtered deals)\r\n            const { data: columnDeals } = await dataProvider.getList('deals', {\r\n                sort: { field: 'index', order: 'ASC' },\r\n                pagination: { page: 1, perPage: 100 },\r\n                filter: { stage: source.droppableId },\r\n            });\r\n\r\n            if (source.index > destination.index) {\r\n                // deal moved up, eg\r\n                // dest   src\r\n                //  <------\r\n                // [4, 7, 23, 5]\r\n\r\n                await Promise.all([\r\n                    // for all deals between destination.index and source.index, increase the index\r\n                    ...columnDeals\r\n                        .filter(\r\n                            deal =>\r\n                                deal.index >= destinationDeal.index &&\r\n                                deal.index < sourceDeal.index\r\n                        )\r\n                        .map(deal =>\r\n                            dataProvider.update('deals', {\r\n                                id: deal.id,\r\n                                data: { index: deal.index + 1 },\r\n                                previousData: deal,\r\n                            })\r\n                        ),\r\n                    // for the deal that was moved, update its index\r\n                    dataProvider.update('deals', {\r\n                        id: sourceDeal.id,\r\n                        data: { index: destinationDeal.index },\r\n                        previousData: sourceDeal,\r\n                    }),\r\n                ]);\r\n\r\n                refresh();\r\n            } else {\r\n                // deal moved down, e.g\r\n                // src   dest\r\n                //  ------>\r\n                // [4, 7, 23, 5]\r\n\r\n                await Promise.all([\r\n                    // for all deals between source.index and destination.index, decrease the index\r\n                    ...columnDeals\r\n                        .filter(\r\n                            deal =>\r\n                                deal.index <= destinationDeal.index &&\r\n                                deal.index > sourceDeal.index\r\n                        )\r\n                        .map(deal =>\r\n                            dataProvider.update('deals', {\r\n                                id: deal.id,\r\n                                data: { index: deal.index - 1 },\r\n                                previousData: deal,\r\n                            })\r\n                        ),\r\n                    // for the deal that was moved, update its index\r\n                    dataProvider.update('deals', {\r\n                        id: sourceDeal.id,\r\n                        data: { index: destinationDeal.index },\r\n                        previousData: sourceDeal,\r\n                    }),\r\n                ]);\r\n\r\n                refresh();\r\n            }\r\n        } else {\r\n            // moving deal across columns\r\n\r\n            const sourceColumn = Array.from(deals[source.droppableId]); // [4, 7, 23, 5] array of ids\r\n            const destinationColumn = Array.from(\r\n                deals[destination.droppableId]\r\n            ); // [4, 7, 23, 5] arrays of ids\r\n            const sourceDeal = data[sourceColumn[source.index]];\r\n            const destinationDeal = data[destinationColumn[destination.index]]; // may be undefined if dropping at the end of a column\r\n\r\n            // update local state\r\n            sourceColumn.splice(source.index, 1);\r\n            destinationColumn.splice(destination.index, 0, draggableId);\r\n            setDeals({\r\n                ...deals,\r\n                [source.droppableId]: sourceColumn,\r\n                [destination.droppableId]: destinationColumn,\r\n            });\r\n\r\n            // update backend\r\n            // Fetch all the deals in both stages (because the list may be filtered, but we need to update even non-filtered deals)\r\n            const [\r\n                { data: sourceDeals },\r\n                { data: destinationDeals },\r\n            ] = await Promise.all([\r\n                dataProvider.getList('deals', {\r\n                    sort: { field: 'index', order: 'ASC' },\r\n                    pagination: { page: 1, perPage: 100 },\r\n                    filter: { stage: source.droppableId },\r\n                }),\r\n                dataProvider.getList('deals', {\r\n                    sort: { field: 'index', order: 'ASC' },\r\n                    pagination: { page: 1, perPage: 100 },\r\n                    filter: { stage: destination.droppableId },\r\n                }),\r\n            ]);\r\n\r\n            await Promise.all([\r\n                // decrease index on the deals after the source index in the source columns\r\n                ...sourceDeals\r\n                    .filter(deal => deal.index > sourceDeal.index)\r\n                    .map(deal =>\r\n                        dataProvider.update('deals', {\r\n                            id: deal.id,\r\n                            data: { index: deal.index - 1 },\r\n                            previousData: deal,\r\n                        })\r\n                    ),\r\n                // increase index on the deals after the destination index in the destination columns\r\n                ...destinationDeals\r\n                    .filter(deal =>\r\n                        destinationDeal\r\n                            ? deal.index >= destinationDeal.index\r\n                            : false\r\n                    )\r\n                    .map(deal =>\r\n                        dataProvider.update('deals', {\r\n                            id: deal.id,\r\n                            data: { index: deal.index + 1 },\r\n                            previousData: deal,\r\n                        })\r\n                    ),\r\n                // change the dragged deal to take the destination index and column\r\n                dataProvider.update('deals', {\r\n                    id: sourceDeal.id,\r\n                    data: {\r\n                        index: destinationDeal\r\n                            ? destinationDeal.index\r\n                            : (destinationDeals.length > 0)\r\n                            ? destinationDeals.pop()!.index + 1 \r\n                            : 0,\r\n                        stage: destination.droppableId,\r\n                    },\r\n                    previousData: sourceDeal,\r\n                }),\r\n            ]);\r\n\r\n            refresh();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <DragDropContext onDragEnd={onDragEnd}>\r\n            <Box display=\"flex\">\r\n                {stages.map(stage => (\r\n                    <DealColumn\r\n                        stage={stage}\r\n                        dealIds={deals[stage]}\r\n                        data={data}\r\n                        key={stage}\r\n                    />\r\n                ))}\r\n            </Box>\r\n        </DragDropContext>\r\n    );\r\n};\r\n","export const types = [\r\n    'Other',\r\n    'Copywriting',\r\n    'Print project',\r\n    'UI Design',\r\n    'Website design',\r\n];\r\n\r\nexport const typeChoices = types.map(type => ({ id: type, name: type }));\r\n","import * as React from 'react';\r\nimport {\r\n    Create,\r\n    SimpleForm,\r\n    TextInput,\r\n    SelectInput,\r\n    NumberInput,\r\n    ReferenceInput,\r\n    AutocompleteInput,\r\n    required,\r\n    useRedirect,\r\n    useDataProvider,\r\n    useGetIdentity,\r\n} from 'react-admin';\r\nimport { Dialog } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { stageChoices } from './stages';\r\nimport { typeChoices } from './types';\r\nimport { Deal } from '../types';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: 500,\r\n    },\r\n});\r\n\r\nexport const DealCreate = ({ open }: { open: boolean }) => {\r\n    const classes = useStyles();\r\n    const redirect = useRedirect();\r\n    const dataProvider = useDataProvider();\r\n    const { identity } = useGetIdentity();\r\n\r\n    const handleClose = () => {\r\n        redirect('/deals');\r\n    };\r\n\r\n    const onSuccess = ({ data: deal }: { data: Deal }) => {\r\n        redirect('/deals');\r\n        // increase the index of all deals in the same stage as the new deal\r\n        dataProvider\r\n            .getList('deals', {\r\n                pagination: { page: 1, perPage: 50 },\r\n                sort: { field: 'id', order: 'ASC' },\r\n                filter: { stage: deal.stage },\r\n            })\r\n            .then(({ data: deals }) =>\r\n                Promise.all(\r\n                    deals\r\n                        .filter(oldDeal => oldDeal.id !== deal.id)\r\n                        .map(oldDeal =>\r\n                            dataProvider.update('deals', {\r\n                                id: oldDeal.id,\r\n                                data: { index: oldDeal.index + 1 },\r\n                                previousData: oldDeal,\r\n                            })\r\n                        )\r\n                )\r\n            );\r\n    };\r\n\r\n    return (\r\n        <Dialog open={open} onClose={handleClose}>\r\n            <Create\r\n                resource=\"deals\"\r\n                basePath=\"/deals\"\r\n                className={classes.root}\r\n                onSuccess={onSuccess}\r\n            >\r\n                <SimpleForm initialValues={{ index: 0, sales_id: identity && identity?.id }}>\r\n                    <TextInput\r\n                        source=\"name\"\r\n                        label=\"Deal name\"\r\n                        fullWidth\r\n                        validate={[required()]}\r\n                    />\r\n                    <TextInput\r\n                        source=\"description\"\r\n                        multiline\r\n                        rows={3}\r\n                        fullWidth\r\n                    />\r\n                    <ReferenceInput\r\n                        source=\"company_id\"\r\n                        reference=\"companies\"\r\n                        fullWidth\r\n                        validate={[required()]}\r\n                    >\r\n                        <AutocompleteInput optionText=\"name\" />\r\n                    </ReferenceInput>\r\n                    <SelectInput\r\n                        source=\"stage\"\r\n                        choices={stageChoices}\r\n                        fullWidth\r\n                        validate={[required()]}\r\n                        defaultValue=\"opportunity\"\r\n                    />\r\n                    <SelectInput\r\n                        source=\"type\"\r\n                        choices={typeChoices}\r\n                        fullWidth\r\n                    />\r\n                    <NumberInput source=\"amount\" fullWidth defaultValue={0} />\r\n                    <ReferenceInput\r\n                        source=\"sales_id\"\r\n                        reference=\"sales\"\r\n                        label=\"Account manager\"\r\n                        helperText={false}\r\n                        fullWidth\r\n                    >\r\n                        <SelectInput\r\n                            optionText={(sales: any) =>\r\n                                `${sales.first_name} ${sales.last_name}`\r\n                            }\r\n                        />\r\n                    </ReferenceInput>\r\n                </SimpleForm>\r\n            </Create>\r\n        </Dialog>\r\n    );\r\n};\r\n","import * as React from 'react';\r\nimport { useListContext } from 'react-admin';\r\nimport { Link } from '@material-ui/core';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles({\r\n    ul: {\r\n        listStyle: 'none',\r\n        padding: 0,\r\n        margin: 0,\r\n        display: 'inline-block',\r\n    },\r\n    li: {\r\n        display: 'inline',\r\n        '&:after': {\r\n            content: '\", \"',\r\n        },\r\n        '&:last-child:after': {\r\n            content: '\"\"',\r\n        },\r\n    },\r\n});\r\n\r\nexport const ContactList = () => {\r\n    const { ids, data, loaded } = useListContext();\r\n    const classes = useStyles();\r\n    if (!loaded) return <div style={{ height: '2em' }} />;\r\n    return (\r\n        <ul className={classes.ul}>\r\n            {ids.map(id => (\r\n                <li key={id} className={classes.li}>\r\n                    <Link\r\n                        component={RouterLink}\r\n                        to={`/contacts/${id}`}\r\n                        variant=\"subtitle1\"\r\n                    >\r\n                        {data[id].first_name} {data[id].last_name}\r\n                    </Link>\r\n                </li>\r\n            ))}\r\n        </ul>\r\n    );\r\n};\r\n","import * as React from 'react';\r\nimport {\r\n    ShowBase,\r\n    TextField,\r\n    ReferenceField,\r\n    ReferenceManyField,\r\n    ReferenceArrayField,\r\n    useRecordContext,\r\n    useRedirect,\r\n    useRefresh,\r\n    useDataProvider,\r\n    Identifier,\r\n} from 'react-admin';\r\nimport {\r\n    Box,\r\n    Dialog,\r\n    DialogContent,\r\n    Typography,\r\n    Divider,\r\n    Button,\r\n} from '@material-ui/core';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { format } from 'date-fns';\r\n\r\nimport { CompanyAvatar } from '../companies/CompanyAvatar';\r\nimport { NotesIterator } from '../notes';\r\nimport { ContactList } from './ContactList';\r\nimport { stageNames } from './stages';\r\n\r\nconst useStyles = makeStyles({\r\n    dialog: {\r\n        position: 'absolute',\r\n        top: 50,\r\n    },\r\n});\r\n\r\nexport const DealShow = ({ open, id }: { open: boolean; id: Identifier }) => {\r\n    const redirect = useRedirect();\r\n    const classes = useStyles();\r\n\r\n    const handleClose = () => {\r\n        redirect('/deals');\r\n    };\r\n\r\n    return (\r\n        <Dialog\r\n            open={open}\r\n            onClose={handleClose}\r\n            fullWidth\r\n            maxWidth=\"md\"\r\n            classes={{ paper: classes.dialog }}\r\n        >\r\n            <DialogContent>\r\n                <ShowBase resource=\"deals\" basePath=\"/deals\" id={id}>\r\n                    <DealShowContent />\r\n                </ShowBase>\r\n            </DialogContent>\r\n        </Dialog>\r\n    );\r\n};\r\n\r\nconst DealShowContent = () => {\r\n    const record = useRecordContext();\r\n    const dataProvider = useDataProvider();\r\n    const redirect = useRedirect();\r\n    const refresh = useRefresh();\r\n    \r\n    if (!record) return null;\r\n\r\n    const onDelete = async() =>{\r\n        const { data: columnDeals } = await dataProvider.getList('deals', {\r\n            sort: { field: 'index', order: 'ASC' },\r\n            pagination: { page: 1, perPage: 100 },\r\n            filter: { stage: record.droppableId },\r\n        });\r\n        await Promise.all([\r\n            ...columnDeals\r\n                .filter(\r\n                    deal => deal.index < record.index\r\n                )\r\n                .map(deal =>\r\n                    dataProvider.update('deals', {\r\n                        id: deal.id,\r\n                        data: { index: deal.index - 1 },\r\n                        previousData: deal,\r\n                    })\r\n                ),\r\n            // for the deal that was moved, update its index\r\n            dataProvider.delete('deals', {\r\n                id: record.id,\r\n                previousData: record,\r\n            }),\r\n        ]);\r\n        redirect('/deals');\r\n        refresh();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Box display=\"flex\">\r\n                <Box\r\n                    width={100}\r\n                    display=\"flex\"\r\n                    flexDirection=\"column\"\r\n                    alignItems=\"center\"\r\n                >\r\n                    <ReferenceField\r\n                        source=\"company_id\"\r\n                        reference=\"companies\"\r\n                        link=\"show\"\r\n                    >\r\n                        <CompanyAvatar />\r\n                    </ReferenceField>\r\n                    <ReferenceField\r\n                        source=\"company_id\"\r\n                        reference=\"companies\"\r\n                        link=\"show\"\r\n                    >\r\n                        <TextField\r\n                            source=\"name\"\r\n                            align=\"center\"\r\n                            component=\"div\"\r\n                        />\r\n                    </ReferenceField>\r\n                </Box>\r\n                <Box ml={2} flex=\"1\">\r\n                    <Box display=\"flex\" justifyContent=\"space-between\" >\r\n                        <Typography variant=\"h5\">{record.name}</Typography>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            startIcon={<DeleteIcon />}            \r\n                            onClick={(e:any) =>{\r\n                                e.stopPropagation();\r\n                                onDelete();\r\n                            }}\r\n                        >\r\n                            Delete\r\n                        </Button>\r\n                    </Box>\r\n\r\n                    <Box display=\"flex\" mt={2}>\r\n                        <Box display=\"flex\" mr={5} flexDirection=\"column\">\r\n                            <Typography color=\"textSecondary\" variant=\"body2\">\r\n                                Start\r\n                            </Typography>\r\n                            <Typography variant=\"subtitle1\">\r\n                                {format(new Date(record.start_at), 'PP')}\r\n                            </Typography>\r\n                        </Box>\r\n\r\n                        <Box display=\"flex\" mr={5} flexDirection=\"column\">\r\n                            <Typography color=\"textSecondary\" variant=\"body2\">\r\n                                Budget\r\n                            </Typography>\r\n                            <Typography variant=\"subtitle1\">\r\n                                {record.amount.toLocaleString('en-US', {\r\n                                    notation: 'compact',\r\n                                    style: 'currency',\r\n                                    currency: 'USD',\r\n                                    currencyDisplay: 'narrowSymbol',\r\n                                    minimumSignificantDigits: 3,\r\n                                })}\r\n                            </Typography>\r\n                        </Box>\r\n\r\n                        <Box display=\"flex\" mr={5} flexDirection=\"column\">\r\n                            <Typography color=\"textSecondary\" variant=\"body2\">\r\n                                Type\r\n                            </Typography>\r\n                            <Typography variant=\"subtitle1\">\r\n                                {record.type}\r\n                            </Typography>\r\n                        </Box>\r\n\r\n                        <Box display=\"flex\" mr={5} flexDirection=\"column\">\r\n                            <Typography color=\"textSecondary\" variant=\"body2\">\r\n                                Stage\r\n                            </Typography>\r\n                            <Typography variant=\"subtitle1\">\r\n                                {/* @ts-ignore */}\r\n                                {stageNames[record.stage]}\r\n                            </Typography>\r\n                        </Box>\r\n                    </Box>\r\n\r\n                    <Box mt={2} mb={2}>\r\n                        <Box\r\n                            display=\"flex\"\r\n                            mr={5}\r\n                            flexDirection=\"column\"\r\n                            minHeight={48}\r\n                        >\r\n                            <Typography color=\"textSecondary\" variant=\"body2\">\r\n                                Contacts\r\n                            </Typography>\r\n                            <ReferenceArrayField\r\n                                source=\"contact_ids\"\r\n                                reference=\"contacts\"\r\n                            >\r\n                                <ContactList />\r\n                            </ReferenceArrayField>\r\n                        </Box>\r\n                    </Box>\r\n\r\n                    <Box mt={2} mb={2} style={{ whiteSpace: 'pre-line' }}>\r\n                        <Typography color=\"textSecondary\" variant=\"body2\">\r\n                            Description\r\n                        </Typography>\r\n                        <Typography>{record.description}</Typography>\r\n                    </Box>\r\n\r\n                    <Divider />\r\n\r\n                    <Box mt={2}>\r\n                        <ReferenceManyField\r\n                            target=\"deal_id\"\r\n                            reference=\"dealNotes\"\r\n                            sort={{ field: 'date', order: 'DESC' }}\r\n                        >\r\n                            <NotesIterator reference=\"deals\" />\r\n                        </ReferenceManyField>\r\n                    </Box>\r\n                </Box>\r\n            </Box>\r\n        </>\r\n    );\r\n};\r\n","import * as React from 'react';\r\nimport { useListFilterContext, useGetIdentity } from 'react-admin';\r\nimport { Switch, FormControlLabel } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        marginBottom: theme.spacing(1),\r\n        marginLeft: theme.spacing(1),\r\n    },\r\n}));\r\n\r\nexport const OnlyMineInput = ({ alwaysOn }: { alwaysOn: boolean }) => {\r\n    const {\r\n        filterValues,\r\n        displayedFilters,\r\n        setFilters,\r\n    } = useListFilterContext();\r\n    const { identity } = useGetIdentity();\r\n    const classes = useStyles();\r\n    const handleChange = () => {\r\n        const newFilterValues = { ...filterValues };\r\n        if (typeof filterValues.sales_id !== 'undefined') {\r\n            delete newFilterValues.sales_id;\r\n        } else {\r\n            newFilterValues.sales_id = identity && identity?.id;\r\n        }\r\n        setFilters(newFilterValues, displayedFilters);\r\n    };\r\n    return (\r\n        <div className={classes.root}>\r\n            <FormControlLabel\r\n                control={\r\n                    <Switch\r\n                        checked={typeof filterValues.sales_id !== 'undefined'}\r\n                        onChange={handleChange}\r\n                        color=\"primary\"\r\n                        name=\"checkedC\"\r\n                    />\r\n                }\r\n                label=\"Only companies I manage\"\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nOnlyMineInput.defaultProps = { source: 'sales_id' };\r\n","import * as React from 'react';\r\nimport {\r\n    CreateButton,\r\n    ExportButton,\r\n    FilterButton,\r\n    List,\r\n    ListProps,\r\n    SearchInput,\r\n    SelectInput,\r\n    TopToolbar,\r\n    useGetIdentity,\r\n} from 'react-admin';\r\nimport { Route } from 'react-router';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { DealListContent } from './DealListContent';\r\nimport { DealCreate } from './DealCreate';\r\nimport { DealShow } from './DealShow';\r\nimport { OnlyMineInput } from './OnlyMineInput';\r\nimport { typeChoices } from './types';\r\n\r\nexport const DealList = (props: ListProps) => {\r\n    const { identity } = useGetIdentity();\r\n    return identity ? (\r\n        <>\r\n            <List\r\n                {...props}\r\n                perPage={100}\r\n                sort={{ field: 'index', order: 'ASC' }}\r\n                filters={dealFilters}\r\n                filterDefaultValues={{ sales_id: identity && identity?.id }}\r\n                actions={<DealActions />}\r\n                pagination={false}\r\n                component=\"div\"\r\n            >\r\n                <DealListContent />\r\n            </List>\r\n            <Route path=\"/deals/create\">\r\n                {({ match }) => <DealCreate open={!!match} />}\r\n            </Route>\r\n            <Route path=\"/deals/:id/show\">\r\n                {({ match }) =>\r\n                    !!match ? (\r\n                        <DealShow open={!!match} id={match?.params?.id} />\r\n                    ) : null\r\n                }\r\n            </Route>\r\n        </>\r\n    ) : null;\r\n};\r\n\r\nconst dealFilters = [\r\n    <SearchInput source=\"q\" alwaysOn />,\r\n    <OnlyMineInput alwaysOn />,\r\n    <SelectInput source=\"type\" choices={typeChoices} />,\r\n];\r\n\r\nconst useActionStyles = makeStyles(theme => ({\r\n    createButton: {\r\n        marginLeft: theme.spacing(2),\r\n    },\r\n}));\r\nconst DealActions = () => {\r\n    const classes = useActionStyles();\r\n    return (\r\n        <TopToolbar>\r\n            <FilterButton />\r\n            <ExportButton />\r\n            <CreateButton\r\n                basePath=\"/deals\"\r\n                variant=\"contained\"\r\n                label=\"New Deal\"\r\n                className={classes.createButton}\r\n            />\r\n        </TopToolbar>\r\n    );\r\n};\r\n","/* eslint-disable import/no-anonymous-default-export */\r\nimport { DealList } from './DealList';\r\nimport MonetizationOnIcon from '@material-ui/icons/MonetizationOn';\r\n\r\nexport default {\r\n    list: DealList,\r\n    icon: MonetizationOnIcon,\r\n};\r\n","import * as React from 'react';\r\nimport { Avatar } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport BusinessIcon from '@material-ui/icons/Business';\r\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\r\nimport clsx from 'clsx';\r\n\r\nimport { Product } from '../types';\r\n\r\nconst useStyles = makeStyles({\r\n    avatar: {\r\n        width: 60,\r\n        height: 60,\r\n        // backgroundColor: 'aliceblue',\r\n    },\r\n    img: {\r\n        objectFit: 'contain',\r\n    },\r\n    small: {\r\n        width: 20,\r\n        height: 20,\r\n    },\r\n    large: {\r\n        width: 40,\r\n        height: 40,\r\n    },\r\n});\r\n\r\nexport const ProductAvatar = ({\r\n    record,\r\n    size = 'large',\r\n}: {\r\n    record?: Product;\r\n    size?: 'small' | 'large';\r\n}) => {\r\n    const classes = useStyles();\r\n    if (!record) return null;\r\n    console.log(record.image);\r\n    if(!record.image) return (\r\n        <Avatar\r\n            alt={record.model}\r\n            className={classes.avatar}\r\n        >\r\n            <ShoppingCartIcon />\r\n        </Avatar>\r\n    )\r\n    return (\r\n        <Avatar\r\n            src={process.env.PUBLIC_URL + record.image}\r\n            alt={record.model}\r\n            className={classes.avatar}\r\n            imgProps={{ className: clsx(classes.img, classes[size]) }}\r\n        />\r\n    );\r\n};\r\n","import * as React from 'react';\r\nimport { useState } from 'react';\r\nimport { Paper, Typography, Link as MuiLink, Box, Chip } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ContactsIcon from '@material-ui/icons/AccountCircle';\r\nimport DealIcon from '@material-ui/icons/MonetizationOn';\r\nimport { linkToRecord, TextField, ReferenceField, ImageField } from 'react-admin';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { ProductAvatar } from './ProductAvatar';\r\nimport { Product } from '../types';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    paper: {\r\n        height: 200,\r\n        width: 185,\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'space-between',\r\n        padding: '1em',\r\n        position: 'relative',\r\n    },\r\n    identity: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    name: {\r\n        textAlign: 'center',\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    family: {\r\n        textAlign: 'center',\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    stats: {\r\n        display: 'flex',\r\n        justifyContent: 'space-around',\r\n        width: '100%',\r\n    },\r\n    singleStat: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    },\r\n    statIcon: {\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    image: {\r\n        width: 28,\r\n        height: 28,\r\n    },\r\n}));\r\n\r\nexport const ProductCard = ({ record }: { record: Product }) => {\r\n    const classes = useStyles();\r\n    const [elevation, setElevation] = useState(1);\r\n    return (\r\n        <MuiLink\r\n            component={Link}\r\n            to={linkToRecord('/products', record.id, 'show')}\r\n            underline=\"none\"\r\n            onMouseEnter={() => setElevation(3)}\r\n            onMouseLeave={() => setElevation(1)}\r\n        >\r\n            <Paper className={classes.paper} elevation={elevation}>\r\n                <Box position=\"absolute\" top={10} right={10}>\r\n                    <ReferenceField\r\n                        record={record}\r\n                        source=\"company_id\"\r\n                        reference=\"companies\"\r\n                        link=\"show\"\r\n                    >\r\n                        <ImageField \r\n                            source=\"logo\" \r\n                            title=\"title\"\r\n                            classes={classes}\r\n                        />\r\n                    </ReferenceField>\r\n                </Box>\r\n                <div className={classes.identity}>\r\n                    <ProductAvatar record={record} />\r\n                    <div className={classes.name}>\r\n                        <Box display=\"flex\" alignItems=\"center\">\r\n                        <Typography variant=\"subtitle2\">\r\n                            {record.model}\r\n                        </Typography>\r\n                        </Box>\r\n                    </div>\r\n\r\n                    <div className={classes.family}>\r\n                        <Typography variant=\"body2\">\r\n                            in family{' '}\r\n                            <ReferenceField\r\n                                record={record}\r\n                                source=\"family_id\"\r\n                                reference=\"productFamilies\"\r\n                                link=\"show\"\r\n                            >\r\n                                <TextField source=\"name\" />\r\n                            </ReferenceField>\r\n                        </Typography>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className={classes.stats}>\r\n                    <div className={classes.singleStat}>\r\n                        <ContactsIcon\r\n                            color=\"disabled\"\r\n                            className={classes.statIcon}\r\n                        />\r\n                        <div>\r\n                            <Typography\r\n                                variant=\"subtitle2\"\r\n                                style={{ marginBottom: -8 }}\r\n                            >\r\n                                {record.nb_notes}\r\n                            </Typography>\r\n                            <Typography variant=\"caption\" color=\"textSecondary\">\r\n                                {record.nb_notes > 1 ? 'notes' : 'note'}\r\n                            </Typography>\r\n                        </div>\r\n                    </div>\r\n                    <div className={classes.singleStat}>\r\n                        <DealIcon\r\n                            color=\"disabled\"\r\n                            className={classes.statIcon}\r\n                        />\r\n                        <div>\r\n                            <Typography\r\n                                variant=\"subtitle2\"\r\n                                style={{ marginBottom: -8 }}\r\n                            >\r\n                                {record.nb_properties}\r\n                            </Typography>\r\n                            <Typography variant=\"caption\" color=\"textSecondary\">\r\n                                {record.nb_properties > 1 ? 'properties' : 'property'}\r\n                            </Typography>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Paper>\r\n        </MuiLink>\r\n    );\r\n};\r\n","import * as React from 'react';\r\nimport { Box, Paper } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useListContext, Identifier } from 'react-admin';\r\nimport Skeleton from '@material-ui/lab/Skeleton';\r\n\r\nimport { ProductCard } from './ProductCard';\r\nimport { Product } from '../types';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    gridList: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        width:  '100%',\r\n        gap: '5px',\r\n        justifyContent: 'center',\r\n    },\r\n    paper: {\r\n        height: 200,\r\n        width: 194,\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'space-between',\r\n        alignItems: \"center\",\r\n        padding: '1em',\r\n        backgroundColor: theme.palette.grey[200],\r\n    },\r\n}));\r\n\r\nconst times = (nbChildren: number, fn: (key: number) => any) =>\r\n    Array.from({ length: nbChildren }, (_, key) => fn(key));\r\n\r\nconst LoadingGridList = () => {\r\n    const classes = useStyles();\r\n    return (\r\n        <Box className={classes.gridList}>\r\n            {times(15, key => (\r\n                <Paper className={classes.paper} key={key} >\r\n                <Skeleton variant=\"circle\" width={60} height={60}  animation=\"wave\"/>\r\n                <Skeleton variant=\"text\" animation=\"wave\" width={110}/>\r\n                <Skeleton variant=\"text\" animation=\"wave\" width={150}/>\r\n                <Skeleton variant=\"rect\" width={180} height={40} />\r\n                </Paper>\r\n            ))}\r\n        </Box>\r\n    );\r\n};\r\n\r\nconst LoadedGridList = () => {\r\n    const { ids, data } = useListContext<Product>();\r\n    const classes = useStyles();\r\n\r\n    if (!ids || !data) return null;\r\n\r\n    return (\r\n        <Box className={classes.gridList}>\r\n            {ids.map((id: Identifier) => (\r\n                <ProductCard key={id} record={data[id]} />\r\n            ))}\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport const ProductGridList = () => {\r\n    const { loaded, loading } = useListContext();\r\n    return loading ? <LoadingGridList /> : <LoadedGridList /> ;\r\n};\r\n","/* eslint-disable import/no-anonymous-default-export */\r\nimport * as React from 'react';\r\nimport {\r\n    FilterList,\r\n    FilterLiveSearch,\r\n    FilterListItem,\r\n    useGetIdentity,\r\n    useGetList,\r\n} from 'react-admin';\r\nimport { Box, Chip } from '@material-ui/core';\r\nimport CategoryIcon from '@material-ui/icons/Category';\r\n\r\nimport { ProductFamily } from '../types';\r\n\r\nexport const ProductListFilter = () => {\r\n    const { identity } = useGetIdentity();\r\n    const { data: familyData, ids: familyIds } = useGetList<ProductFamily>(\r\n        'productFamilies',\r\n        { page: 1, perPage: 10 },\r\n        { field: 'name', order: 'ASC' }\r\n    );\r\n    return (\r\n        <Box width=\"15em\" order=\"-1\" marginRight=\"1em\" mb={1}>\r\n            <FilterLiveSearch />\r\n\r\n            <FilterList label=\"Families\" icon={<CategoryIcon />}>\r\n                {familyIds &&\r\n                    familyData &&\r\n                    familyIds.map(id => (\r\n                        <FilterListItem\r\n                            key={id}\r\n                            label={<Chip label={familyData[id].name} size=\"small\"/>}\r\n                            value={{ family_id: id }}\r\n                        />\r\n                    ))}\r\n            </FilterList>\r\n        </Box>\r\n    );\r\n};\r\n","import * as React from 'react';\r\nimport {\r\n    List,\r\n    ListProps,\r\n    TopToolbar,\r\n    ExportButton,\r\n    CreateButton,\r\n    Pagination,\r\n    useGetIdentity,\r\n    ListActionsProps,\r\n} from 'react-admin';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { ProductGridList } from './ProductGridList';\r\nimport { ProductListFilter } from './ProductListFilter';\r\nimport { ImportButton } from 'react-admin-import-csv';\r\n\r\nexport const ProductList = (props: ListProps) => {\r\n    const { identity } = useGetIdentity();\r\n    return identity ? (\r\n        <List\r\n            {...props}\r\n            actions={<ProductListActions />}\r\n            aside={<ProductListFilter />}\r\n            filterDefaultValues={{ }}\r\n            pagination={<Pagination rowsPerPageOptions={[15, 25, 50, 100]} />}\r\n            perPage={25}\r\n            sort={{ field: 'model', order: 'ASC' }}\r\n            component=\"div\"\r\n        >\r\n            <ProductGridList />\r\n        </List>\r\n    ) : null;\r\n};\r\n\r\nconst useActionStyles = makeStyles(theme => ({\r\n    createButton: {\r\n        marginLeft: theme.spacing(2),\r\n    },\r\n}));\r\n\r\nconst ProductListActions = (props: ListActionsProps) => {\r\n    const classes = useActionStyles();\r\n    return (\r\n        <TopToolbar>\r\n            <ExportButton />\r\n            <ImportButton {...props} />\r\n            <CreateButton\r\n                basePath=\"/products\"\r\n                variant=\"contained\"\r\n                label=\"New Product\"\r\n                className={classes.createButton}\r\n            />\r\n        </TopToolbar>\r\n    );\r\n};\r\n","import Reacct, { useState, FormEvent } from 'react';\r\nimport {\r\n    useCreateSuggestionContext,\r\n    useCreate,\r\n    ReferenceInput,\r\n} from 'react-admin';\r\nimport {\r\n    Dialog, \r\n    DialogContent,\r\n    DialogActions,\r\n    TextField,\r\n    Button,\r\n    DialogTitle,\r\n } from '@material-ui/core';\r\n import { makeStyles } from '@material-ui/core/styles';\r\n import { FamilyCategory } from '../types';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n}));\r\n\r\nexport const CreatePropertyType = () => {\r\n    const classes = useStyles();\r\n    const { filter, onCancel, onCreate } = useCreateSuggestionContext();\r\n    const [name, setName] = useState(filter || '');\r\n    const [unit, setUnit] = useState('');\r\n    const [synonyms, setSynonyms] = useState('');\r\n    const [create] = useCreate('propertyTypes');\r\n\r\n    const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\r\n        event.preventDefault();\r\n        create(\r\n            {\r\n                payload: {\r\n                    data: {\r\n                        name: name,\r\n                        unit: unit,\r\n                        synonyms: synonyms,\r\n                    },\r\n                },\r\n            },\r\n            {\r\n                onSuccess: ({ data }: {data: FamilyCategory;}) => {\r\n                    setName('');\r\n                    setUnit('');\r\n                    setSynonyms('');\r\n                    onCreate(data);\r\n                },\r\n            }\r\n        );\r\n    };\r\n\r\n    return (\r\n        <Dialog open onClose={onCancel}>\r\n            <DialogTitle>Add new Product Property Type</DialogTitle>\r\n            <form onSubmit={handleSubmit}>\r\n                <DialogContent>\r\n                    <div className={classes.root}>\r\n                        <TextField\r\n                            label=\"New type name\"\r\n                            value={name}\r\n                            onChange={event => setName(event.target.value)}\r\n                            autoFocus\r\n                            required\r\n                        />\r\n                        <TextField\r\n                            label=\"Unit\"\r\n                            value={unit}\r\n                            onChange={event => setUnit(event.target.value)}\r\n                        />\r\n                        <TextField\r\n                            label=\"Commma separated synonyms\"\r\n                            value={synonyms}\r\n                            onChange={event => setSynonyms(event.target.value)}\r\n                        />\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button type=\"submit\" disabled={!name}>Add</Button>\r\n                    <Button onClick={onCancel}>Cancel</Button>\r\n                </DialogActions>\r\n            </form>\r\n        </Dialog>\r\n    );\r\n};","import * as React from 'react';\r\nimport {\r\n    Create,\r\n    CreateProps,\r\n    ReferenceInput,\r\n    TabbedForm,\r\n    TextInput,\r\n    FormTab,\r\n    required,\r\n    AutocompleteInput,\r\n    useGetIdentity,\r\n    ArrayInput,\r\n    SimpleFormIterator,\r\n    ReferenceArrayInput,\r\n} from 'react-admin';\r\nimport RichTextInput from 'ra-input-rich-text';\r\nimport { Box, CardContent, Divider, Avatar, useTheme } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport BusinessIcon from '@material-ui/icons/Business';\r\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\r\nimport clsx from 'clsx';\r\nimport { CreatePropertyType } from './CreatePropertyType';\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    inline: {\r\n        display: 'inline-block',\r\n        marginLeft: '1em',\r\n        '&.first-child': {\r\n            marginLeft: 0,\r\n        },\r\n    },\r\n    propertyContainer: {\r\n        display: 'flex',\r\n        gap: theme.spacing(1),\r\n        minWidth: '500px',\r\n    },\r\n}));\r\n\r\nexport const ProductCreate = (props: CreateProps) => {\r\n    const classes = useStyles();\r\n    const { identity } = useGetIdentity();\r\n    const theme = useTheme();\r\n\r\n    const defaultValue = () => ({ });\r\n\r\n    return (\r\n        <Create {...props} actions={false} >\r\n            <TabbedForm>\r\n                <FormTab label=\"General\">\r\n                    <ReferenceInput \r\n                        label=\"Comapny\" \r\n                        source=\"company_id\" \r\n                        reference=\"companies\"\r\n                        fullWidth\r\n                    >\r\n                        <AutocompleteInput optionText=\"name\" />\r\n                    </ReferenceInput>\r\n                    <ReferenceInput \r\n                        label=\"Product Family\" \r\n                        source=\"family_id\" \r\n                        reference=\"productFamilies\"\r\n                        fullWidth\r\n                    >\r\n                        <AutocompleteInput optionText=\"name\" />\r\n                    </ReferenceInput>\r\n                    <TextInput source=\"model\" validate={required()} fullWidth />\r\n                    <TextInput source=\"code\" fullWidth />\r\n                    <TextInput source=\"website\" fullWidth />\r\n                    <TextInput source=\"image\" fullWidth />\r\n                    <TextInput \r\n                        source=\"description\"\r\n                        multiline\r\n                        rows={3} \r\n                        fullWidth \r\n                    />\r\n                </FormTab>\r\n                <FormTab label=\"Properties\">\r\n                    <ArrayInput\r\n                        source=\"properties\"\r\n                    >\r\n                        <SimpleFormIterator>\r\n                                <ReferenceInput\r\n                                    source=\"type_id\"\r\n                                    reference=\"propertyTypes\"\r\n                                    label=\"Type\"\r\n                                >\r\n                                    <AutocompleteInput \r\n                                        optionText=\"name\" \r\n                                        create={<CreatePropertyType />}\r\n                                    />\r\n                                </ReferenceInput>\r\n                                <TextInput source=\"property_value\" label=\"Value\"/>\r\n                                <TextInput source=\"condition\"  label=\"Condition\"/>\r\n                        </SimpleFormIterator>\r\n                    </ArrayInput>\r\n                </FormTab>\r\n            </TabbedForm>\r\n        </Create>\r\n    );\r\n};\r\n\r\nconst CustomLayout = ({ children }: \r\n    {children: any;}) => (\r\n    <CardContent>\r\n        <Box display=\"flex\">\r\n            <Box paddingTop={1}>\r\n                <Avatar>\r\n                    <ShoppingCartIcon />\r\n                </Avatar>\r\n            </Box>\r\n            <Box ml={2} flex=\"1\" maxWidth=\"80%\">\r\n                {children}\r\n            </Box>\r\n        </Box>\r\n    </CardContent>\r\n);\r\n\r\nconst CustomDivider = () => (\r\n    <Box mb={2}>\r\n        <Divider />\r\n    </Box>\r\n);\r\n","import * as React from 'react';\r\nimport { Avatar } from '@material-ui/core';\r\nimport BusinessIcon from '@material-ui/icons/Business';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\r\nimport { Product } from '../types';\r\n\r\nconst useStyles = makeStyles({\r\n    image: {\r\n        objectFit: 'contain',\r\n    },\r\n});\r\n\r\nconst sizeInPixel = {\r\n    medium: 42,\r\n    small: 20,\r\n};\r\n\r\nexport const ProductImageField = ({\r\n    record,\r\n    source,\r\n    size = 'medium',\r\n}: {\r\n    record?: Product;\r\n    source?: string;\r\n    size?: 'small' | 'medium';\r\n}) => {\r\n    const classes = useStyles();\r\n    if (!record) return null;\r\n    if(!record.image) return (\r\n        <Avatar>\r\n            <ShoppingCartIcon />\r\n        </Avatar>\r\n    )\r\n    return (\r\n        <img\r\n            src={process.env.PUBLIC_URL + record.image}\r\n            alt={record.model}\r\n            title={record.model}\r\n            width={sizeInPixel[size]}\r\n            height={sizeInPixel[size]}\r\n            className={classes.image}\r\n        />\r\n    );\r\n};\r\n","import * as React from 'react';\r\nimport {\r\n    TextField,\r\n    DateField,\r\n    FunctionField,\r\n    ReferenceField,\r\n    EditButton,\r\n    DeleteButton,\r\n    ShowButton,\r\n} from 'react-admin';\r\nimport { Box, Typography, Divider, Link } from '@material-ui/core';\r\nimport OpenInBrowserIcon from '@material-ui/icons/OpenInBrowser';\r\n\r\nimport { Product, Sale } from '../types';\r\n\r\nexport const ProductAside = ({\r\n    record,\r\n    link = 'edit',\r\n}: {\r\n    record?: Product;\r\n    link?: string;\r\n}) =>\r\n    record ? (\r\n        <Box ml={4} width={250} minWidth={250}>\r\n            <Box textAlign=\"center\" mb={2}>\r\n                {link === 'edit' ? (\r\n                    <EditButton\r\n                        basePath=\"/products\"\r\n                        record={record}\r\n                        label=\"Edit Product\"\r\n                    />\r\n                ) : (\r\n                    <ShowButton\r\n                        basePath=\"/products\"\r\n                        record={record}\r\n                        label=\"Show Product\"\r\n                    />\r\n                )}\r\n            </Box>\r\n\r\n            <Typography variant=\"subtitle2\">Product info</Typography>\r\n            <Divider />\r\n\r\n            <Box mt={1} display=\"flex\" gridGap={2}>\r\n                Company: \r\n                <ReferenceField\r\n                    record={record}\r\n                    source=\"company_id\"\r\n                    reference=\"companies\"\r\n                    link=\"show\"\r\n                >\r\n                    <TextField source=\"name\" />\r\n                </ReferenceField>\r\n            </Box>\r\n\r\n            <Box mt={1} display=\"flex\" gridGap={2}>\r\n                Family: \r\n                <ReferenceField\r\n                    record={record}\r\n                    source=\"family_id\"\r\n                    reference=\"productFamilies\"\r\n                    link=\"show\"\r\n                >\r\n                    <TextField source=\"name\" />\r\n                </ReferenceField>\r\n            </Box>\r\n\r\n            <Box mt={1}>\r\n                Code: <TextField source=\"code\" record={record} />\r\n            </Box>\r\n            {record.website && (\r\n                <Box mt={1}>\r\n                    Website: <Link href={record.website} target=\"_blank\" rel=\"noreferrer\">Link</Link>\r\n                </Box>\r\n            )}\r\n\r\n            <Box mt={3}>\r\n                <Typography variant=\"subtitle2\">Description</Typography>\r\n                <Divider />\r\n\r\n                <Box mt={1}>\r\n                    <TextField source=\"description\" />\r\n                </Box>\r\n\r\n            </Box>\r\n        </Box>\r\n    ) : null;\r\n","import * as React from 'react';\r\nimport { useState, ChangeEvent } from 'react';\r\nimport {\r\n    ShowBase,\r\n    ShowProps,\r\n    EditButton,\r\n    TextField,\r\n    ReferenceManyField,\r\n    SelectField,\r\n    ReferenceField,\r\n    ImageField,\r\n    Datagrid,\r\n    useShowContext,\r\n    useRecordContext,\r\n    useListContext,\r\n} from 'react-admin';\r\nimport {\r\n    Avatar as MuiAvatar,\r\n    Box,\r\n    Button,\r\n    Card,\r\n    CardContent,\r\n    Typography,\r\n    List,\r\n    ListItem,\r\n    ListItemAvatar,\r\n    ListItemText,\r\n    ListItemSecondaryAction,\r\n    Tabs,\r\n    Tab,\r\n    Chip,\r\n    Divider,\r\n} from '@material-ui/core';\r\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport { NotesIterator } from '../notes';\r\n\r\n\r\nimport { ProductImageField } from './ProductImageField';\r\nimport { ProductAside } from './ProductAside';\r\nimport { Product, ProductPrperty } from '../types';\r\n\r\nexport const ProductShow = (props: ShowProps) => (\r\n    <ShowBase {...props}>\r\n        <ProductShowContent />\r\n    </ShowBase>\r\n);\r\n\r\nconst ProductShowContent = () => {\r\n    const { record, loaded } = useShowContext<Product>();\r\n    const [value, setValue] = useState(0);\r\n    const handleChange = (event: ChangeEvent<{}>, newValue: number) => {\r\n        setValue(newValue);\r\n    };\r\n    if (!loaded || !record) return null;\r\n    return (\r\n        <Box mt={2} display=\"flex\">\r\n            <Box flex=\"1\">\r\n                <Card>\r\n                    <CardContent>\r\n                        <Box display=\"flex\" mb={1}>\r\n                            <ProductImageField record={record as any} />\r\n                            <Box ml={2} flex=\"1\">\r\n                                <Box display=\"flex\" gridGap={4}>\r\n                                    <Typography variant=\"h5\">{record.model}</Typography>\r\n                                </Box>\r\n                            </Box>\r\n                        </Box>\r\n                        <Tabs\r\n                            value={value}\r\n                            indicatorColor=\"primary\"\r\n                            textColor=\"primary\"\r\n                            onChange={handleChange}\r\n                        >\r\n                            <Tab\r\n                                label={\r\n                                    record.nb_notes > 1\r\n                                        ? `${record.nb_notes} Notes`\r\n                                        : `${record.nb_notes} Note`\r\n                                }\r\n                            />\r\n                            <Tab\r\n                                label={\r\n                                    record.nb_properties > 1\r\n                                        ? `${record.nb_properties} Properties`\r\n                                        : `${record.nb_properties} Property`\r\n                                }\r\n                            />\r\n                        </Tabs>\r\n                        <Divider />\r\n                        <TabPanel value={value} index={0}>\r\n                            <ReferenceManyField\r\n                                reference=\"productNotes\"\r\n                                target=\"product_id\"\r\n                            >\r\n                                 <NotesIterator reference=\"products\" />\r\n                            </ReferenceManyField>\r\n                        </TabPanel>\r\n                        <TabPanel value={value} index={1}>\r\n                            <ReferenceManyField reference=\"productProperties\" target=\"product_id\" addLabel={false}>\r\n                                <Datagrid>\r\n                                    <ReferenceField\r\n                                            source=\"type_id\"\r\n                                            reference=\"propertyTypes\"\r\n                                            link={false}\r\n                                        >\r\n                                        <TextField source=\"name\" />\r\n                                    </ReferenceField>\r\n                                    <TextField source=\"property_value\" />\r\n                                    <ReferenceField\r\n                                            source=\"type_id\"\r\n                                            reference=\"propertyTypes\"\r\n                                            link={false}\r\n                                        >\r\n                                        <TextField source=\"unit\" />\r\n                                    </ReferenceField>\r\n                                    <TextField source=\"condition\" />\r\n    \r\n                                </Datagrid>\r\n                            </ReferenceManyField>\r\n                        </TabPanel>\r\n                    </CardContent>\r\n                </Card>\r\n            </Box>\r\n            <ProductAside record={record} />\r\n        </Box>\r\n    );\r\n};\r\n\r\ninterface TabPanelProps {\r\n    children?: React.ReactNode;\r\n    index: any;\r\n    value: any;\r\n}\r\n\r\nconst TabPanel = (props: TabPanelProps) => {\r\n    const { children, value, index, ...other } = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`wrapped-tabpanel-${index}`}\r\n            aria-labelledby={`wrapped-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {children}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst ProductPrpertiesIterator = () => {\r\n    const { data, ids, loaded } = useListContext<ProductPrperty>();\r\n    const record = useRecordContext();\r\n\r\n    const now = Date.now();\r\n    if (!loaded) return null;\r\n    return (\r\n        <Box>\r\n            <List>\r\n                {ids.map(id => {\r\n                    const productProperty = data[id];\r\n                    return (\r\n                        <ListItem\r\n                            button\r\n                            key={id}\r\n                            component={RouterLink}\r\n                            to={`/productProperties/${id}/show`}\r\n                        >\r\n                            {/* <ListItemAvatar>\r\n                                <Avatar record={productProperty} />\r\n                            </ListItemAvatar>\r\n                            <ListItemText\r\n                                primary={`${productProperty.first_name} ${productProperty.last_name}`}\r\n                                secondary={\r\n                                    <>\r\n                                        {productProperty.title}{' '}\r\n                                        {productProperty.nb_notes &&\r\n                                        `- ${productProperty.nb_notes} notes `}\r\n                                    </>\r\n                                }\r\n                            />\r\n                            <ListItemSecondaryAction>\r\n                                <Typography variant=\"body2\" color=\"textSecondary\">\r\n                                    last activity{' '}\r\n                                    {formatDistance(\r\n                                        new Date(productProperty.last_seen),\r\n                                        now\r\n                                    )}{' '}\r\n                                    ago <Status status={productProperty.status} />\r\n                                </Typography>\r\n                            </ListItemSecondaryAction> */}\r\n                        </ListItem>\r\n                    );\r\n                })}\r\n            </List>\r\n            <Box textAlign=\"center\" mt={1}>\r\n                {/* <CreateRelatedProductPrpertyButton record={record} /> */}\r\n            </Box>\r\n        </Box>\r\n    );\r\n};\r\n\r\n// const CreateRelatedProductPrpertyButton = ({ record }: any) => (\r\n//     <Button\r\n//         component={RouterLink}\r\n//         to={{\r\n//             pathname: '/productProperties/create',\r\n//             state: { record: { product_id: record.id } },\r\n//         }}\r\n//         color=\"primary\"\r\n//         variant=\"contained\"\r\n//         size=\"small\"\r\n//         startIcon={<PersonAddIcon />}\r\n//     >\r\n//         Add property\r\n//     </Button>\r\n// );\r\n","import * as React from 'react';\r\nimport {\r\n    Edit,\r\n    EditProps,\r\n    ReferenceInput,\r\n    TabbedForm,\r\n    FormTab,\r\n    TextInput,\r\n    SelectInput,\r\n    useRecordContext,\r\n    AutocompleteInput,\r\n    required,\r\n    ArrayInput,\r\n    SimpleFormIterator,\r\n} from 'react-admin';\r\nimport { Box, CardContent, Divider } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport clsx from 'clsx';\r\n\r\nimport { ProductAside } from './ProductAside';\r\nimport { ProductImageField } from './ProductImageField';\r\nimport { CreatePropertyType } from './CreatePropertyType';\r\n\r\nconst useStyles = makeStyles({\r\n    inline: {\r\n        display: 'inline-block',\r\n        marginLeft: '1em',\r\n        '&.first-child': {\r\n            marginLeft: 0,\r\n        },\r\n    },\r\n});\r\n\r\nconst renderDistributor = (choice: any) => {\r\n\r\n}\r\n\r\nexport const ProductEdit = (props: EditProps) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <Edit \r\n            {...props} \r\n            aside={<ProductAside link=\"show\" />} \r\n            actions={false}\r\n        >\r\n            <TabbedForm\r\n                redirect=\"show\"\r\n            >\r\n                <FormTab label=\"General\">\r\n                    <ReferenceInput \r\n                        label=\"Comapny\" \r\n                        source=\"company_id\" \r\n                        reference=\"companies\"\r\n                        fullWidth\r\n                    >\r\n                        <AutocompleteInput optionText=\"name\" />\r\n                    </ReferenceInput>\r\n                    <ReferenceInput \r\n                        label=\"Product Family\" \r\n                        source=\"family_id\" \r\n                        reference=\"productFamilies\"\r\n                        fullWidth\r\n                    >\r\n                        <AutocompleteInput optionText=\"name\" />\r\n                    </ReferenceInput>\r\n                    <TextInput source=\"model\" validate={required()} fullWidth />\r\n                    <TextInput source=\"code\" fullWidth />\r\n                    <TextInput source=\"website\" fullWidth />\r\n                    <TextInput source=\"image\" fullWidth />\r\n                    <TextInput \r\n                        source=\"description\"\r\n                        multiline\r\n                        rows={3} \r\n                        fullWidth \r\n                    />\r\n                </FormTab>\r\n                <FormTab label=\"Properties\">\r\n                    <ArrayInput\r\n                        source=\"properties\"\r\n                    >\r\n                        <SimpleFormIterator>\r\n                                <ReferenceInput\r\n                                    source=\"type_id\"\r\n                                    reference=\"propertyTypes\"\r\n                                    label=\"Type\"\r\n                                >\r\n                                    <AutocompleteInput \r\n                                        optionText=\"name\" \r\n                                        create={<CreatePropertyType />}\r\n                                    />\r\n                                </ReferenceInput>\r\n                                <TextInput source=\"property_value\" label=\"Value\"/>\r\n                                <TextInput source=\"condition\"  label=\"Condition\"/>\r\n                        </SimpleFormIterator>\r\n                    </ArrayInput>\r\n                </FormTab>\r\n            </TabbedForm>\r\n        </Edit>\r\n    );\r\n};\r\n\r\nconst CustomLayout = (props: any) => {\r\n    const record = useRecordContext(props);\r\n    return (\r\n        <CardContent>\r\n            <Box display=\"flex\">\r\n                <ProductImageField record={record as any} />\r\n                <Box ml={2} flex=\"1\" maxWidth={796}>\r\n                    {props.children}\r\n                </Box>\r\n            </Box>\r\n        </CardContent>\r\n    );\r\n};\r\n\r\nconst CustomDivider = () => (\r\n    <Box mb={2}>\r\n        <Divider />\r\n    </Box>\r\n);\r\n","/* eslint-disable import/no-anonymous-default-export */\r\nimport { ProductList } from './ProductList';\r\nimport { ProductCreate } from './ProductCreate';\r\nimport { ProductShow } from './ProductShow';\r\nimport { ProductEdit } from './ProductEdit';\r\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\r\n\r\nexport default {\r\n    list: ProductList,\r\n    create: ProductCreate,\r\n    edit: ProductEdit,\r\n    show: ProductShow,\r\n    icon: FiberManualRecordIcon,\r\n};\r\n","import * as React from 'react';\r\nimport { Avatar as MuiAvatar } from '@material-ui/core';\r\n\r\nimport { ProductFamily } from '../types';\r\n\r\nexport const Avatar = ({ record }: { record: ProductFamily }) => (\r\n    <MuiAvatar src={record.image}>\r\n        {record.name}\r\n    </MuiAvatar>\r\n);\r\n","/* eslint-disable import/no-anonymous-default-export */\r\nimport * as React from 'react';\r\nimport {\r\n    FilterList,\r\n    FilterLiveSearch,\r\n    FilterListItem,\r\n    useGetIdentity,\r\n    useGetList,\r\n} from 'react-admin';\r\nimport { Box, Chip } from '@material-ui/core';\r\n\r\nexport const ProductFamilyListFilter = () => {\r\n\r\n    return (\r\n        <Box width=\"15em\" order=\"-1\" marginRight=\"1em\">\r\n            <FilterLiveSearch />\r\n        </Box>\r\n    );\r\n};\r\n","/* eslint-disable import/no-anonymous-default-export */\r\nimport * as React from 'react';\r\nimport {\r\n    List as RaList,\r\n    ListProps,\r\n    SimpleListLoading,\r\n    ReferenceField,\r\n    TextField,\r\n    useListContext,\r\n    ExportButton,\r\n    SortButton,\r\n    TopToolbar,\r\n    CreateButton,\r\n    Pagination,\r\n    useGetIdentity,\r\n} from 'react-admin';\r\nimport {\r\n    List,\r\n    ListItem,\r\n    ListItemAvatar,\r\n    ListItemIcon,\r\n    ListItemSecondaryAction,\r\n    ListItemText,\r\n    Checkbox,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Link } from 'react-router-dom';\r\nimport { formatDistance } from 'date-fns';\r\n\r\nimport { Avatar } from './Avatar';\r\nimport { Status } from '../misc/Status';\r\nimport { TagsList } from '../tags/TagsList';\r\nimport { ProductFamilyListFilter } from './ProductFamilyListFilter';\r\nimport { ProductFamily } from '../types';\r\n\r\nconst ProductFamilyListContent = () => {\r\n    const { data, ids, loaded, onToggleItem, selectedIds } = useListContext<\r\n        ProductFamily\r\n    >();\r\n    const now = Date.now();\r\n    if (loaded === false) {\r\n        return <SimpleListLoading hasLeftAvatarOrIcon hasSecondaryText />;\r\n    }\r\n\r\n    return (\r\n        <List>\r\n            {ids.map(id => {\r\n                const record = data[id];\r\n                return (\r\n                    <ListItem\r\n                        button\r\n                        key={id}\r\n                        component={Link}\r\n                        to={`/productFamilies/${id}/show`}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <Checkbox\r\n                                edge=\"start\"\r\n                                checked={selectedIds.includes(id)}\r\n                                tabIndex={-1}\r\n                                disableRipple\r\n                                onClick={e => {\r\n                                    e.stopPropagation();\r\n                                    onToggleItem(id);\r\n                                }}\r\n                            />\r\n                        </ListItemIcon>\r\n                        <ListItemAvatar>\r\n                            <Avatar record={record} />\r\n                        </ListItemAvatar>\r\n                        <ListItemText\r\n                            primary={`${record.name}`}\r\n                            secondary={\r\n                                <>\r\n                                    {record.name} in{' '}\r\n                                    <ReferenceField\r\n                                        record={record}\r\n                                        source=\"category_id\"\r\n                                        reference=\"familyCategories\"\r\n                                        basePath=\"/familyCategories\"\r\n                                        link={false}\r\n                                    >\r\n                                        <TextField source=\"name\" />\r\n                                    </ReferenceField>\r\n                                </>\r\n                            }\r\n                        />\r\n                        <ListItemSecondaryAction>\r\n\r\n                        </ListItemSecondaryAction>\r\n                    </ListItem>\r\n                );\r\n            })}\r\n        </List>\r\n    );\r\n};\r\n\r\nconst useActionStyles = makeStyles(theme => ({\r\n    createButton: {\r\n        marginLeft: theme.spacing(2),\r\n    },\r\n}));\r\nconst ProductFamilyListActions = () => {\r\n    const classes = useActionStyles();\r\n    return (\r\n        <TopToolbar>\r\n            <SortButton fields={['last_name', 'first_name', 'last_seen']} />\r\n            <ExportButton />\r\n            <CreateButton\r\n                basePath=\"/productFamilies\"\r\n                variant=\"contained\"\r\n                label=\"Add New\"\r\n                className={classes.createButton}\r\n            />\r\n        </TopToolbar>\r\n    );\r\n};\r\n\r\nexport const ProductFamilyList = (props: ListProps) => {\r\n    const { identity } = useGetIdentity();\r\n    return identity ? (\r\n        <RaList\r\n            {...props}\r\n            actions={<ProductFamilyListActions />}\r\n            aside={<ProductFamilyListFilter />}\r\n            perPage={25}\r\n            pagination={<Pagination rowsPerPageOptions={[10, 25, 50, 100]} />}\r\n            filterDefaultValues={{  }}\r\n            // sort={{  }}\r\n        >\r\n            <ProductFamilyListContent />\r\n        </RaList>\r\n    ) : null;\r\n};\r\n","import Reacct, { useState, FormEvent } from 'react';\r\nimport {\r\n    useCreateSuggestionContext,\r\n    useCreate,\r\n} from 'react-admin';\r\nimport {\r\n    Dialog, \r\n    DialogContent,\r\n    DialogActions,\r\n    TextField,\r\n    Button,\r\n } from '@material-ui/core';\r\n import { FamilyCategory } from '../types';\r\n\r\nexport const CreateCategory = () => {\r\n    const { filter, onCancel, onCreate } = useCreateSuggestionContext();\r\n    const [name, setValue] = useState(filter || '');\r\n    const [create] = useCreate('familyCategories');\r\n\r\n    const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\r\n        event.preventDefault();\r\n        create(\r\n            {\r\n                payload: {\r\n                    data: {\r\n                        name: name,\r\n                    },\r\n                },\r\n            },\r\n            {\r\n                onSuccess: ({ data }: {data: FamilyCategory;}) => {\r\n                    setValue('');\r\n                    onCreate(data);\r\n                },\r\n            }\r\n        );\r\n    };\r\n\r\n    return (\r\n        <Dialog open onClose={onCancel}>\r\n            <form onSubmit={handleSubmit}>\r\n                <DialogContent>\r\n                    <TextField\r\n                        label=\"New category name\"\r\n                        value={name}\r\n                        onChange={event => setValue(event.target.value)}\r\n                        autoFocus\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button type=\"submit\">Save</Button>\r\n                    <Button onClick={onCancel}>Cancel</Button>\r\n                </DialogActions>\r\n            </form>\r\n        </Dialog>\r\n    );\r\n};","import Reacct, { useState, FormEvent } from 'react';\r\nimport {\r\n    Create,\r\n    CreateProps,\r\n    TextInput,\r\n    ReferenceInput,\r\n    SelectInput,\r\n    AutocompleteInput,\r\n    BooleanInput,\r\n    SimpleForm,\r\n    Toolbar,\r\n    required,\r\n    useGetIdentity,\r\n    useCreateContext,\r\n    useCreateSuggestionContext,\r\n    useCreate,\r\n} from 'react-admin';\r\nimport { \r\n    Card, \r\n    CardContent, \r\n    Divider, \r\n    Box, \r\n    Dialog, \r\n    DialogContent,\r\n    DialogActions,\r\n    TextField,\r\n    Button,\r\n } from '@material-ui/core';\r\nimport CategoryIcon from '@material-ui/icons/Category';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport clsx from 'clsx';\r\nimport { CreateCategory } from './CreateCategory';\r\n\r\nimport { ProductFamily } from '../types';\r\n\r\nconst useStyles = makeStyles({\r\n    inline: {\r\n        display: 'inline-block',\r\n        marginLeft: '1em',\r\n        '&.first-child': {\r\n            marginLeft: 0,\r\n        },\r\n    },\r\n});\r\n\r\n\r\nexport const ProductFamilyCreate = (props: CreateProps) => {\r\n    const classes = useStyles();\r\n\r\n    const contactDefaultValue = () => ({ });\r\n    const transform = (data: ProductFamily) => ({\r\n        ...data,\r\n    });\r\n    \r\n    return (\r\n        <Create {...props} actions={false}>\r\n            <SimpleForm \r\n                component={CustomLayout} \r\n                redirect=\"show\"\r\n                initialValues={contactDefaultValue}\r\n                transform={transform}\r\n            >\r\n                <ReferenceInput\r\n                    source=\"category_id\"\r\n                    reference=\"familyCategories\"\r\n                    fullWidth\r\n                >\r\n                    <AutocompleteInput \r\n                        optionText=\"name\"\r\n                        create={<CreateCategory />}\r\n                    />\r\n                </ReferenceInput>\r\n                <TextInput source=\"name\" fullWidth />\r\n                <TextInput source=\"website\" fullWidth />\r\n                <TextInput source=\"image\" fullWidth />\r\n                <TextInput \r\n                    source=\"description\"\r\n                    multiline\r\n                    rows={3} \r\n                    fullWidth \r\n                />\r\n            </SimpleForm>\r\n        </Create>\r\n    );\r\n};\r\n\r\n\r\nconst CustomLayout = ({ children }: \r\n    {children: any;}) => (\r\n    <CardContent>\r\n        <Box display=\"flex\">\r\n            <Box paddingTop={1}>\r\n                <CategoryIcon />\r\n            </Box>\r\n            <Box ml={2} flex=\"1\" maxWidth={796}>\r\n                {children}\r\n            </Box>\r\n        </Box>\r\n    </CardContent>\r\n);\r\n\r\nconst CustomDivider = () => (\r\n    <Box mb={2}>\r\n        <Divider />\r\n    </Box>\r\n);\r\n\r\n","import * as React from 'react';\r\nimport {\r\n    TextField,\r\n    EmailField,\r\n    DateField,\r\n    ReferenceManyField,\r\n    EditButton,\r\n    ShowButton,\r\n    useListContext,\r\n    ReferenceField,\r\n    FunctionField,\r\n    ListButton,\r\n} from 'react-admin';\r\nimport { \r\n    Box, \r\n    Typography, \r\n    Divider, \r\n    List, \r\n    ListItem,\r\n    Link,\r\n } from '@material-ui/core';\r\n\r\nimport { ProductFamily, Sale } from '../types';\r\n\r\nexport const ProductFamilyAside = ({\r\n    record,\r\n    link = 'edit',\r\n}: {\r\n    record?: ProductFamily;\r\n    link?: string;\r\n}) =>\r\n    record ? (\r\n        <Box ml={4} width={250} minWidth={250}>\r\n            <Box textAlign=\"center\" mb={2}>\r\n                {link === 'edit' ? (\r\n                    <Box>\r\n                        <EditButton\r\n                            basePath=\"/productfamilies\"\r\n                            record={record}\r\n                        />\r\n                        <ListButton \r\n                            basePath=\"/productFamilies\"\r\n                        />\r\n                    </Box>\r\n                ) : (\r\n                    <ShowButton\r\n                        basePath=\"/productfamilies\"\r\n                        record={record}\r\n                    />\r\n                )}\r\n            </Box>\r\n\r\n            <Typography variant=\"subtitle2\">Family info</Typography>\r\n            <Divider />\r\n            <Box mt={1} display=\"flex\" gridGap={2}>\r\n                <Typography>Category:</Typography>\r\n                <ReferenceField\r\n                    record={record}\r\n                    source=\"category_id\"\r\n                    reference=\"familyCategories\"\r\n                    link=\"show\"\r\n                >\r\n                    <TextField source=\"name\" />\r\n                </ReferenceField>\r\n            </Box>\r\n\r\n            {record.website && (\r\n                <Box mt={1}>\r\n                    Website: <Link href={record.website} target=\"_blank\" rel=\"noreferrer\">Link</Link>\r\n                </Box>\r\n            )}\r\n            \r\n        </Box>\r\n) : null;\r\n","import * as React from 'react';\r\nimport {\r\n    EditBase,\r\n    EditProps,\r\n    TextInput,\r\n    ReferenceInput,\r\n    AutocompleteInput,\r\n    BooleanInput,\r\n    FormWithRedirect,\r\n    Toolbar,\r\n    useEditContext,\r\n} from 'react-admin';\r\nimport { Card, CardContent, Divider, Box } from '@material-ui/core';\r\nimport omit from 'lodash/omit';\r\n\r\nimport { Avatar } from './Avatar';\r\nimport { ProductFamilyAside } from './ProductFamilyAside';\r\nimport { ProductFamily } from '../types';\r\nimport { CreateCategory } from './CreateCategory';\r\n\r\nconst Spacer = () => <Box width={20} component=\"span\" />;\r\n\r\nconst ProductFamilyEditContent = () => {\r\n    const { record, loaded, save } = useEditContext<ProductFamily>();\r\n    if (!loaded || !record) return null;\r\n    return (\r\n        <Box mt={2} display=\"flex\">\r\n            <Box flex=\"1\">\r\n                <FormWithRedirect\r\n                    record={record}\r\n                    redirect=\"show\"\r\n                    save={save}\r\n                    render={formProps => (\r\n                        <Card>\r\n                            <CardContent>\r\n                                <Box>\r\n                                    <Box display=\"flex\">\r\n                                        <Box mr={2}>\r\n                                            <Avatar record={record} />\r\n                                        </Box>\r\n                                        <Box flex={1}>\r\n                                            <ReferenceInput\r\n                                                source=\"category_id\"\r\n                                                reference=\"familyCategories\"\r\n                                                fullWidth\r\n                                            >\r\n                                                <AutocompleteInput \r\n                                                    optionText=\"name\"\r\n                                                    create={<CreateCategory />}\r\n                                                />\r\n                                            </ReferenceInput>\r\n                                            <TextInput source=\"name\" fullWidth />\r\n                                            <TextInput source=\"website\" fullWidth />\r\n                                            <TextInput source=\"image\" fullWidth />\r\n                                            <TextInput \r\n                                                source=\"description\"\r\n                                                multiline\r\n                                                rows={3} \r\n                                                fullWidth \r\n                                            />\r\n                                        </Box>\r\n                                        \r\n                                    </Box>\r\n                                </Box>\r\n                            </CardContent>\r\n                            <Toolbar\r\n                                {...omit(formProps, [\r\n                                    // FIXME Not super user friendly way to remove warnings\r\n                                    'dirtyFields',\r\n                                    'dirtyFieldsSinceLastSubmit',\r\n                                    'dirtySinceLastSubmit',\r\n                                    'hasSubmitErrors',\r\n                                    'hasValidationErrors',\r\n                                    'initialValues',\r\n                                    'modifiedSinceLastSubmit',\r\n                                    'submitError',\r\n                                    'submitErrors',\r\n                                    'submitFailed',\r\n                                    'submitSucceeded',\r\n                                    'submitting',\r\n                                    'valid',\r\n                                ])}\r\n                            />\r\n                        </Card>\r\n                    )}\r\n                />\r\n            </Box>\r\n            <ProductFamilyAside record={record} link=\"show\" />\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport const ProductFamilyEdit = (props: EditProps) => (\r\n    <EditBase {...props}>\r\n        <ProductFamilyEditContent />\r\n    </EditBase>\r\n);\r\n","import * as React from 'react';\r\nimport {\r\n    ShowBase,\r\n    ShowProps,\r\n    TextField,\r\n    ReferenceField,\r\n    ReferenceManyField,\r\n    useShowContext,\r\n} from 'react-admin';\r\nimport { Box, Card, CardContent, Typography } from '@material-ui/core';\r\n\r\nimport { Avatar } from './Avatar';\r\nimport { ProductFamilyAside } from './ProductFamilyAside';\r\nimport { LogoField } from '../companies/LogoField';\r\nimport { NotesIterator } from '../notes';\r\nimport { ProductFamily } from '../types';\r\nimport { ProductGridList } from '../products/ProductGridList';\r\n\r\nexport const ProductFamilyShow = (props: ShowProps) => (\r\n    <ShowBase {...props}>\r\n        <ProductFamilyShowContent />\r\n    </ShowBase>\r\n);\r\n\r\nconst ProductFamilyShowContent = () => {\r\n    const { record, loaded } = useShowContext<ProductFamily>();\r\n    if (!loaded || !record) return null;\r\n    return (\r\n        <Box mt={2} display=\"flex\">\r\n            <Box flex=\"1\">\r\n                <Card>\r\n                    <CardContent>\r\n                        <Box display=\"flex\">\r\n                            <Avatar record={record} />\r\n                            <Box ml={2} flex=\"1\">\r\n                                <Typography variant=\"h5\">\r\n                                    {record.name}\r\n                                </Typography>\r\n                                <Typography variant=\"body2\">\r\n                                    {record.title} in{' '}\r\n                                    <ReferenceField\r\n                                        source=\"category_id\"\r\n                                        reference=\"familyCategories\"\r\n                                        link=\"show\"\r\n                                    >\r\n                                        <TextField source=\"name\" />\r\n                                    </ReferenceField>\r\n                                </Typography>\r\n                            </Box>\r\n                        </Box>\r\n                        <Box mt={2} p={1}>\r\n                            <ReferenceManyField\r\n                                reference=\"products\"\r\n                                target=\"family_id\"\r\n                                label=\"Products\"\r\n                            >\r\n                                <ProductGridList />\r\n                            </ReferenceManyField>\r\n                        </Box>\r\n                    </CardContent>\r\n                </Card>\r\n            </Box>\r\n            <ProductFamilyAside record={record} />\r\n        </Box>\r\n    );\r\n};\r\n","/* eslint-disable import/no-anonymous-default-export */\r\nimport { ProductFamilyList } from './ProductFamilyList';\r\nimport { ProductFamilyCreate } from './ProductFamilyCreate';\r\nimport { ProductFamilyEdit } from './ProductFamilyEdit';\r\nimport { ProductFamilyShow } from './ProductFamilyShow';\r\nimport CategoryIcon from '@material-ui/icons/Category';\r\n\r\nexport default {\r\n    list: ProductFamilyList,\r\n    create: ProductFamilyCreate,\r\n    edit: ProductFamilyEdit,\r\n    show: ProductFamilyShow,\r\n    icon: CategoryIcon,\r\n};\r\n","import * as React from 'react';\r\nimport { useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport LabelIcon from '@material-ui/icons/Label';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport classnames from 'classnames';\r\nimport {\r\n    useTranslate,\r\n    DashboardMenuItem,\r\n    MenuItemLink,\r\n    MenuProps,\r\n    ReduxState,\r\n} from 'react-admin';\r\n\r\n\r\nimport SubMenu from './SubMenu';\r\nimport { AppState } from '../types';\r\n\r\nimport companies from '../companies';\r\nimport contacts from '../contacts';\r\nimport tasks from '../tasks';\r\nimport deals from '../deals';\r\nimport products from '../products';\r\nimport productFamilies from '../productFamilies';\r\n\r\n\r\n\r\ntype MenuName = 'menuCrm' | 'menuProduct' | 'menuCustomers';\r\n\r\nconst Menu = ({ dense = false }: MenuProps) => {\r\n    const [state, setState] = useState({\r\n        menuCrm: true,\r\n        menuProduct: true,\r\n        menuCustomers: true,\r\n    });\r\n    const translate = useTranslate();\r\n    const open = useSelector((state: ReduxState) => state.admin.ui.sidebarOpen);\r\n    useSelector((state: AppState) => state.theme); // force rerender on theme change\r\n    const classes = useStyles();\r\n\r\n    const handleToggle = (menu: MenuName) => {\r\n        setState(state => ({ ...state, [menu]: !state[menu] }));\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className={classnames(classes.root, {\r\n                [classes.open]: open,\r\n                [classes.closed]: !open,\r\n            })}\r\n        >\r\n            {' '}\r\n            <DashboardMenuItem />\r\n            <SubMenu\r\n                handleToggle={() => handleToggle('menuCrm')}\r\n                isOpen={state.menuCrm}\r\n                name=\"CRM\"\r\n                icon={<companies.icon />}\r\n                dense={dense}\r\n            >\r\n                <MenuItemLink\r\n                    to={{\r\n                        pathname: '/companies',\r\n                        state: { _scrollToTop: true },\r\n                    }}\r\n                    primaryText=\"Companies\"\r\n                    leftIcon={<companies.icon />}\r\n                    dense={dense}\r\n                />\r\n                <MenuItemLink\r\n                    to={{\r\n                        pathname: '/contacts',\r\n                        state: { _scrollToTop: true },\r\n                    }}\r\n                    primaryText=\"Contacts\"\r\n                    leftIcon={<contacts.icon />}\r\n                    dense={dense}\r\n                />\r\n                <MenuItemLink\r\n                    to={{\r\n                        pathname: '/deals',\r\n                        state: { _scrollToTop: true },\r\n                    }}\r\n                    primaryText=\"Deals\"\r\n                    leftIcon={<deals.icon />}\r\n                    dense={dense}\r\n                />\r\n                <MenuItemLink\r\n                    to={{\r\n                        pathname: '/tasks',\r\n                        state: { _scrollToTop: true },\r\n                    }}\r\n                    primaryText=\"Taks\"\r\n                    leftIcon={<tasks.icon />}\r\n                    dense={dense}\r\n                />\r\n            </SubMenu>\r\n            <SubMenu\r\n                handleToggle={() => handleToggle('menuProduct')}\r\n                isOpen={state.menuProduct}\r\n                name=\"Products\"\r\n                icon={<products.icon />}\r\n                dense={dense}\r\n            >\r\n                <MenuItemLink\r\n                    to={{\r\n                        pathname: '/products',\r\n                        state: { _scrollToTop: true },\r\n                    }}\r\n                    primaryText=\"Products\"\r\n                    leftIcon={<products.icon />}\r\n                    dense={dense}\r\n                />\r\n                <MenuItemLink\r\n                    to={{\r\n                        pathname: '/productFamilies',\r\n                        state: { _scrollToTop: true },\r\n                    }}\r\n                    primaryText=\"Families\"\r\n                    leftIcon={<productFamilies.icon />}\r\n                    dense={dense}\r\n                />\r\n                <MenuItemLink\r\n                    to={{\r\n                        pathname: '/familyCategories',\r\n                        state: { _scrollToTop: true },\r\n                    }}\r\n                    primaryText=\"Categories\"\r\n                    leftIcon={<productFamilies.icon />}\r\n                    dense={dense}\r\n                />\r\n            </SubMenu>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        marginTop: theme.spacing(1),\r\n        marginBottom: theme.spacing(1),\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    open: {\r\n        width: 200,\r\n    },\r\n    closed: {\r\n        width: 55,\r\n    },\r\n}));\r\n\r\nexport default Menu;\r\n","export const darkTheme = {\r\n    palette: {\r\n        primary: {\r\n            main: '#90caf9',\r\n        },\r\n        secondary: {\r\n            main: '#FBBA72',\r\n        },\r\n        type: 'dark' as 'dark', // Switching the dark mode on is a single property value change.\r\n    },\r\n    sidebar: {\r\n        width: 200,\r\n    },\r\n    overrides: {\r\n        MuiAppBar: {\r\n            colorSecondary: {\r\n                color: '#ffffffb3',\r\n                backgroundColor: '#616161e6',\r\n            },\r\n        },\r\n        MuiButtonBase: {\r\n            root: {\r\n                '&:hover:active::after': {\r\n                    // recreate a static ripple color\r\n                    // use the currentColor to make it work both for outlined and contained buttons\r\n                    // but to dim the background without dimming the text,\r\n                    // put another element on top with a limited opacity\r\n                    content: '\"\"',\r\n                    display: 'block',\r\n                    width: '100%',\r\n                    height: '100%',\r\n                    position: 'absolute',\r\n                    top: 0,\r\n                    right: 0,\r\n                    backgroundColor: 'currentColor',\r\n                    opacity: 0.3,\r\n                    borderRadius: 'inherit',\r\n                },\r\n            },\r\n        },\r\n    },\r\n    props: {\r\n        MuiButtonBase: {\r\n            // disable ripple for perf reasons\r\n            disableRipple: true,\r\n        },\r\n    },\r\n};\r\n\r\nexport const lightTheme = {\r\n    palette: {\r\n        primary: {\r\n            main: '#4f3cc9',\r\n        },\r\n        secondary: {\r\n            light: '#5f5fc4',\r\n            main: '#283593',\r\n            dark: '#001064',\r\n            contrastText: '#fff',\r\n        },\r\n        background: {\r\n            default: '#fcfcfe',\r\n        },\r\n        type: 'light' as 'light',\r\n    },\r\n    shape: {\r\n        borderRadius: 10,\r\n    },\r\n    sidebar: {\r\n        width: 200,\r\n    },\r\n    overrides: {\r\n        RaMenuItemLink: {\r\n            root: {\r\n                borderLeft: '3px solid #fff',\r\n            },\r\n            active: {\r\n                borderLeft: '3px solid #4f3cc9',\r\n            },\r\n        },\r\n        MuiPaper: {\r\n            elevation1: {\r\n                boxShadow: 'none',\r\n            },\r\n            root: {\r\n                border: '1px solid #e0e0e3',\r\n                backgroundClip: 'padding-box',\r\n            },\r\n        },\r\n        MuiButton: {\r\n            contained: {\r\n                backgroundColor: '#fff',\r\n                color: '#4f3cc9',\r\n                boxShadow: 'none',\r\n            },\r\n        },\r\n        MuiButtonBase: {\r\n            root: {\r\n                '&:hover:active::after': {\r\n                    // recreate a static ripple color\r\n                    // use the currentColor to make it work both for outlined and contained buttons\r\n                    // but to dim the background without dimming the text,\r\n                    // put another element on top with a limited opacity\r\n                    content: '\"\"',\r\n                    display: 'block',\r\n                    width: '100%',\r\n                    height: '100%',\r\n                    position: 'absolute',\r\n                    top: 0,\r\n                    right: 0,\r\n                    backgroundColor: 'currentColor',\r\n                    opacity: 0.3,\r\n                    borderRadius: 'inherit',\r\n                },\r\n            },\r\n        },\r\n        MuiAppBar: {\r\n            colorSecondary: {\r\n                color: '#808080',\r\n                backgroundColor: '#fff',\r\n            },\r\n        },\r\n        MuiLinearProgress: {\r\n            colorPrimary: {\r\n                backgroundColor: '#f5f5f5',\r\n            },\r\n            barColorPrimary: {\r\n                backgroundColor: '#d7d7d7',\r\n            },\r\n        },\r\n        MuiFilledInput: {\r\n            root: {\r\n                backgroundColor: 'rgba(0, 0, 0, 0.04)',\r\n                '&$disabled': {\r\n                    backgroundColor: 'rgba(0, 0, 0, 0.04)',\r\n                },\r\n            },\r\n        },\r\n        MuiSnackbarContent: {\r\n            root: {\r\n                border: 'none',\r\n            },\r\n        },\r\n    },\r\n    props: {\r\n        MuiButtonBase: {\r\n            // disable ripple for perf reasons\r\n            disableRipple: true,\r\n        },\r\n    },\r\n};\r\n","import * as React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Layout, LayoutProps } from 'react-admin';\r\nimport AppBar from './AppBar';\r\nimport Menu from './Menu';\r\nimport { darkTheme, lightTheme } from './themes';\r\nimport { AppState } from '../types';\r\n\r\nexport default (props: LayoutProps) => {\r\n    const theme = useSelector((state: AppState) =>\r\n        state.theme === 'dark' ? darkTheme : lightTheme\r\n    );\r\n    return <Layout {...props} appBar={AppBar} menu={Menu} theme={theme} />;\r\n};\r\n","import * as React from 'react';\r\nimport { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Field, withTypes } from 'react-final-form';\r\nimport { useLocation, Link as RouterLink  } from 'react-router-dom';\r\n\r\nimport {\r\n    Avatar,\r\n    Button,\r\n    Card,\r\n    CardActions,\r\n    CircularProgress,\r\n    TextField,\r\n    Link,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport { createTheme, makeStyles } from '@material-ui/core/styles';\r\nimport { ThemeProvider } from '@material-ui/styles';\r\nimport LockIcon from '@material-ui/icons/Lock';\r\nimport { Notification, useTranslate, useLogin, useNotify } from 'react-admin';\r\n\r\nimport { lightTheme } from './themes';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    main: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        minHeight: '100vh',\r\n        alignItems: 'center',\r\n        justifyContent: 'flex-start',\r\n        backgroundImage: 'radial-gradient(circle at 50% 14em, #313264 0%, #00023b 60%, #00023b 100%)',\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundSize: 'cover',\r\n    },\r\n    card: {\r\n        minWidth: 300,\r\n        marginTop: '6em',\r\n    },\r\n    avatar: {\r\n        margin: '1em',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n    },\r\n    icon: {\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    hint: {\r\n        marginTop: '1em',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        color: theme.palette.grey[500],\r\n    },\r\n    form: {\r\n        padding: '0 1em 1em 1em',\r\n    },\r\n    input: {\r\n        marginTop: '1em',\r\n    },\r\n    actions: {\r\n        padding: '0 1em 1em 1em',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n}));\r\n\r\nconst renderInput = ({\r\n    meta: { touched, error } = { touched: false, error: undefined },\r\n    input: { ...inputProps },\r\n    ...props\r\n}) => (\r\n    <TextField\r\n        error={!!(touched && error)}\r\n        helperText={touched && error}\r\n        {...inputProps}\r\n        {...props}\r\n        fullWidth\r\n    />\r\n);\r\n\r\ninterface FormValues {\r\n    username?: string;\r\n    password?: string;\r\n}\r\n\r\nconst { Form } = withTypes<FormValues>();\r\n\r\nconst Login = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const translate = useTranslate();\r\n    const classes = useStyles();\r\n    const notify = useNotify();\r\n    const login = useLogin();\r\n    const location = useLocation<{ nextPathname: string } | null>();\r\n\r\n    const handleSubmit = (auth: FormValues) => {\r\n        setLoading(true);\r\n        login(auth, location.state ? location.state.nextPathname : '/').catch(\r\n            (error: Error) => {\r\n                setLoading(false);\r\n                notify(\r\n                    typeof error === 'string'\r\n                        ? error\r\n                        : typeof error === 'undefined' || !error.message\r\n                        ? 'ra.auth.sign_in_error'\r\n                        : error.message,\r\n                    'warning',\r\n                    {\r\n                        _:\r\n                            typeof error === 'string'\r\n                                ? error\r\n                                : error && error.message\r\n                                ? error.message\r\n                                : undefined,\r\n                    }\r\n                );\r\n            }\r\n        );\r\n    };\r\n\r\n    const validate = (values: FormValues) => {\r\n        const errors: FormValues = {};\r\n        if (!values.username) {\r\n            errors.username = translate('ra.validation.required');\r\n        }\r\n        if (!values.password) {\r\n            errors.password = translate('ra.validation.required');\r\n        }\r\n        return errors;\r\n    };\r\n\r\n    return (\r\n        <Form\r\n            onSubmit={handleSubmit}\r\n            validate={validate}\r\n            render={({ handleSubmit }) => (\r\n                <form onSubmit={handleSubmit} noValidate>\r\n                    <div className={classes.main}>\r\n                        <Card className={classes.card}>\r\n                            <div className={classes.avatar}>\r\n                                <Avatar className={classes.icon}>\r\n                                    <LockIcon />\r\n                                </Avatar>\r\n                            </div>\r\n                            <div className={classes.hint}>\r\n                                Wecome to Assistor.\r\n                            </div>\r\n                            <div className={classes.form}>\r\n                                <div className={classes.input}>\r\n                                    <Field\r\n                                        autoFocus\r\n                                        name=\"username\"\r\n                                        // @ts-ignore\r\n                                        component={renderInput}\r\n                                        label={translate('ra.auth.username')}\r\n                                        disabled={loading}\r\n                                    />\r\n                                </div>\r\n                                <div className={classes.input}>\r\n                                    <Field\r\n                                        name=\"password\"\r\n                                        // @ts-ignore\r\n                                        component={renderInput}\r\n                                        label={translate('ra.auth.password')}\r\n                                        type=\"password\"\r\n                                        disabled={loading}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            <CardActions className={classes.actions}>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    type=\"submit\"\r\n                                    color=\"primary\"\r\n                                    disabled={loading}\r\n                                    fullWidth\r\n                                >\r\n                                    {loading && (\r\n                                        <CircularProgress\r\n                                            size={25}\r\n                                            thickness={2}\r\n                                        />\r\n                                    )}\r\n                                    {translate('ra.auth.sign_in')}\r\n                                </Button>\r\n                                <Typography variant=\"body2\">Or</Typography>\r\n                                <Link\r\n                                    color=\"textSecondary\"\r\n                                    component={RouterLink}\r\n                                    to=\"/register\"\r\n                                    variant=\"body1\"\r\n                                >\r\n                                    Register\r\n                                </Link>\r\n                            </CardActions>\r\n                        </Card>\r\n                        <Notification />\r\n                    </div>\r\n                </form>\r\n            )}\r\n        />\r\n    );\r\n};\r\n\r\nLogin.propTypes = {\r\n    authProvider: PropTypes.func,\r\n    previousRoute: PropTypes.string,\r\n};\r\n\r\n// We need to put the ThemeProvider decoration in another component\r\n// Because otherwise the useStyles() hook used in Login won't get\r\n// the right theme\r\nconst LoginWithTheme = (props: any) => (\r\n    <ThemeProvider theme={createTheme(lightTheme)}>\r\n        <Login {...props} />\r\n    </ThemeProvider>\r\n);\r\n\r\nexport default LoginWithTheme;\r\n","import * as React from 'react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport { Card, Box, Link } from '@material-ui/core';\r\nimport ContactsIcon from '@material-ui/icons/Contacts';\r\nimport { useGetList, SimpleList, useGetIdentity } from 'react-admin';\r\nimport { formatDistance } from 'date-fns';\r\n\r\nimport { Avatar } from '../contacts/Avatar';\r\nimport { Contact } from '../types';\r\n\r\nexport const HotContacts = () => {\r\n    const { identity } = useGetIdentity();\r\n    const {\r\n        data: contactData,\r\n        ids: contactIds,\r\n        total: contactTotal,\r\n        loaded: contactsLoaded,\r\n    } = useGetList<Contact>(\r\n        'contacts',\r\n        { page: 1, perPage: 10 },\r\n        { field: 'last_seen', order: 'DESC' },\r\n        { status: 'hot', sales_id: identity?.id },\r\n        { enabled: Number.isInteger(identity?.id) }\r\n    );\r\n    return (\r\n        <>\r\n            <Box display=\"flex\" alignItems=\"center\" marginBottom=\"1em\">\r\n                <Box ml={2} mr={2} display=\"flex\">\r\n                    <ContactsIcon color=\"disabled\" fontSize=\"large\" />\r\n                </Box>\r\n                <Link\r\n                    underline=\"none\"\r\n                    variant=\"h5\"\r\n                    color=\"textSecondary\"\r\n                    component={RouterLink}\r\n                    to=\"/contacts\"\r\n                >\r\n                    Hot contacts\r\n                </Link>\r\n            </Box>\r\n            <Card>\r\n                <SimpleList<Contact>\r\n                    basePath=\"/contacts\"\r\n                    linkType=\"show\"\r\n                    ids={contactIds}\r\n                    data={contactData}\r\n                    total={contactTotal}\r\n                    loaded={contactsLoaded}\r\n                    primaryText={contact =>\r\n                        `${contact.first_name} ${contact.last_name}`\r\n                    }\r\n                    secondaryText={contact =>\r\n                        formatDistance(\r\n                            new Date(contact.last_seen),\r\n                            new Date(),\r\n                            {\r\n                                addSuffix: true,\r\n                            }\r\n                        )\r\n                    }\r\n                    leftAvatar={contact => <Avatar record={contact} />}\r\n                />\r\n            </Card>\r\n        </>\r\n    );\r\n};\r\n","import * as React from 'react';\r\nimport { Card, CardContent, Typography, Box } from '@material-ui/core';\r\nimport NoteIcon from '@material-ui/icons/Note';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n    useGetList,\r\n    useGetIdentity,\r\n    ReferenceField,\r\n    TextField,\r\n    FunctionField,\r\n} from 'react-admin';\r\nimport { formatDistance } from 'date-fns';\r\nimport ReactMarkdown from 'react-markdown';\r\nimport remarkGfm from 'remark-gfm';\r\n\r\n\r\nimport { Contact as ContactType } from '../types';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    note: {\r\n        marginBottom: theme.spacing(2),\r\n    },\r\n    noteText: {\r\n        backgroundColor: theme.palette.grey[200],\r\n        padding: theme.spacing(1),\r\n        borderRadius: 10,\r\n    },\r\n    noteTextText: {\r\n        display: '-webkit-box',\r\n        '-webkit-line-clamp': 3,\r\n        '-webkit-box-orient': 'vertical',\r\n        overflow: 'hidden',\r\n    },\r\n}));\r\n\r\nexport const LatestNotes = () => {\r\n    const classes = useStyles();\r\n    const { identity } = useGetIdentity();\r\n    const {\r\n        data: contactNotesData,\r\n        ids: contactNotesIds,\r\n        loaded: contactNotesLoaded,\r\n    } = useGetList(\r\n        'contactNotes',\r\n        { page: 1, perPage: 5 },\r\n        { field: 'date', order: 'DESC' },\r\n        { sales_id: identity?.id },\r\n        { enabled: Number.isInteger(identity?.id) }\r\n    );\r\n    const {\r\n        data: dealNotesData,\r\n        ids: dealNotesIds,\r\n        loaded: dealNotesLoaded,\r\n    } = useGetList(\r\n        'dealNotes',\r\n        { page: 1, perPage: 5 },\r\n        { field: 'date', order: 'DESC' },\r\n        { sales_id: identity?.id },\r\n        { enabled: Number.isInteger(identity?.id) }\r\n    );\r\n    const {\r\n        data: companyNotesData,\r\n        ids: companyNotesIds,\r\n        loaded: companyNotesLoaded,\r\n    } = useGetList(\r\n        'companyNotes',\r\n        { page: 1, perPage: 5 },\r\n        { field: 'date', order: 'DESC' },\r\n        { sales_id: identity?.id },\r\n        { enabled: Number.isInteger(identity?.id) }\r\n    );\r\n    if (!contactNotesLoaded || !dealNotesLoaded || !companyNotesLoaded) {\r\n        return null;\r\n    }\r\n    // TypeScript guards\r\n    if (\r\n        !contactNotesIds ||\r\n        !contactNotesData ||\r\n        !dealNotesIds ||\r\n        !dealNotesData ||\r\n        !companyNotesIds ||\r\n        !companyNotesData\r\n    ) {\r\n        return null;\r\n    }\r\n\r\n    const allNotes = ([] as any[])\r\n        .concat(\r\n            contactNotesIds.map(id => ({\r\n                ...contactNotesData[id],\r\n                type: 'contactNote',\r\n            })),\r\n            dealNotesIds.map(id => ({\r\n                ...dealNotesData[id], \r\n                type: 'dealNote' \r\n            })),\r\n            companyNotesIds.map(id => ({\r\n                ...companyNotesData[id], \r\n                type: 'companyNote' \r\n            })),\r\n        )\r\n        .sort((a, b) => new Date(b.date).valueOf() - new Date(a.date).valueOf())\r\n        .slice(0, 5);\r\n\r\n    return (\r\n        <>\r\n            <Box display=\"flex\" alignItems=\"center\" marginBottom=\"1em\">\r\n                <Box ml={2} mr={2} display=\"flex\">\r\n                    <NoteIcon color=\"disabled\" fontSize=\"large\" />\r\n                </Box>\r\n                <Typography variant=\"h5\" color=\"textSecondary\">\r\n                    My Latest Notes\r\n                </Typography>\r\n            </Box>\r\n            <Card>\r\n                <CardContent>\r\n                    {allNotes.map(note => (\r\n                        <div\r\n                            id={`${note.type}_${note.id}`}\r\n                            key={`${note.type}_${note.id}`}\r\n                            className={classes.note}\r\n                        >\r\n                            <Typography color=\"textSecondary\" gutterBottom>\r\n                                on{' '}\r\n                                <NoteSource note={note} />\r\n                                , added{' '}\r\n                                {formatDistance(\r\n                                    new Date(note.date),\r\n                                    new Date(),\r\n                                    {\r\n                                        addSuffix: true,\r\n                                    }\r\n                                )}\r\n                            </Typography>\r\n                            <div className={classes.noteText}>\r\n                                <ReactMarkdown children={note.text} remarkPlugins={[remarkGfm]} />\r\n                            </div>\r\n                        </div>\r\n                    ))}\r\n                </CardContent>\r\n            </Card>\r\n        </>\r\n    );\r\n};\r\n\r\nconst NoteSource = ({ note }: any) => {\r\n    if (note.type === 'dealNote'){\r\n        return <Deal note={note} />;\r\n    }\r\n    else if (note.type === 'contactNote') {\r\n        return <Contact note={note} />;\r\n    }\r\n    else if (note.type === 'companyNote') {\r\n        return <Company note={note} />;\r\n    }\r\n    return null;\r\n};\r\n\r\nconst Deal = ({ note }: any) => (\r\n    <>\r\n        Deal{' '}\r\n        <ReferenceField\r\n            record={note}\r\n            source=\"deal_id\"\r\n            reference=\"deals\"\r\n            basePath=\"/deals\"\r\n            link=\"show\"\r\n        >\r\n            <TextField source=\"name\" variant=\"body1\" />\r\n        </ReferenceField>\r\n    </>\r\n);\r\n\r\nconst Contact = ({ note }: any) => (\r\n    <>\r\n        Contact{' '}\r\n        <ReferenceField\r\n            record={note}\r\n            source=\"contact_id\"\r\n            reference=\"contacts\"\r\n            basePath=\"/contacts\"\r\n            link=\"show\"\r\n        >\r\n            <FunctionField<ContactType>\r\n                variant=\"body1\"\r\n                render={contact =>\r\n                    contact ? `${contact.first_name} ${contact.last_name}` : ''\r\n                }\r\n            />\r\n        </ReferenceField>\r\n    </>\r\n);\r\n\r\nconst Company = ({ note }: any) => (\r\n    <>\r\n        Company{' '}\r\n        <ReferenceField\r\n            record={note}\r\n            source=\"company_id\"\r\n            reference=\"companies\"\r\n            basePath=\"/companies\"\r\n            link=\"show\"\r\n        >\r\n            <TextField source=\"name\" variant=\"body1\" />\r\n        </ReferenceField>\r\n    </>\r\n);\r\n","import React, { useState, memo } from \"react\";\r\nimport { \r\n    ComposableMap, \r\n    Geographies, \r\n    Geography, \r\n    ZoomableGroup,\r\n    Marker,\r\n    Annotation,\r\n} from 'react-simple-maps';\r\nimport { scaleQuantile } from 'd3-scale';\r\nimport { max } from 'd3-array';\r\nimport { geoCentroid } from \"d3-geo\";\r\nimport {\r\n    FilterList,\r\n    FilterLiveSearch,\r\n    FilterListItem,\r\n    useGetIdentity,\r\n    useGetList,\r\n} from 'react-admin';\r\nimport ReactTooltip from \"react-tooltip\";\r\n\r\nimport { Country } from '../types';\r\n\r\nconst geoUrl =\r\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\r\n\r\nconst Map = memo(({setTooltipContent}: any) => {\r\n    const { data, ids, loaded } = useGetList<Country>(\r\n        'countries',\r\n        { perPage: 1000, page: 1 }\r\n    );\r\n    if (!loaded) return null;\r\n\r\n    const colorScale = scaleQuantile<string>()\r\n        .domain([0, max(ids.map(id => data[id].nb_companies))])\r\n        .range([\r\n            \"#e1f5fe\",\r\n            \"#b3e5fc\",\r\n            \"#81d4fa\",\r\n            \"#4fc3f7\",\r\n            \"#29b6f6\",\r\n            \"#03a9f4\",\r\n            \"#039be5\",\r\n            \"#0288d1\",\r\n            \"#0277bd\"\r\n        ]);\r\n\r\n    return (\r\n        <ComposableMap\r\n            data-tip=\"\"\r\n            projection=\"geoAzimuthalEqualArea\"\r\n            projectionConfig={{\r\n                rotate: [-25.0, -50.0, 0],\r\n                scale: 750\r\n            }}\r\n        >\r\n            <ZoomableGroup\r\n                center={[0, 0]}\r\n                zoom={1}\r\n            >\r\n                <Geographies geography={geoUrl}>\r\n                    {({ geographies }) => (\r\n                        <>\r\n                            {geographies\r\n                            .map(geo => {\r\n                                const { ISO_A3 } = geo.properties;\r\n                                const cur = ids.find(id => data[id].iso3 === ISO_A3);\r\n                                return (\r\n                                    <Geography \r\n                                            key={geo.rsmKey} \r\n                                            geography={geo} \r\n                                            fill={cur ? colorScale(data[cur].nb_companies) : \"#D6D6DA\"}\r\n                                            stroke=\"#EAEAEC\"\r\n                                            onMouseEnter={() => {\r\n                                                const { NAME, POP_EST } = geo.properties;\r\n                                                const nb_companies = cur ? data[cur].nb_companies : 0;\r\n                                                setTooltipContent(`${NAME} - ${nb_companies}`);\r\n                                            }}\r\n                                            onMouseLeave={() => {\r\n                                                setTooltipContent(\"\");\r\n                                            }}\r\n                                        />\r\n                                );\r\n                            })}\r\n                            {/* {geographies.map(geo => {\r\n                                const centroid = geoCentroid(geo);\r\n                                const { ISO_A3 } = geo.properties;\r\n                                const cur = ids.find(id => data[id].iso3 === ISO_A3);\r\n                                return (\r\n                                    <g key={geo.rsmKey + \"-name\"}>\r\n                                        {cur &&\r\n                                            <Marker coordinates={centroid}>\r\n                                                <text y=\"2\" fontSize={9} textAnchor=\"middle\">\r\n                                                {data[cur].nicename}\r\n                                                </text>\r\n                                            </Marker>\r\n                                        }\r\n                                    </g>\r\n                                );\r\n                            })} */}\r\n                        </>\r\n                    )}\r\n                </Geographies>\r\n            </ZoomableGroup>\r\n        </ComposableMap>\r\n    );\r\n});\r\n\r\nexport const CompaniesMap = () => {\r\n    const [content, setContent] = useState(\"\");\r\n\r\n    return (\r\n        <div>\r\n            <Map setTooltipContent={setContent} />\r\n            <ReactTooltip>{content}</ReactTooltip>\r\n        </div>\r\n    );\r\n}","import * as React from 'react';\r\nimport { Box, Grid } from '@material-ui/core';\r\n\r\nimport { Welcome } from './Welcome';\r\nimport { DealsChart } from './DealsChart';\r\nimport { HotContacts } from './HotContacts';\r\nimport { LatestNotes } from './LatestNotes';\r\nimport { DealsPipeline } from './DealsPipeline';\r\nimport { CompaniesMap } from './CompaniesMap';\r\n\r\nexport const Dashboard = () => {\r\n    return (\r\n        <>\r\n            <Grid container spacing={1}>\r\n                <Grid item xs={12} sm={8}>\r\n                    <CompaniesMap />\r\n                </Grid>\r\n                <Grid item xs={12} sm={4}>\r\n                    <HotContacts />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <LatestNotes />\r\n                </Grid>\r\n            </Grid>\r\n        </>\r\n    );\r\n};\r\n","import * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Field, Form } from 'react-final-form';\r\nimport { useLocation, Link as RouterLink  } from 'react-router-dom';\r\nimport {\r\n    Button,\r\n    CardActions,\r\n    CircularProgress,\r\n    TextField,\r\n    Grid,\r\n    CardContent,\r\n    Typography,\r\n    Link,\r\n    Container,\r\n} from '@material-ui/core';\r\nimport { Theme } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { \r\n    useTranslate, \r\n    useNotify, \r\n    useLogin, \r\n    useSafeSetState, \r\n    useRedirect,\r\n} from 'ra-core';\r\nimport axios from 'axios';\r\n\r\n\r\nconst baseURL = \"/auth\";\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    form: {\r\n        padding: '0 1em 1em 1em',\r\n    },\r\n    input: {\r\n        marginTop: '1em',\r\n    },\r\n    button: {\r\n        width: '100%',\r\n    },\r\n    icon: {\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    actions: {\r\n        padding: '0 1em 1em 1em',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n}));\r\n\r\nconst Input = ({\r\n    meta: { touched, error }, // eslint-disable-line react/prop-types\r\n    input: inputProps, // eslint-disable-line react/prop-types\r\n    ...props\r\n}: {\r\n    meta: any;\r\n    input: any;\r\n}) => (\r\n    <TextField\r\n        error={!!(touched && error)}\r\n        helperText={touched && error}\r\n        {...inputProps}\r\n        {...props}\r\n        fullWidth\r\n    />\r\n);\r\n\r\nconst RegisterForm = ({ redirectTo }:\r\n    {redirectTo?: string | undefined;}) => {\r\n    const [loading, setLoading] = useSafeSetState(false);\r\n    const translate = useTranslate();\r\n    const login = useLogin();\r\n    const notify = useNotify();\r\n    const redirect = useRedirect();\r\n    const classes = useStyles();\r\n\r\n    const validate = ({ \r\n        first_name,\r\n        last_name,\r\n        email,\r\n        username, \r\n        password, \r\n        confirm \r\n    }: {\r\n        first_name: string;\r\n        last_name: string;\r\n        email: string;\r\n        username: string;\r\n        password: string;\r\n        confirm: string;\r\n\r\n    }) => {\r\n        const errors = { \r\n            first_name: !first_name ? translate('ra.validation.required') : undefined, \r\n            last_name: !last_name ? translate('ra.validation.required') : undefined, \r\n            email: !email ? translate('ra.validation.required') : undefined, \r\n            username: !username ? translate('ra.validation.required') : undefined, \r\n            password: !password ? translate('ra.validation.required') : undefined, \r\n            confirm: password !== confirm ? 'Confirmation should match password': undefined\r\n        };\r\n        return errors;\r\n    };\r\n\r\n    interface ResponseType {\r\n        message: string;\r\n    }\r\n\r\n    const submit = async ({ \r\n        first_name,\r\n        last_name,\r\n        email,\r\n        username, \r\n        password, \r\n        confirm \r\n    }: { \r\n        first_name: string;\r\n        last_name: string;\r\n        email: string;\r\n        username: string;\r\n        password: string;\r\n        confirm?: string;\r\n    }) => {\r\n        setLoading(true);\r\n        try{\r\n        const response = await axios.post<ResponseType>(`${baseURL}/register`, { \r\n                first_name,\r\n                last_name,\r\n                email,\r\n                username, \r\n                password\r\n            })\r\n        \r\n        setLoading(false)\r\n        login({ username, password }, redirectTo)\r\n        } catch (error: any) {\r\n            setLoading(false);\r\n            const response = error.response;\r\n            if (response.status == 401) {\r\n                const { message } = error.response.data;\r\n                notify(`Error:${message}`, 'warning');\r\n                return Promise.reject(message);\r\n            }\r\n            return Promise.reject(error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Form\r\n            onSubmit={submit}\r\n            validate={validate}\r\n            render={({ handleSubmit }) => (\r\n                <form className={classes.form} onSubmit={handleSubmit} noValidate>\r\n                    <CardContent>\r\n                        <Container maxWidth=\"xs\">\r\n                        <Grid container spacing={2} >\r\n                            <Grid item xs={12} sm={6}>\r\n                                <div className={classes.input}>\r\n                                    <Field\r\n                                        autoFocus\r\n                                        id=\"first_name\"\r\n                                        name=\"first_name\"\r\n                                        component={Input}\r\n                                        label=\"First Name\"\r\n                                        disabled={loading}\r\n                                        required\r\n                                    />\r\n                                </div>\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={6}>\r\n                                <div className={classes.input}>\r\n                                    <Field\r\n                                        autoFocus\r\n                                        id=\"last_name\"\r\n                                        name=\"last_name\"\r\n                                        component={Input}\r\n                                        label=\"Last Name\"\r\n                                        disabled={loading}\r\n                                        required\r\n                                    />\r\n                                </div>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <div className={classes.input}>\r\n                                    <Field\r\n                                        autoFocus\r\n                                        id=\"email\"\r\n                                        name=\"email\"\r\n                                        component={Input}\r\n                                        label=\"Email Address\"\r\n                                        disabled={loading}\r\n                                        required\r\n                                    />\r\n                                </div>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <div className={classes.input}>\r\n                                    <Field\r\n                                        autoFocus\r\n                                        id=\"username\"\r\n                                        name=\"username\"\r\n                                        component={Input}\r\n                                        label={translate('ra.auth.username')}\r\n                                        disabled={loading}\r\n                                        required\r\n                                    />\r\n                                </div>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <div className={classes.input}>\r\n                                    <Field\r\n                                        id=\"password\"\r\n                                        name=\"password\"\r\n                                        component={Input}\r\n                                        label={translate('ra.auth.password')}\r\n                                        type=\"password\"\r\n                                        disabled={loading}\r\n                                        autoComplete=\"current-password\"\r\n                                        required\r\n                                    />\r\n                                </div>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <div className={classes.input}>\r\n                                    <Field\r\n                                        id=\"confirm\"\r\n                                        name=\"confirm\"\r\n                                        component={Input}\r\n                                        label=\"Confirm Password\"\r\n                                        type=\"password\"\r\n                                        disabled={loading}\r\n                                        autoComplete=\"current-password\"\r\n                                        required\r\n                                    />\r\n                                </div>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Container>\r\n                    </CardContent>\r\n                    <CardActions className={classes.actions}>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            type=\"submit\"\r\n                            color=\"primary\"\r\n                            disabled={loading}\r\n                            className={classes.button}\r\n                            fullWidth\r\n                        >\r\n                            {loading && (\r\n                                <CircularProgress\r\n                                    size={25}\r\n                                    thickness={2}\r\n                                />\r\n                            )}\r\n                            Register\r\n                        </Button>\r\n                        <Typography variant=\"body2\">Or</Typography>\r\n                        <Link\r\n                            color=\"textSecondary\"\r\n                            component={RouterLink}\r\n                            to=\"/login\"\r\n                            variant=\"body1\"\r\n                        >\r\n                            Login\r\n                        </Link>\r\n                    </CardActions>\r\n                </form>\r\n            )}\r\n        />\r\n    );\r\n};\r\n\r\nRegisterForm.propTypes = {\r\n    redirectTo: PropTypes.string,\r\n};\r\n\r\nexport default RegisterForm;","import React, { ReactNode, useMemo } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { \r\n    Card, \r\n    CardContent, \r\n    Theme, \r\n    Avatar,\r\n    Grid,\r\n    Link,\r\n} from '@material-ui/core';\r\nimport {\r\n    Notification,\r\n} from 'react-admin';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport { ThemeProvider } from '@material-ui/styles';\r\nimport { createTheme, makeStyles } from '@material-ui/core/styles';\r\nimport classnames from 'classnames';\r\nimport { lightTheme } from '../layout/themes';\r\n\r\nimport RegisterForm from './RegisterForm';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n        main: {\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            minHeight: '100vh',\r\n            height: '1px',\r\n            alignItems: 'center',\r\n            justifyContent: 'flex-start',\r\n            backgroundRepeat: 'no-repeat',\r\n            backgroundSize: 'cover',\r\n            backgroundImage:\r\n                'radial-gradient(circle at 50% 14em, #313264 0%, #00023b 60%, #00023b 100%)',\r\n        },\r\n        card: {\r\n            minWidth: 300,\r\n            marginTop: '6em',\r\n        },\r\n        avatar: {\r\n            margin: '1em',\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n        },\r\n        icon: {\r\n            backgroundColor: theme.palette.secondary.main,\r\n        },\r\n    }),\r\n    { name: 'Register' }\r\n);\r\n\r\nconst Register = () => {\r\n    const classes = useStyles();\r\n    return (\r\n            <div className={classes.main}>\r\n                <Card className={classes.card}>\r\n                    <div className={classes.avatar}>\r\n                        <Avatar className={classes.icon}>\r\n                            <ExitToAppIcon />\r\n                        </Avatar>\r\n                    </div>\r\n                    <RegisterForm />\r\n                </Card>\r\n                <Notification />\r\n            </div>\r\n    );\r\n}\r\n\r\nconst RegisterWithTheme = (props: any) => (\r\n    <ThemeProvider theme={createTheme(lightTheme)}>\r\n        <Register {...props} />\r\n    </ThemeProvider>\r\n);\r\n\r\nexport default RegisterWithTheme;","import { ThemeName } from '../types';\r\n\r\nexport const CHANGE_THEME = 'CHANGE_THEME';\r\n\r\nexport const changeTheme = (theme: ThemeName) => ({\r\n    type: CHANGE_THEME,\r\n    payload: theme,\r\n});","import * as React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport { useTranslate, useLocale, useSetLocale, Title } from 'react-admin';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { changeTheme } from './actions';\r\nimport { AppState } from '../types';\r\n\r\nconst useStyles = makeStyles({\r\n    label: { width: '10em', display: 'inline-block' },\r\n    button: { margin: '1em' },\r\n});\r\n\r\nconst Configuration = () => {\r\n    const translate = useTranslate();\r\n    const locale = useLocale();\r\n    const setLocale = useSetLocale();\r\n    const classes = useStyles();\r\n    const theme = useSelector((state: AppState) => state.theme);\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <Card>\r\n            <Title title={translate('pos.configuration')} />\r\n            <CardContent>\r\n                <div className={classes.label}>\r\n                    {translate('pos.theme.name')}\r\n                </div>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    className={classes.button}\r\n                    color={theme === 'light' ? 'primary' : 'default'}\r\n                    onClick={() => dispatch(changeTheme('light'))}\r\n                >\r\n                    {translate('pos.theme.light')}\r\n                </Button>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    className={classes.button}\r\n                    color={theme === 'dark' ? 'primary' : 'default'}\r\n                    onClick={() => dispatch(changeTheme('dark'))}\r\n                >\r\n                    {translate('pos.theme.dark')}\r\n                </Button>\r\n            </CardContent>\r\n            <CardContent>\r\n                <div className={classes.label}>{translate('pos.language')}</div>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    className={classes.button}\r\n                    color={locale === 'en' ? 'primary' : 'default'}\r\n                    onClick={() => setLocale('en')}\r\n                >\r\n                    en\r\n                </Button>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    className={classes.button}\r\n                    color={locale === 'fr' ? 'primary' : 'default'}\r\n                    onClick={() => setLocale('fr')}\r\n                >\r\n                    fr\r\n                </Button>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    className={classes.button}\r\n                    color={locale === 'ja' ? 'primary' : 'default'}\r\n                    onClick={() => setLocale('ja')}\r\n                >\r\n                    ja\r\n                </Button>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default Configuration;","import * as React from \"react\";\r\nimport { RouteWithoutLayout } from 'react-admin';\r\nimport { Route } from 'react-router-dom';\r\nimport Register from './auth/RegisterPage';\r\nimport Configuration from './configuration/Configuration';\r\n\r\nexport const customRoutes = [\r\n    <RouteWithoutLayout exact path=\"/register\" component={Register} />,\r\n    <Route exact path=\"/configuration\" render={() => <Configuration />} />,\r\n];","import { TranslationMessages } from 'react-admin';\r\nimport englishMessages from 'ra-language-english';\r\n\r\nconst customEnglishMessages: TranslationMessages = {\r\n    ...englishMessages,\r\n\r\n};\r\n\r\nexport default customEnglishMessages;","import * as React from 'react';\r\nimport { Admin, Resource, ListGuesser, EditGuesser, ShowGuesser, defaultTheme } from 'react-admin';\r\nimport {\r\n    unstable_createMuiStrictModeTheme,\r\n    createTheme,\r\n} from '@material-ui/core/styles';\r\nimport polyglotI18nProvider from 'ra-i18n-polyglot';\r\n\r\nimport { dataProvider } from './dataProvider';\r\nimport { authProvider } from './authProvider';\r\nimport { Login, Layout } from './layout';\r\nimport contacts from './contacts';\r\nimport companies from './companies';\r\nimport products from './products';\r\nimport tasks from './tasks';\r\nimport productfamiliess from './productFamilies';\r\nimport deals from './deals';\r\nimport { Dashboard } from './dashboard/Dashboard';\r\nimport { customRoutes } from './customRoutes';\r\n// import Login from './Login'\r\nimport productFamilies from './productFamilies';\r\nimport englishMessages from './i18n/en';\r\n\r\n// FIXME MUI bug https://github.com/mui-org/material-ui/issues/13394\r\nconst theme =\r\n    process.env.NODE_ENV !== 'production'\r\n        ? unstable_createMuiStrictModeTheme(defaultTheme)\r\n        : createTheme(defaultTheme);\r\n\r\nconst i18nProvider = polyglotI18nProvider(locale => {\r\n    if (locale === 'fr') {\r\n        return import('./i18n/fr').then(messages => messages.default);\r\n    }\r\n    console.log(locale);\r\n    if (locale === 'ja') {\r\n        return import('./i18n/ja').then(messages => messages.default);\r\n    }\r\n\r\n    // Always fallback on english\r\n    return englishMessages;\r\n}, 'en');\r\n\r\nconst App = () => (\r\n    <Admin\r\n        customRoutes={customRoutes}\r\n        dataProvider={dataProvider}\r\n        authProvider={authProvider}\r\n        loginPage={Login}\r\n        layout={Layout}\r\n        dashboard={Dashboard}\r\n        theme={theme}\r\n        i18nProvider={i18nProvider}\r\n    >\r\n        <Resource name=\"deals\" {...deals} />\r\n        <Resource name=\"contacts\" {...contacts} />\r\n        <Resource name=\"companies\" {...companies} />\r\n        <Resource name=\"products\" {...products} />\r\n        <Resource name=\"productProperties\" />\r\n        <Resource name=\"propertyTypes\" />\r\n        <Resource name=\"contactNotes\" />\r\n        <Resource name=\"companyNotes\" />\r\n        <Resource name=\"productNotes\" />\r\n        <Resource name=\"dealNotes\" />\r\n        <Resource name=\"productFamilies\" {...productFamilies} />\r\n        <Resource name=\"familyCategories\" list={ListGuesser} edit={EditGuesser} show={ShowGuesser} />\r\n        <Resource name=\"tasks\" {...tasks} />\r\n        <Resource name=\"sales\" list={ListGuesser} />\r\n        <Resource name=\"tags\" list={ListGuesser} />\r\n        <Resource name=\"countries\" list={ListGuesser} />\r\n    </Admin>\r\n);\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import('web-vitals').then(\r\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n                getCLS(onPerfEntry);\r\n                getFID(onPerfEntry);\r\n                getFCP(onPerfEntry);\r\n                getLCP(onPerfEntry);\r\n                getTTFB(onPerfEntry);\r\n            }\r\n        );\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { CssBaseline } from '@material-ui/core';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <CssBaseline />\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}