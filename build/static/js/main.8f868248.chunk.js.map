{"version":3,"sources":["auth.ts","authProvider.ts","dataProvider.ts","layout/Logo.tsx","notifications/NotificationButton.tsx","layout/GlobalSearch.tsx","layout/SwitchLanguage.tsx","layout/AppBar.tsx","layout/SubMenu.tsx","companies/sectors.ts","companies/CompanyAvatar.tsx","companies/CountryField.tsx","companies/CompanyCard.tsx","companies/CompanyGridList.tsx","companies/relations.ts","tags/TagChip.tsx","components/CollapsibleListFilter.tsx","companies/CompanyListFilter.tsx","companies/SelectAllButton.tsx","companies/CompanyList.tsx","companies/sizes.ts","companies/DistributorInput.tsx","companies/CompanyCreate.tsx","contacts/Avatar.tsx","misc/Status.tsx","tags/TagsList.tsx","companies/LogoField.tsx","tags/colors.ts","components/RoundButton.tsx","tags/TagsListEdit.tsx","components/CollapsibleAside.tsx","products/ProductsListEdit.tsx","companies/CompanyAside.tsx","deals/stages.ts","notes/StatusSelector.tsx","notes/NewNote.tsx","notes/Note.tsx","notes/NotesIterator.tsx","products/ProductAvatar.tsx","products/ProductCard.tsx","products/ProductGridList.tsx","companies/CompanyShow.tsx","companies/CompanyEdit.tsx","companies/index.ts","contacts/ContactAside.tsx","contacts/ContactShow.tsx","contacts/ContactListFilter.tsx","contacts/ContactList.tsx","contacts/ContactEdit.tsx","contacts/ContactCreate.tsx","contacts/index.tsx","tasks/TaskAside.tsx","tasks/status.ts","tasks/TaskChip.tsx","tasks/TaskShow.tsx","tasks/TaskStatus.tsx","tasks/TaskListFilter.tsx","tasks/MarkDoneButton.tsx","tasks/TaskList.tsx","tasks/TaskEdit.tsx","tasks/TaskCreate.tsx","tasks/index.ts","deals/DealCard.tsx","deals/DealColumn.tsx","deals/DealListContent.tsx","deals/types.ts","deals/DealCreate.tsx","deals/ContactList.tsx","deals/DealShow.tsx","deals/OnlyMineInput.tsx","deals/DealList.tsx","deals/index.ts","productFamilies/productFamilyCategories.ts","products/ProductListFilter.tsx","products/ProductList.tsx","products/productProprtyCategories.ts","components/ChoiceSelector.tsx","products/CreatePropertyType.tsx","products/PropertyFormIterator.tsx","productFamilies/CreateProductFamily.tsx","products/ProductCreate.tsx","products/ProductImageField.tsx","products/ProductAside.tsx","products/ProductShow.tsx","products/ProductEdit.tsx","products/index.ts","productFamilies/Avatar.tsx","productFamilies/ProductFamilyListFilter.tsx","productFamilies/ProductFamilyList.tsx","productFamilies/ProductFamilyCreate.tsx","productFamilies/ProductFamilyAside.tsx","productFamilies/ProductFamilyEdit.tsx","productFamilies/ProductFamilyShow.tsx","productFamilies/index.ts","layout/Menu.tsx","layout/themes.ts","notifications/NotificationContainer.tsx","layout/Layout.tsx","layout/Login.tsx","dashboard/HotContacts.tsx","dashboard/LatestNotes.tsx","dashboard/CompaniesMap.tsx","dashboard/Dashboard.tsx","auth/RegisterForm.tsx","auth/RegisterPage.tsx","configuration/actions.ts","configuration/Configuration.tsx","customRoutes.tsx","themeReducer.ts","i18n/en.ts","App.tsx","reportWebVitals.js","index.tsx"],"names":["CREDENTIALS_LOCAL_STORAGE_ITEM","setCredentials","credentials","localStorage","setItem","JSON","stringify","getCredentials","raw","getItem","parse","isTokenValid","access_token","currentDate","Date","decodedToken","decodeJwt","exp","getTime","baseURL","refreshToken","a","token","refresh_token","config","headers","Authorization","axios","post","undefined","response","data","login","username","password","permissions","Promise","resolve","reject","message","msg","status","logout","get","removeItem","register","first_name","last_name","email","getIdentity","id","fullName","avatar","checkError","authProvider","checkAuth","getPermissions","refreshTokenIfInvalid","getList","resource","params","getOne","getMany","getManyReference","create","update","put","updateMany","deleteOne","delete","deleteMany","dataProvider","useStyles","makeStyles","theme","root","display","breakpoints","down","spacing","logoIcon","color","palette","secondary","light","logoText","primary","Logo","classes","className","Typography","variant","AnchorOrigin","vertical","horizontal","TransformOrigin","NotificationButton","props","redirect","useRedirect","identity","useGetIdentity","useState","anchorEl","setAnchorEl","now","useGetList","page","perPage","field","order","status_dif","sales_id","ids","open","loaded","Boolean","hasNotification","length","IconButton","onClick","event","currentTarget","Badge","badgeContent","disableScrollLock","anchorOrigin","transformOrigin","getContentAnchorEl","onClose","map","task","taskOverdue","due_date","toISOString","MenuItem","handleNotificationClick","ListItemAvatar","style","backgroundColor","red","ListItemText","text","formatDistance","createStyles","search","position","borderRadius","shape","alpha","common","white","marginLeft","width","up","searchIcon","padding","height","pointerEvents","alignItems","justifyContent","inputRoot","inputInput","paddingLeft","transition","transitions","GlobalSearch","InputBase","placeholder","input","inputProps","menuItem","icon","minWidth","SwitchLanguage","forwardRef","ref","locale","useLocale","setLocale","useSetLocale","e","ListItemIcon","title","flex","textOverflow","whiteSpace","overflow","spacer","ConfigurationMenu","useTranslate","MenuItemLink","to","primaryText","leftIcon","sidebarIsOpen","CustomUserMenu","UserMenu","CustomAppBar","AppBar","elevation","userMenu","sidebarIsClosed","SubMenu","handleToggle","isOpen","name","children","dense","translate","useSelector","state","admin","ui","sidebarOpen","header","button","Tooltip","placement","Collapse","in","timeout","unmountOnExit","List","component","disablePadding","sectors","sector","main","img","objectFit","small","large","CompanyAvatar","record","size","logo","src","process","alt","imgProps","clsx","image","sizeInPixel","medium","CountryField","source","ImageField","paper","flexDirection","textAlign","marginTop","stats","singleStat","statIcon","marginRight","checkbox","top","right","identifier","lrft","CompanyCard","setElevation","useListContext","onToggleItem","selectedIds","Link","linkToRecord","underline","onMouseEnter","onMouseLeave","Paper","Checkbox","edge","checked","includes","tabIndex","disableRipple","stopPropagation","Box","ReferenceField","reference","link","relation","Chip","label","SelectField","choices","marginBottom","nb_contacts","nb_notes","gridList","flexWrap","gap","grey","LoadingGridList","nbChildren","fn","key","Array","from","_","LoadedGridList","CompanyGridList","relations","TagChip","border","cursor","sideBig","sideSmall","container","drawerContent","maxWidth","CollapsibleListFilter","setOpen","childrenWithProps","React","child","Drawer","anchor","countryList","maxHeight","tagList","CompanyListFilter","tags","tagIds","countries","countryIds","FilterLiveSearch","FilterList","FilterListItem","value","nicename","country_id","SelectAllButton","onSelect","Button","toolbar","createButton","importOptions","parseConfig","dynamicTyping","CompanyListActions","TopToolbar","SortButton","fields","ExportButton","CreateButton","basePath","sizes","DistributorInput","AutocompleteInput","optionText","country_iso","allowEmpty","resettable","inline","CustomLayout","CardContent","paddingTop","ml","CustomDivider","mb","Divider","Avatar","charAt","getColorFromStatus","Status","bgcolor","ColoredChipField","ChipField","TagsList","ReferenceArrayField","SingleFieldList","linkType","LogoField","imageBroken","setImageBroken","onError","colors","margin","RoundButton","handleClick","selected","type","TagsListEdit","newTagName","setNewTagName","newTagColor","setNewTagColor","version","setVersion","disabled","setDisabled","allTags","useGetMany","enabled","useUpdate","useCreate","unselectedTagIds","filter","handleAddTag","handleOpenCreateDialog","tag","mt","onDelete","tagId","handleDeleteTag","Dialog","onSubmit","preventDefault","onSuccess","v","DialogTitle","DialogContent","autoFocus","fullWidth","onChange","target","DialogActions","CollapsibleAside","EditButton","ShowButton","ProductsListEdit","refresh","useRefresh","use_products","products","handleClose","product","productId","handleDeleteProduct","model","Popover","toString","values","SimpleForm","ReferenceArrayInput","AutocompleteArrayInput","CompanyAside","AsideContent","href","website","rel","linkedIn","TextField","distributor_id","phone_number","DateField","options","year","month","day","FunctionField","render","stages","stageNames","opportunity","won","lost","delayed","stageChoices","StatusSelector","setStatus","select","buttonSwitcher","previewConatiner","previewRaw","previewMarkdown","paddingRight","borderColor","preview","NewNote","showStatus","setPreview","useRecordContext","useResourceContext","setText","getCurrentDate","date","setDate","loading","notify","useNotify","foreignKeyMapping","last_seen","multiline","remarkPlugins","remarkGfm","setMinutes","getMinutes","getTimezoneOffset","slice","contacts","deals","companies","metadata","textarea","paddingBottom","lineHeight","buttons","cancel","content","paragraph","fontFamily","typography","fontSize","body1","visibility","Note","note","isLast","isHover","setHover","isEditing","setEditing","noteText","setNoteText","useDelete","mutationMode","handleDelete","showTime","locales","dateStyle","timeStyle","FilledInput","NotesIterator","index","ProductAvatar","family","left","hidden","ProductCard","classNames","nb_properties","Skeleton","animation","ProductGridList","CompanyShowContent","useShowContext","setValue","Card","gridGap","Tabs","indicatorColor","textColor","newValue","scrollButtons","Tab","nb_deals","nb_products","ReferenceManyField","sort","pagination","Pagination","rowsPerPageOptions","TabPanel","other","role","ContactsIterator","contact","ListItem","RouterLink","ListItemSecondaryAction","CreateRelatedContactButton","pathname","company_id","startIcon","CreateRelatedProductButton","DealsIterator","deal","stage","amount","toLocaleString","notation","currency","currencyDisplay","minimumSignificantDigits","updated_at","list","actions","aside","filterDefaultValues","Create","initialValues","TextInput","validate","required","SelectInput","formClassName","FormDataConsumer","formData","ReferenceInput","helperText","sales","edit","show","ShowBase","BusinessIcon","ContactAside","TasksIterator","disableGutters","EmailField","gender","background","ContactShowContent","ContactListFilter","last_seen_gte","endOfYesterday","last_seen_lte","startOfWeek","startOfMonth","subMonths","ContactListContent","SimpleListLoading","hasLeftAvatarOrIcon","hasSecondaryText","ContactListActions","Spacer","ContactEditContent","useEditContext","save","FormWithRedirect","formProps","mr","BooleanInput","Toolbar","omit","EditBase","transform","ContactsIcon","TaskAside","statuses","getStatus","find","TaskChip","statusItem","statusName","statusColor","doneStatus","TaskShowContent","DoneButton","TaskStatus","TaskListFilter","due_date_gte","due_date_lte","endOfToday","endOfWeek","endOfMonth","doneState","MarkDoneButton","BulkUpdateButton","TaskListContent","useActionStyles","TaskListActions","TaskBulkActionButtons","BulkDeleteButton","TaskEditContent","DateInput","bulkActionButtons","FormatListBulletedIcon","cardContent","cardText","DealCard","draggableId","String","provided","snapshot","draggableProps","dragHandleProps","innerRef","opacity","isDragging","p","gutterBottom","borderTopLeftRadius","borderTopRightRadius","droppable","DealColumn","dealIds","align","droppableId","droppableProvided","droppableProps","isDraggingOver","initialDeals","reduce","obj","getDealsByColumn","columns","acc","push","forEach","b","DealListContent","currentSort","filterValues","setDeals","useContext","DataProviderContext","useMutation","payload","useEffect","newDeals","isEqual","onDragEnd","result","destination","column","sourceDeal","destinationDeal","splice","Number","columnDeals","all","previousData","sourceColumn","destinationColumn","sourceDeals","destinationDeals","pop","typeChoices","DealCreate","useDataProvider","then","oldDeal","rows","defaultValue","NumberInput","ul","listStyle","li","ContactList","dialog","DealShow","DealShowContent","format","start_at","minHeight","description","OnlyMineInput","alwaysOn","useListFilterContext","displayedFilters","setFilters","FormControlLabel","control","Switch","newFilterValues","defaultProps","dealFilters","SearchInput","DealActions","FilterButton","filters","path","match","MonetizationOnIcon","productFamilyCategories","category","familyList","categoryList","ProductListFilter","familyData","familyIds","family_id","ProductListActions","productProprtyCategories","ChoiceSelector","Select","choice","CreatePropertyType","useCreateSuggestionContext","onCancel","onCreate","setCategory","setName","unit","setUnit","synonyms","setSynonyms","PropertyFormIterator","SimpleFormIterator","CreateProductFamily","setWebsite","setImage","propertyContainer","ProductImageField","ProductAside","ProductShowContent","nb_used_by","addLabel","Datagrid","useTheme","TabbedForm","FormTab","ArrayInput","FiberManualRecordIcon","ProductFamilyListFilter","ProductFamilyListContent","ProductFamilyListActions","ProductFamilyAside","ProductFamilyEditContent","ProductFamilyShowContent","CategoryIcon","easing","sharp","duration","leavingScreen","closed","Menu","menuCrm","menuProduct","menuCustomers","setState","menu","classnames","DashboardMenuItem","_scrollToTop","tasks","productFamilies","darkTheme","sidebar","overrides","MuiAppBar","colorSecondary","MuiButtonBase","lightTheme","dark","contrastText","default","RaMenuItemLink","borderLeft","active","MuiPaper","elevation1","boxShadow","backgroundClip","MuiButton","contained","MuiLinearProgress","colorPrimary","barColorPrimary","MuiFilledInput","MuiSnackbarContent","NotificationContainer","Notification","autoHideDuration","Layout","appBar","notification","backgroundImage","backgroundRepeat","backgroundSize","card","hint","form","renderInput","meta","touched","error","Form","withTypes","Login","setLoading","useLogin","location","useLocation","handleSubmit","auth","nextPathname","noValidate","CardActions","CircularProgress","thickness","LoginWithTheme","ThemeProvider","createTheme","HotContacts","isInteger","contactData","contactIds","contactTotal","total","contactsLoaded","SimpleList","secondaryText","addSuffix","leftAvatar","noteTextText","LatestNotes","contactNotesData","contactNotesIds","contactNotesLoaded","dealNotesData","dealNotesIds","dealNotesLoaded","companyNotesData","companyNotesIds","companyNotesLoaded","allNotes","concat","valueOf","NoteSource","Deal","Contact","Company","Map","memo","setTooltipContent","colorScale","scaleQuantile","domain","max","nb_companies","range","projection","projectionConfig","rotate","scale","center","zoom","geography","geographies","geo","ISO_A3","properties","cur","iso3","fill","stroke","NAME","POP_EST","rsmKey","CompaniesMap","setContent","Dashboard","Grid","item","xs","sm","Input","RegisterForm","redirectTo","useAuthProvider","useSafeSetState","submit","confirm","Container","autoComplete","Register","RegisterWithTheme","CHANGE_THEME","changeTheme","Configuration","dispatch","useDispatch","Title","customRoutes","RouteWithoutLayout","exact","themeReducer","previousState","action","customEnglishMessages","englishMessages","i18nProvider","defaultTheme","polyglotI18nProvider","messages","App","Admin","loginPage","layout","dashboard","customReducers","disableTelemetry","Resource","ListGuesser","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.8f868248.chunk.js","sourcesContent":["import axios, { AxiosError } from 'axios';\nimport decodeJwt, { JwtPayload } from 'jwt-decode';\n\nconst baseURL = \"/auth\";\n\nexport type Credentials = {\n  access_token: string;\n  refresh_token: string;\n  permissions: string;\n};\n\nconst CREDENTIALS_LOCAL_STORAGE_ITEM = \"credentials\";\n\nexport function isAuthenticated(): boolean {\n  return Boolean(getCredentials());\n}\n\nexport function setCredentials(credentials: Credentials) {\n  localStorage.setItem(\n    CREDENTIALS_LOCAL_STORAGE_ITEM,\n    JSON.stringify(credentials)\n  );\n}\n\nexport function getCredentials(): Credentials | null {\n  const raw = localStorage.getItem(CREDENTIALS_LOCAL_STORAGE_ITEM);\n  if (raw === null) {\n    return null;\n  }\n  return JSON.parse(raw);\n}\n\nexport function removeCredentials(): void {\n  localStorage.removeItem(CREDENTIALS_LOCAL_STORAGE_ITEM);\n}\n\n\nexport const isTokenValid = (access_token: string) => {\n  const currentDate = new Date();\n  const decodedToken: JwtPayload = decodeJwt<JwtPayload>(access_token);\n  return decodedToken && decodedToken.exp && (decodedToken.exp * 1000 > currentDate.getTime());\n}","import { AuthProvider } from 'react-admin';\nimport decodeJwt, { JwtPayload } from 'jwt-decode';\nimport axios, { AxiosError } from 'axios';\nimport {\n    isAuthenticated,\n    setCredentials,\n    getCredentials,\n    removeCredentials,\n    isTokenValid,\n} from \"./auth\"\nimport jwtDecode from 'jwt-decode';\n\ninterface RefreshToken {\n    access_token: string;\n  }\n\nconst baseURL = \"/auth\";\n\ninterface Permission {\n    permissions: string;\n}\n\ninterface LoginToken {\n    access_token: string;\n    refresh_token: string;\n}\n\ninterface UserIdentity {\n    id: number;\n    fullName: string;\n    avatar: string;\n}\n\n\nexport const refreshToken = async () => {\n    const credentials = getCredentials();\n    if(!credentials) return;\n  \n    const token = credentials?.refresh_token;\n  \n    const config = {\n        headers: { Authorization: `Bearer ${token}` }\n    };\n    let response = await axios.post<RefreshToken>(`${baseURL}/refresh`, undefined, config)\n    const { access_token } = response.data;\n    setCredentials({\n        ...credentials,\n        access_token: access_token,\n    });\n};\n\n\nconst login = async ({ username, password }: {username: string; password:string;}) => {\n    try{\n        const response = await axios.post<LoginToken>(`${baseURL}/login`, { username, password })\n        const { access_token, refresh_token } = response.data;\n        const decodedToken = decodeJwt<Permission>(access_token);\n        setCredentials({\n            access_token,\n            refresh_token,\n            permissions: decodedToken.permissions,\n        });\n        return Promise.resolve();\n    } catch (error: any) {\n        const response = error.response;\n        return Promise.reject({message: response.data.msg, status: response.status});\n    }\n};\n\nconst logout = async () => {\n    await axios.get(`${baseURL}/logout`)\n    removeCredentials();\n    return Promise.resolve('/login');\n}\n\nconst register = async ({ \n    first_name,\n    last_name,\n    email,\n    username, \n    password\n}: { \n    first_name: string;\n    last_name: string;\n    email: string;\n    username: string;\n    password: string;\n}) => {\n    try{\n    const response = await axios.post<ResponseType>(`${baseURL}/register`, { \n            first_name,\n            last_name,\n            email,\n            username, \n            password\n        })\n\n    } catch (error: any) {\n        const response = error.response;\n        return Promise.reject({message: response.data.msg, status: response.status});\n    }\n}\n\nconst getIdentity = async () => { \n    try{\n        const credentials = getCredentials();\n        const token = credentials?.access_token;\n        const config = {\n            headers: { Authorization: `Bearer ${token}` }\n        };\n        let response = await axios.get<UserIdentity>(`${baseURL}/user`, config)\n        const { id, fullName, avatar } = response.data;\n        \n        return Promise.resolve({ id, fullName, avatar });\n    } catch (error: any) {\n        // const response = error.response;\n        // removeCredentials();\n        // return Promise.reject({message: response.data, status: response.status});\n\n        return Promise.reject(error);\n    }\n };\n\n const checkError = async ({ status }: any) => {\n    if (status === 401 || status === 403 || status === 422) {\n        try{\n            refreshToken();\n        } catch (error: any) {\n            return Promise.reject();\n        }\n    }\n    return Promise.resolve();\n};\n\nconst checkAuth = () => {\n    const credentials = getCredentials();\n    const token = credentials?.access_token;\n    return token && isTokenValid(token)? Promise.resolve() : Promise.reject();\n}\n\nconst getPermissions = () => {\n    return Promise.resolve();\n}\n\nexport const authProvider: AuthProvider =  {\n    login: login,\n    checkError: checkError,\n    checkAuth: checkAuth,\n    logout: logout,\n    getIdentity: getIdentity,\n    getPermissions: getPermissions,\n    register: register,\n};","import axios, { AxiosError } from 'axios';\nimport { \n    GetListResult,\n    GetOneResult,\n    GetManyResult,\n    GetManyReferenceResult,\n    CreateResult,\n    UpdateResult,\n    UpdateManyResult,\n    DeleteResult,\n    DeleteManyResult,\n}  from 'react-admin'\n\nimport {\n    getCredentials, \n    isTokenValid,\n} from \"./auth\"\n\nimport { refreshToken } from './authProvider';\n\nconst refreshTokenIfInvalid = () => {\n    const credentials = getCredentials();\n    const token = credentials?.access_token;\n\n    if(token && !isTokenValid(token)){\n        refreshToken();\n    }\n}\n\n\nconst getList = async (resource: string, params: any): Promise<GetListResult<any>> => {\n    refreshTokenIfInvalid();\n\n    try{\n        const credentials = getCredentials();\n        const token = credentials?.access_token;\n        const config = {\n            headers: { Authorization: `Bearer ${token}` },\n            params,\n        };\n        const response = await axios.get<GetListResult<any>>(`/${resource}/list`, config)\n        return Promise.resolve(response.data);\n    } catch (error: any) {\n        const response = error.response;\n        return Promise.reject({message: response.data, status: response.status});\n    }\n};\n\nconst getOne = async (resource: string, params: any): Promise<GetOneResult<any>> => {\n    refreshTokenIfInvalid();\n\n    try{\n        const credentials = getCredentials();\n        const token = credentials?.access_token;\n        const config = {\n            headers: { Authorization: `Bearer ${token}` },\n            params,\n        };\n        const response = await axios.get<GetOneResult<any>>(`/${resource}/item`, config)\n        return Promise.resolve(response.data);\n    } catch (error: any) {\n        const response = error.response;\n        return Promise.reject({message: response.data, status: response.status});\n    }\n};\n\nconst getMany = async (resource: string, params: any): Promise<GetManyResult<any>> => {\n    refreshTokenIfInvalid();\n    \n    try{\n        const credentials = getCredentials();\n        const token = credentials?.access_token;\n        const config = {\n            headers: { Authorization: `Bearer ${token}` },\n            params,\n        };\n        const response = await axios.get<GetManyResult<any>>(`/${resource}/items`, config)\n        return Promise.resolve(response.data);\n    } catch (error: any) {\n        const response = error.response;\n        return Promise.reject({message: response.data, status: response.status});\n    }\n};\n\nconst getManyReference = async (resource: string, params: any): Promise<GetManyReferenceResult<any>>  => {\n    refreshTokenIfInvalid();\n    \n    try{\n        const credentials = getCredentials();\n        const token = credentials?.access_token;\n        const config = {\n            headers: { Authorization: `Bearer ${token}` },\n            params,\n        };\n        const response = await axios.get<GetManyReferenceResult<any>>(`/${resource}/refs`, config)\n        return Promise.resolve(response.data);\n    } catch (error: any) {\n        const response = error.response;\n        return Promise.reject({message: response.data, status: response.status});\n    }\n};\n\nconst create = async (resource: string, params: any): Promise<CreateResult<any>> => {\n    refreshTokenIfInvalid();\n    \n    try{\n        const credentials = getCredentials();\n        const token = credentials?.access_token;\n        const config = {\n            headers: { Authorization: `Bearer ${token}` },\n        };\n        const response = await axios.post<CreateResult<any>>(`/${resource}/item`, params, config)\n        return Promise.resolve(response.data);\n    } catch (error: any) {\n        const response = error.response;\n        return Promise.reject({message: response.data, status: response.status});\n    }\n};\n\nconst update = async (resource: string, params: any): Promise<UpdateResult<any>> => {\n    refreshTokenIfInvalid();\n    \n    try{\n        const credentials = getCredentials();\n        const token = credentials?.access_token;\n        const config = {\n            headers: { Authorization: `Bearer ${token}` },\n        };\n        const response = await axios.put<UpdateResult<any>>(`/${resource}/item`, params, config)\n        return Promise.resolve(response.data);\n    } catch (error: any) {\n        const response = error.response;\n        return Promise.reject({message: response.data, status: response.status});\n    }\n};\n\nconst updateMany = async (resource: string, params: any): Promise<UpdateManyResult> => {\n    refreshTokenIfInvalid();\n    \n    try{\n        const credentials = getCredentials();\n        const token = credentials?.access_token;\n        const config = {\n            headers: { Authorization: `Bearer ${token}` },\n        };\n        const response = await axios.put<UpdateManyResult>(`/${resource}/items`, params, config)\n        return Promise.resolve(response.data);\n    } catch (error: any) {\n        const response = error.response;\n        return Promise.reject({message: response.data, status: response.status});\n    }\n};\n\nconst deleteOne = async (resource: string, params: any): Promise<DeleteResult<any>> => {\n    refreshTokenIfInvalid();\n    \n    try{\n        const credentials = getCredentials();\n        const token = credentials?.access_token;\n        const config = {\n            headers: { Authorization: `Bearer ${token}` },\n            params,\n        };\n        const response = await axios.delete<DeleteResult<any>>(`/${resource}/item`, config)\n        return Promise.resolve(response.data);\n    } catch (error: any) {\n        const response = error.response;\n        return Promise.reject({message: response.data, status: response.status});\n    }\n};\n\nconst deleteMany = async (resource: string, params: any): Promise<DeleteManyResult> => {\n    refreshTokenIfInvalid();\n    \n    try{\n        const credentials = getCredentials();\n        const token = credentials?.access_token;\n        const config = {\n            headers: { Authorization: `Bearer ${token}` },\n            params,\n        };\n        const response = await axios.delete<DeleteManyResult>(`/${resource}/items`, config)\n        return Promise.resolve(response.data);\n    } catch (error: any) {\n        const response = error.response;\n        return Promise.reject({message: response.data, status: response.status});\n    }\n};\n\nexport const dataProvider = {\n    getList:    getList,\n    getOne:     getOne,\n    getMany:    getMany,\n    getManyReference: getManyReference,\n    create:     create,\n    update:     update,\n    updateMany: updateMany,\n    delete:     deleteOne,\n    deleteMany: deleteMany,\n}\n","import * as React from 'react';\nimport { Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AccountBalanceWalletIcon from '@material-ui/icons/AccountBalanceWallet';\nimport classNames from 'classnames';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        display: \"flex\",\n        [theme.breakpoints.down(\"xs\")]: {\n            display: \"none\",\n        },\n        alignItems:\"center\",\n        gap: theme.spacing(1)\n    },\n    logoIcon: {\n        color: theme.palette.secondary.light,\n    },\n    logoText: {\n        color: theme.palette.primary.light,\n    }\n}));\n\nconst Logo = () => {\n    const classes = useStyles();\n    return (\n        <div className={classes.root}>\n            <AccountBalanceWalletIcon className={classes.logoIcon} />\n            <Typography variant=\"h6\" className={classes.logoText} >\n                Assistor\n            </Typography>\n        </div>\n    );\n};\n\nexport default Logo;\n","import * as React from 'react';\nimport { useState } from 'react';\n\nimport {\n    Avatar,\n    Badge, \n    IconButton, \n    ListItem, \n    ListItemAvatar, \n    ListItemSecondaryAction, \n    ListItemText, \n    Menu,\n    MenuItem,\n    PopoverOrigin,\n    Typography,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport { \n    useGetList, \n    useRedirect, \n    ReferenceField,\n    FunctionField,\n    useGetIdentity,\n} from 'react-admin';\nimport { red } from '@material-ui/core/colors';\nimport AssignmentTurnedInIcon from '@material-ui/icons/AssignmentTurnedIn';\nimport NotificationsNoneIcon from '@material-ui/icons/NotificationsNone';\nimport NotificationsActiveIcon from '@material-ui/icons/NotificationsActive';\n\nimport { Sale, Task } from '../types';\nimport { formatDistance } from 'date-fns';\nimport { TaskStatus } from '../tasks/TaskStatus';\n\nconst useStyles = makeStyles(theme => ({\n\n}));\n\n\nconst AnchorOrigin: PopoverOrigin = {\n    vertical: 'bottom',\n    horizontal: 'right',\n};\n\nconst TransformOrigin: PopoverOrigin = {\n    vertical: 'top',\n    horizontal: 'right',\n};\n\nconst NotificationButton = (props: any) => {\n    const classes = useStyles();\n    const redirect = useRedirect();\n    const { identity } = useGetIdentity();\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n\n    const now = Date.now();\n\n    const { data, ids, loaded } = useGetList<Task>(\n        'tasks',\n        { page: 1, perPage: 1000 },\n        { field: 'due_date', order: 'ASC' },\n        { status_dif: 'done', sales_id: identity && identity?.id,},\n    );\n\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => setAnchorEl(event.currentTarget);\n    const handleClose = () => setAnchorEl(null);\n\n    const handleNotificationClick = (id: any) => {\n        setAnchorEl(null);\n\n        redirect(`/tasks/${id}/show`);\n    }\n\n    const open = Boolean(anchorEl);\n\n    const hasNotification = ids.length > 0;\n      \n    return (\n        <div {...props}>\n            <IconButton \n                aria-owns={open ? 'notification-menu' : ''}\n                aria-haspopup={true}\n                color=\"inherit\"\n                onClick={handleClick}\n            >\n                <Badge \n                    badgeContent={ids.length} \n                    color=\"error\"\n                > \n                    { hasNotification\n                        ? <NotificationsIcon />\n                        : <NotificationsNoneIcon />\n                    }\n                </Badge>\n            </IconButton>\n            { hasNotification &&\n                <Menu \n                id=\"notification-menu\"\n                disableScrollLock\n                anchorEl={anchorEl}\n                anchorOrigin={AnchorOrigin}\n                transformOrigin={TransformOrigin}\n                getContentAnchorEl={null}\n                open={open}\n                onClose={handleClose}\n                >\n                    {ids.map(id => {\n                        const task = data[id];\n                        const taskOverdue = task.due_date < (new Date()).toISOString();\n                        return (\n                            <MenuItem onClick={() => handleNotificationClick(id)}>\n                                <ListItemAvatar>\n                                <Avatar\n                                    style={taskOverdue ? { backgroundColor: red[400] } : undefined}\n                                >\n                                    {taskOverdue\n                                    ? <NotificationsActiveIcon />\n                                    : <AssignmentTurnedInIcon />\n                                    }\n                                </Avatar>\n                                </ListItemAvatar>\n                                <ListItemText\n                                    primary={\n                                        <>\n                                        {task.text}\n                                        </>\n                                    }\n                                    secondary={\n                                        <>\n                                            <Typography variant=\"body2\" color=\"textSecondary\">\n                                                due in{' '}\n                                                {formatDistance(\n                                                    new Date(task.due_date),\n                                                    now\n                                                    )}\n                                            </Typography>\n                                        </>\n                                    }\n                                    />\n                            </MenuItem>\n                        );\n                    })}\n                </Menu>\n             }\n        </div>\n    )\n}\n\nexport default NotificationButton;","import React from 'react';\nimport InputBase from '@material-ui/core/InputBase';\nimport { createStyles, alpha, Theme, makeStyles } from '@material-ui/core/styles';\nimport SearchIcon from '@material-ui/icons/Search';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    search: {\n      position: 'relative',\n      borderRadius: theme.shape.borderRadius,\n      backgroundColor: alpha(theme.palette.common.white, 0.15),\n      '&:hover': {\n        backgroundColor: alpha(theme.palette.common.white, 0.25),\n      },\n      marginLeft: 0,\n      width: '100%',\n      [theme.breakpoints.up('sm')]: {\n        marginLeft: theme.spacing(1),\n        width: 'auto',\n      },\n    },\n    searchIcon: {\n      padding: theme.spacing(0, 2),\n      height: '100%',\n      position: 'absolute',\n      pointerEvents: 'none',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n    },\n    inputRoot: {\n      color: 'inherit',\n    },\n    inputInput: {\n      padding: theme.spacing(1, 1, 1, 0),\n      // vertical padding + font size from searchIcon\n      paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n      transition: theme.transitions.create('width'),\n      width: '100%',\n      [theme.breakpoints.up('sm')]: {\n        width: '12ch',\n        '&:focus': {\n          width: '20ch',\n        },\n      },\n    },\n  }),\n);\n\nconst GlobalSearch = () => {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.search}>\n            <div className={classes.searchIcon}>\n              <SearchIcon />\n            </div>\n            <InputBase\n              placeholder=\"Search…\"\n              classes={{\n                root: classes.inputRoot,\n                input: classes.inputInput,\n              }}\n              inputProps={{ 'aria-label': 'search' }}\n            />\n          </div>\n    );\n};\n\nexport default GlobalSearch;","import * as React from 'react';\nimport { forwardRef, memo } from 'react';\nimport { useLocale, useSetLocale } from 'react-admin';\nimport { MenuItem, ListItemIcon, MenuItemProps } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Language from '@material-ui/icons/Language';\n\nconst useStyles = makeStyles(theme => ({\n    menuItem: {\n        color: theme.palette.text.secondary,\n    },\n    icon: { minWidth: theme.spacing(5) },\n}));\n\nconst SwitchLanguage = forwardRef(({onClick, ...props}: MenuItemProps, ref: any) => {\n    const locale = useLocale();\n    const setLocale = useSetLocale();\n    const classes = useStyles();\n    return (\n        <MenuItem\n            ref={ref}\n            className={classes.menuItem}\n            onClick={e => {\n                setLocale(locale === 'en' ? 'ja' : 'en');\n                if(onClick) onClick(e);\n            }}\n        >\n            <ListItemIcon className={classes.icon}>\n                <Language />\n            </ListItemIcon>\n            Switch Language\n        </MenuItem>\n    );\n});\n\nexport default SwitchLanguage;","import * as React from 'react';\nimport { forwardRef } from 'react';\nimport { AppBar, UserMenu, MenuItemLink, useTranslate } from 'react-admin';\nimport Typography from '@material-ui/core/Typography';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport Logo from './Logo';\nimport NotificationButton from '../notifications/NotificationButton';\nimport GlobalSearch from './GlobalSearch';\nimport SwitchLanguage from './SwitchLanguage';\n\nconst useStyles = makeStyles({\n    title: {\n        flex: 1,\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n        overflow: 'hidden',\n    },\n    spacer: {\n        flex: 1,\n    },\n});\n\nconst ConfigurationMenu = forwardRef<any, any>((props, ref) => {\n    const translate = useTranslate();\n    return (\n        <MenuItemLink\n            ref={ref}\n            to=\"/configuration\"\n            primaryText=\"Configuration\"\n            leftIcon={<SettingsIcon />}\n            onClick={props.onClick}\n            sidebarIsOpen\n        />\n    );\n});\n\nconst CustomUserMenu = (props: any) => (\n    <UserMenu {...props}>\n        <ConfigurationMenu />\n        <SwitchLanguage />\n    </UserMenu>\n);\n\nconst CustomAppBar = (props: any) => {\n    const classes = useStyles();\n    return (\n        <AppBar \n            {...props} \n            elevation={1} \n            userMenu={<CustomUserMenu />\n        }>\n            <Typography\n                variant=\"h6\"\n                color=\"inherit\"\n                className={classes.title}\n                id=\"react-admin-title\"\n            />\n            <Logo />\n            <span className={classes.spacer} />\n            <GlobalSearch />\n            <NotificationButton />\n        </AppBar>\n    );\n};\n\nexport default CustomAppBar;\n","import * as React from 'react';\nimport { Fragment, ReactElement, ReactNode } from 'react';\nimport { useSelector } from 'react-redux';\nimport {\n    List,\n    MenuItem,\n    ListItemIcon,\n    Typography,\n    Collapse,\n    Tooltip,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport { useTranslate, ReduxState } from 'react-admin';\n\nconst useStyles = makeStyles(theme => ({\n    icon: { minWidth: theme.spacing(5) },\n    sidebarIsOpen: {\n        '& a': {\n            transition: 'padding-left 195ms cubic-bezier(0.4, 0, 0.6, 1) 0ms',\n            paddingLeft: theme.spacing(4),\n        },\n    },\n    sidebarIsClosed: {\n        '& a': {\n            transition: 'padding-left 195ms cubic-bezier(0.4, 0, 0.6, 1) 0ms',\n            paddingLeft: theme.spacing(2),\n        },\n    },\n}));\n\ninterface Props {\n    dense: boolean;\n    handleToggle: () => void;\n    icon: ReactElement;\n    isOpen: boolean;\n    name: string;\n    children: ReactNode;\n}\n\nconst SubMenu = (props: Props) => {\n    const { handleToggle, isOpen, name, icon, children, dense } = props;\n    const translate = useTranslate();\n    const classes = useStyles();\n    const sidebarIsOpen = useSelector<ReduxState, boolean>(\n        state => state.admin.ui.sidebarOpen\n    );\n\n    const header = (\n        <MenuItem dense={dense} button onClick={handleToggle}>\n            <ListItemIcon className={classes.icon}>\n                {isOpen ? <ExpandMore /> : icon}\n            </ListItemIcon>\n            <Typography variant=\"inherit\" color=\"textSecondary\">\n                {translate(name)}\n            </Typography>\n        </MenuItem>\n    );\n\n    return (\n        <Fragment>\n            {sidebarIsOpen || isOpen ? (\n                header\n            ) : (\n                <Tooltip title={translate(name)} placement=\"right\">\n                    {header}\n                </Tooltip>\n            )}\n            <Collapse in={isOpen} timeout=\"auto\" unmountOnExit>\n                <List\n                    dense={dense}\n                    component=\"div\"\n                    disablePadding\n                    className={\n                        sidebarIsOpen\n                            ? classes.sidebarIsOpen\n                            : classes.sidebarIsClosed\n                    }\n                >\n                    {children}\n                </List>\n            </Collapse>\n        </Fragment>\n    );\n};\n\nexport default SubMenu;\n","export const sectors = [\n    'Factory Automation',\n    'Logistics Automation',\n    'Warehouse Automation',\n    'Consulting & Development',\n].map(sector => ({ id: sector, name: sector }));\n","import * as React from 'react';\nimport { Avatar } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport BusinessIcon from '@material-ui/icons/Business';\nimport clsx from 'clsx';\n\nimport { Company } from '../types';\n\nconst useStyles = makeStyles(theme => ({\n    avatar: {\n        width: 60,\n        height: 60,\n        backgroundColor: 'aliceblue',\n        color: theme.palette.secondary.main,\n    },\n    img: {\n        objectFit: 'contain',\n    },\n    small: {\n        width: 20,\n        height: 20,\n    },\n    large: {\n        width: 40,\n        height: 40,\n    },\n}));\n\nexport const CompanyAvatar = ({\n    record,\n    size = 'large',\n}: {\n    record?: Company;\n    size?: 'small' | 'large';\n}) => {\n    const classes = useStyles();\n    if (!record) return null;\n    if(!record.logo) return (\n        <Avatar\n            alt={record.name}\n            className={classes.avatar}\n        >\n            <BusinessIcon />\n        </Avatar>\n    )\n    return (\n        <Avatar\n            src={process.env.PUBLIC_URL + record.logo}\n            alt={record.name}\n            className={classes.avatar}\n            imgProps={{ className: clsx(classes.img, classes[size]) }}\n        />\n    );\n};\n","import * as React from 'react';\nimport { Theme } from '@material-ui/core';\nimport BusinessIcon from '@material-ui/icons/Business';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { ImageField } from 'react-admin';\n\nexport interface StyleProps {\n    width: number;\n}\n\nconst useStyles = makeStyles<Theme, StyleProps>(theme => ({\n    image: {\n        width: props => props.width\n    },\n}));\n\nconst sizeInPixel = {\n    medium: 42,\n    small: 20,\n};\n\nexport const CountryField = ({\n    record,\n    source=\"url\",\n    title=\"nicename\",\n    size = 'medium',\n}: {\n    record?: { logo: string; name: string };\n    source?: string;\n    title?: string;\n    size?: 'small' | 'medium';\n}) => {\n    const classes = useStyles({width: sizeInPixel[size]});\n    if (!record) return null;\n\n    return (\n        <ImageField \n            record={record as any}\n            source={source} \n            title={title}\n            classes={classes}\n        />\n    );\n};\n","import * as React from 'react';\nimport { useState } from 'react';\nimport { Paper, Typography, Link as MuiLink, Box, Chip, Checkbox } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ContactsIcon from '@material-ui/icons/AccountCircle';\nimport DealIcon from '@material-ui/icons/MonetizationOn';\nimport NoteIcon from '@material-ui/icons/Note';\nimport { linkToRecord, SelectField, ReferenceField, useListContext } from 'react-admin';\nimport { Link } from 'react-router-dom';\n\nimport { sectors } from './sectors';\nimport { CompanyAvatar } from './CompanyAvatar';\nimport { Company } from '../types';\nimport { CountryField } from './CountryField';\n\nconst useStyles = makeStyles(theme => ({\n    paper: {\n        height: 200,\n        width: 194,\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-between',\n        padding: '1em',\n        position: 'relative',\n    },\n    identity: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    name: {\n        textAlign: 'center',\n        marginTop: theme.spacing(1),\n    },\n    stats: {\n        display: 'flex',\n        justifyContent: 'space-around',\n        width: '100%',\n    },\n    singleStat: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    statIcon: {\n        marginRight: theme.spacing(1),\n    },\n    checkbox: {\n        position: 'absolute',\n        top: 0,\n        right: 0,\n    },\n    identifier: {\n        position: 'absolute',\n        top: theme.spacing(1),\n        lrft: 0,\n    }\n}));\n\nexport const CompanyCard = ({ record }: { record: Company }) => {\n    const classes = useStyles();\n    const [elevation, setElevation] = useState(1);\n    const { data, ids, loaded, onToggleItem, selectedIds } = useListContext<Company>();\n    return (\n        <MuiLink\n            component={Link}\n            to={linkToRecord('/companies', record.id, 'show')}\n            underline=\"none\"\n            onMouseEnter={() => setElevation(3)}\n            onMouseLeave={() => setElevation(1)}\n        >\n            <Paper className={classes.paper} elevation={elevation}>\n                <Checkbox\n                    edge=\"start\"\n                    checked={selectedIds.includes(record.id)}\n                    tabIndex={-1}\n                    disableRipple\n                    className={classes.checkbox}\n                    onClick={(e: any )=> {\n                        e.stopPropagation();\n                        onToggleItem(record.id);\n                    }}\n                />\n                <Typography \n                    variant=\"body2\" \n                    color=\"textSecondary\"\n                    className={classes.identifier}\n                >\n                    {`#${record.id}`}\n                </Typography>\n                <div className={classes.identity}>\n                    <CompanyAvatar record={record} />\n                    <div className={classes.name}>\n                        <Box display=\"flex\" alignItems=\"center\">\n                        <Typography variant=\"subtitle2\">\n                            {record.name}\n                        </Typography>\n                        <ReferenceField\n                            record={record}\n                            source=\"country_id\"\n                            reference=\"countries\"\n                            link={false}\n                        >\n                            <CountryField size='small' />\n                        </ReferenceField>\n                        </Box>\n                        {record.relation && (\n                            <Chip \n                                label={record.relation} \n                                variant=\"outlined\" \n                                size=\"small\"\n                            />\n                        )}\n                        <SelectField\n                            color=\"textSecondary\"\n                            source=\"sector\"\n                            choices={sectors}\n                            record={record}\n                        />\n                    </div>\n                </div>\n                <div className={classes.stats}>\n                    <div className={classes.singleStat}>\n                        <ContactsIcon\n                            color=\"disabled\"\n                            className={classes.statIcon}\n                        />\n                        <div>\n                            <Typography\n                                variant=\"subtitle2\"\n                                style={{ marginBottom: -8 }}\n                            >\n                                {record.nb_contacts}\n                            </Typography>\n                            <Typography variant=\"caption\" color=\"textSecondary\">\n                                {record.nb_contacts > 1\n                                    ? 'contacts'\n                                    : 'contact'}\n                            </Typography>\n                        </div>\n                    </div>\n                    <div className={classes.singleStat}>\n                        <NoteIcon\n                            color=\"disabled\"\n                            className={classes.statIcon}\n                        />\n                        <div>\n                            <Typography\n                                variant=\"subtitle2\"\n                                style={{ marginBottom: -8 }}\n                            >\n                                {record.nb_notes}\n                            </Typography>\n                            <Typography variant=\"caption\" color=\"textSecondary\">\n                                {record.nb_notes > 1 ? 'notes' : 'note'}\n                            </Typography>\n                        </div>\n                    </div>\n                </div>\n            </Paper>\n        </MuiLink>\n    );\n};\n","import * as React from 'react';\nimport { Box, Paper } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useListContext, Identifier } from 'react-admin';\n\nimport { CompanyCard } from './CompanyCard';\nimport { Company } from '../types';\n\nconst useStyles = makeStyles(theme => ({\n    gridList: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        width:  '100%',\n        gap: '5px',\n    },\n    paper: {\n        height: 200,\n        width: 194,\n        display: 'flex',\n        flexDirection: 'column',\n        backgroundColor: theme.palette.grey[200],\n    },\n}));\n\nconst times = (nbChildren: number, fn: (key: number) => any) =>\n    Array.from({ length: nbChildren }, (_, key) => fn(key));\n\nconst LoadingGridList = () => {\n    const classes = useStyles();\n    return (\n        <Box className={classes.gridList}>\n            {times(15, key => (\n                <Paper className={classes.paper} key={key} />\n            ))}\n        </Box>\n    );\n};\n\nconst LoadedGridList = () => {\n    const { ids, data } = useListContext<Company>();\n    const classes = useStyles();\n\n    if (!ids || !data) return null;\n\n    return (\n        <Box className={classes.gridList}>\n            {ids.map((id: Identifier) => (\n                <CompanyCard key={id} record={data[id]} />\n            ))}\n        </Box>\n    );\n};\n\nexport const CompanyGridList = () => {\n    const { loaded } = useListContext();\n    return loaded ? <LoadedGridList /> : <LoadingGridList />;\n};\n","export const relations = [\n    'Distributor',\n    'End-customer',\n    'Prospect',\n    'Competitor',\n].map(relations => ({ id: relations, name: relations }));","import { Box, Chip } from '@material-ui/core';\nimport { Tag } from '../types'\n\nexport const TagChip = ({ record }: { record: Tag; }) => (\n    <>\n        { record && (\n                <Chip\n                label={record.name}\n                size=\"small\"\n                style={{\n                    backgroundColor: record.color,\n                    border: 0,\n                    cursor: 'pointer',\n                }}\n            />\n        )}\n    </>\n);","/* eslint-disable import/no-anonymous-default-export */\nimport * as React from 'react';\nimport { useState } from 'react';\nimport { Drawer, IconButton } from '@material-ui/core';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport { makeStyles } from '@material-ui/core/styles';\nimport classNames from 'classnames';\n\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        order: -1,\n        display: 'flex',\n        flexDirection: 'column',\n    },\n    sideBig: {\n        width: 250,\n        minWidth: 250,\n        marginLeft: theme.spacing(2),\n        [theme.breakpoints.down('xs')]:{\n            display: 'none',\n        }\n    },\n    sideSmall: {\n        [theme.breakpoints.up('sm')]:{\n            display: 'none',\n        }\n    },\n    container: {\n        order: -1,\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n        minWidth: '13em',\n    },\n    drawerContent: {\n         marginTop: theme.spacing(2),\n         marginLeft: theme.spacing(1),\n         marginRight: theme.spacing(1),\n         maxWidth: theme.spacing(32),\n    }\n}));\n\nexport const CollapsibleListFilter = ({ children }: {children: any;}) => {\n    const classes = useStyles();\n    const [isOpen, setOpen] = useState(false);\n    const childrenWithProps = React.Children.map(children, child => \n        React.isValidElement(child)\n        ? React.cloneElement(child as React.ReactElement<any>, {})\n        : child\n    );\n    return (\n        <div className={classes.root}>\n            <div className={classes.sideBig}>\n                {childrenWithProps}\n            </div>\n            <div className={classes.sideSmall}>\n                <IconButton \n                    onClick={() => setOpen(true)}\n                    color=\"secondary\"\n                >\n                    <ChevronRightIcon />\n                </IconButton>\n            </div>\n            <Drawer \n                anchor=\"left\" \n                open={isOpen} onClose={() => setOpen(false)}\n            >\n                <div className={classes.drawerContent}>\n                    {childrenWithProps}\n                </div>\n            </Drawer>\n        </div>\n    );\n};","/* eslint-disable import/no-anonymous-default-export */\nimport * as React from 'react';\nimport { useState } from 'react';\nimport {\n    FilterList,\n    FilterLiveSearch,\n    FilterListItem,\n    useGetIdentity,\n    useGetList,\n} from 'react-admin';\nimport { Box, Chip, Drawer, IconButton, ListItem } from '@material-ui/core';\nimport BusinessIcon from '@material-ui/icons/Business';\nimport LocalShippingIcon from '@material-ui/icons/LocalShipping';\nimport SupervisorAccountIcon from '@material-ui/icons/SupervisorAccount';\nimport LocalOfferIcon from '@material-ui/icons/LocalOffer';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport PublicIcon from '@material-ui/icons/Public';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { sectors } from './sectors';\nimport { relations } from './relations';\nimport { TagChip } from '../tags/TagChip';\nimport { Country, Tag } from '../types';\nimport { CollapsibleListFilter } from '../components/CollapsibleListFilter';\n\nconst useStyles = makeStyles(theme => ({\n    container: {\n        minWidth: '13em',\n    },\n    countryList: {\n        maxHeight: theme.spacing(20), \n        overflow: 'auto',\n    },\n    tagList: {\n        maxHeight: theme.spacing(20), \n        overflow: 'auto',\n    }\n}));\n\nexport const CompanyListFilter = () => {\n    const classes = useStyles();\n    const { identity } = useGetIdentity();\n    const { data: tags, ids: tagIds } = useGetList<Tag>(\n        'tags',\n        { page: 1, perPage: 500 },\n        { field: 'name', order: 'ASC' }\n    );\n\n    const { data: countries, ids: countryIds } = useGetList<Country>(\n        'countries',\n        { page: 1, perPage: 500 },\n        { field: 'name', order: 'ASC' }\n    );\n\n    return (\n        <CollapsibleListFilter>\n            <FilterLiveSearch />\n\n            <FilterList label=\"Relation\" icon={<BusinessIcon />}>\n                {relations.map(relation => (\n                    <FilterListItem\n                        key={relation.id}\n                        label={relation.name}\n                        value={{ relation: relation.id }}\n                    />\n                ))}\n            </FilterList>\n\n            <FilterList label=\"Tags\" icon={<LocalOfferIcon />}>\n                <div className={classes.tagList}>\n                    {tagIds &&\n                        tags &&\n                        tagIds.map(id => (\n                            <FilterListItem\n                                key={id}\n                                label={<TagChip record={tags[id]}/>}\n                                value={{ tags: [id] }}\n                            />\n                    ))}\n                </div>\n            </FilterList>\n\n            <FilterList label=\"Sector\" icon={<LocalShippingIcon />}>\n                {sectors.map(sector => (\n                    <FilterListItem\n                        key={sector.id}\n                        label={sector.name}\n                        value={{ sector: sector.id }}\n                    />\n                ))}\n            </FilterList>\n\n            <FilterList label=\"Countries\" icon={<PublicIcon />}>\n                <div className={classes.countryList}>\n                    {countryIds &&\n                        countries &&\n                        countryIds.map(id => (\n                            <FilterListItem\n                            key={id}\n                            label={countries[id].nicename}\n                            value={{ country_id: id }}\n                            />\n                    ))}\n                </div>\n            </FilterList>\n\n            <FilterList\n                label=\"Account manager\"\n                icon={<SupervisorAccountIcon />}\n            >\n                <FilterListItem\n                    label=\"Me\"\n                    value={{\n                        sales_id: identity && identity.id,\n                    }}\n                />\n            </FilterList>\n        </CollapsibleListFilter>\n    );\n};\n","// in ./MarkDoneButton.js\nimport * as React from 'react';\nimport { Button, useListContext } from 'react-admin';\nimport DoneAllIcon from '@material-ui/icons/DoneAll';\nimport { Company } from '../types';\n\nconst doneState = { status: 'Done' };\n\nconst SelectAllButton = () => {\n    const { ids, data, onSelect } = useListContext<Company>();\n    return (\n        <Button\n            onClick={(e:any) =>{\n                e.stopPropagation();\n                onSelect(ids);\n            }}\n            label=\"Select All\"\n        >\n            <DoneAllIcon />\n        </Button>\n    );\n};\n\nexport default SelectAllButton;","import * as React from 'react';\nimport {\n    List,\n    ListProps,\n    TopToolbar,\n    ExportButton,\n    CreateButton,\n    Pagination,\n    useGetIdentity,\n    ListActionsProps,\n    SortButton,\n    FilterLiveSearch,\n} from 'react-admin';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { CompanyGridList } from './CompanyGridList';\nimport { CompanyListFilter } from './CompanyListFilter';\nimport { ImportButton } from 'react-admin-import-csv';\nimport SelectAllButton from './SelectAllButton';\nimport { Box } from '@material-ui/core';\n\nexport const CompanyList = (props: ListProps) => {\n    const { identity } = useGetIdentity();\n    return identity ? (\n        <List\n            {...props}\n            actions={<CompanyListActions />}\n            aside={<CompanyListFilter />}\n            filterDefaultValues={{ sales_id: identity?.id }}\n            pagination={<Pagination rowsPerPageOptions={[15, 25, 50, 100, 1000]} />}\n            perPage={25}\n            sort={{ field: 'name', order: 'ASC' }}\n            component=\"div\"\n        >\n            <CompanyGridList />\n        </List>\n    ) : null;\n};\n\nconst useStyles = makeStyles(theme => ({\n    toolbar: {\n        \n    },\n    createButton: {\n        marginLeft: theme.spacing(2),\n    },\n}));\n\nconst importOptions = {\n    parseConfig: {\n        // For all options see: https://www.papaparse.com/docs#config\n        dynamicTyping: true\n    }\n}\n\n\nconst CompanyListActions = (props: ListActionsProps) => {\n    const classes = useStyles();\n    return (\n        <TopToolbar className={classes.toolbar} >\n            <SortButton fields={['id', 'name']} />\n            <SelectAllButton />\n            <ExportButton />\n            <ImportButton {...props} {...importOptions}/>\n            <CreateButton\n                basePath=\"/companies\"\n                variant=\"contained\"\n                label=\"New Company\"\n                className={classes.createButton}\n            />\n        </TopToolbar>\n    );\n};\n","export const sizes = [\n    { id: 1, name: '1 employee' },\n    { id: 10, name: '2-9 employees' },\n    { id: 50, name: '10-49 employees' },\n    { id: 250, name: '50-249 employees' },\n    { id: 500, name: '250 or more employees' },\n];\n","import { AutocompleteInput, AutocompleteInputProps } from 'react-admin';\n\nconst DistributorInput = (props: AutocompleteInputProps) => (\n    <AutocompleteInput \n        {...props}\n        optionText={record => record ? record.country_iso ? `${record.name} (${record.country_iso})` : `${record.name}` : ''} \n        allowEmpty\n        resettable\n    />\n);\n\nexport default DistributorInput;","import * as React from 'react';\nimport {\n    Create,\n    CreateProps,\n    ReferenceInput,\n    SimpleForm,\n    TextInput,\n    SelectInput,\n    required,\n    AutocompleteInput,\n    useGetIdentity,\n    FormDataConsumer,\n    ReferenceArrayInput,\n    AutocompleteArrayInput,\n} from 'react-admin';\nimport { Box, CardContent, Divider, Avatar } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport BusinessIcon from '@material-ui/icons/Business';\nimport clsx from 'clsx';\n\nimport { sectors } from './sectors';\nimport { sizes } from './sizes';\nimport { relations } from './relations';\nimport DistributorInput from './DistributorInput';\n\nconst useStyles = makeStyles({\n    inline: {\n        display: 'inline-block',\n        marginLeft: '1em',\n        '&.first-child': {\n            marginLeft: 0,\n        },\n    },\n});\n\nexport const CompanyCreate = (props: CreateProps) => {\n    const classes = useStyles();\n    const { identity } = useGetIdentity();\n\n    if (!identity) return null;\n\n    const defaultValue = () => ({ sales_id: identity && identity?.id });\n\n    return (\n        <Create {...props} actions={false}>\n            <SimpleForm \n                component={CustomLayout} \n                initialValues={defaultValue}\n                redirect=\"show\"\n            >\n                <TextInput source=\"name\" validate={required()} fullWidth />\n                <SelectInput\n                    source=\"sector\"\n                    choices={sectors}\n                    formClassName={clsx(classes.inline, 'first-child')}\n                />\n                <SelectInput\n                    source=\"size\"\n                    choices={sizes}\n                    formClassName={classes.inline}\n                />\n                <SelectInput\n                    source=\"relation\"\n                    choices={relations}\n                    formClassName={classes.inline}\n                />\n                <FormDataConsumer>\n                    {({ formData, ...rest }) => formData.relation != 'Distributor' &&\n                        <ReferenceInput\n                            source=\"distributor_id\"\n                            reference=\"companies\"\n                            filter={{ relation: 'Distributor' }}\n                        >\n                            <DistributorInput />\n                        </ReferenceInput>\n                    }\n                </FormDataConsumer>\n\n                <ReferenceArrayInput source=\"use_products\" reference=\"products\">\n                    <AutocompleteArrayInput optionText=\"model\" />\n                </ReferenceArrayInput>\n\n                <CustomDivider />\n                <TextInput source=\"address\" fullWidth helperText={false} />\n                <TextInput\n                    source=\"city\"\n                    formClassName={clsx(classes.inline, 'first-child')}\n                />\n                <TextInput source=\"zipcode\" formClassName={classes.inline} />\n                <TextInput source=\"stateAbbr\" formClassName={classes.inline} />\n                <ReferenceInput\n                    source=\"country_id\"\n                    reference=\"countries\"\n                >\n                    <AutocompleteInput optionText=\"nicename\" />\n                </ReferenceInput>\n                <CustomDivider />\n                <TextInput source=\"website\" fullWidth helperText={false} />\n                <TextInput source=\"linkedIn\" fullWidth helperText={false} />\n                <TextInput source=\"logo\" fullWidth />\n                <CustomDivider />\n                <TextInput\n                    source=\"phone_number\"\n                    formClassName={clsx(classes.inline, 'first-child')}\n                    helperText={false}\n                />\n                <ReferenceInput\n                    source=\"sales_id\"\n                    reference=\"sales\"\n                    label=\"Account manager\"\n                    formClassName={classes.inline}\n                    helperText={false}\n                >\n                    <SelectInput\n                        optionText={(sales: any) =>\n                            `${sales.first_name} ${sales.last_name}`\n                        }\n                    />\n                </ReferenceInput>\n            </SimpleForm>\n        </Create>\n    );\n};\n\nconst CustomLayout = ({ children }: \n    {children: any;}) => (\n    <CardContent>\n        <Box display=\"flex\">\n            <Box paddingTop={1}>\n                <Avatar>\n                    <BusinessIcon />\n                </Avatar>\n            </Box>\n            <Box ml={2} flex=\"1\" maxWidth={796}>\n                {children}\n            </Box>\n        </Box>\n    </CardContent>\n);\n\nconst CustomDivider = () => (\n    <Box mb={2}>\n        <Divider />\n    </Box>\n);\n","import * as React from 'react';\nimport { Avatar as MuiAvatar } from '@material-ui/core';\n\nimport { Contact } from '../types';\n\nexport const Avatar = ({ record }: { record: Contact }) => (\n    <MuiAvatar src={record.avatar}>\n        {record.first_name.charAt(0)}\n        {record.last_name.charAt(0)}\n    </MuiAvatar>\n);\n","import * as React from 'react';\nimport { Box } from '@material-ui/core';\n\nconst getColorFromStatus = (status: string) =>\n    status === 'cold'\n        ? '#7dbde8'\n        : status === 'warm'\n        ? '#e8cb7d'\n        : status === 'hot'\n        ? '#e88b7d'\n        : status === 'in-contract'\n        ? '#a4e87d'\n        : '#000';\n\nexport const Status = ({ status }: { status: string }) => (\n    <Box\n        width={10}\n        height={10}\n        display=\"inline-block\"\n        borderRadius={5}\n        bgcolor={getColorFromStatus(status)}\n        component=\"span\"\n    />\n);\n","import * as React from 'react';\nimport { ReferenceArrayField, SingleFieldList, ChipField } from 'react-admin';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { Contact } from '../types';\n\nconst ColoredChipField = ({ record, ...props }: any) =>\n    record ? (\n        <ChipField\n            record={record}\n            {...props}\n            style={{ backgroundColor: record.color, border: 0 }}\n            component=\"span\"\n        />\n    ) : null;\n\nconst useStyles = makeStyles({\n    root: {\n        display: 'inline-block',\n    },\n});\n\nexport const TagsList = ({ record }: { record: Contact }) => {\n    const classes = useStyles();\n    if (!record) return null;\n    return (\n        <ReferenceArrayField\n            record={record}\n            basePath=\"/contacts\"\n            resource=\"contacts\"\n            source=\"tags\"\n            reference=\"tags\"\n            className={classes.root}\n        >\n            <SingleFieldList linkType={false} component=\"span\">\n                <ColoredChipField\n                    source=\"name\"\n                    variant=\"outlined\"\n                    size=\"small\"\n                />\n            </SingleFieldList>\n        </ReferenceArrayField>\n    );\n};\n","import React, { useState} from 'react';\nimport { Avatar } from '@material-ui/core';\nimport BusinessIcon from '@material-ui/icons/Business';\nimport { makeStyles } from '@material-ui/core/styles';\nimport BrokenImageIcon from '@material-ui/icons/BrokenImage';\n\nconst useStyles = makeStyles({\n    image: {\n        objectFit: 'contain',\n    },\n});\n\nconst sizeInPixel = {\n    medium: 42,\n    small: 20,\n};\n\nexport const LogoField = ({\n    record,\n    source,\n    size = 'medium',\n}: {\n    record?: { logo: string; name: string };\n    source?: string;\n    size?: 'small' | 'medium';\n}) => {\n    const classes = useStyles();\n    const [imageBroken, setImageBroken] = useState(false);\n    if (!record) return null;\n    if(!record.logo) return (\n        <Avatar>\n            <BusinessIcon />\n        </Avatar>\n    )\n\n    const onError = () => setImageBroken(true);\n    return (\n        <>\n        {\n        imageBroken\n        ? <Avatar>\n            <BrokenImageIcon />\n        </Avatar>\n        : <img\n            src={process.env.PUBLIC_URL + record.logo}\n            alt={record.name}\n            title={record.name}\n            width={sizeInPixel[size]}\n            height={sizeInPixel[size]}\n            className={classes.image}\n            onError={onError}\n        />\n        }\n        </>\n    );\n};\n","export const colors = [\n    '#eddcd2',\n    '#fff1e6',\n    '#fde2e4',\n    '#fad2e1',\n    '#c5dedd',\n    '#dbe7e4',\n    '#f0efeb',\n    '#d6e2e9',\n    '#bcd4e6',\n    '#99c1de',\n];\n","import * as React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n    root: {\n        width: 30,\n        height: 30,\n        borderRadius: 15,\n        display: 'inline-block',\n        margin: 8,\n    },\n});\n\nexport const RoundButton = ({ color, handleClick, selected }: any) => {\n    const classes = useStyles();\n    return (\n        <button\n            type=\"button\"\n            className={classes.root}\n            style={{\n                backgroundColor: color,\n                border: selected ? '2px solid grey' : 'none',\n            }}\n            onClick={handleClick}\n        />\n    );\n};","import * as React from 'react';\nimport { useState, FormEvent } from 'react';\nimport {\n    useGetMany,\n    useCreate,\n    useUpdate,\n    useGetList,\n    Identifier,\n} from 'react-admin';\nimport {\n    Chip,\n    Box,\n    Button,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    TextField,\n    MenuItem,\n    Menu,\n} from '@material-ui/core';\nimport ControlPointIcon from '@material-ui/icons/ControlPoint';\nimport EditIcon from '@material-ui/icons/Edit';\n\nimport { colors } from './colors';\nimport { Contact, Company, Product } from '../types';\nimport { Tag } from '../types';\nimport { RoundButton } from '../components/RoundButton';\n\nexport const TagsListEdit = ({ \n    record,\n    reference, \n}: { \n    record: Contact | Company | Product;\n    reference: 'companies' | 'contacts' | 'products';\n}) => {\n    const [open, setOpen] = useState(false);\n    const [newTagName, setNewTagName] = useState('');\n    const [newTagColor, setNewTagColor] = useState(colors[0]);\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n    const [version, setVersion] = useState(0); // used to force the refresh of useGetList without refreshing the whole page\n    const [disabled, setDisabled] = useState(false);\n\n    const { data: allTags, ids } = useGetList<Tag>(\n        'tags',\n        { page: 1, perPage: 10 },\n        { field: 'name', order: 'ASC' },\n        {},\n        { version } as any // FIXME UseDataProviderOptions don't allow [key: string]: any\n    );\n    const { data: tags, loaded } = useGetMany('tags', record.tags, {\n        enabled: record.tags && record.tags.length > 0,\n    });\n    const [update] = useUpdate();\n    const [create] = useCreate();\n\n    const unselectedTagIds = ids && ids.filter(id => !record.tags.includes(id));\n\n    const handleOpen = (event: React.MouseEvent<HTMLDivElement>) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    const handleDeleteTag = (id: Identifier) => {\n        const tags: Identifier[] = record.tags.filter(\n            (tagId: Identifier) => tagId !== id\n        );\n        update(reference, record.id, { tags }, record);\n    };\n\n    const handleAddTag = (id: Identifier) => {\n        const tags: Identifier[] = [...record.tags, id];\n        update(reference, record.id, { tags }, record);\n        setAnchorEl(null);\n    };\n\n    const handleOpenCreateDialog = () => {\n        setOpen(true);\n        setAnchorEl(null);\n        setDisabled(false);\n    };\n\n    const handleNewTagNameChange = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        setNewTagName(event.target.value);\n    };\n\n    const handleCreateTag = (event: FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        setDisabled(true);\n        create(\n            'tags',\n            { name: newTagName, color: newTagColor },\n            {\n                onSuccess: ({ data }) => {\n                    update(\n                        reference,\n                        record.id,\n                        { tags: [...record.tags, data.id] },\n                        record,\n                        {\n                            onSuccess: () => {\n                                setNewTagName('');\n                                setNewTagColor(colors[0]);\n                                setOpen(false);\n\n                                setVersion(v => v + 1);\n                            },\n                        }\n                    );\n                },\n            }\n        );\n    };\n\n    // if (!loaded || !tags) return null;\n    return (\n        <>\n            {tags.map(tag => (\n                <Box mt={1} mb={1} key={tag.id}>\n                    <Chip\n                        size=\"small\"\n                        variant=\"outlined\"\n                        onDelete={() => handleDeleteTag(tag.id)}\n                        label={tag.name}\n                        style={{ backgroundColor: tag.color, border: 0 }}\n                    />\n                </Box>\n            ))}\n            <Box mt={1}>\n                <Chip\n                    icon={<ControlPointIcon />}\n                    size=\"small\"\n                    variant=\"outlined\"\n                    onClick={handleOpen}\n                    label=\"Add tag\"\n                    color=\"primary\"\n                />\n            </Box>\n            <Menu\n                open={Boolean(anchorEl)}\n                onClose={handleClose}\n                anchorEl={anchorEl}\n            >\n                {unselectedTagIds?.map(id => (\n                    <MenuItem key={id} onClick={() => handleAddTag(id)}>\n                        <Chip\n                            size=\"small\"\n                            variant=\"outlined\"\n                            label={allTags && allTags[id].name}\n                            style={{\n                                backgroundColor: allTags && allTags[id].color,\n                                border: 0,\n                            }}\n                            onClick={() => handleAddTag(id)}\n                        />\n                    </MenuItem>\n                ))}\n                <MenuItem onClick={handleOpenCreateDialog}>\n                    <Chip\n                        icon={<EditIcon />}\n                        size=\"small\"\n                        variant=\"outlined\"\n                        onClick={handleOpenCreateDialog}\n                        color=\"primary\"\n                        label=\"Create new tag\"\n                    />\n                </MenuItem>\n            </Menu>\n            <Dialog\n                open={open}\n                onClose={() => setOpen(false)}\n                aria-labelledby=\"form-dialog-title\"\n            >\n                <form onSubmit={handleCreateTag}>\n                    <DialogTitle id=\"form-dialog-title\">\n                        Create a new tag\n                    </DialogTitle>\n                    <DialogContent>\n                        <TextField\n                            autoFocus\n                            label=\"Tag name\"\n                            fullWidth\n                            value={newTagName}\n                            onChange={handleNewTagNameChange}\n                        />\n                        <Box display=\"flex\" flexWrap=\"wrap\" width={230} mt={2}>\n                            {colors.map(color => (\n                                <RoundButton\n                                    key={color}\n                                    color={color}\n                                    selected={color === newTagColor}\n                                    handleClick={() => {\n                                        setNewTagColor(color);\n                                    }}\n                                />\n                            ))}\n                        </Box>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={() => setOpen(false)} color=\"primary\">\n                            Cancel\n                        </Button>\n                        <Button\n                            type=\"submit\"\n                            color=\"primary\"\n                            disabled={disabled}\n                        >\n                            Add tag\n                        </Button>\n                    </DialogActions>\n                </form>\n            </Dialog>\n        </>\n    );\n};\n","import * as React from 'react';\nimport { useState } from 'react';\nimport {\n    EditButton,\n    ShowButton,\n} from 'react-admin';\nimport { Box, Drawer, IconButton } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        display: 'flex',\n        flexDirection: 'column',\n    },\n    sideBig: {\n        width: 250,\n        minWidth: 250,\n        marginLeft: theme.spacing(2),\n        [theme.breakpoints.down('xs')]:{\n            display: 'none',\n        }\n    },\n    sideSmall: {\n        [theme.breakpoints.up('sm')]:{\n            display: 'none',\n        }\n    },\n    drawerContent: {\n         marginTop: theme.spacing(2),\n         marginLeft: theme.spacing(1),\n         marginRight: theme.spacing(1),\n         maxWidth: theme.spacing(32),\n    }\n}));\n\nexport const CollapsibleAside = ({\n    basePath,\n    record,\n    link = 'edit',\n    children,\n}: {\n    basePath: string,\n    record?: any;\n    children: any,\n    link?: string;\n}) => {\n    const classes = useStyles();\n    const [isOpen, setOpen] = useState(false);\n    if (!record) return null;\n\n    const childrenWithProps = React.Children.map(children, child => \n        React.isValidElement(child)\n        ? React.cloneElement(child as React.ReactElement<any>, { record })\n        : child\n    );\n\n    return (\n        <div className={classes.root}>\n            <Box textAlign=\"center\" mb={2}>\n                {link === 'edit' ? (\n                    <EditButton\n                        basePath={basePath}\n                        record={record}\n                        label=\"Edit\"\n                    />\n                ) : (\n                    <ShowButton\n                        basePath={basePath}\n                        record={record}\n                        label=\"Show\"\n                    />\n                )}\n            </Box>\n            <div className={classes.sideBig}>\n                {childrenWithProps}\n            </div>\n            <div className={classes.sideSmall}>\n                <IconButton \n                    onClick={() => setOpen(true)}\n                    color=\"secondary\"\n                >\n                    <ChevronLeftIcon />\n                </IconButton>\n            </div>\n            <Drawer \n                anchor=\"right\" \n                open={isOpen} onClose={() => setOpen(false)}\n            >\n                <div className={classes.drawerContent}>\n                    {childrenWithProps}\n                </div>\n            </Drawer>\n        </div>\n    )\n};\n    \n","import * as React from 'react';\nimport { cloneElement, useState } from 'react';\nimport { \n    AutocompleteArrayInput,\n    Edit,\n    EditContextProvider,\n    Identifier, \n    ReferenceArrayField, \n    ReferenceArrayInput, \n    SimpleForm, \n    SingleFieldList, \n    useEditController, \n    useGetList, \n    useGetMany, \n    useUpdate, \n    useRefresh\n} from 'react-admin';\n\nimport {\n    Chip,\n    Box,\n    Button,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    TextField,\n    MenuItem,\n    Popover,\n    Menu,\n} from '@material-ui/core';\nimport ControlPointIcon from '@material-ui/icons/ControlPoint';\nimport { Company, Product } from '../types';\nimport { string } from 'prop-types';\n\nexport const ProductsListEdit = ({ \n    record,\n    reference, \n}: { \n    record: Company;\n    reference: 'companies';\n}) => {\n    const [open, setOpen] = useState(false);\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n    const [version, setVersion] = useState(0); // used to force the refresh of useGetList without refreshing the whole page\n    const [update] = useUpdate();\n    const refresh = useRefresh();\n\n\n\n    const { data: products, loaded } = useGetMany('products', record.use_products, {\n        enabled: record.use_products && record.use_products.length > 0,\n    });\n\n    const handleDeleteProduct = (id: Identifier) => {\n        const products: Identifier[] = record.use_products.filter(\n            (productId: Identifier) => productId !== id\n        );\n        update(reference, record.id, { use_products: products }, record);\n    };\n\n    const handleOpen = (event: React.MouseEvent<HTMLDivElement>) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleSucess = (values: any) =>{\n        refresh();\n        handleClose();\n    }\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n\n    if (!record) return null;\n\n     return (\n        <>\n            {loaded && products.map(product => (\n                <Box mt={1} key={product.id}>\n                    <Chip\n                        size=\"small\"\n                        variant=\"outlined\"\n                        onDelete={() => handleDeleteProduct(product.id)}\n                        label={product.model}\n                        style={{ backgroundColor: \"#d4d4d4\", border: 0 }}\n                    />\n                </Box>\n            ))}\n            <Box mt={1}>\n                <Chip\n                    icon={<ControlPointIcon />}\n                    size=\"small\"\n                    variant=\"outlined\"\n                    onClick={handleOpen}\n                    label=\"Add product\"\n                    color=\"primary\"\n                />\n            </Box>\n            <Popover\n                open={Boolean(anchorEl)}\n                anchorEl={anchorEl}\n                onClose={handleClose}\n                anchorOrigin={{\n                    vertical: 'center',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'center',\n                    horizontal: 'center',\n                }}\n            >\n                <Edit\n                    basePath=\"/companies\"\n                    resource={reference}\n                    id={record.id.toString()}\n                    onSuccess={handleSucess}\n                >\n                    <SimpleForm>\n                        <ReferenceArrayInput source=\"use_products\" reference=\"products\">\n                            <AutocompleteArrayInput optionText=\"model\" />\n                        </ReferenceArrayInput>\n                    </SimpleForm>\n                </Edit>\n            </Popover>\n        </>\n    );\n}","import * as React from 'react';\nimport {\n    TextField,\n    DateField,\n    FunctionField,\n    ReferenceField,\n    ReferenceArrayField,\n    SingleFieldList,\n    ChipField,\n    ShowButton,\n} from 'react-admin';\nimport { \n    Box, \n    Typography, \n    Divider, \n    Link,\n} from '@material-ui/core';\nimport { Company, Sale } from '../types';\nimport { TagsListEdit } from '../tags/TagsListEdit';\nimport { CollapsibleAside } from '../components/CollapsibleAside';\nimport { ProductsListEdit } from '../products/ProductsListEdit';\nimport { any } from 'prop-types';\n\nexport const CompanyAside = ({\n    record,\n    link = 'edit',\n    ...props\n}: {\n    record?: Company;\n    link?: string;\n}) => {\n    if (!record) return null;\n\n    return (\n        <CollapsibleAside record={record} link={link} basePath=\"/companies\">\n            <AsideContent />\n        </CollapsibleAside>\n    );\n};\n    \n\nconst AsideContent = ({ \n    record \n}: { \n    record?: Company;\n}) => \n    record ? (\n        <>\n            <Typography variant=\"subtitle2\">Company info</Typography>\n            <Divider />\n\n            <Box mt={2}>\n                Website: <Link href={record.website} target=\"_blank\" rel=\"noreferrer\">{record.website}</Link>\n                <br />\n                LinkedIn: <Link href={record.linkedIn} target=\"_blank\" rel=\"noreferrer\">LinkedIn</Link>\n            </Box>\n            <Box mt={1}>\n                Relation: <TextField source=\"relation\" record={record} />\n            </Box>\n            {record.distributor_id && (\n                <Box mt={1}>\n                    Distributor: <ReferenceField\n                            record={record}\n                            source=\"distributor_id\"\n                            reference=\"companies\"\n                        >\n                            <TextField source=\"name\" record={record} />\n                        </ReferenceField>\n                </Box>\n            )}\n\n            {record.phone_number && (\n                <Box mt={1}>\n                    <TextField source=\"phone_number\" record={record} />{' '}\n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"span\">Main</Typography>\n                </Box>\n            )}\n\n            <Box mt={1} mb={3}>\n                <TextField source=\"address\" />\n                <br />\n                <TextField source=\"city\" /> <TextField source=\"zipcode\" />{' '}\n                <TextField source=\"stateAbbr\" />\n            </Box>\n\n            <Typography variant=\"subtitle2\">Background</Typography>\n            <Divider />\n\n            <Box mt={3}>\n                <Typography\n                    variant=\"body2\"\n                    color=\"textSecondary\"\n                    component=\"span\"\n                >\n                    Added on\n                </Typography>{' '}\n                <DateField\n                    source=\"created_at\"\n                    options={{ year: 'numeric', month: 'long', day: 'numeric' }}\n                    color=\"textSecondary\"\n                />\n                <br />\n                <Typography\n                    component=\"span\"\n                    variant=\"body2\"\n                    color=\"textSecondary\"\n                >\n                    Followed by\n                </Typography>{' '}\n                <ReferenceField\n                    resource=\"companies\"\n                    source=\"sales_id\"\n                    reference=\"sales\"\n                >\n                    <FunctionField<Sale>\n                        source=\"last_name\"\n                        render={record =>\n                            record\n                                ? `${record.first_name} ${record.last_name}`\n                                : ''\n                        }\n                    />\n                </ReferenceField>\n            </Box>\n\n            <Box mb={3}>\n                <Typography variant=\"subtitle2\">Tags</Typography>\n                <Divider />\n                <TagsListEdit record={record} reference=\"companies\" />\n            </Box>\n\n            <Box mb={3}>\n                <Typography variant=\"subtitle2\">Use Products</Typography>\n                <Divider />\n\n                <ProductsListEdit record={record} reference=\"companies\" />\n            </Box>\n        </>\n    ) : null;","export const stages = [\n    'opportunity',\n    'proposal-sent',\n    'in-negociation',\n    'won',\n    'lost',\n    'delayed',\n];\n\nexport const stageNames = {\n    opportunity: 'Opportunity',\n    'proposal-sent': 'Proposal Sent',\n    'in-negociation': 'In Negociation',\n    won: 'Won',\n    lost: 'Lost',\n    delayed: 'Delayed',\n};\n\nexport const stageChoices = stages.map(type => ({\n    id: type,\n    /* @ts-ignore */\n    name: stageNames[type],\n}));\n","import * as React from 'react';\nimport { TextField, MenuItem } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\n\nimport { Status } from '../misc/Status';\n\nconst useStyles = makeStyles({\n    root: {\n        width: 150,\n    },\n});\n\nexport const StatusSelector = ({ status, setStatus, className = '' }: any) => {\n    const classes = useStyles();\n    return (\n        <TextField\n            select\n            value={status}\n            onChange={(event: React.ChangeEvent<{ value: unknown }>) => {\n                setStatus(event.target.value);\n            }}\n            variant=\"filled\"\n            label={false}\n            margin=\"none\"\n            size=\"small\"\n            className={clsx(className, classes.root)}\n        >\n            <MenuItem value=\"cold\">\n                Cold <Status status=\"cold\" />\n            </MenuItem>\n            <MenuItem value=\"warm\">\n                Warm <Status status=\"warm\" />\n            </MenuItem>\n            <MenuItem value=\"hot\">\n                Hot <Status status=\"hot\" />\n            </MenuItem>\n            <MenuItem value=\"in-contract\">\n                In Contract <Status status=\"in-contract\" />\n            </MenuItem>\n        </TextField>\n    );\n};\n","import * as React from 'react';\nimport { useState, FormEvent } from 'react';\nimport {\n    useRecordContext,\n    useCreate,\n    useUpdate,\n    useRefresh,\n    useNotify,\n    useGetIdentity,\n    Identifier,\n    useResourceContext,\n} from 'react-admin';\nimport { TextField as TextInput, Button, Paper } from '@material-ui/core';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport ReactMarkdown from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\n\nimport { StatusSelector } from './StatusSelector';\n\ntype Props = {\n    preview: Boolean;\n}\n\nconst useStyles = makeStyles<Theme, Props>(theme => ({\n    root: {\n        marginTop: theme.spacing(4),\n        marginBottom: theme.spacing(1),\n    },\n    toolbar: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        marginTop: theme.spacing(1),\n    },\n    small: {\n        marginRight: '1em',\n        '& .MuiFilledInput-input': {\n            paddingTop: 10,\n        },\n    },\n    buttonSwitcher: {\n        marginBottom: theme.spacing(1),\n    },\n    previewConatiner: {\n        display: 'flex',\n    },\n    previewRaw: {\n        flex: 1,\n    },\n    previewMarkdown: {\n        flex: 1,\n        marginLeft: theme.spacing(1),\n        paddingLeft: theme.spacing(1),\n        paddingRight: theme.spacing(1),\n        borderColor: theme.palette.primary.main,\n        display: ({preview}) => (preview ? 'block' : 'none'),\n    },\n}));\n\nexport const NewNote = ({\n    showStatus,\n    reference,\n}: {\n    showStatus?: boolean;\n    reference: 'companies' | 'contacts' | 'deals' | 'products';\n}) => {\n    const [preview, setPreview] = useState(false);\n    const classes = useStyles({preview});\n    const record = useRecordContext();\n    const resource = useResourceContext();\n    const [text, setText] = useState('');\n    const [status, setStatus] = useState(record && record.status);\n    const [date, setDate] = useState(getCurrentDate());\n    const [create, { loading }] = useCreate();\n    const [update] = useUpdate();\n    // FIXME: use refetch instead when ReferenceManyField exposes it in the ListContext\n    const refresh = useRefresh();\n    const notify = useNotify();\n    const { identity } = useGetIdentity();\n    if (!record || !identity) return null;\n\n    const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        const data: any = {\n            [foreignKeyMapping[reference]]: record.id,\n            sales_id: identity.id,\n            date,\n            text,\n        };\n        if (showStatus) {\n            data.status = status;\n        }\n        update(\n            reference,\n            ((record && record.id) as unknown) as Identifier,\n            {\n                last_seen: date,\n                status,\n            },\n            record\n        );\n        create(resource, data, {\n            onSuccess: () => {\n                setText('');\n                notify('Note added successfully', 'info');\n                refresh();\n            },\n        });\n        return false;\n    };\n    return (\n        <div className={classes.root}>\n            <form onSubmit={handleSubmit}>\n                <div className={classes.buttonSwitcher}>\n                    <Button \n                        variant={preview ? \"contained\": \"outlined\"} \n                        color=\"primary\"\n                        onClick={()=> setPreview(!preview)}\n                    >Markdown</Button>\n                </div>\n                <div className={classes.previewConatiner}>\n                    <div className={classes.previewRaw}>\n                        <TextInput\n                            label=\"Add a note\"\n                            variant=\"filled\"\n                            size=\"small\"\n                            fullWidth\n                            multiline\n                            value={text}\n                            onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n                                setText(event.target.value)\n                            }\n                        />\n                    </div>\n                    <Paper className={classes.previewMarkdown}>\n                        <ReactMarkdown children={text} remarkPlugins={[remarkGfm]} />\n                    </Paper>\n                </div>\n                <div className={classes.toolbar}>\n                    <span>\n                        {text ? (\n                            <>\n                                {showStatus && (\n                                    <StatusSelector\n                                        status={status}\n                                        setStatus={setStatus}\n                                        className={classes.small}\n                                    />\n                                )}\n                                <TextInput\n                                    type=\"datetime-local\"\n                                    variant=\"filled\"\n                                    size=\"small\"\n                                    value={date}\n                                    onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                                        setDate(event.target.value);\n                                    }}\n                                    className={classes.small}\n                                />\n                            </>\n                        ) : null}\n                    </span>\n                    <Button\n                        type=\"submit\"\n                        variant=\"contained\"\n                        color=\"primary\"\n                        disabled={!text || loading}\n                    >\n                        Add this note\n                    </Button>\n                </div>\n            </form>\n        </div>\n    );\n};\n\nconst getCurrentDate = () => {\n    const now = new Date();\n    now.setMinutes(now.getMinutes() - now.getTimezoneOffset());\n    return now.toISOString().slice(0, -8);\n};\n\nconst foreignKeyMapping = {\n    contacts: 'contact_id',\n    deals: 'deal_id',\n    companies: 'company_id',\n    products: 'product_id',\n};\n","import * as React from 'react';\nimport { useState, FormEvent, ChangeEvent } from 'react';\nimport {\n    TextField,\n    ReferenceField,\n    DateField,\n    useResourceContext,\n    useDelete,\n    useUpdate,\n    useNotify,\n    useRecordContext,\n} from 'react-admin';\nimport {\n    Typography,\n    Tooltip,\n    IconButton,\n    FilledInput,\n    Button,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport EditIcon from '@material-ui/icons/Edit';\nimport TrashIcon from '@material-ui/icons/Delete';\nimport ReactMarkdown from 'react-markdown'\nimport remarkGfm from 'remark-gfm'\n\nimport { Status } from '../misc/Status';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        marginBottom: theme.spacing(2),\n    },\n    metadata: {\n        marginBottom: theme.spacing(1),\n        color: theme.palette.text.secondary,\n    },\n    textarea: {\n        paddingTop: 16,\n        paddingLeft: 14,\n        paddingRight: 60,\n        paddingBottom: 14,\n        lineHeight: 1.3,\n    },\n    buttons: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        marginTop: theme.spacing(1),\n    },\n    cancel: {\n        marginRight: theme.spacing(1),\n    },\n    content: {\n        backgroundColor: theme.palette.grey[200],\n        padding: '0 1em',\n        borderRadius: 10,\n        display: 'flex',\n        alignItems: 'stretch',\n        marginBottom: theme.spacing(1),\n    },\n    text: {\n        flex: 1,\n    },\n    paragraph: {\n        fontFamily: theme.typography.fontFamily,\n        fontSize: theme.typography.body1.fontSize,\n        lineHeight: 1,\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n    },\n    toolbar: {\n        marginLeft: theme.spacing(2),\n        visibility: 'hidden',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-around',\n    },\n}));\n\nexport const Note = ({\n    showStatus,\n    note,\n    isLast,\n    reference,\n}: {\n    showStatus?: boolean;\n    note: any;\n    isLast: boolean;\n    reference: string;\n}) => {\n    const [isHover, setHover] = useState(false);\n    const [isEditing, setEditing] = useState(false);\n    const [noteText, setNoteText] = useState(note.text);\n    const resource = useResourceContext();\n    const record = useRecordContext();\n    const notify = useNotify();\n    const classes = useStyles();\n    const [update, { loading }] = useUpdate();\n\n    const [handleDelete] = useDelete(resource, note.id, note, {\n        mutationMode: 'undoable',\n        onSuccess: () => {\n            notify('Note deleted', 'info', undefined, true);\n            update(\n                reference,\n                record.id,\n                { nb_notes: record.nb_notes - 1 },\n                record\n            );\n        },\n    });\n\n    const handleEnterEditMode = () => {\n        setEditing(true);\n    };\n\n    const handleCancelEdit = () => {\n        setEditing(false);\n        setNoteText(note.text);\n        setHover(false);\n    };\n\n    const handleTextChange = (event: ChangeEvent<HTMLInputElement>) => {\n        setNoteText(event.target.value);\n    };\n\n    const handleNoteUpdate = (event: FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        update(resource, note.id, { text: noteText }, note, {\n            onSuccess: () => {\n                setEditing(false);\n                setNoteText(note.text);\n                setHover(false);\n            },\n        });\n    };\n\n    return (\n        <div\n            className={classes.root}\n            onMouseEnter={() => setHover(true)}\n            onMouseLeave={() => setHover(false)}\n        >\n            <div className={classes.metadata}>\n                <ReferenceField\n                    record={note}\n                    resource=\"contactNotes\"\n                    source=\"sales_id\"\n                    reference=\"sales\"\n                    basePath=\"/contactNotes\"\n                >\n                    <TextField source=\"first_name\" variant=\"body1\" />\n                </ReferenceField>{' '}\n                <Typography component=\"span\" variant=\"body1\">\n                    added a note on{' '}\n                </Typography>\n                <DateField\n                    source=\"date\"\n                    record={note}\n                    variant=\"body1\"\n                    showTime\n                    locales=\"en\"\n                    options={{\n                        dateStyle: 'full',\n                        timeStyle: 'short',\n                    }}\n                />{' '}\n                {showStatus && <Status status={note.status} />}\n            </div>\n            {isEditing ? (\n                <form onSubmit={handleNoteUpdate}>\n                    <FilledInput\n                        value={noteText}\n                        onChange={handleTextChange}\n                        fullWidth\n                        multiline\n                        className={classes.textarea}\n                        autoFocus\n                    />\n                    <div className={classes.buttons}>\n                        <Button\n                            className={classes.cancel}\n                            onClick={handleCancelEdit}\n                            color=\"primary\"\n                        >\n                            Cancel\n                        </Button>\n                        <Button\n                            type=\"submit\"\n                            color=\"primary\"\n                            variant=\"contained\"\n                            disabled={loading}\n                        >\n                            Update Note\n                        </Button>\n                    </div>\n                </form>\n            ) : (\n                <div \n                    className={classes.content}\n                    onClick={() => setHover(true)}\n                >\n                    <div className={classes.text}>\n                        <ReactMarkdown children={note.text} remarkPlugins={[remarkGfm]} />\n                    </div>\n                    <div\n                        className={classes.toolbar}\n                        style={{ visibility: isHover ? 'visible' : 'hidden' }}\n                    >\n                        <Tooltip title=\"Edit note\">\n                            <IconButton\n                                size=\"small\"\n                                onClick={handleEnterEditMode}\n                            >\n                                <EditIcon />\n                            </IconButton>\n                        </Tooltip>\n                        <Tooltip title=\"Delete note\">\n                            <IconButton size=\"small\" onClick={handleDelete}>\n                                <TrashIcon />\n                            </IconButton>\n                        </Tooltip>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\n","import * as React from 'react';\nimport { useListContext } from 'react-admin';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { Note } from './Note';\nimport { NewNote } from './NewNote';\n\nconst useStyles = makeStyles({\n    root: {\n        marginTop: '0.5em',\n    },\n});\n\nexport const NotesIterator = ({\n    showStatus,\n    reference,\n}: {\n    showStatus?: boolean;\n    reference: 'companies' | 'contacts' | 'deals' | 'products';\n}) => {\n    const classes = useStyles();\n    const { data, ids, loaded } = useListContext();\n    if (!loaded) return null;\n    return (\n        <>\n            <NewNote showStatus={showStatus} reference={reference} />\n            <div className={classes.root}>\n                {ids.map((id, index) => (\n                    <Note\n                        note={data[id]}\n                        isLast={index === ids.length - 1}\n                        showStatus={showStatus}\n                        reference={reference}\n                        key={index}\n                    />\n                ))}\n            </div>\n        </>\n    );\n};\n","import * as React from 'react';\nimport { Avatar } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport BusinessIcon from '@material-ui/icons/Business';\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\nimport clsx from 'clsx';\n\nimport { Product } from '../types';\n\nconst useStyles = makeStyles(theme => ({\n    avatar: {\n        width: 60,\n        height: 60,\n        backgroundColor: 'aliceblue',\n        color: theme.palette.secondary.main,\n    },\n    img: {\n        objectFit: 'contain',\n    },\n    small: {\n        width: 20,\n        height: 20,\n    },\n    large: {\n        width: 40,\n        height: 40,\n    },\n}));\n\nexport const ProductAvatar = ({\n    record,\n    size = 'large',\n}: {\n    record?: Product;\n    size?: 'small' | 'large';\n}) => {\n    const classes = useStyles();\n    if (!record) return null;\n\n\n    return (record.image\n        ? <Avatar\n            src={process.env.PUBLIC_URL + record.image}\n            alt={record.model}\n            className={classes.avatar}\n            imgProps={{ className: clsx(classes.img, classes[size]) }}\n        />\n        : <Avatar\n            alt={record.model}\n            className={classes.avatar}\n        >\n            <ShoppingCartIcon />\n        </Avatar>\n    );\n};\n","import * as React from 'react';\nimport { useState } from 'react';\nimport { Paper, Typography, Link as MuiLink, Box, Chip, Checkbox } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ContactsIcon from '@material-ui/icons/AccountCircle';\nimport DealIcon from '@material-ui/icons/MonetizationOn';\nimport { linkToRecord, TextField, ReferenceField, ImageField, useListContext } from 'react-admin';\nimport { Link } from 'react-router-dom';\n\nimport { ProductAvatar } from './ProductAvatar';\nimport { Product } from '../types';\nimport classNames from 'classnames';\nimport { LogoField } from '../companies/LogoField';\n\nconst useStyles = makeStyles(theme => ({\n    paper: {\n        height: 200,\n        width: 194,\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-between',\n        padding: '1em',\n        position: 'relative',\n    },\n    identity: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    name: {\n        textAlign: 'center',\n        marginTop: theme.spacing(1),\n    },\n    family: {\n        textAlign: 'center',\n        marginTop: theme.spacing(1),\n    },\n    stats: {\n        display: 'flex',\n        justifyContent: 'space-around',\n        width: '100%',\n    },\n    singleStat: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    statIcon: {\n        marginRight: theme.spacing(1),\n    },\n    image: {\n        width: 28,\n        height: 28,\n    },\n    checkbox: {\n        position: 'absolute',\n        top: 0,\n        left: theme.spacing(1),\n    },\n    hidden:{\n        display: 'none',\n    }\n}));\n\nexport const ProductCard = ({ record }: { record: Product }) => {\n    const classes = useStyles();\n    const [elevation, setElevation] = useState(1);\n    const { data, ids, loaded, onToggleItem, selectedIds } = useListContext<Product>();\n    return (\n        <MuiLink\n            component={Link}\n            to={linkToRecord('/products', record.id, 'show')}\n            underline=\"none\"\n            onMouseEnter={() => setElevation(3)}\n            onMouseLeave={() => setElevation(1)}\n        >\n            <Paper className={classes.paper} elevation={elevation}>\n                <Checkbox\n                    edge=\"start\"\n                    checked={selectedIds.includes(record.id)}\n                    tabIndex={-1}\n                    disableRipple\n                    className={classNames(classes.checkbox, {[classes.hidden]: !loaded})}\n                    onClick={(e: any )=> {\n                        e.stopPropagation();\n                        onToggleItem(record.id);\n                    }}\n                />\n                <Box position=\"absolute\" top={10} right={10}>\n                    <ReferenceField\n                        record={record}\n                        source=\"company_id\"\n                        reference=\"companies\"\n                        link=\"show\"\n                    >\n                        <LogoField />\n                    </ReferenceField>\n                </Box>\n                <div className={classes.identity}>\n                    <ProductAvatar record={record} />\n                    <div className={classes.name}>\n                        <Box display=\"flex\" alignItems=\"center\">\n                        <Typography variant=\"subtitle2\">\n                            {record.model}\n                        </Typography>\n                        </Box>\n                    </div>\n\n                    <div className={classes.family}>\n                        <Typography variant=\"body2\">\n                            in family{' '}\n                            <ReferenceField\n                                record={record}\n                                source=\"family_id\"\n                                reference=\"productFamilies\"\n                                link=\"show\"\n                            >\n                                <TextField source=\"name\" />\n                            </ReferenceField>\n                        </Typography>\n                    </div>\n\n                </div>\n                <div className={classes.stats}>\n                    <div className={classes.singleStat}>\n                        <ContactsIcon\n                            color=\"disabled\"\n                            className={classes.statIcon}\n                        />\n                        <div>\n                            <Typography\n                                variant=\"subtitle2\"\n                                style={{ marginBottom: -8 }}\n                            >\n                                {record.nb_notes}\n                            </Typography>\n                            <Typography variant=\"caption\" color=\"textSecondary\">\n                                {record.nb_notes > 1 ? 'notes' : 'note'}\n                            </Typography>\n                        </div>\n                    </div>\n                    <div className={classes.singleStat}>\n                        <DealIcon\n                            color=\"disabled\"\n                            className={classes.statIcon}\n                        />\n                        <div>\n                            <Typography\n                                variant=\"subtitle2\"\n                                style={{ marginBottom: -8 }}\n                            >\n                                {record.nb_properties}\n                            </Typography>\n                            <Typography variant=\"caption\" color=\"textSecondary\">\n                                {record.nb_properties > 1 ? 'properties' : 'property'}\n                            </Typography>\n                        </div>\n                    </div>\n                </div>\n            </Paper>\n        </MuiLink>\n    );\n};\n","import * as React from 'react';\nimport { Box, Paper } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useListContext, Identifier } from 'react-admin';\nimport Skeleton from '@material-ui/lab/Skeleton';\n\nimport { ProductCard } from './ProductCard';\nimport { Product } from '../types';\n\nconst useStyles = makeStyles(theme => ({\n    gridList: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        width:  '100%',\n        gap: '5px',\n    },\n    paper: {\n        height: 200,\n        width: 194,\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-between',\n        alignItems: \"center\",\n        padding: '1em',\n        backgroundColor: theme.palette.grey[200],\n    },\n}));\n\nconst times = (nbChildren: number, fn: (key: number) => any) =>\n    Array.from({ length: nbChildren }, (_, key) => fn(key));\n\nconst LoadingGridList = () => {\n    const classes = useStyles();\n    return (\n        <Box className={classes.gridList}>\n            {times(15, key => (\n                <Paper className={classes.paper} key={key} >\n                <Skeleton variant=\"circle\" width={60} height={60}  animation=\"wave\"/>\n                <Skeleton variant=\"text\" animation=\"wave\" width={110}/>\n                <Skeleton variant=\"text\" animation=\"wave\" width={150}/>\n                <Skeleton variant=\"rect\" width={180} height={40} />\n                </Paper>\n            ))}\n        </Box>\n    );\n};\n\nconst LoadedGridList = () => {\n    const { ids, data } = useListContext<Product>();\n    const classes = useStyles();\n\n    if (!ids || !data) return null;\n\n    return (\n        <Box className={classes.gridList}>\n            {ids.map((id: Identifier) => (\n                <ProductCard key={id} record={data[id]} />\n            ))}\n        </Box>\n    );\n};\n\nexport const ProductGridList = () => {\n    const { loaded, loading } = useListContext();\n    return loading ? <LoadingGridList /> : <LoadedGridList /> ;\n};\n","import * as React from 'react';\nimport { useState, ChangeEvent } from 'react';\nimport {\n    ShowBase,\n    ShowProps,\n    TextField,\n    ReferenceManyField,\n    SelectField,\n    ReferenceField,\n    ImageField,\n    useShowContext,\n    useRecordContext,\n    useListContext,\n    Pagination,\n} from 'react-admin';\nimport {\n    Avatar as MuiAvatar,\n    Box,\n    Button,\n    Card,\n    CardContent,\n    Typography,\n    List,\n    ListItem,\n    ListItemAvatar,\n    ListItemText,\n    ListItemSecondaryAction,\n    Tabs,\n    Tab,\n    Chip,\n    Divider,\n} from '@material-ui/core';\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { formatDistance } from 'date-fns';\nimport BusinessIcon from '@material-ui/icons/Business';\nimport AddIcon from '@material-ui/icons/Add';\n\nimport { Avatar } from '../contacts/Avatar';\nimport { Status } from '../misc/Status';\nimport { TagsList } from '../tags/TagsList';\nimport { sizes } from './sizes';\nimport { LogoField } from './LogoField';\nimport { CompanyAside } from './CompanyAside';\nimport { Company, Deal, Contact } from '../types';\nimport { stageNames } from '../deals/stages';\nimport { NotesIterator } from '../notes';\nimport { CountryField } from './CountryField';\nimport { ProductGridList } from '../products/ProductGridList';\n\nexport const CompanyShow = (props: ShowProps) => (\n    <ShowBase {...props}>\n        <CompanyShowContent />\n    </ShowBase>\n);\n\nconst CompanyShowContent = () => {\n    const { record, loaded } = useShowContext<Company>();\n    const [value, setValue] = useState(0);\n    const handleChange = (event: ChangeEvent<{}>, newValue: number) => {\n        setValue(newValue);\n    };\n    if (!loaded || !record) return null;\n    return (\n        <Box mt={2} display=\"flex\">\n            <Box flex=\"1\">\n                <Card>\n                    <CardContent>\n                        <Box display=\"flex\" mb={1}>\n                            <LogoField record={record as any} />\n                            <Box ml={2} flex=\"1\">\n                                <Box display=\"flex\" gridGap={4}>\n                                    <Typography variant=\"h5\">{record.name}</Typography>\n                                    {record.relation && (\n                                        <Chip \n                                            label={record.relation} \n                                            variant=\"outlined\" \n                                            size=\"small\"\n                                        />\n                                    )}\n                                </Box>\n                                <Typography \n                                    variant=\"body2\" \n                                    color=\"textSecondary\"\n                                >\n                                    {`#${record.id} - `}\n                                </Typography>\n                                {record.sector && (\n                                        <Typography variant=\"body2\">\n                                            <TextField source=\"sector\" />,{' '}\n                                            <SelectField\n                                                source=\"size\"\n                                                choices={sizes}\n                                            />\n                                        </Typography>\n                                )}\n                            </Box>\n                            <Box>\n                                <ReferenceField\n                                    source=\"country_id\"\n                                    reference=\"countries\"\n                                    link={false}\n                                >\n                                    <CountryField />\n                                </ReferenceField>\n                            </Box>\n                        </Box>\n                        <Tabs\n                            value={value}\n                            indicatorColor=\"primary\"\n                            textColor=\"primary\"\n                            onChange={handleChange}\n                            variant=\"scrollable\"\n                            scrollButtons=\"auto\"\n                        >\n                            <Tab\n                                label={\n                                    record.nb_notes === 1\n                                        ? '1 Note'\n                                        : `${record.nb_notes} Notes`\n                                }\n                            />\n                            <Tab\n                                label={\n                                    record.nb_contacts === 1\n                                        ? '1 Contact'\n                                        : `${record.nb_contacts} Contacts`\n                                }\n                            />\n                            <Tab\n                                label={\n                                    record.nb_deals === 1\n                                        ? '1 Deal'\n                                        : `${record.nb_deals} Deals`\n                                }\n                            />\n                            <Tab\n                                label={\n                                    record.nb_products === 1\n                                        ? '1 Product'\n                                        : `${record.nb_products} Products`\n                                }\n                            />\n                        </Tabs>\n                        <Divider />\n                        <TabPanel value={value} index={0}>\n                            <ReferenceManyField\n                                reference=\"companyNotes\"\n                                target=\"company_id\"\n                                sort={{ field: 'date', order: 'DESC' }}\n                            >\n                                 <NotesIterator reference=\"companies\" />\n                            </ReferenceManyField>\n                        </TabPanel>\n                        <TabPanel value={value} index={1}>\n                            <ReferenceManyField\n                                reference=\"contacts\"\n                                target=\"company_id\"\n                                sort={{ field: 'last_name', order: 'ASC' }}\n                            >\n                                <ContactsIterator />\n                            </ReferenceManyField>\n                        </TabPanel>\n                        <TabPanel value={value} index={2}>\n                            <ReferenceManyField\n                                reference=\"deals\"\n                                target=\"company_id\"\n                                sort={{ field: 'name', order: 'ASC' }}\n                            >\n                                <DealsIterator />\n                            </ReferenceManyField>\n                        </TabPanel>\n                        <TabPanel value={value} index={3}>\n                            <Box mt={1}>\n                                <ReferenceManyField\n                                    reference=\"products\"\n                                    target=\"company_id\"\n                                    label=\"Products\"\n                                    pagination={<Pagination rowsPerPageOptions={[15, 25, 50, 100]} />}\n                                    perPage={25}\n                                >\n                                    <ProductGridList />\n                                </ReferenceManyField>\n                            </Box>\n                            <Box textAlign=\"center\" mt={1}>\n                                <CreateRelatedProductButton record={record} />\n                            </Box>\n                        </TabPanel>\n                    </CardContent>\n                </Card>\n            </Box>\n            <CompanyAside record={record} />\n        </Box>\n    );\n};\n\ninterface TabPanelProps {\n    children?: React.ReactNode;\n    index: any;\n    value: any;\n}\n\nconst TabPanel = (props: TabPanelProps) => {\n    const { children, value, index, ...other } = props;\n\n    return (\n        <div\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`wrapped-tabpanel-${index}`}\n            aria-labelledby={`wrapped-tab-${index}`}\n            {...other}\n        >\n            {children}\n        </div>\n    );\n};\n\nconst ContactsIterator = () => {\n    const { data, ids, loaded } = useListContext<Contact>();\n    const record = useRecordContext();\n\n    const now = Date.now();\n    if (!loaded) return null;\n    return (\n        <Box>\n            <List>\n                {ids.map(id => {\n                    const contact = data[id];\n                    return (\n                        <ListItem\n                            button\n                            key={id}\n                            component={RouterLink}\n                            to={`/contacts/${id}/show`}\n                        >\n                            <ListItemAvatar>\n                                <Avatar record={contact} />\n                            </ListItemAvatar>\n                            <ListItemText\n                                primary={`${contact.first_name} ${contact.last_name}`}\n                                secondary={\n                                    <>\n                                        {contact.title}{' '}\n                                        {`- ${contact.nb_notes} notes `}\n                                        <TagsList record={contact} />\n                                    </>\n                                }\n                            />\n                            <ListItemSecondaryAction>\n                                <Typography variant=\"body2\" color=\"textSecondary\">\n                                    last activity{' '}\n                                    {formatDistance(\n                                        new Date(contact.last_seen),\n                                        now\n                                    )}{' '}\n                                    ago <Status status={contact.status} />\n                                </Typography>\n                            </ListItemSecondaryAction>\n                        </ListItem>\n                    );\n                })}\n            </List>\n            <Box textAlign=\"center\" mt={1}>\n                <CreateRelatedContactButton record={record} />\n            </Box>\n        </Box>\n    );\n};\n\nconst CreateRelatedContactButton = ({ record }: any) => (\n    <Button\n        component={RouterLink}\n        to={{\n            pathname: '/contacts/create',\n            state: { record: { company_id: record.id } },\n        }}\n        color=\"primary\"\n        variant=\"contained\"\n        size=\"small\"\n        startIcon={<PersonAddIcon />}\n    >\n        Add contact\n    </Button>\n);\n\nconst CreateRelatedProductButton = ({ record }: any) => (\n    <Button\n        component={RouterLink}\n        to={{\n            pathname: '/products/create',\n            state: { record: { company_id: record.id } },\n        }}\n        color=\"primary\"\n        variant=\"contained\"\n        size=\"small\"\n        startIcon={<AddIcon />}\n    >\n        Add product\n    </Button>\n);\n\nconst DealsIterator = () => {\n    const { data, ids, loaded } = useListContext<Deal>();\n\n    const now = Date.now();\n    if (!loaded) return null;\n    return (\n        <Box>\n            <List>\n                {ids.map(id => {\n                    const deal = data[id];\n                    return (\n                        <ListItem\n                            button\n                            key={id}\n                            component={RouterLink}\n                            to={`/deals/${id}/show`}\n                        >\n                            <ListItemText\n                                primary={deal.name}\n                                secondary={\n                                    <>\n                                        {/* @ts-ignore */}\n                                        {stageNames[deal.stage]},{' '}\n                                        {deal.amount.toLocaleString('en-US', {\n                                            notation: 'compact',\n                                            style: 'currency',\n                                            currency: 'USD',\n                                            currencyDisplay: 'narrowSymbol',\n                                            minimumSignificantDigits: 3,\n                                        })}\n                                        , {deal.type}\n                                    </>\n                                }\n                            />\n                            <ListItemSecondaryAction>\n                                <Typography\n                                    variant=\"body2\"\n                                    color=\"textSecondary\"\n                                    component=\"span\"\n                                >\n                                    last activity{' '}\n                                    {formatDistance(\n                                        new Date(deal.updated_at),\n                                        now\n                                    )}{' '}\n                                    ago{' '}\n                                </Typography>\n                            </ListItemSecondaryAction>\n                        </ListItem>\n                    );\n                })}\n            </List>\n        </Box>\n    );\n};\n","import * as React from 'react';\nimport {\n    Edit,\n    EditProps,\n    ReferenceInput,\n    SimpleForm,\n    TextInput,\n    SelectInput,\n    useRecordContext,\n    AutocompleteInput,\n    ReferenceArrayInput,\n    AutocompleteArrayInput,\n    FormDataConsumer,\n    required,\n} from 'react-admin';\nimport { Box, CardContent, Divider } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\n\nimport { CompanyAside } from './CompanyAside';\nimport { LogoField } from './LogoField';\nimport { sectors } from './sectors';\nimport { sizes } from './sizes';\nimport { relations } from './relations';\nimport DistributorInput from './DistributorInput';\n\nconst useStyles = makeStyles({\n    inline: {\n        display: 'inline-block',\n        marginLeft: '1em',\n        '&.first-child': {\n            marginLeft: 0,\n        },\n    },\n});\n\nconst renderDistributor = (choice: any) => {\n\n}\n\nexport const CompanyEdit = (props: EditProps) => {\n    const classes = useStyles();\n    return (\n        <Edit {...props} aside={<CompanyAside link=\"show\" />} actions={false}>\n            <SimpleForm component={CustomLayout} redirect=\"show\">\n                <TextInput source=\"name\" validate={required()} fullWidth />\n                <SelectInput\n                    source=\"sector\"\n                    choices={sectors}\n                    formClassName={clsx(classes.inline, 'first-child')}\n                />\n                <SelectInput\n                    source=\"size\"\n                    choices={sizes}\n                    formClassName={classes.inline}\n                />\n                <SelectInput\n                    source=\"relation\"\n                    choices={relations}\n                    formClassName={classes.inline}\n                />\n                <FormDataConsumer>\n                    {({ formData, ...rest }) => formData.relation != 'Distributor' &&\n                        <ReferenceInput\n                            source=\"distributor_id\"\n                            reference=\"companies\"\n                            filter={{ relation: 'Distributor' }}\n                        >\n                            <DistributorInput />\n                        </ReferenceInput>\n                    }\n                </FormDataConsumer>\n\n                <ReferenceArrayInput source=\"use_products\" reference=\"products\">\n                    <AutocompleteArrayInput optionText=\"model\" />\n                </ReferenceArrayInput>\n\n                <CustomDivider />\n                <TextInput source=\"address\" fullWidth helperText={false} />\n                <TextInput\n                    source=\"city\"\n                    formClassName={clsx(classes.inline, 'first-child')}\n                />\n                <TextInput source=\"zipcode\" formClassName={classes.inline} />\n                <TextInput source=\"stateAbbr\" formClassName={classes.inline} />\n                <ReferenceInput\n                    source=\"country_id\"\n                    reference=\"countries\"\n                >\n                    <AutocompleteInput optionText=\"nicename\" />\n                </ReferenceInput>\n                <CustomDivider />\n                <TextInput source=\"website\" fullWidth helperText={false} />\n                <TextInput source=\"linkedIn\" fullWidth helperText={false} />\n                <TextInput source=\"logo\" fullWidth />\n                <CustomDivider />\n                <TextInput\n                    source=\"phone_number\"\n                    formClassName={clsx(classes.inline, 'first-child')}\n                    helperText={false}\n                />\n                <ReferenceInput\n                    source=\"sales_id\"\n                    reference=\"sales\"\n                    label=\"Account manager\"\n                    formClassName={classes.inline}\n                    helperText={false}\n                >\n                    <SelectInput\n                        optionText={(sales: any) =>\n                            `${sales.first_name} ${sales.last_name}`\n                        }\n                    />\n                </ReferenceInput>\n            </SimpleForm>\n        </Edit>\n    );\n};\n\nconst CustomLayout = (props: any) => {\n    const record = useRecordContext(props);\n    return (\n        <CardContent>\n            <Box display=\"flex\">\n                <LogoField record={record as any} />\n                <Box ml={2} flex=\"1\" maxWidth={796}>\n                    {props.children}\n                </Box>\n            </Box>\n        </CardContent>\n    );\n};\n\nconst CustomDivider = () => (\n    <Box mb={2}>\n        <Divider />\n    </Box>\n);\n","/* eslint-disable import/no-anonymous-default-export */\nimport { CompanyList } from './CompanyList';\nimport { CompanyCreate } from './CompanyCreate';\nimport { CompanyShow } from './CompanyShow';\nimport { CompanyEdit } from './CompanyEdit';\nimport BusinessIcon from '@material-ui/icons/Business';\n\nexport default {\n    list: CompanyList,\n    create: CompanyCreate,\n    edit: CompanyEdit,\n    show: CompanyShow,\n    icon: BusinessIcon,\n};\n","import * as React from 'react';\nimport {\n    TextField,\n    EmailField,\n    DateField,\n    ReferenceManyField,\n    useListContext,\n    ReferenceField,\n    FunctionField,\n} from 'react-admin';\nimport { Box, Typography, Divider, List, ListItem } from '@material-ui/core';\nimport { TagsListEdit } from '../tags/TagsListEdit';\n\nimport { Contact, Sale } from '../types';\nimport { CollapsibleAside } from '../components/CollapsibleAside';\n\nexport const ContactAside = ({ \n    record, \n    link = 'edit',\n}: {\n    record?: Contact;\n    link?: string;\n}) => {\n    if (!record) return null;\n\n    return (\n        <CollapsibleAside record={record} link={link} basePath=\"/contacts\">\n            <AsideContent />\n        </CollapsibleAside>\n    );\n};\n\nconst TasksIterator = () => {\n    const { data, ids, loading } = useListContext();\n    if (loading || ids.length === 0) return null;\n    return (\n            <List>\n                {ids.map(id => {\n                    const task = data[id];\n                    return (\n                        <ListItem key={id} disableGutters>\n                            <Box>\n                                <Typography variant=\"body2\">\n                                    {task.text}\n                                </Typography>\n                                <Typography\n                                    variant=\"body2\"\n                                    color=\"textSecondary\"\n                                >\n                                    due{' '}\n                                    <DateField\n                                        source=\"due_date\"\n                                        record={task}\n                                    />\n                                </Typography>\n                            </Box>\n                        </ListItem>\n                    );\n                })}\n            </List>\n    );\n};\n\n\nconst AsideContent = ({ \n    record \n}: { \n    record?: Contact;\n}) => \n    record ? (\n        <>\n            <Typography variant=\"subtitle2\">Personal info</Typography>\n            <Divider />\n\n            <Box mt={2}>\n                <EmailField source=\"email\" />\n            </Box>\n\n            <Box mt={1}>\n                <TextField source=\"phone_number1\" />{' '}\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"span\">\n                    Work\n                </Typography>\n            </Box>\n\n            <Box mb={1}>\n                <TextField source=\"phone_number2\" />{' '}\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"span\">\n                    Home\n                </Typography>\n            </Box>\n\n            <Box mb={3}>\n                <Typography variant=\"body2\">\n                    {record.gender === 'male' ? 'He/Him' : 'She/Her'}\n                </Typography>\n            </Box>\n\n            <Typography variant=\"subtitle2\">Background</Typography>\n            <Divider />\n\n            <Box mt={2}>{record && record.background}</Box>\n            <Box mt={1} mb={3}>\n                <Typography component=\"span\" variant=\"body2\" color=\"textSecondary\">\n                    Added on\n                </Typography>{' '}\n                <DateField\n                    source=\"first_seen\"\n                    options={{ year: 'numeric', month: 'long', day: 'numeric' }}\n                    color=\"textSecondary\"\n                />\n                <br />\n                <Typography component=\"span\" variant=\"body2\" color=\"textSecondary\">\n                    Last seen on\n                </Typography>{' '}\n                <DateField\n                    source=\"last_seen\"\n                    options={{ year: 'numeric', month: 'long', day: 'numeric' }}\n                    color=\"textSecondary\"\n                />\n                <br />\n                <Typography component=\"span\" variant=\"body2\" color=\"textSecondary\">\n                    Followed by\n                </Typography>{' '}\n                <ReferenceField\n                    resource=\"contacts\"\n                    source=\"sales_id\"\n                    reference=\"sales\"\n                >\n                    <FunctionField<Sale>\n                        source=\"last_name\"\n                        render={record =>\n                            record ? `${record.first_name} ${record.last_name}` : ''\n                        }\n                    />\n                </ReferenceField>\n            </Box>\n\n            <Box mb={3}>\n                <Typography variant=\"subtitle2\">Tags</Typography>\n                <Divider />\n                <TagsListEdit record={record} reference=\"contacts\" />\n            </Box>\n\n            <Box>\n                <Typography variant=\"subtitle2\">Tasks</Typography>\n                <Divider />\n                <ReferenceManyField\n                    resource=\"contacts\"\n                    target=\"contact_id\"\n                    reference=\"tasks\"\n                >\n                    <TasksIterator />\n                </ReferenceManyField>\n            </Box>\n        </>\n    ) : null;","import * as React from 'react';\nimport {\n    ShowBase,\n    ShowProps,\n    TextField,\n    ReferenceField,\n    ReferenceManyField,\n    useShowContext,\n} from 'react-admin';\nimport { Box, Card, CardContent, Typography } from '@material-ui/core';\n\nimport { Avatar } from './Avatar';\nimport { ContactAside } from './ContactAside';\nimport { LogoField } from '../companies/LogoField';\nimport { NotesIterator } from '../notes';\nimport { Contact } from '../types';\n\nexport const ContactShow = (props: ShowProps) => (\n    <ShowBase {...props}>\n        <ContactShowContent />\n    </ShowBase>\n);\n\nconst ContactShowContent = () => {\n    const { record, loaded } = useShowContext<Contact>();\n    if (!loaded || !record) return null;\n    return (\n        <Box mt={2} display=\"flex\">\n            <Box flex=\"1\">\n                <Card>\n                    <CardContent>\n                        <Box display=\"flex\">\n                            <Avatar record={record} />\n                            <Box ml={2} flex=\"1\">\n                                <Typography variant=\"h5\">\n                                    {record.first_name} {record.last_name}\n                                </Typography>\n                                <Typography variant=\"body2\">\n                                    {`#${record.id} - `}\n                                    {record.title} at{' '}\n                                    <ReferenceField\n                                        source=\"company_id\"\n                                        reference=\"companies\"\n                                        link=\"show\"\n                                    >\n                                        <TextField source=\"name\" />\n                                    </ReferenceField>\n                                </Typography>\n                            </Box>\n                            <Box>\n                                <ReferenceField\n                                    source=\"company_id\"\n                                    reference=\"companies\"\n                                    link=\"show\"\n                                >\n                                    <LogoField />\n                                </ReferenceField>\n                            </Box>\n                        </Box>\n                        <ReferenceManyField\n                            target=\"contact_id\"\n                            reference=\"contactNotes\"\n                            sort={{ field: 'date', order: 'DESC' }}\n                        >\n                            <NotesIterator showStatus reference=\"contacts\" />\n                        </ReferenceManyField>\n                    </CardContent>\n                </Card>\n            </Box>\n            <ContactAside record={record} />\n        </Box>\n    );\n};\n","/* eslint-disable import/no-anonymous-default-export */\nimport * as React from 'react';\nimport {\n    FilterList,\n    FilterLiveSearch,\n    FilterListItem,\n    useGetIdentity,\n    useGetList,\n} from 'react-admin';\nimport { Box, Chip } from '@material-ui/core';\nimport AccessTimeIcon from '@material-ui/icons/AccessTime';\nimport TrendingUpIcon from '@material-ui/icons/TrendingUp';\nimport LocalOfferIcon from '@material-ui/icons/LocalOffer';\nimport SupervisorAccountIcon from '@material-ui/icons/SupervisorAccount';\nimport { endOfYesterday, startOfWeek, startOfMonth, subMonths } from 'date-fns';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { Status } from '../misc/Status';\nimport { TagChip } from '../tags/TagChip';\nimport { Tag } from '../types';\nimport { CollapsibleListFilter } from '../components/CollapsibleListFilter';\n\nconst useStyles = makeStyles(theme => ({\n    container: {\n        order: -1,\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n        minWidth: '13em',\n        [theme.breakpoints.down('xs')]: {\n            display: 'none',\n        }\n    },\n}));\n\nexport const ContactListFilter = () => {\n    const classes = useStyles();\n    const { identity } = useGetIdentity();\n    const { data, ids } = useGetList<Tag>(\n        'tags',\n        { page: 1, perPage: 10 },\n        { field: 'name', order: 'ASC' }\n    );\n    return (\n        <CollapsibleListFilter>\n            <FilterLiveSearch />\n            <FilterList label=\"Last seen\" icon={<AccessTimeIcon />}>\n                <FilterListItem\n                    label=\"Today\"\n                    value={{\n                        last_seen_gte: endOfYesterday().toISOString(),\n                        last_seen_lte: undefined,\n                    }}\n                />\n                <FilterListItem\n                    label=\"This week\"\n                    value={{\n                        last_seen_gte: startOfWeek(new Date()).toISOString(),\n                        last_seen_lte: undefined,\n                    }}\n                />\n                <FilterListItem\n                    label=\"Before this week\"\n                    value={{\n                        last_seen_gte: undefined,\n                        last_seen_lte: startOfWeek(new Date()).toISOString(),\n                    }}\n                />\n                <FilterListItem\n                    label=\"Before this month\"\n                    value={{\n                        last_seen_gte: undefined,\n                        last_seen_lte: startOfMonth(new Date()).toISOString(),\n                    }}\n                />\n                <FilterListItem\n                    label=\"Before last month\"\n                    value={{\n                        last_seen_gte: undefined,\n                        last_seen_lte: subMonths(\n                            startOfMonth(new Date()),\n                            1\n                        ).toISOString(),\n                    }}\n                />\n            </FilterList>\n            <FilterList label=\"Status\" icon={<TrendingUpIcon />}>\n                <FilterListItem\n                    label={\n                        <>\n                            Cold <Status status=\"cold\" />\n                        </>\n                    }\n                    value={{\n                        status: 'cold',\n                    }}\n                />\n                <FilterListItem\n                    label={\n                        <>\n                            Warm <Status status=\"warm\" />\n                        </>\n                    }\n                    value={{\n                        status: 'warm',\n                    }}\n                />\n                <FilterListItem\n                    label={\n                        <>\n                            Hot <Status status=\"hot\" />\n                        </>\n                    }\n                    value={{\n                        status: 'hot',\n                    }}\n                />\n                <FilterListItem\n                    label={\n                        <>\n                            In contract <Status status=\"in-contract\" />\n                        </>\n                    }\n                    value={{\n                        status: 'in-contract',\n                    }}\n                />\n            </FilterList>\n            <FilterList label=\"Tags\" icon={<LocalOfferIcon />}>\n                {ids &&\n                    data &&\n                    ids.map(id => (\n                        <FilterListItem\n                            key={id}\n                            label={<TagChip record={data[id]}/>}\n                            value={{ tags: [id] }}\n                        />\n                    ))}\n            </FilterList>\n            <FilterList\n                label=\"Account manager\"\n                icon={<SupervisorAccountIcon />}\n            >\n                <FilterListItem\n                    label=\"Me\"\n                    value={{\n                        sales_id: identity && identity.id,\n                    }}\n                />\n            </FilterList>\n        </CollapsibleListFilter>\n    );\n};\n","/* eslint-disable import/no-anonymous-default-export */\nimport * as React from 'react';\nimport {\n    List as RaList,\n    ListProps,\n    SimpleListLoading,\n    ReferenceField,\n    TextField,\n    useListContext,\n    ExportButton,\n    SortButton,\n    TopToolbar,\n    CreateButton,\n    Pagination,\n    useGetIdentity,\n    ListActionsProps,\n    FilterLiveSearch,\n} from 'react-admin';\nimport {\n    List,\n    ListItem,\n    ListItemAvatar,\n    ListItemIcon,\n    ListItemSecondaryAction,\n    ListItemText,\n    Checkbox,\n    Typography,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Link } from 'react-router-dom';\nimport { formatDistance } from 'date-fns';\n\nimport { Avatar } from './Avatar';\nimport { Status } from '../misc/Status';\nimport { TagsList } from '../tags/TagsList';\nimport { ContactListFilter } from './ContactListFilter';\nimport { Contact } from '../types';\nimport { ImportButton } from 'react-admin-import-csv';\n\nconst ContactListContent = () => {\n    const { data, ids, loaded, onToggleItem, selectedIds } = useListContext<\n        Contact\n    >();\n    const now = Date.now();\n    if (loaded === false) {\n        return <SimpleListLoading hasLeftAvatarOrIcon hasSecondaryText />;\n    }\n\n    return (\n        <List>\n            {ids.map(id => {\n                const contact = data[id];\n                return (\n                    <ListItem\n                        button\n                        key={id}\n                        component={Link}\n                        to={`/contacts/${id}/show`}\n                    >\n                        <ListItemIcon>\n                            <Checkbox\n                                edge=\"start\"\n                                checked={selectedIds.includes(id)}\n                                tabIndex={-1}\n                                disableRipple\n                                onClick={e => {\n                                    e.stopPropagation();\n                                    onToggleItem(id);\n                                }}\n                            />\n                        </ListItemIcon>\n                        <ListItemAvatar>\n                            <Avatar record={contact} />\n                        </ListItemAvatar>\n                        <ListItemText\n                            primary={`${contact.first_name} ${contact.last_name}`}\n                            secondary={\n                                <>\n                                    {`#${contact.id} - `}\n                                    {contact.title} at{' '}\n                                    <ReferenceField\n                                        record={contact}\n                                        source=\"company_id\"\n                                        reference=\"companies\"\n                                        basePath=\"/companies\"\n                                        link={false}\n                                    >\n                                        <TextField source=\"name\" />\n                                    </ReferenceField>{' '}\n                                    {!!contact.nb_notes &&\n                                        `- ${contact.nb_notes} notes `}\n                                    <TagsList record={contact} />\n                                </>\n                            }\n                        />\n                        <ListItemSecondaryAction>\n                            <Typography variant=\"body2\" color=\"textSecondary\">\n                                last activity{' '}\n                                {formatDistance(\n                                    new Date(contact.last_seen),\n                                    now\n                                )}{' '}\n                                ago <Status status={contact.status} />\n                            </Typography>\n                        </ListItemSecondaryAction>\n                    </ListItem>\n                );\n            })}\n        </List>\n    );\n};\n\nconst useStyles = makeStyles(theme => ({\n    createButton: {\n        marginLeft: theme.spacing(2),\n    },\n}));\n\nconst ContactListActions = (props: ListActionsProps) => {\n    const classes = useStyles();\n    return (\n        <TopToolbar>\n            <SortButton fields={['id', 'last_name', 'first_name', 'last_seen']} />\n            <ExportButton />\n            <ImportButton {...props} />\n            <CreateButton\n                basePath=\"/contacts\"\n                variant=\"contained\"\n                label=\"New Contact\"\n                className={classes.createButton}\n            />\n        </TopToolbar>\n    );\n};\n\nexport const ContactList = (props: ListProps) => {\n    const { identity } = useGetIdentity();\n    return identity ? (\n        <RaList\n            {...props}\n            actions={<ContactListActions />}\n            aside={<ContactListFilter />}\n            perPage={25}\n            pagination={<Pagination rowsPerPageOptions={[10, 25, 50, 100]} />}\n            filterDefaultValues={{ sales_id: identity?.id }}\n            sort={{ field: 'last_seen', order: 'DESC' }}\n        >\n            <ContactListContent />\n        </RaList>\n    ) : null;\n};\n","import * as React from 'react';\nimport {\n    EditBase,\n    EditProps,\n    TextInput,\n    ReferenceInput,\n    AutocompleteInput,\n    BooleanInput,\n    FormWithRedirect,\n    Toolbar,\n    useEditContext,\n} from 'react-admin';\nimport { Card, CardContent, Divider, Box } from '@material-ui/core';\nimport omit from 'lodash/omit';\n\nimport { Avatar } from './Avatar';\nimport { ContactAside } from './ContactAside';\nimport { Contact } from '../types';\n\nconst Spacer = () => <Box width={20} component=\"span\" />;\n\nconst ContactEditContent = () => {\n    const { record, loaded, save } = useEditContext<Contact>();\n    if (!loaded || !record) return null;\n    return (\n        <Box mt={2} display=\"flex\">\n            <Box flex=\"1\">\n                <FormWithRedirect\n                    record={record}\n                    redirect=\"show\"\n                    save={save}\n                    render={formProps => (\n                        <Card>\n                            <CardContent>\n                                <Box>\n                                    <Box display=\"flex\">\n                                        <Box mr={2}>\n                                            <Avatar record={record} />\n                                        </Box>\n                                        <Box flex=\"1\" mt={-1}>\n                                            <Box display=\"flex\">\n                                                <TextInput source=\"first_name\" />\n                                                <Spacer />\n                                                <TextInput source=\"last_name\" />\n                                            </Box>\n                                            <Box display=\"flex\">\n                                                <TextInput source=\"title\" />\n                                                <Spacer />\n                                                <ReferenceInput\n                                                    source=\"company_id\"\n                                                    reference=\"companies\"\n                                                >\n                                                    <AutocompleteInput optionText=\"name\" />\n                                                </ReferenceInput>\n                                            </Box>\n                                            <Divider />\n                                            <Box mt={2} width={430}>\n                                                <TextInput\n                                                    source=\"email\"\n                                                    fullWidth\n                                                />\n                                            </Box>\n                                            <Box display=\"flex\">\n                                                <TextInput source=\"phone_number1\" />\n                                                <Spacer />\n                                                <TextInput source=\"phone_number2\" />\n                                            </Box>\n                                            <Divider />\n                                            <Box mt={2} width={430}>\n                                                <TextInput\n                                                    source=\"background\"\n                                                    multiline\n                                                    fullWidth\n                                                />\n                                                <TextInput\n                                                    source=\"avatar\"\n                                                    fullWidth\n                                                />\n                                                <BooleanInput source=\"has_newsletter\" />\n                                            </Box>\n                                        </Box>\n                                    </Box>\n                                </Box>\n                            </CardContent>\n                            <Toolbar\n                                {...omit(formProps, [\n                                    // FIXME Not super user friendly way to remove warnings\n                                    'dirtyFields',\n                                    'dirtyFieldsSinceLastSubmit',\n                                    'dirtySinceLastSubmit',\n                                    'hasSubmitErrors',\n                                    'hasValidationErrors',\n                                    'initialValues',\n                                    'modifiedSinceLastSubmit',\n                                    'submitError',\n                                    'submitErrors',\n                                    'submitFailed',\n                                    'submitSucceeded',\n                                    'submitting',\n                                    'valid',\n                                ])}\n                            />\n                        </Card>\n                    )}\n                />\n            </Box>\n            <ContactAside record={record} link=\"show\" />\n        </Box>\n    );\n};\n\nexport const ContactEdit = (props: EditProps) => (\n    <EditBase {...props}>\n        <ContactEditContent />\n    </EditBase>\n);\n","import * as React from 'react';\nimport {\n    Create,\n    CreateProps,\n    TextInput,\n    ReferenceInput,\n    SelectInput,\n    AutocompleteInput,\n    BooleanInput,\n    SimpleForm,\n    Toolbar,\n    required,\n    useGetIdentity,\n    useCreateContext,\n} from 'react-admin';\nimport { Card, CardContent, Divider, Box, Avatar } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\n\nimport { Contact } from '../types';\n\nconst useStyles = makeStyles({\n    inline: {\n        display: 'inline-block',\n        marginLeft: '1em',\n        '&.first-child': {\n            marginLeft: 0,\n        },\n    },\n});\n\n\nexport const ContactCreate = (props: CreateProps) => {\n    const classes = useStyles();\n    const { identity } = useGetIdentity();\n    \n    if (!identity) return null;\n\n    const contactDefaultValue = () => ({ sales_id: identity && identity?.id });\n    const transform = (data: Contact) => ({\n        ...data,\n        last_seen: new Date(),\n        tags: [],\n    });\n    \n    return (\n        <Create {...props} actions={false}>\n            <SimpleForm \n                component={CustomLayout} \n                redirect=\"show\"\n                initialValues={contactDefaultValue}\n                transform={transform}\n            >\n                <TextInput \n                    source=\"first_name\" \n                    validate={[required()]} \n                    formClassName={clsx(classes.inline, 'first-child')}\n                />\n                <TextInput\n                    source=\"last_name\"\n                    validate={[required()]}\n                    formClassName={classes.inline}\n                />\n                <CustomDivider />\n                <TextInput \n                    source=\"title\"\n                    formClassName={clsx(classes.inline, 'first-child')}\n                />\n                <ReferenceInput\n                    source=\"company_id\"\n                    reference=\"companies\"\n                    formClassName={classes.inline}\n                >\n                    <AutocompleteInput optionText=\"name\" />\n                </ReferenceInput>\n                <CustomDivider />\n                <TextInput\n                    source=\"email\"\n                    fullWidth\n                />\n                <TextInput source=\"phone_number1\"\n                    formClassName={clsx(classes.inline, 'first-child')} />\n                <TextInput source=\"phone_number2\"\n                    formClassName={classes.inline} />\n                <CustomDivider />\n                <TextInput\n                    source=\"background\"\n                    multiline\n                    fullWidth\n                />\n                <TextInput\n                    source=\"avatar\"\n                    fullWidth\n                />\n                <ReferenceInput\n                    source=\"sales_id\"\n                    reference=\"sales\"\n                    label=\"Account manager\"\n                    helperText={false}\n                >\n                    <SelectInput\n                        optionText={(sales: any) =>\n                            `${sales.first_name} ${sales.last_name}`\n                        }\n                    />\n                </ReferenceInput>\n                <BooleanInput source=\"has_newsletter\" />\n            </SimpleForm>\n        </Create>\n    );\n};\n\n\nconst CustomLayout = ({ children }: \n    {children: any;}) => (\n    <CardContent>\n        <Box display=\"flex\">\n            <Box paddingTop={1}>\n                <Avatar />\n            </Box>\n            <Box ml={2} flex=\"1\" maxWidth={796}>\n                {children}\n            </Box>\n        </Box>\n    </CardContent>\n);\n\nconst CustomDivider = () => (\n    <Box mb={2}>\n        <Divider />\n    </Box>\n);","/* eslint-disable import/no-anonymous-default-export */\nimport { ContactShow } from './ContactShow';\nimport { ContactList } from './ContactList';\nimport { ContactEdit } from './ContactEdit';\nimport { ContactCreate } from './ContactCreate';\nimport ContactsIcon from '@material-ui/icons/Contacts';\n\nexport default {\n    list: ContactList,\n    show: ContactShow,\n    edit: ContactEdit,\n    create: ContactCreate,\n    icon: ContactsIcon,\n};\n","import * as React from 'react';\nimport {\n    TextField,\n    EmailField,\n    DateField,\n    ReferenceManyField,\n    EditButton,\n    ShowButton,\n    useListContext,\n    ReferenceField,\n    FunctionField,\n} from 'react-admin';\nimport { Box, Typography, Divider, List, ListItem } from '@material-ui/core';\nimport { TagsListEdit } from '../tags/TagsListEdit';\n\nimport { Task } from '../types';\nimport { CollapsibleAside } from '../components/CollapsibleAside';\n\nexport const TaskAside = ({\n    record,\n    link = 'edit',\n    ...props\n}: {\n    record?: Task;\n    link?: string;\n}) => {\n    if (!record) return null;\n\n    return (\n        <CollapsibleAside record={record} link={link} basePath=\"/tasks\">\n            <AsideContent />\n        </CollapsibleAside>\n    );\n};\n\nconst AsideContent = ({ \n    record \n}: { \n    record?: Task;\n}) => \n    record ? (\n        <>\n        </>\n    ) : null;","export const statuses = [\n    {id: 'pending', name: 'Pending', color: '#FFA000'},\n    {id: 'done', name: 'Done', color: '#CDDC39'},\n    {id: 'postponed', name: 'Postponed', color: '#2196F3'},\n]\n\nexport const getStatus = (id: string) => statuses.find(status => status.id == id);","import { Box, Chip } from '@material-ui/core';\nimport { Task } from '../types'\nimport { getStatus } from './status';\n\nexport const TaskChip = ({ record }: { record: Task; }) => {\n    const statusItem = getStatus(record.status);\n    const statusName = statusItem ? statusItem.name: '';\n    const statusColor = statusItem ? statusItem.color: '#000'\n    \n    return (\n         <>\n            { record && (\n                    <Chip\n                    label={statusName}\n                    size=\"small\"\n                    style={{\n                        backgroundColor: statusColor,\n                        border: 0,\n                        cursor: 'pointer',\n                    }}\n                />\n            )}\n        </>\n    );\n};","import * as React from 'react';\nimport { useState, FormEvent } from 'react';\nimport {\n    ShowBase,\n    ShowProps,\n    TextField,\n    ReferenceField,\n    ReferenceManyField,\n    Identifier,\n    useShowContext,\n    FunctionField, \n    Button, \n    useUpdate,\n    useRefresh,\n    useNotify\n} from 'react-admin';\nimport { \n    Avatar, \n    Box, \n    Card, \n    CardContent, \n    Chip, \n    Typography,\n} from '@material-ui/core';\nimport AssignmentTurnedInIcon from '@material-ui/icons/AssignmentTurnedIn';\nimport DoneIcon from '@material-ui/icons/Done';\n\nimport { TaskAside } from './TaskAside';\nimport { LogoField } from '../companies/LogoField';\nimport { NotesIterator } from '../notes';\nimport { Sale, Task } from '../types';\nimport { TaskChip } from './TaskChip';\n\nconst doneStatus = 'done';\n\nexport const TaskShow = (props: ShowProps) => (\n    <ShowBase {...props}>\n        <TaskShowContent />\n    </ShowBase>\n);\n\nconst TaskShowContent = () => {\n    const { record, loaded } = useShowContext<Task>();\n    const [update] = useUpdate();\n    const refresh = useRefresh();\n    const notify = useNotify();\n\n    if (!loaded || !record) return null;\n\n    return (\n        <Box mt={2} display=\"flex\">\n            <Box flex=\"1\">\n                <Card>\n                    <CardContent>\n                        <Box display=\"flex\" alignItems=\"flex-start\">\n                            <Avatar >\n                                <AssignmentTurnedInIcon />\n                            </Avatar>\n                            <Box ml={2} flex=\"1\">\n                                <Typography variant=\"h5\">\n                                    {record.text} {' '}\n                                    <TaskChip record={record} />\n                                </Typography>\n                                <Typography variant=\"body2\">\n                                <Typography component=\"span\" variant=\"body2\" color=\"textSecondary\">\n                                        Assigned to\n                                    </Typography>{' '}\n                                    <ReferenceField\n                                        record={record}\n                                        source=\"sales_id\"\n                                        reference=\"sales\"\n                                    >\n                                        <FunctionField<Sale>\n                                            source=\"last_name\"\n                                            render={record =>\n                                                record ? `${record.first_name} ${record.last_name}` : ''\n                                            }\n                                        />\n                                    </ReferenceField>\n                                </Typography>\n                            </Box>\n                            {\n                                record.status != doneStatus && \n                                <DoneButton record={record} />\n                            }\n                            <Box>\n                                <ReferenceField\n                                    source=\"company_id\"\n                                    reference=\"companies\"\n                                    link=\"show\"\n                                >\n                                    <LogoField />\n                                </ReferenceField>\n                            </Box>\n                        </Box>\n                    </CardContent>\n                </Card>\n            </Box>\n            <TaskAside record={record} />\n        </Box>\n    );\n};\n\n\nconst DoneButton = ({\n    record,\n}: {\n    record: Task;\n}) =>{\n    const [update] = useUpdate();\n    const refresh = useRefresh();\n    const notify = useNotify();\n\n    const handleDone = (event: any) => {\n        event.preventDefault();\n        update(\n            'tasks',\n            ((record && record.id) as unknown) as Identifier,\n            {\n                status: doneStatus,\n            },\n            record, {\n                onSuccess: () => {\n                    notify('Task is marked done', 'info');\n                    refresh();\n                },\n            },\n        );\n        return false;\n    };\n    return (\n        <Button\n            label=\"Done\"\n            variant=\"outlined\"\n            onClick={handleDone}\n        >\n            <DoneIcon />\n        </Button>\n    );\n}","import * as React from 'react';\nimport { Box } from '@material-ui/core';\n\nimport { getStatus } from './status';\n\nexport const TaskStatus = ({ status }: { status: string }) => {\n    const statusItem = getStatus(status);\n    const statusColor = statusItem ? statusItem.color : \"#000\";\n    return (\n        <Box\n            width={10}\n            height={10}\n            display=\"inline-block\"\n            borderRadius={5}\n            bgcolor={statusColor}\n            component=\"span\"\n        />\n    );\n};","/* eslint-disable import/no-anonymous-default-export */\nimport * as React from 'react';\nimport {\n    FilterList,\n    FilterLiveSearch,\n    FilterListItem,\n    useGetIdentity,\n    useGetList,\n} from 'react-admin';\nimport { Box, Chip } from '@material-ui/core';\nimport AccessTimeIcon from '@material-ui/icons/AccessTime';\nimport TrendingUpIcon from '@material-ui/icons/TrendingUp';\nimport LocalOfferIcon from '@material-ui/icons/LocalOffer';\nimport SupervisorAccountIcon from '@material-ui/icons/SupervisorAccount';\nimport { \n    endOfYesterday, \n    startOfWeek, \n    startOfMonth, \n    subMonths, \n    endOfToday,\n    endOfWeek,\n    addWeeks,\n    endOfMonth,\n } from 'date-fns';\n\nimport { TaskStatus } from './TaskStatus';\nimport { TagChip } from '../tags/TagChip';\nimport { Tag } from '../types';\nimport { statuses } from './status';\nimport { CollapsibleListFilter } from '../components/CollapsibleListFilter';\n\nexport const TaskListFilter = () => {\n    const { identity } = useGetIdentity();\n    return (\n        <CollapsibleListFilter>\n            <FilterLiveSearch />\n            <FilterList label=\"Due date\" icon={<AccessTimeIcon />}>                \n                <FilterListItem\n                    label=\"Today\"\n                    value={{\n                        due_date_gte: undefined,\n                        due_date_lte: endOfToday().toISOString(),\n                    }}\n                />\n                <FilterListItem\n                    label=\"This week\"\n                    value={{\n                        due_date_gte: undefined,\n                        due_date_lte: endOfWeek(new Date()).toISOString(),\n                    }}\n                />\n                <FilterListItem\n                    label=\"This month\"\n                    value={{\n                        due_date_gte: undefined,\n                        due_date_lte: endOfMonth(new Date()).toISOString(),\n                    }}\n                />\n            </FilterList>\n            <FilterList label=\"Status\" icon={<TrendingUpIcon />}>\n                {statuses.map(status =>(\n                    <FilterListItem\n                    label={\n                        <>\n                            {status.name} <TaskStatus status={status.id} />\n                        </>\n                    }\n                    value={{\n                        status: status.id,\n                    }}\n                />\n                ))}\n            </FilterList>\n            <FilterList\n                label=\"Account manager\"\n                icon={<SupervisorAccountIcon />}\n            >\n                <FilterListItem\n                    label=\"Me\"\n                    value={{\n                        sales_id: identity && identity.id,\n                    }}\n                />\n            </FilterList>\n        </CollapsibleListFilter>\n    );\n};\n","// in ./MarkDoneButton.js\nimport * as React from 'react';\nimport { BulkUpdateButton, BulkActionProps } from 'react-admin';\nimport DoneIcon from '@material-ui/icons/Done';\n\nconst doneState = { status: 'done' };\n\nconst MarkDoneButton = (props: BulkActionProps) => (\n    <BulkUpdateButton\n        {...props}\n        label=\"Mark checked\"\n        data={doneState}\n        icon={<DoneIcon/>}\n        mutationMode=\"pessimistic\"\n    />\n);\n\nexport default MarkDoneButton;","/* eslint-disable import/no-anonymous-default-export */\nimport * as React from 'react';\nimport { Fragment } from 'react';\nimport {\n    List as RaList,\n    ListProps,\n    SimpleListLoading,\n    ReferenceField,\n    TextField,\n    useListContext,\n    ExportButton,\n    SortButton,\n    TopToolbar,\n    CreateButton,\n    Pagination,\n    BulkDeleteButton,\n    useGetIdentity,\n    BulkActionProps,\n    ListActionsProps,\n    FunctionField,\n} from 'react-admin';\nimport {\n    List,\n    ListItem,\n    ListItemAvatar,\n    ListItemIcon,\n    ListItemSecondaryAction,\n    ListItemText,\n    Checkbox,\n    Typography,\n    Avatar,\n    Chip,\n} from '@material-ui/core';\nimport { red } from '@material-ui/core/colors';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Link } from 'react-router-dom';\nimport { formatDistance } from 'date-fns';\nimport AssignmentTurnedInIcon from '@material-ui/icons/AssignmentTurnedIn';\nimport { ImportButton } from \"react-admin-import-csv\";\nimport NotificationsActiveIcon from '@material-ui/icons/NotificationsActive';\n\nimport { Status } from '../misc/Status';\nimport { TagsList } from '../tags/TagsList';\nimport { TaskListFilter } from './TaskListFilter';\nimport { Sale, Task } from '../types';\nimport MarkDoneButton from './MarkDoneButton';\nimport { TaskStatus } from './TaskStatus';\n\nconst TaskListContent = () => {\n    const { data, ids, loaded, onToggleItem, selectedIds } = useListContext<\n        Task\n    >();\n    const now = Date.now();\n    if (loaded === false) {\n        return <SimpleListLoading hasLeftAvatarOrIcon hasSecondaryText />;\n    }\n\n    return (\n        <List>\n            {ids.map(id => {\n                const task = data[id];\n                const taskOverdue = (task.status !== 'done') &&  (task.due_date < (new Date()).toISOString());\n                return (\n                    <ListItem\n                        button\n                        key={id}\n                        component={Link}\n                        to={`/Tasks/${id}/show`}\n                    >\n                        <ListItemIcon>\n                            <Checkbox\n                                edge=\"start\"\n                                checked={selectedIds.includes(id)}\n                                tabIndex={-1}\n                                disableRipple\n                                onClick={e => {\n                                    e.stopPropagation();\n                                    onToggleItem(id);\n                                }}\n                            />\n                        </ListItemIcon>\n                        <ListItemAvatar>\n                            <Avatar\n                                style={taskOverdue ? { backgroundColor: red[400] } : undefined}\n                            >\n                                {taskOverdue\n                                ? <NotificationsActiveIcon />\n                                : <AssignmentTurnedInIcon />\n                                }\n                            </Avatar>\n                        </ListItemAvatar>\n                        <ListItemText\n                            primary={\n                                <>\n                                {task.text}\n                                </>\n                            }\n                            secondary={\n                                <>\n                                    <Typography component=\"span\" variant=\"body2\" color=\"textSecondary\">\n                                        Assigned to\n                                    </Typography>{' '}\n                                    <ReferenceField\n                                        record={task}\n                                        source=\"sales_id\"\n                                        reference=\"sales\"\n                                    >\n                                        <FunctionField<Sale>\n                                            source=\"last_name\"\n                                            render={record =>\n                                                record ? `${record.first_name} ${record.last_name}` : ''\n                                            }\n                                        />\n                                    </ReferenceField>\n                                </>\n                            }\n                        />\n                        <ListItemSecondaryAction>\n                            <Typography variant=\"body2\" color=\"textSecondary\">\n                                due in{' '}\n                                {formatDistance(\n                                    new Date(task.due_date),\n                                    now\n                                )}\n                                {' '}<TaskStatus status={task.status} />\n                            </Typography>\n                        </ListItemSecondaryAction>\n                    </ListItem>\n                );\n            })}\n        </List>\n    );\n};\n\nconst useActionStyles = makeStyles(theme => ({\n    createButton: {\n        marginLeft: theme.spacing(2),\n    },\n}));\nconst TaskListActions = (props: ListActionsProps) => {\n    const classes = useActionStyles();\n    return (\n        <TopToolbar>\n            <SortButton fields={['due_date', 'status']} />\n            <ExportButton />\n            <ImportButton {...props} />\n            <CreateButton\n                basePath=\"/Tasks\"\n                variant=\"contained\"\n                label=\"New Task\"\n                className={classes.createButton}\n            />\n        </TopToolbar>\n    );\n};\n\nconst TaskBulkActionButtons = (props: BulkActionProps) => (\n    <Fragment>\n        <MarkDoneButton {...props} />\n        {/* default bulk delete action */}\n        <BulkDeleteButton {...props} />\n    </Fragment>\n);\n\nexport const TaskList = (props: ListProps) => {\n    const { identity } = useGetIdentity();\n    return identity ? (\n        <RaList\n            {...props}\n            actions={<TaskListActions />}\n            aside={<TaskListFilter />}\n            bulkActionButtons={<TaskBulkActionButtons />}\n            perPage={25}\n            pagination={<Pagination rowsPerPageOptions={[10, 25, 50, 100]} />}\n            filterDefaultValues={{ sales_id: identity?.id, status: 'pending' }}\n            sort={{ field: 'due_date', order: 'ASC' }}\n        >\n            <TaskListContent />\n        </RaList>\n    ) : null;\n};\n","import * as React from 'react';\nimport {\n    EditBase,\n    EditProps,\n    TextInput,\n    ReferenceInput,\n    AutocompleteInput,\n    BooleanInput,\n    FormWithRedirect,\n    required,\n    Toolbar,\n    useEditContext,\n    DateInput,\n    SelectInput,\n} from 'react-admin';\nimport { Card, CardContent, Divider, Box, Avatar } from '@material-ui/core';\nimport omit from 'lodash/omit';\nimport AssignmentTurnedInIcon from '@material-ui/icons/AssignmentTurnedIn';\nimport { makeStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\n\nimport { TaskAside } from './TaskAside';\nimport { Task } from '../types';\nimport { statuses } from './status';\n\nconst Spacer = () => <Box width={20} component=\"span\" />;\nconst useStyles = makeStyles({\n    inline: {\n        display: 'inline-block',\n        marginLeft: '1em',\n        '&.first-child': {\n            marginLeft: 0,\n        },\n    },\n});\n\nconst TaskEditContent = () => {\n    const classes = useStyles();\n    const { record, loaded, save } = useEditContext<Task>();\n    if (!loaded || !record) return null;\n    return (\n        <Box mt={2} display=\"flex\">\n            <Box flex=\"1\">\n                <FormWithRedirect\n                    record={record}\n                    redirect=\"show\"\n                    save={save}\n                    render={formProps => (\n                        <Card>\n                            <CardContent>\n                                <Box>\n                                    <Box display=\"flex\">\n                                        <Box mr={2}>\n                                        <Avatar >\n                                            <AssignmentTurnedInIcon />\n                                        </Avatar>\n                                        </Box>\n                                        <Box flex=\"1\" mt={-1}>\n                                            <TextInput \n                                                source=\"text\"\n                                                label=\"Task\"\n                                                validate={[required()]}\n                                                fullWidth\n                                            />\n                                            <DateInput\n                                                source=\"due_date\"\n                                                className={clsx(classes.inline, 'first-child')}\n                                            />\n                                            <SelectInput\n                                                source=\"status\"\n                                                choices={statuses}\n                                                className={classes.inline}\n                                            />\n                                            \n                                            <ReferenceInput\n                                                source=\"sales_id\"\n                                                reference=\"sales\"\n                                                label=\"Assigned to\"\n                                                helperText={false}\n                                            >\n                                                <SelectInput\n                                                    optionText={(sales: any) =>\n                                                        `${sales.first_name} ${sales.last_name}`\n                                                    }\n                                                />\n                                            </ReferenceInput>\n                                        </Box>\n                                    </Box>\n                                </Box>\n                            </CardContent>\n                            <Toolbar\n                                {...omit(formProps, [\n                                    // FIXME Not super user friendly way to remove warnings\n                                    'dirtyFields',\n                                    'dirtyFieldsSinceLastSubmit',\n                                    'dirtySinceLastSubmit',\n                                    'hasSubmitErrors',\n                                    'hasValidationErrors',\n                                    'initialValues',\n                                    'modifiedSinceLastSubmit',\n                                    'submitError',\n                                    'submitErrors',\n                                    'submitFailed',\n                                    'submitSucceeded',\n                                    'submitting',\n                                    'valid',\n                                ])}\n                            />\n                        </Card>\n                    )}\n                />\n            </Box>\n            <TaskAside record={record} link=\"show\" />\n        </Box>\n    );\n};\n\nexport const TaskEdit = (props: EditProps) => (\n    <EditBase {...props}>\n        <TaskEditContent />\n    </EditBase>\n);\n","import * as React from 'react';\nimport {\n    Create,\n    CreateProps,\n    TextInput,\n    ReferenceInput,\n    SelectInput,\n    AutocompleteInput,\n    BooleanInput,\n    SimpleForm,\n    Toolbar,\n    required,\n    useGetIdentity,\n    DateInput,\n    useCreateContext,\n    SelectField,\n} from 'react-admin';\nimport { Card, CardContent, Divider, Box, Avatar } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\nimport AssignmentTurnedInIcon from '@material-ui/icons/AssignmentTurnedIn';\n\n\nimport { Task } from '../types';\nimport { statuses } from './status';\n\nconst useStyles = makeStyles({\n    inline: {\n        display: 'inline-block',\n        marginLeft: '1em',\n        '&.first-child': {\n            marginLeft: 0,\n        },\n    },\n});\n\n\nexport const TaskCreate = (props: CreateProps) => {\n    const classes = useStyles();\n    const { identity } = useGetIdentity();\n    \n    if (!identity) return null;\n\n    const defaultValue = () => ({\n        due_date: new Date(), \n        status: 'pending',\n        sales_id: identity && identity?.id,\n    });\n    const transform = (data: Task) => ({\n        ...data,\n    });\n    \n    return (\n        <Create {...props} actions={false}>\n            <SimpleForm \n                component={CustomLayout} \n                redirect=\"show\"\n                initialValues={defaultValue}\n                transform={transform}\n            >\n                <TextInput \n                    source=\"text\"\n                    label=\"Task\"\n                    validate={[required()]}\n                    fullWidth\n                />\n                <DateInput\n                    source=\"due_date\"\n                    formClassName={clsx(classes.inline, 'first-child')}\n                />\n                <SelectInput\n                    source=\"status\"\n                    choices={statuses}\n                    formClassName={classes.inline}\n                />\n                <ReferenceInput\n                    source=\"sales_id\"\n                    reference=\"sales\"\n                    label=\"Assigned to\"\n                    helperText={false}\n                >\n                    <SelectInput\n                        optionText={(sales: any) =>\n                            `${sales.first_name} ${sales.last_name}`\n                        }\n                    />\n                </ReferenceInput>\n            </SimpleForm>\n        </Create>\n    );\n};\n\n\nconst CustomLayout = ({ children }: \n    {children: any;}) => (\n    <CardContent>\n        <Box display=\"flex\">\n            <Box paddingTop={1}>\n                <Avatar >\n                    <AssignmentTurnedInIcon />\n                </Avatar>\n            </Box>\n            <Box ml={2} flex=\"1\" maxWidth={796}>\n                {children}\n            </Box>\n        </Box>\n    </CardContent>\n);\n\nconst CustomDivider = () => (\n    <Box mb={2}>\n        <Divider />\n    </Box>\n);","/* eslint-disable import/no-anonymous-default-export */\nimport { TaskShow } from './TaskShow';\nimport { TaskList } from './TaskList';\nimport { TaskEdit } from './TaskEdit';\nimport { TaskCreate } from './TaskCreate';\nimport FormatListBulletedIcon from '@material-ui/icons/FormatListBulleted';\n\nexport default {\n    list: TaskList,\n    show: TaskShow,\n    edit: TaskEdit,\n    create: TaskCreate,\n    icon: FormatListBulletedIcon,\n};\n","import * as React from 'react';\nimport { ReferenceField, useRedirect } from 'react-admin';\nimport { Card, Typography, Box } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Draggable } from 'react-beautiful-dnd';\n\nimport { LogoField } from '../companies/LogoField';\nimport { Deal } from '../types';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        marginBottom: theme.spacing(1),\n    },\n    cardContent: {\n        padding: theme.spacing(1),\n        display: 'flex',\n    },\n    cardText: {\n        marginLeft: theme.spacing(1),\n    },\n}));\n\nexport const DealCard = ({ deal, index }: { deal: Deal; index: number }) => {\n    const classes = useStyles();\n    const redirect = useRedirect();\n    if (!deal) return null;\n\n    const handleClick = () => {\n        redirect(`/deals/${deal.id}/show`);\n    };\n    return (\n        <Draggable draggableId={String(deal.id)} index={index}>\n            {(provided, snapshot) => (\n                <div\n                    className={classes.root}\n                    {...provided.draggableProps}\n                    {...provided.dragHandleProps}\n                    ref={provided.innerRef}\n                    onClick={handleClick}\n                >\n                    <Card\n                        style={{\n                            opacity: snapshot.isDragging ? 0.9 : 1,\n                            transform: snapshot.isDragging\n                                ? 'rotate(-2deg)'\n                                : '',\n                        }}\n                        elevation={snapshot.isDragging ? 3 : 1}\n                    >\n                        <Box p={1} display=\"flex\">\n                            <ReferenceField\n                                source=\"company_id\"\n                                record={deal}\n                                reference=\"companies\"\n                                resource=\"deals\"\n                                basePath=\"/deals\"\n                            >\n                                <LogoField size=\"small\" />\n                            </ReferenceField>\n                            <Box ml={1}>\n                                <Typography variant=\"body2\" gutterBottom>\n                                    {deal.name}\n                                </Typography>\n                                <Typography\n                                    variant=\"caption\"\n                                    color=\"textSecondary\"\n                                >\n                                    {deal.amount.toLocaleString('en-US', {\n                                        notation: 'compact',\n                                        style: 'currency',\n                                        currency: 'USD',\n                                        currencyDisplay: 'narrowSymbol',\n                                        minimumSignificantDigits: 3,\n                                    })}\n                                    , {deal.type}\n                                </Typography>\n                            </Box>\n                        </Box>\n                    </Card>\n                </div>\n            )}\n        </Draggable>\n    );\n};\n","import * as React from 'react';\nimport { Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Droppable } from 'react-beautiful-dnd';\nimport { Identifier, RecordMap } from 'react-admin';\n\nimport { DealCard } from './DealCard';\nimport { stageNames } from './stages';\nimport { Deal } from '../types';\n\nconst useStyles = makeStyles({\n    root: {\n        flex: 1,\n        paddingTop: 8,\n        paddingBottom: 16,\n        backgroundColor: '#eaeaee',\n        '&:first-child': {\n            paddingLeft: 5,\n            borderTopLeftRadius: 5,\n        },\n        '&:last-child': {\n            paddingRight: 5,\n            borderTopRightRadius: 5,\n        },\n    },\n    droppable: {\n        display: 'flex',\n        flexDirection: 'column',\n        borderRadius: 5,\n        padding: 5,\n        '&.isDraggingOver': {\n            backgroundColor: '#dadadf',\n        },\n    },\n});\n\nexport const DealColumn = ({\n    stage,\n    dealIds,\n    data,\n}: {\n    stage: string;\n    dealIds: Identifier[];\n    data: RecordMap<Deal>;\n}) => {\n    const classes = useStyles();\n    return (\n        <div className={classes.root}>\n            <Typography align=\"center\" variant=\"subtitle1\">\n                {/* @ts-ignore */}\n                {stageNames[stage]}\n            </Typography>\n            <Droppable droppableId={stage}>\n                {(droppableProvided, snapshot) => (\n                    <div\n                        ref={droppableProvided.innerRef}\n                        {...droppableProvided.droppableProps}\n                        className={\n                            classes.droppable +\n                            (snapshot.isDraggingOver ? ' isDraggingOver' : '')\n                        }\n                    >\n                        {dealIds.map((id, index) => (\n                            <DealCard key={id} index={index} deal={data[id]} />\n                        ))}\n                        {droppableProvided.placeholder}\n                    </div>\n                )}\n            </Droppable>\n        </div>\n    );\n};\n","import * as React from 'react';\nimport { useState, useEffect, useContext } from 'react';\nimport {\n    useMutation,\n    Identifier,\n    useListContext,\n    RecordMap,\n    DataProviderContext,\n} from 'react-admin';\nimport { Box } from '@material-ui/core';\nimport { DragDropContext, OnDragEndResponder } from 'react-beautiful-dnd';\nimport isEqual from 'lodash/isEqual';\n\nimport { DealColumn } from './DealColumn';\nimport { stages } from './stages';\nimport { Deal } from '../types';\n\ninterface DealsByColumn {\n    [stage: string]: Identifier[];\n}\n\nconst initialDeals: DealsByColumn = stages.reduce(\n    (obj, stage) => ({ ...obj, [stage]: [] }),\n    {}\n);\n\nconst getDealsByColumn = (\n    ids: Identifier[],\n    data: RecordMap<Deal>\n): DealsByColumn => {\n    // group deals by column\n    const columns = ids.reduce(\n        (acc, id) => {\n            acc[data[id].stage].push(id);\n            return acc;\n        },\n        stages.reduce((obj, stage) => ({ ...obj, [stage]: [] }), {} as any)\n    );\n    // order each column by index\n    stages.forEach(stage => {\n        columns[stage] = columns[stage].sort(\n            (a: Identifier, b: Identifier) => data[a].index - data[b].index\n        );\n    });\n    return columns;\n};\n\nexport const DealListContent = () => {\n    const {\n        data,\n        ids,\n        loaded,\n        page,\n        perPage,\n        currentSort,\n        filterValues,\n    } = useListContext<Deal>();\n\n    const [deals, setDeals] = useState<DealsByColumn>(\n        loaded ? getDealsByColumn(ids, data) : initialDeals\n    );\n    // we use the raw dataProvider to avoid too many updates to the Redux store after updates (which would create junk)\n    const dataProvider = useContext(DataProviderContext);\n\n    // FIXME: use refetch when available\n    const [refresh] = useMutation({\n        resource: 'deals',\n        type: 'getList',\n        payload: {\n            pagination: { page, perPage },\n            sort: currentSort,\n            filter: filterValues,\n        },\n    });\n\n    // update deals by columns when the dataProvider response updates\n    useEffect(() => {\n        if (!loaded) return;\n        const newDeals = getDealsByColumn(ids, data);\n        if (isEqual(deals, newDeals)) {\n            return;\n        }\n        setDeals(newDeals);\n    }, [data, ids, loaded]); // eslint-disable-line react-hooks/exhaustive-deps\n\n    if (!loaded) return null;\n\n    const onDragEnd: OnDragEndResponder = async result => {\n        const { destination, source, draggableId } = result;\n\n        if (!destination) {\n            return;\n        }\n\n        if (\n            destination.droppableId === source.droppableId &&\n            destination.index === source.index\n        ) {\n            return;\n        }\n\n        if (source.droppableId === destination.droppableId) {\n            // moving deal inside the same column\n\n            const column = Array.from(deals[source.droppableId]); // [4, 7, 23, 5] array of ids\n            const sourceDeal = data[column[source.index]];\n            const destinationDeal = data[column[destination.index]];\n\n            // update local state\n            // remove source deal from column\n            column.splice(source.index, 1);\n            // read source deal at destination\n            column.splice(destination.index, 0, Number(draggableId));\n            setDeals({\n                ...deals,\n                [source.droppableId]: column,\n            });\n\n            // update backend\n            // Fetch all the deals in this stage (because the list may be filtered, but we need to update even non-filtered deals)\n            const { data: columnDeals } = await dataProvider.getList('deals', {\n                sort: { field: 'index', order: 'ASC' },\n                pagination: { page: 1, perPage: 100 },\n                filter: { stage: source.droppableId },\n            });\n\n            if (source.index > destination.index) {\n                // deal moved up, eg\n                // dest   src\n                //  <------\n                // [4, 7, 23, 5]\n\n                await Promise.all([\n                    // for all deals between destination.index and source.index, increase the index\n                    ...columnDeals\n                        .filter(\n                            deal =>\n                                deal.index >= destinationDeal.index &&\n                                deal.index < sourceDeal.index\n                        )\n                        .map(deal =>\n                            dataProvider.update('deals', {\n                                id: deal.id,\n                                data: { index: deal.index + 1 },\n                                previousData: deal,\n                            })\n                        ),\n                    // for the deal that was moved, update its index\n                    dataProvider.update('deals', {\n                        id: sourceDeal.id,\n                        data: { index: destinationDeal.index },\n                        previousData: sourceDeal,\n                    }),\n                ]);\n\n                refresh();\n            } else {\n                // deal moved down, e.g\n                // src   dest\n                //  ------>\n                // [4, 7, 23, 5]\n\n                await Promise.all([\n                    // for all deals between source.index and destination.index, decrease the index\n                    ...columnDeals\n                        .filter(\n                            deal =>\n                                deal.index <= destinationDeal.index &&\n                                deal.index > sourceDeal.index\n                        )\n                        .map(deal =>\n                            dataProvider.update('deals', {\n                                id: deal.id,\n                                data: { index: deal.index - 1 },\n                                previousData: deal,\n                            })\n                        ),\n                    // for the deal that was moved, update its index\n                    dataProvider.update('deals', {\n                        id: sourceDeal.id,\n                        data: { index: destinationDeal.index },\n                        previousData: sourceDeal,\n                    }),\n                ]);\n\n                refresh();\n            }\n        } else {\n            // moving deal across columns\n\n            const sourceColumn = Array.from(deals[source.droppableId]); // [4, 7, 23, 5] array of ids\n            const destinationColumn = Array.from(\n                deals[destination.droppableId]\n            ); // [4, 7, 23, 5] arrays of ids\n            const sourceDeal = data[sourceColumn[source.index]];\n            const destinationDeal = data[destinationColumn[destination.index]]; // may be undefined if dropping at the end of a column\n\n            // update local state\n            sourceColumn.splice(source.index, 1);\n            destinationColumn.splice(destination.index, 0, draggableId);\n            setDeals({\n                ...deals,\n                [source.droppableId]: sourceColumn,\n                [destination.droppableId]: destinationColumn,\n            });\n\n            // update backend\n            // Fetch all the deals in both stages (because the list may be filtered, but we need to update even non-filtered deals)\n            const [\n                { data: sourceDeals },\n                { data: destinationDeals },\n            ] = await Promise.all([\n                dataProvider.getList('deals', {\n                    sort: { field: 'index', order: 'ASC' },\n                    pagination: { page: 1, perPage: 100 },\n                    filter: { stage: source.droppableId },\n                }),\n                dataProvider.getList('deals', {\n                    sort: { field: 'index', order: 'ASC' },\n                    pagination: { page: 1, perPage: 100 },\n                    filter: { stage: destination.droppableId },\n                }),\n            ]);\n\n            await Promise.all([\n                // decrease index on the deals after the source index in the source columns\n                ...sourceDeals\n                    .filter(deal => deal.index > sourceDeal.index)\n                    .map(deal =>\n                        dataProvider.update('deals', {\n                            id: deal.id,\n                            data: { index: deal.index - 1 },\n                            previousData: deal,\n                        })\n                    ),\n                // increase index on the deals after the destination index in the destination columns\n                ...destinationDeals\n                    .filter(deal =>\n                        destinationDeal\n                            ? deal.index >= destinationDeal.index\n                            : false\n                    )\n                    .map(deal =>\n                        dataProvider.update('deals', {\n                            id: deal.id,\n                            data: { index: deal.index + 1 },\n                            previousData: deal,\n                        })\n                    ),\n                // change the dragged deal to take the destination index and column\n                dataProvider.update('deals', {\n                    id: sourceDeal.id,\n                    data: {\n                        index: destinationDeal\n                            ? destinationDeal.index\n                            : (destinationDeals.length > 0)\n                            ? destinationDeals.pop()!.index + 1 \n                            : 0,\n                        stage: destination.droppableId,\n                    },\n                    previousData: sourceDeal,\n                }),\n            ]);\n\n            refresh();\n        }\n    };\n\n    return (\n        <DragDropContext onDragEnd={onDragEnd}>\n            <Box display=\"flex\">\n                {stages.map(stage => (\n                    <DealColumn\n                        stage={stage}\n                        dealIds={deals[stage]}\n                        data={data}\n                        key={stage}\n                    />\n                ))}\n            </Box>\n        </DragDropContext>\n    );\n};\n","export const types = [\n    'Other',\n    'Copywriting',\n    'Print project',\n    'UI Design',\n    'Website design',\n];\n\nexport const typeChoices = types.map(type => ({ id: type, name: type }));\n","import * as React from 'react';\nimport {\n    Create,\n    SimpleForm,\n    TextInput,\n    SelectInput,\n    NumberInput,\n    ReferenceInput,\n    AutocompleteInput,\n    required,\n    useRedirect,\n    useDataProvider,\n    useGetIdentity,\n} from 'react-admin';\nimport { Dialog } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { stageChoices } from './stages';\nimport { typeChoices } from './types';\nimport { Deal } from '../types';\n\nconst useStyles = makeStyles({\n    root: {\n        width: 500,\n    },\n});\n\nexport const DealCreate = ({ open }: { open: boolean }) => {\n    const classes = useStyles();\n    const redirect = useRedirect();\n    const dataProvider = useDataProvider();\n    const { identity } = useGetIdentity();\n\n    const handleClose = () => {\n        redirect('/deals');\n    };\n\n    const onSuccess = ({ data: deal }: { data: Deal }) => {\n        redirect('/deals');\n        // increase the index of all deals in the same stage as the new deal\n        dataProvider\n            .getList('deals', {\n                pagination: { page: 1, perPage: 50 },\n                sort: { field: 'id', order: 'ASC' },\n                filter: { stage: deal.stage },\n            })\n            .then(({ data: deals }) =>\n                Promise.all(\n                    deals\n                        .filter(oldDeal => oldDeal.id !== deal.id)\n                        .map(oldDeal =>\n                            dataProvider.update('deals', {\n                                id: oldDeal.id,\n                                data: { index: oldDeal.index + 1 },\n                                previousData: oldDeal,\n                            })\n                        )\n                )\n            );\n    };\n\n    return (\n        <Dialog open={open} onClose={handleClose}>\n            <Create\n                resource=\"deals\"\n                basePath=\"/deals\"\n                className={classes.root}\n                onSuccess={onSuccess}\n            >\n                <SimpleForm initialValues={{ index: 0, sales_id: identity && identity?.id }}>\n                    <TextInput\n                        source=\"name\"\n                        label=\"Deal name\"\n                        fullWidth\n                        validate={[required()]}\n                    />\n                    <TextInput\n                        source=\"description\"\n                        multiline\n                        rows={3}\n                        fullWidth\n                    />\n                    <ReferenceInput\n                        source=\"company_id\"\n                        reference=\"companies\"\n                        fullWidth\n                        validate={[required()]}\n                    >\n                        <AutocompleteInput optionText=\"name\" />\n                    </ReferenceInput>\n                    <SelectInput\n                        source=\"stage\"\n                        choices={stageChoices}\n                        fullWidth\n                        validate={[required()]}\n                        defaultValue=\"opportunity\"\n                    />\n                    <SelectInput\n                        source=\"type\"\n                        choices={typeChoices}\n                        fullWidth\n                    />\n                    <NumberInput source=\"amount\" fullWidth defaultValue={0} />\n                    <ReferenceInput\n                        source=\"sales_id\"\n                        reference=\"sales\"\n                        label=\"Account manager\"\n                        helperText={false}\n                        fullWidth\n                    >\n                        <SelectInput\n                            optionText={(sales: any) =>\n                                `${sales.first_name} ${sales.last_name}`\n                            }\n                        />\n                    </ReferenceInput>\n                </SimpleForm>\n            </Create>\n        </Dialog>\n    );\n};\n","import * as React from 'react';\nimport { useListContext } from 'react-admin';\nimport { Link } from '@material-ui/core';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n    ul: {\n        listStyle: 'none',\n        padding: 0,\n        margin: 0,\n        display: 'inline-block',\n    },\n    li: {\n        display: 'inline',\n        '&:after': {\n            content: '\", \"',\n        },\n        '&:last-child:after': {\n            content: '\"\"',\n        },\n    },\n});\n\nexport const ContactList = () => {\n    const { ids, data, loaded } = useListContext();\n    const classes = useStyles();\n    if (!loaded) return <div style={{ height: '2em' }} />;\n    return (\n        <ul className={classes.ul}>\n            {ids.map(id => (\n                <li key={id} className={classes.li}>\n                    <Link\n                        component={RouterLink}\n                        to={`/contacts/${id}`}\n                        variant=\"subtitle1\"\n                    >\n                        {data[id].first_name} {data[id].last_name}\n                    </Link>\n                </li>\n            ))}\n        </ul>\n    );\n};\n","import * as React from 'react';\nimport {\n    ShowBase,\n    TextField,\n    ReferenceField,\n    ReferenceManyField,\n    ReferenceArrayField,\n    useRecordContext,\n    useRedirect,\n    useRefresh,\n    useDataProvider,\n    Identifier,\n} from 'react-admin';\nimport {\n    Box,\n    Dialog,\n    DialogContent,\n    Typography,\n    Divider,\n    Button,\n} from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { format } from 'date-fns';\n\nimport { CompanyAvatar } from '../companies/CompanyAvatar';\nimport { NotesIterator } from '../notes';\nimport { ContactList } from './ContactList';\nimport { stageNames } from './stages';\n\nconst useStyles = makeStyles({\n    dialog: {\n        position: 'absolute',\n        top: 50,\n    },\n});\n\nexport const DealShow = ({ open, id }: { open: boolean; id: Identifier }) => {\n    const redirect = useRedirect();\n    const classes = useStyles();\n\n    const handleClose = () => {\n        redirect('/deals');\n    };\n\n    return (\n        <Dialog\n            open={open}\n            onClose={handleClose}\n            fullWidth\n            maxWidth=\"md\"\n            classes={{ paper: classes.dialog }}\n        >\n            <DialogContent>\n                <ShowBase resource=\"deals\" basePath=\"/deals\" id={id}>\n                    <DealShowContent />\n                </ShowBase>\n            </DialogContent>\n        </Dialog>\n    );\n};\n\nconst DealShowContent = () => {\n    const record = useRecordContext();\n    const dataProvider = useDataProvider();\n    const redirect = useRedirect();\n    const refresh = useRefresh();\n    \n    if (!record) return null;\n\n    const onDelete = async() =>{\n        const { data: columnDeals } = await dataProvider.getList('deals', {\n            sort: { field: 'index', order: 'ASC' },\n            pagination: { page: 1, perPage: 100 },\n            filter: { stage: record.droppableId },\n        });\n        await Promise.all([\n            ...columnDeals\n                .filter(\n                    deal => deal.index < record.index\n                )\n                .map(deal =>\n                    dataProvider.update('deals', {\n                        id: deal.id,\n                        data: { index: deal.index - 1 },\n                        previousData: deal,\n                    })\n                ),\n            // for the deal that was moved, update its index\n            dataProvider.delete('deals', {\n                id: record.id,\n                previousData: record,\n            }),\n        ]);\n        redirect('/deals');\n        refresh();\n    };\n\n    return (\n        <>\n            <Box display=\"flex\">\n                <Box\n                    width={100}\n                    display=\"flex\"\n                    flexDirection=\"column\"\n                    alignItems=\"center\"\n                >\n                    <ReferenceField\n                        source=\"company_id\"\n                        reference=\"companies\"\n                        link=\"show\"\n                    >\n                        <CompanyAvatar />\n                    </ReferenceField>\n                    <ReferenceField\n                        source=\"company_id\"\n                        reference=\"companies\"\n                        link=\"show\"\n                    >\n                        <TextField\n                            source=\"name\"\n                            align=\"center\"\n                            component=\"div\"\n                        />\n                    </ReferenceField>\n                </Box>\n                <Box ml={2} flex=\"1\">\n                    <Box display=\"flex\" justifyContent=\"space-between\" >\n                        <Typography variant=\"h5\">{record.name}</Typography>\n                        <Button\n                            variant=\"contained\"\n                            startIcon={<DeleteIcon />}            \n                            onClick={(e:any) =>{\n                                e.stopPropagation();\n                                onDelete();\n                            }}\n                        >\n                            Delete\n                        </Button>\n                    </Box>\n\n                    <Box display=\"flex\" mt={2}>\n                        <Box display=\"flex\" mr={5} flexDirection=\"column\">\n                            <Typography color=\"textSecondary\" variant=\"body2\">\n                                Start\n                            </Typography>\n                            <Typography variant=\"subtitle1\">\n                                {format(new Date(record.start_at), 'PP')}\n                            </Typography>\n                        </Box>\n\n                        <Box display=\"flex\" mr={5} flexDirection=\"column\">\n                            <Typography color=\"textSecondary\" variant=\"body2\">\n                                Budget\n                            </Typography>\n                            <Typography variant=\"subtitle1\">\n                                {record.amount.toLocaleString('en-US', {\n                                    notation: 'compact',\n                                    style: 'currency',\n                                    currency: 'USD',\n                                    currencyDisplay: 'narrowSymbol',\n                                    minimumSignificantDigits: 3,\n                                })}\n                            </Typography>\n                        </Box>\n\n                        <Box display=\"flex\" mr={5} flexDirection=\"column\">\n                            <Typography color=\"textSecondary\" variant=\"body2\">\n                                Type\n                            </Typography>\n                            <Typography variant=\"subtitle1\">\n                                {record.type}\n                            </Typography>\n                        </Box>\n\n                        <Box display=\"flex\" mr={5} flexDirection=\"column\">\n                            <Typography color=\"textSecondary\" variant=\"body2\">\n                                Stage\n                            </Typography>\n                            <Typography variant=\"subtitle1\">\n                                {/* @ts-ignore */}\n                                {stageNames[record.stage]}\n                            </Typography>\n                        </Box>\n                    </Box>\n\n                    <Box mt={2} mb={2}>\n                        <Box\n                            display=\"flex\"\n                            mr={5}\n                            flexDirection=\"column\"\n                            minHeight={48}\n                        >\n                            <Typography color=\"textSecondary\" variant=\"body2\">\n                                Contacts\n                            </Typography>\n                            <ReferenceArrayField\n                                source=\"contact_ids\"\n                                reference=\"contacts\"\n                            >\n                                <ContactList />\n                            </ReferenceArrayField>\n                        </Box>\n                    </Box>\n\n                    <Box mt={2} mb={2} style={{ whiteSpace: 'pre-line' }}>\n                        <Typography color=\"textSecondary\" variant=\"body2\">\n                            Description\n                        </Typography>\n                        <Typography>{record.description}</Typography>\n                    </Box>\n\n                    <Divider />\n\n                    <Box mt={2}>\n                        <ReferenceManyField\n                            target=\"deal_id\"\n                            reference=\"dealNotes\"\n                            sort={{ field: 'date', order: 'DESC' }}\n                        >\n                            <NotesIterator reference=\"deals\" />\n                        </ReferenceManyField>\n                    </Box>\n                </Box>\n            </Box>\n        </>\n    );\n};\n","import * as React from 'react';\nimport { useListFilterContext, useGetIdentity } from 'react-admin';\nimport { Switch, FormControlLabel } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        marginBottom: theme.spacing(1),\n        marginLeft: theme.spacing(1),\n    },\n}));\n\nexport const OnlyMineInput = ({ alwaysOn }: { alwaysOn: boolean }) => {\n    const {\n        filterValues,\n        displayedFilters,\n        setFilters,\n    } = useListFilterContext();\n    const { identity } = useGetIdentity();\n    const classes = useStyles();\n    const handleChange = () => {\n        const newFilterValues = { ...filterValues };\n        if (typeof filterValues.sales_id !== 'undefined') {\n            delete newFilterValues.sales_id;\n        } else {\n            newFilterValues.sales_id = identity && identity?.id;\n        }\n        setFilters(newFilterValues, displayedFilters);\n    };\n    return (\n        <div className={classes.root}>\n            <FormControlLabel\n                control={\n                    <Switch\n                        checked={typeof filterValues.sales_id !== 'undefined'}\n                        onChange={handleChange}\n                        color=\"primary\"\n                        name=\"checkedC\"\n                    />\n                }\n                label=\"Only companies I manage\"\n            />\n        </div>\n    );\n};\n\nOnlyMineInput.defaultProps = { source: 'sales_id' };\n","import * as React from 'react';\nimport {\n    CreateButton,\n    ExportButton,\n    FilterButton,\n    List,\n    ListProps,\n    SearchInput,\n    SelectInput,\n    TopToolbar,\n    useGetIdentity,\n} from 'react-admin';\nimport { Route } from 'react-router';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { DealListContent } from './DealListContent';\nimport { DealCreate } from './DealCreate';\nimport { DealShow } from './DealShow';\nimport { OnlyMineInput } from './OnlyMineInput';\nimport { typeChoices } from './types';\n\nexport const DealList = (props: ListProps) => {\n    const { identity } = useGetIdentity();\n    return identity ? (\n        <>\n            <List\n                {...props}\n                perPage={100}\n                sort={{ field: 'index', order: 'ASC' }}\n                filters={dealFilters}\n                filterDefaultValues={{ sales_id: identity && identity?.id }}\n                actions={<DealActions />}\n                pagination={false}\n                component=\"div\"\n            >\n                <DealListContent />\n            </List>\n            <Route path=\"/deals/create\">\n                {({ match }) => <DealCreate open={!!match} />}\n            </Route>\n            <Route path=\"/deals/:id/show\">\n                {({ match }) =>\n                    !!match ? (\n                        <DealShow open={!!match} id={match?.params?.id} />\n                    ) : null\n                }\n            </Route>\n        </>\n    ) : null;\n};\n\nconst dealFilters = [\n    <SearchInput source=\"q\" alwaysOn />,\n    <OnlyMineInput alwaysOn />,\n    <SelectInput source=\"type\" choices={typeChoices} />,\n];\n\nconst useActionStyles = makeStyles(theme => ({\n    createButton: {\n        marginLeft: theme.spacing(2),\n    },\n}));\nconst DealActions = () => {\n    const classes = useActionStyles();\n    return (\n        <TopToolbar>\n            <FilterButton />\n            <ExportButton />\n            <CreateButton\n                basePath=\"/deals\"\n                variant=\"contained\"\n                label=\"New Deal\"\n                className={classes.createButton}\n            />\n        </TopToolbar>\n    );\n};\n","/* eslint-disable import/no-anonymous-default-export */\nimport { DealList } from './DealList';\nimport MonetizationOnIcon from '@material-ui/icons/MonetizationOn';\n\nexport default {\n    list: DealList,\n    icon: MonetizationOnIcon,\n};\n","export const productFamilyCategories = [\n    'Safety laser scanners', \n    '2D LiDAR sensors', \n    '3D LiDAR sensors', \n    'Cleaning Robot',\n].map(category => ({ id: category, name: category }));","/* eslint-disable import/no-anonymous-default-export */\nimport * as React from 'react';\nimport {\n    FilterList,\n    FilterLiveSearch,\n    FilterListItem,\n    useGetIdentity,\n    useGetList,\n} from 'react-admin';\nimport { Box, Chip } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CategoryIcon from '@material-ui/icons/Category';\n\nimport { ProductFamily } from '../types';\nimport { CollapsibleListFilter } from '../components/CollapsibleListFilter';\nimport { productFamilyCategories } from '../productFamilies/productFamilyCategories';\n\nconst useStyles = makeStyles(theme => ({\n    familyList: {\n        maxHeight: theme.spacing(20), \n        overflow: 'auto',\n    },\n    categoryList: {\n        maxHeight: theme.spacing(20), \n        overflow: 'auto',\n    }\n}));\n\nexport const ProductListFilter = () => {\n    const classes = useStyles();\n    const { identity } = useGetIdentity();\n    const { data: familyData, ids: familyIds } = useGetList<ProductFamily>(\n        'productFamilies',\n        { page: 1, perPage: 1000 },\n        { field: 'name', order: 'ASC' }\n    );\n    return (\n        <CollapsibleListFilter>\n            <FilterLiveSearch />\n\n            <FilterList label=\"Families\" icon={<CategoryIcon />}>\n                <div className={classes.familyList}>\n                    {familyIds &&\n                        familyData &&\n                        familyIds.map(id => (\n                            <FilterListItem\n                                key={id}\n                                label={<Chip label={familyData[id].name} size=\"small\"/>}\n                                value={{ family_id: id }}\n                            />\n                        ))}\n                </div>\n            </FilterList>\n\n            <FilterList label=\"Categories\" icon={<CategoryIcon />}>\n                <div className={classes.categoryList}>\n                    {productFamilyCategories.map(category => (\n                            <FilterListItem\n                                key={category.id}\n                                label={category.name}\n                                value={{ 'family.category': category.id }}\n                            />\n                    ))}\n                </div>\n            </FilterList>\n        </CollapsibleListFilter>\n    );\n};\n","import * as React from 'react';\nimport {\n    List,\n    ListProps,\n    TopToolbar,\n    ExportButton,\n    CreateButton,\n    Pagination,\n    useGetIdentity,\n    ListActionsProps,\n} from 'react-admin';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { ProductGridList } from './ProductGridList';\nimport { ProductListFilter } from './ProductListFilter';\nimport { ImportButton } from 'react-admin-import-csv';\n\nexport const ProductList = (props: ListProps) => {\n    const { identity } = useGetIdentity();\n    return identity ? (\n        <List\n            {...props}\n            actions={<ProductListActions />}\n            aside={<ProductListFilter />}\n            filterDefaultValues={{ }}\n            pagination={<Pagination rowsPerPageOptions={[15, 25, 50, 100]} />}\n            perPage={25}\n            sort={{ field: 'model', order: 'ASC' }}\n            component=\"div\"\n        >\n            <ProductGridList />\n        </List>\n    ) : null;\n};\n\nconst useActionStyles = makeStyles(theme => ({\n    createButton: {\n        marginLeft: theme.spacing(2),\n    },\n}));\n\nconst ProductListActions = (props: ListActionsProps) => {\n    const classes = useActionStyles();\n    return (\n        <TopToolbar>\n            <ExportButton />\n            <ImportButton {...props} />\n            <CreateButton\n                basePath=\"/products\"\n                variant=\"contained\"\n                label=\"New Product\"\n                className={classes.createButton}\n            />\n        </TopToolbar>\n    );\n};\n","export const productProprtyCategories = [\n    'General', \n    'Safety', \n    'Mechanics/Electronics', \n    'Performance', \n    'Interfaces', \n    'Ambient data',  \n].map(category => ({ id: category, name: category }));","import Reacct from 'react';\nimport {\n    Select,\n    MenuItem,\n } from '@material-ui/core';\n\nconst ChoiceSelector = (props: ChoiceSelectorProps) => {\n    const { label, value, onChange, choices} = props;\n    return (\n        <Select\n            label={label}\n            value={value}\n            onChange={(event:any) => onChange(event.target.value)}\n        >\n            <MenuItem value=\"\"><em>None</em></MenuItem>\n            {choices.map(choice => (\n                <MenuItem\n                    key={choice.id}\n                    value={choice.id}\n                >\n                    {choice.name}\n                </MenuItem>\n            ))}\n        </Select>\n    );\n};\n\ninterface Choice {\n    id: string;\n    name: String;\n};\n\nexport interface ChoiceSelectorProps {\n    label: string;\n    value: string;\n    onChange: any;\n    choices: Choice[];\n};\n\nexport default ChoiceSelector;","import Reacct, { useState, FormEvent } from 'react';\nimport {\n    useCreateSuggestionContext,\n    useCreate,\n    ReferenceInput,\n} from 'react-admin';\nimport {\n    Dialog, \n    DialogContent,\n    DialogActions,\n    TextField,\n    Button,\n    DialogTitle,\n    Select,\n    MenuItem,\n } from '@material-ui/core';\n import { makeStyles } from '@material-ui/core/styles';\nimport { productProprtyCategories } from './productProprtyCategories';\nimport ChoiceSelector from '../components/ChoiceSelector';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        display: 'flex',\n        flexDirection: 'column',\n    },\n}));\n\nexport const CreatePropertyType = () => {\n    const classes = useStyles();\n    const { filter, onCancel, onCreate } = useCreateSuggestionContext();\n    const [category, setCategory] = useState('');\n    const [name, setName] = useState(filter || '');\n    const [unit, setUnit] = useState('');\n    const [synonyms, setSynonyms] = useState('');\n    const [create] = useCreate('propertyTypes');\n\n    const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        create(\n            {\n                payload: {\n                    data: {\n                        name: name,\n                        unit: unit,\n                        synonyms: synonyms,\n                        category: category,\n                    },\n                },\n            },\n            {\n                onSuccess: ({ data }: {data: any;}) => {\n                    setName('');\n                    setUnit('');\n                    setSynonyms('');\n                    setCategory('');\n                    onCreate(data);\n                },\n            }\n        );\n    };\n\n    return (\n        <Dialog open onClose={onCancel}>\n            <DialogTitle>Add new Product Property Type</DialogTitle>\n            <form onSubmit={handleSubmit}>\n                <DialogContent>\n                    <div className={classes.root}>\n                        <ChoiceSelector\n                            label=\"Category\"\n                            value={category}\n                            onChange={setCategory}\n                            choices={productProprtyCategories}\n                        />\n                        <TextField\n                            label=\"New type name\"\n                            value={name}\n                            onChange={event => setName(event.target.value)}\n                            autoFocus\n                            required\n                        />\n                        <TextField\n                            label=\"Unit\"\n                            value={unit}\n                            onChange={event => setUnit(event.target.value)}\n                        />\n                        <TextField\n                            label=\"Commma separated synonyms\"\n                            value={synonyms}\n                            onChange={event => setSynonyms(event.target.value)}\n                        />\n                    </div>\n                </DialogContent>\n                <DialogActions>\n                    <Button type=\"submit\" disabled={!name}>Add</Button>\n                    <Button onClick={onCancel}>Cancel</Button>\n                </DialogActions>\n            </form>\n        </Dialog>\n    );\n};","import { \n    AutocompleteInput, \n    ReferenceInput, \n    SimpleFormIterator,\n    SimpleFormIteratorProps, \n    TextInput, \n} from \"react-admin\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport classNames from 'classnames';\n\nimport { CreatePropertyType } from \"./CreatePropertyType\";\n\nconst useStyles = makeStyles(theme => ({\n    inline: {\n        display: 'inline-block',\n        marginLeft: theme.spacing(1),\n        width: '32%',\n        minWidth: theme.spacing(10),\n        '&.first-child': {\n            marginLeft: 0,\n        },\n        [theme.breakpoints.down('xs')]: {\n            display: 'block',\n            marginLeft: 0,\n            width: '100%',\n            margin: 0,\n        }\n    },\n    \n}));\n\nexport const PropertyFormIterator = (props: SimpleFormIteratorProps) => {\n    const classes = useStyles();\n    return (\n        <SimpleFormIterator {...props} >\n            <ReferenceInput\n                source=\"type_id\"\n                reference=\"propertyTypes\"\n                label=\"Type\"\n                formClassName={classNames(classes.inline, 'first-child')}\n                fullWidth\n            >\n                <AutocompleteInput \n                    optionText=\"name\" \n                    create={<CreatePropertyType />}\n                />\n            </ReferenceInput>\n            <TextInput \n                source=\"property_value\" \n                label=\"Value\"\n                formClassName={classes.inline}\n                fullWidth\n            />\n            <TextInput \n                source=\"condition\"  \n                label=\"Condition\"\n                formClassName={classes.inline}\n                fullWidth\n            />\n        </SimpleFormIterator>\n    );\n};","import Reacct, { useState, FormEvent } from 'react';\nimport {\n    useCreateSuggestionContext,\n    useCreate,\n} from 'react-admin';\nimport {\n    Dialog, \n    DialogContent,\n    DialogActions,\n    TextField,\n    Button,\n    Select,\n    MenuItem,\n    Box,\n    DialogTitle,\n } from '@material-ui/core';\n import { ProductFamily } from '../types';\n import { productFamilyCategories } from './productFamilyCategories';\nimport ChoiceSelector from '../components/ChoiceSelector';\n\nexport const CreateProductFamily = () => {\n    const { filter, onCancel, onCreate } = useCreateSuggestionContext();\n    const [name, setName] = useState(filter || '');\n    const [category, setCategory] = useState('');\n    const [website, setWebsite] = useState('');\n    const [image, setImage] = useState('');\n    const [create] = useCreate('productFamilies');\n\n    const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        create(\n            {\n                payload: {\n                    data: {\n                        name: name,\n                        image: image,\n                        website: website,\n                        category: category,\n                    },\n                },\n            },\n            {\n                onSuccess: ({ data }: {data: ProductFamily;}) => {\n                    setName('');\n                    setImage('');\n                    setWebsite('');\n                    setCategory('');\n                    onCreate(data);\n                },\n            }\n        );\n    };\n\n    return (\n        <Dialog open onClose={onCancel}>\n            <DialogTitle>New Product Category</DialogTitle>\n            <form onSubmit={handleSubmit}>\n                <DialogContent>\n                    <Box display=\"flex\" flexDirection=\"column\">\n                        <ChoiceSelector\n                            label=\"Category\"\n                            value={category}\n                            onChange={setCategory}\n                            choices={productFamilyCategories}\n                        />\n\n                        <TextField\n                            label=\"New category name\"\n                            value={name}\n                            onChange={event => setName(event.target.value)}\n                            autoFocus\n                        />\n                        <TextField\n                            label=\"Website\"\n                            value={website}\n                            onChange={event => setWebsite(event.target.value)}\n                            autoFocus\n                        />\n                        <TextField\n                            label=\"Image\"\n                            value={image}\n                            onChange={event => setImage(event.target.value)}\n                            autoFocus\n                        />\n                    </Box>\n                </DialogContent>\n                <DialogActions>\n                    <Button type=\"submit\">Save</Button>\n                    <Button onClick={onCancel}>Cancel</Button>\n                </DialogActions>\n            </form>\n        </Dialog>\n    );\n};","import * as React from 'react';\nimport {\n    Create,\n    CreateProps,\n    ReferenceInput,\n    TabbedForm,\n    TextInput,\n    FormTab,\n    required,\n    AutocompleteInput,\n    useGetIdentity,\n    ArrayInput,\n    SimpleFormIterator,\n    ReferenceArrayInput,\n} from 'react-admin';\nimport RichTextInput from 'ra-input-rich-text';\nimport { Box, CardContent, Divider, Avatar, useTheme } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport BusinessIcon from '@material-ui/icons/Business';\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\nimport clsx from 'clsx';\nimport { CreatePropertyType } from './CreatePropertyType';\nimport { PropertyFormIterator } from './PropertyFormIterator';\nimport { CreateProductFamily } from '../productFamilies/CreateProductFamily';\n\n\nconst useStyles = makeStyles(theme => ({\n    inline: {\n        display: 'inline-block',\n        marginLeft: '1em',\n        '&.first-child': {\n            marginLeft: 0,\n        },\n    },\n    propertyContainer: {\n        display: 'flex',\n        gap: theme.spacing(1),\n        minWidth: '500px',\n    },\n}));\n\nexport const ProductCreate = (props: CreateProps) => {\n    const classes = useStyles();\n    const { identity } = useGetIdentity();\n    const theme = useTheme();\n\n    const defaultValue = () => ({ });\n\n    return (\n        <Create {...props} actions={false} >\n            <TabbedForm redirect=\"show\">\n                <FormTab label=\"General\">\n                    <ReferenceInput \n                        label=\"Comapny\" \n                        source=\"company_id\" \n                        reference=\"companies\"\n                        fullWidth\n                    >\n                        <AutocompleteInput optionText=\"name\" />\n                    </ReferenceInput>\n                    <ReferenceInput \n                        label=\"Product Family\" \n                        source=\"family_id\" \n                        reference=\"productFamilies\"\n                        fullWidth\n                    >\n                        <AutocompleteInput \n                            optionText=\"name\" \n                            create={<CreateProductFamily />}\n                        />\n                    </ReferenceInput>\n                    <TextInput source=\"model\" validate={required()} fullWidth />\n                    <TextInput source=\"code\" fullWidth />\n                    <TextInput source=\"website\" fullWidth />\n                    <TextInput source=\"image\" fullWidth />\n                    <TextInput \n                        source=\"description\"\n                        multiline\n                        rows={3} \n                        fullWidth \n                    />\n                </FormTab>\n                <FormTab label=\"Properties\">\n                    <ArrayInput\n                        source=\"properties\"\n                    >\n                        <PropertyFormIterator />\n                    </ArrayInput>\n                </FormTab>\n            </TabbedForm>\n        </Create>\n    );\n};\n\nconst CustomLayout = ({ children }: \n    {children: any;}) => (\n    <CardContent>\n        <Box display=\"flex\">\n            <Box paddingTop={1}>\n                <Avatar>\n                    <ShoppingCartIcon />\n                </Avatar>\n            </Box>\n            <Box ml={2} flex=\"1\" maxWidth=\"80%\">\n                {children}\n            </Box>\n        </Box>\n    </CardContent>\n);\n\nconst CustomDivider = () => (\n    <Box mb={2}>\n        <Divider />\n    </Box>\n);\n","import * as React from 'react';\nimport { Avatar } from '@material-ui/core';\nimport BusinessIcon from '@material-ui/icons/Business';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\nimport { Product } from '../types';\n\nconst useStyles = makeStyles({\n    image: {\n        objectFit: 'contain',\n    },\n});\n\nconst sizeInPixel = {\n    medium: 42,\n    small: 20,\n};\n\nexport const ProductImageField = ({\n    record,\n    source,\n    size = 'medium',\n}: {\n    record?: Product;\n    source?: string;\n    size?: 'small' | 'medium';\n}) => {\n    const classes = useStyles();\n    if (!record) return null;\n    if(!record.image) return (\n        <Avatar>\n            <ShoppingCartIcon />\n        </Avatar>\n    )\n    return (\n        <img\n            src={process.env.PUBLIC_URL + record.image}\n            alt={record.model}\n            title={record.model}\n            width={sizeInPixel[size]}\n            height={sizeInPixel[size]}\n            className={classes.image}\n        />\n    );\n};\n","import * as React from 'react';\nimport {\n    TextField,\n    ReferenceField,\n} from 'react-admin';\nimport { Box, Typography, Divider, Link } from '@material-ui/core';\n\nimport { Product, Sale } from '../types';\nimport { CollapsibleAside } from '../components/CollapsibleAside';\n\nexport const ProductAside = ({\n    record,\n    link = 'edit',\n}: {\n    record?: Product;\n    link?: string;\n}) =>{\n    if (!record) return null;\n\n    return (\n        <CollapsibleAside record={record} link={link} basePath=\"/products\">\n            <AsideContent />\n        </CollapsibleAside>\n    );\n};\n\nconst AsideContent = ({ \n    record \n}: { \n    record?: Product;\n}) => \n    record ? (\n        <>\n            <Typography variant=\"subtitle2\">Product info</Typography>\n            <Divider />\n\n            <Box mt={1} display=\"flex\" gridGap={2}>\n                Company: \n                <ReferenceField\n                    record={record}\n                    source=\"company_id\"\n                    reference=\"companies\"\n                    link=\"show\"\n                >\n                    <TextField source=\"name\" />\n                </ReferenceField>\n            </Box>\n\n            <Box mt={1} display=\"flex\" gridGap={2}>\n                Family: \n                <ReferenceField\n                    record={record}\n                    source=\"family_id\"\n                    reference=\"productFamilies\"\n                    link=\"show\"\n                >\n                    <TextField source=\"name\" />\n                </ReferenceField>\n            </Box>\n\n            <Box mt={1}>\n                Code: <TextField source=\"code\" record={record} />\n            </Box>\n            {record.website && (\n                <Box mt={1}>\n                    Website: <Link href={record.website} target=\"_blank\" rel=\"noreferrer\">Link</Link>\n                </Box>\n            )}\n\n            <Box mt={3}>\n                <Typography variant=\"subtitle2\">Description</Typography>\n                <Divider />\n\n                <Box mt={1}>\n                    <TextField source=\"description\" />\n                </Box>\n\n            </Box>\n        </>\n    ) : null;","import * as React from 'react';\nimport { useState, ChangeEvent } from 'react';\nimport {\n    ShowBase,\n    ShowProps,\n    EditButton,\n    TextField,\n    ReferenceManyField,\n    SelectField,\n    ReferenceField,\n    ImageField,\n    Datagrid,\n    useShowContext,\n    useRecordContext,\n    useListContext,\n    ReferenceArrayField,\n    SingleFieldList,\n    ChipField,\n    Pagination,\n} from 'react-admin';\nimport {\n    Avatar as MuiAvatar,\n    Box,\n    Button,\n    Card,\n    CardContent,\n    Typography,\n    List,\n    ListItem,\n    ListItemAvatar,\n    ListItemText,\n    ListItemSecondaryAction,\n    Tabs,\n    Tab,\n    Chip,\n    Divider,\n} from '@material-ui/core';\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { NotesIterator } from '../notes';\n\n\nimport { ProductImageField } from './ProductImageField';\nimport { ProductAside } from './ProductAside';\nimport { Product, ProductPrperty } from '../types';\nimport { LogoField } from '../companies/LogoField';\nimport { CompanyGridList } from '../companies/CompanyGridList';\nimport { CompanyCard } from '../companies/CompanyCard';\n\nexport const ProductShow = (props: ShowProps) => (\n    <ShowBase {...props}>\n        <ProductShowContent />\n    </ShowBase>\n);\n\nconst ProductShowContent = () => {\n    const { record, loaded } = useShowContext<Product>();\n    const [value, setValue] = useState(0);\n    const handleChange = (event: ChangeEvent<{}>, newValue: number) => {\n        setValue(newValue);\n    };\n    if (!loaded || !record) return null;\n    return (\n        <Box mt={2} display=\"flex\">\n            <Box flex=\"1\">\n                <Card>\n                    <CardContent>\n                        <Box display=\"flex\" mb={1}>\n                            <ProductImageField record={record as any} />\n                            <Box ml={2} flex=\"1\">\n                                <Box display=\"flex\" gridGap={4}>\n                                    <Typography variant=\"h5\">{record.model}</Typography>\n                                </Box>\n                            </Box>\n                            <Box>\n                                <ReferenceField\n                                    source=\"company_id\"\n                                    reference=\"companies\"\n                                    link=\"show\"\n                                >\n                                    <LogoField />\n                                </ReferenceField>\n                            </Box>\n                        </Box>\n                        <Tabs\n                            value={value}\n                            indicatorColor=\"primary\"\n                            textColor=\"primary\"\n                            onChange={handleChange}\n                            variant=\"scrollable\"\n                            scrollButtons=\"auto\"\n                        >\n                            <Tab\n                                label={\n                                    record.nb_notes > 1\n                                        ? `${record.nb_notes} Notes`\n                                        : `${record.nb_notes} Note`\n                                }\n                            />\n                            <Tab\n                                label={\n                                    record.nb_properties > 1\n                                        ? `${record.nb_properties} Properties`\n                                        : `${record.nb_properties} Property`\n                                }\n                            />\n                            <Tab\n                                label={\n                                    record.nb_used_by > 1\n                                        ? `Used by ${record.nb_used_by} Companies`\n                                        : `Used by ${record.nb_used_by} Company`\n                                }\n                            />\n                        </Tabs>\n                        <Divider />\n                        <TabPanel value={value} index={0}>\n                            <ReferenceManyField\n                                reference=\"productNotes\"\n                                target=\"product_id\"\n                            >\n                                 <NotesIterator reference=\"products\" />\n                            </ReferenceManyField>\n                        </TabPanel>\n                        <TabPanel value={value} index={1}>\n                            <ReferenceManyField reference=\"productProperties\" target=\"product_id\" addLabel={false}>\n                                <Datagrid>\n                                    <ReferenceField\n                                            source=\"type_id\"\n                                            reference=\"propertyTypes\"\n                                            link={false}\n                                        >\n                                        <TextField source=\"name\" />\n                                    </ReferenceField>\n                                    <TextField source=\"property_value\" />\n                                    <ReferenceField\n                                            source=\"type_id\"\n                                            reference=\"propertyTypes\"\n                                            link={false}\n                                        >\n                                        <TextField source=\"unit\" />\n                                    </ReferenceField>\n                                    <TextField source=\"condition\" />\n    \n                                </Datagrid>\n                            </ReferenceManyField>\n                        </TabPanel>\n                        <TabPanel value={value} index={2}>\n                            <Box mt={1}>\n                            <ReferenceArrayField\n                                reference=\"companies\"\n                                source=\"used_by_companies\"\n                                pagination={<Pagination rowsPerPageOptions={[15, 25, 50, 100]} />}\n                                perPage={25}\n                            >\n                                <CompanyGridList />\n                            </ReferenceArrayField>\n                            </Box>\n                        </TabPanel>\n                    </CardContent>\n                </Card>\n            </Box>\n            <ProductAside record={record} />\n        </Box>\n    );\n};\n\ninterface TabPanelProps {\n    children?: React.ReactNode;\n    index: any;\n    value: any;\n}\n\nconst TabPanel = (props: TabPanelProps) => {\n    const { children, value, index, ...other } = props;\n\n    return (\n        <div\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`wrapped-tabpanel-${index}`}\n            aria-labelledby={`wrapped-tab-${index}`}\n            {...other}\n        >\n            {children}\n        </div>\n    );\n};\n\nconst ProductPrpertiesIterator = () => {\n    const { data, ids, loaded } = useListContext<ProductPrperty>();\n    const record = useRecordContext();\n\n    const now = Date.now();\n    if (!loaded) return null;\n    return (\n        <Box>\n            <List>\n                {ids.map(id => {\n                    const productProperty = data[id];\n                    return (\n                        <ListItem\n                            button\n                            key={id}\n                            component={RouterLink}\n                            to={`/productProperties/${id}/show`}\n                        >\n                            {/* <ListItemAvatar>\n                                <Avatar record={productProperty} />\n                            </ListItemAvatar>\n                            <ListItemText\n                                primary={`${productProperty.first_name} ${productProperty.last_name}`}\n                                secondary={\n                                    <>\n                                        {productProperty.title}{' '}\n                                        {productProperty.nb_notes &&\n                                        `- ${productProperty.nb_notes} notes `}\n                                    </>\n                                }\n                            />\n                            <ListItemSecondaryAction>\n                                <Typography variant=\"body2\" color=\"textSecondary\">\n                                    last activity{' '}\n                                    {formatDistance(\n                                        new Date(productProperty.last_seen),\n                                        now\n                                    )}{' '}\n                                    ago <Status status={productProperty.status} />\n                                </Typography>\n                            </ListItemSecondaryAction> */}\n                        </ListItem>\n                    );\n                })}\n            </List>\n            <Box textAlign=\"center\" mt={1}>\n                {/* <CreateRelatedProductPrpertyButton record={record} /> */}\n            </Box>\n        </Box>\n    );\n};\n\n// const CreateRelatedProductPrpertyButton = ({ record }: any) => (\n//     <Button\n//         component={RouterLink}\n//         to={{\n//             pathname: '/productProperties/create',\n//             state: { record: { product_id: record.id } },\n//         }}\n//         color=\"primary\"\n//         variant=\"contained\"\n//         size=\"small\"\n//         startIcon={<PersonAddIcon />}\n//     >\n//         Add property\n//     </Button>\n// );\n","import * as React from 'react';\nimport {\n    Edit,\n    EditProps,\n    ReferenceInput,\n    TabbedForm,\n    FormTab,\n    TextInput,\n    SelectInput,\n    useRecordContext,\n    AutocompleteInput,\n    required,\n    ArrayInput,\n    SimpleFormIterator,\n} from 'react-admin';\nimport { Box, CardContent, Divider } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\n\nimport { ProductAside } from './ProductAside';\nimport { ProductImageField } from './ProductImageField';\nimport { CreatePropertyType } from './CreatePropertyType';\nimport { PropertyFormIterator } from './PropertyFormIterator';\n\nconst useStyles = makeStyles({\n    inline: {\n        display: 'inline-block',\n        marginLeft: '1em',\n        '&.first-child': {\n            marginLeft: 0,\n        },\n    },\n});\n\nconst renderDistributor = (choice: any) => {\n\n}\n\nexport const ProductEdit = (props: EditProps) => {\n    const classes = useStyles();\n    return (\n        <Edit \n            {...props} \n            aside={<ProductAside link=\"show\" />} \n            actions={false}\n        >\n            <TabbedForm\n                redirect=\"show\"\n            >\n                <FormTab label=\"General\">\n                    <ReferenceInput \n                        label=\"Comapny\" \n                        source=\"company_id\" \n                        reference=\"companies\"\n                        fullWidth\n                    >\n                        <AutocompleteInput optionText=\"name\" />\n                    </ReferenceInput>\n                    <ReferenceInput \n                        label=\"Product Family\" \n                        source=\"family_id\" \n                        reference=\"productFamilies\"\n                        fullWidth\n                    >\n                        <AutocompleteInput optionText=\"name\" />\n                    </ReferenceInput>\n                    <TextInput source=\"model\" validate={required()} fullWidth />\n                    <TextInput source=\"code\" fullWidth />\n                    <TextInput source=\"website\" fullWidth />\n                    <TextInput source=\"image\" fullWidth />\n                    <TextInput \n                        source=\"description\"\n                        multiline\n                        rows={3} \n                        fullWidth \n                    />\n                </FormTab>\n                <FormTab label=\"Properties\">\n                    <ArrayInput\n                        source=\"properties\"\n                    >\n                        <PropertyFormIterator />\n                    </ArrayInput>\n                </FormTab>\n            </TabbedForm>\n        </Edit>\n    );\n};\n\nconst CustomLayout = (props: any) => {\n    const record = useRecordContext(props);\n    return (\n        <CardContent>\n            <Box display=\"flex\">\n                <ProductImageField record={record as any} />\n                <Box ml={2} flex=\"1\" maxWidth={796}>\n                    {props.children}\n                </Box>\n            </Box>\n        </CardContent>\n    );\n};\n\nconst CustomDivider = () => (\n    <Box mb={2}>\n        <Divider />\n    </Box>\n);\n","/* eslint-disable import/no-anonymous-default-export */\nimport { ProductList } from './ProductList';\nimport { ProductCreate } from './ProductCreate';\nimport { ProductShow } from './ProductShow';\nimport { ProductEdit } from './ProductEdit';\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\n\nexport default {\n    list: ProductList,\n    create: ProductCreate,\n    edit: ProductEdit,\n    show: ProductShow,\n    icon: FiberManualRecordIcon,\n};\n","import * as React from 'react';\nimport { Avatar as MuiAvatar } from '@material-ui/core';\n\nimport { ProductFamily } from '../types';\n\nexport const Avatar = ({ record }: { record: ProductFamily }) => (\n    <MuiAvatar src={record.image}>\n        {record.name}\n    </MuiAvatar>\n);\n","/* eslint-disable import/no-anonymous-default-export */\nimport * as React from 'react';\nimport {\n    FilterList,\n    FilterLiveSearch,\n    FilterListItem,\n    useGetIdentity,\n    useGetList,\n} from 'react-admin';\nimport { Box, Chip } from '@material-ui/core';\nimport { CollapsibleListFilter } from '../components/CollapsibleListFilter';\n\nexport const ProductFamilyListFilter = () => {\n\n    return (\n        <CollapsibleListFilter>\n            <FilterLiveSearch />\n        </CollapsibleListFilter>\n    );\n};\n","/* eslint-disable import/no-anonymous-default-export */\nimport * as React from 'react';\nimport {\n    List as RaList,\n    ListProps,\n    SimpleListLoading,\n    ReferenceField,\n    TextField,\n    useListContext,\n    ExportButton,\n    SortButton,\n    TopToolbar,\n    CreateButton,\n    Pagination,\n    useGetIdentity,\n    SelectField,\n} from 'react-admin';\nimport {\n    List,\n    ListItem,\n    ListItemAvatar,\n    ListItemIcon,\n    ListItemSecondaryAction,\n    ListItemText,\n    Checkbox,\n    Typography,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Link } from 'react-router-dom';\nimport { formatDistance } from 'date-fns';\n\nimport { Avatar } from './Avatar';\nimport { Status } from '../misc/Status';\nimport { TagsList } from '../tags/TagsList';\nimport { ProductFamilyListFilter } from './ProductFamilyListFilter';\nimport { ProductFamily } from '../types';\nimport { productFamilyCategories } from './productFamilyCategories';\n\nconst ProductFamilyListContent = () => {\n    const { data, ids, loaded, onToggleItem, selectedIds } = useListContext<\n        ProductFamily\n    >();\n    const now = Date.now();\n    if (loaded === false) {\n        return <SimpleListLoading hasLeftAvatarOrIcon hasSecondaryText />;\n    }\n\n    return (\n        <List>\n            {ids.map(id => {\n                const record = data[id];\n                return (\n                    <ListItem\n                        button\n                        key={id}\n                        component={Link}\n                        to={`/productFamilies/${id}/show`}\n                    >\n                        <ListItemIcon>\n                            <Checkbox\n                                edge=\"start\"\n                                checked={selectedIds.includes(id)}\n                                tabIndex={-1}\n                                disableRipple\n                                onClick={e => {\n                                    e.stopPropagation();\n                                    onToggleItem(id);\n                                }}\n                            />\n                        </ListItemIcon>\n                        <ListItemAvatar>\n                            <Avatar record={record} />\n                        </ListItemAvatar>\n                        <ListItemText\n                            primary={`${record.name}`}\n                            secondary={\n                                <>\n                                    {record.name} in{' '}\n                                    <SelectField\n                                        record={record}\n                                        source=\"category\"\n                                        choices={productFamilyCategories}\n                                    />\n                                </>\n                            }\n                        />\n                        <ListItemSecondaryAction>\n\n                        </ListItemSecondaryAction>\n                    </ListItem>\n                );\n            })}\n        </List>\n    );\n};\n\nconst useActionStyles = makeStyles(theme => ({\n    createButton: {\n        marginLeft: theme.spacing(2),\n    },\n}));\nconst ProductFamilyListActions = () => {\n    const classes = useActionStyles();\n    return (\n        <TopToolbar>\n            <SortButton fields={['last_name', 'first_name', 'last_seen']} />\n            <ExportButton />\n            <CreateButton\n                basePath=\"/productFamilies\"\n                variant=\"contained\"\n                label=\"Add New\"\n                className={classes.createButton}\n            />\n        </TopToolbar>\n    );\n};\n\nexport const ProductFamilyList = (props: ListProps) => {\n    const { identity } = useGetIdentity();\n    return identity ? (\n        <RaList\n            {...props}\n            actions={<ProductFamilyListActions />}\n            aside={<ProductFamilyListFilter />}\n            perPage={25}\n            pagination={<Pagination rowsPerPageOptions={[10, 25, 50, 100]} />}\n            filterDefaultValues={{  }}\n            // sort={{  }}\n        >\n            <ProductFamilyListContent />\n        </RaList>\n    ) : null;\n};\n","import Reacct, { useState, FormEvent } from 'react';\nimport {\n    Create,\n    CreateProps,\n    TextInput,\n    ReferenceInput,\n    SelectInput,\n    AutocompleteInput,\n    BooleanInput,\n    SimpleForm,\n    Toolbar,\n    required,\n    useGetIdentity,\n    useCreateContext,\n    useCreateSuggestionContext,\n    useCreate,\n} from 'react-admin';\nimport { \n    Card, \n    CardContent, \n    Divider, \n    Box, \n    Dialog, \n    DialogContent,\n    DialogActions,\n    TextField,\n    Button,\n } from '@material-ui/core';\nimport CategoryIcon from '@material-ui/icons/Category';\nimport { makeStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\n\nimport { ProductFamily } from '../types';\nimport { productFamilyCategories } from './productFamilyCategories';\n\nconst useStyles = makeStyles({\n    inline: {\n        display: 'inline-block',\n        marginLeft: '1em',\n        '&.first-child': {\n            marginLeft: 0,\n        },\n    },\n});\n\n\nexport const ProductFamilyCreate = (props: CreateProps) => {\n    const classes = useStyles();\n\n    const contactDefaultValue = () => ({ });\n    const transform = (data: ProductFamily) => ({\n        ...data,\n    });\n    \n    return (\n        <Create {...props} actions={false}>\n            <SimpleForm \n                component={CustomLayout} \n                redirect=\"show\"\n                initialValues={contactDefaultValue}\n                transform={transform}\n            >\n                <SelectInput\n                    source=\"category\"\n                    choices={productFamilyCategories}\n                    formClassName={clsx(classes.inline, 'first-child')}\n                />\n                <TextInput source=\"name\" fullWidth />\n                <TextInput source=\"website\" fullWidth />\n                <TextInput source=\"image\" fullWidth />\n                <TextInput \n                    source=\"description\"\n                    multiline\n                    rows={3} \n                    fullWidth \n                />\n            </SimpleForm>\n        </Create>\n    );\n};\n\n\nconst CustomLayout = ({ children }: \n    {children: any;}) => (\n    <CardContent>\n        <Box display=\"flex\">\n            <Box paddingTop={1}>\n                <CategoryIcon />\n            </Box>\n            <Box ml={2} flex=\"1\" maxWidth={796}>\n                {children}\n            </Box>\n        </Box>\n    </CardContent>\n);\n\nconst CustomDivider = () => (\n    <Box mb={2}>\n        <Divider />\n    </Box>\n);\n\n","import * as React from 'react';\nimport {\n    TextField,\n    ReferenceField,\n    SelectField,\n} from 'react-admin';\nimport { \n    Box, \n    Typography, \n    Divider,\n    Link,\n } from '@material-ui/core';\n\nimport { ProductFamily, Sale } from '../types';\nimport { CollapsibleAside } from '../components/CollapsibleAside';\nimport { productFamilyCategories } from './productFamilyCategories';\n\nexport const ProductFamilyAside = ({\n    record,\n    link = 'edit',\n}: {\n    record?: ProductFamily;\n    link?: string;\n}) => {\n    if (!record) return null;\n\n    return (\n        <CollapsibleAside record={record} link={link} basePath=\"/productFamilies\">\n            <AsideContent />\n        </CollapsibleAside>\n    );\n};\n\nconst AsideContent = ({ \n    record \n}: { \n    record?: ProductFamily;\n}) => \n    record ? (\n        <>\n            <Typography variant=\"subtitle2\">Family info</Typography>\n            <Divider />\n            <Box mt={1} display=\"flex\" gridGap={2}>\n                <Typography>Category:</Typography>\n                <SelectField\n                    source=\"category\"\n                    choices={productFamilyCategories}\n                />\n            </Box>\n\n            {record.website && (\n                <Box mt={1}>\n                    Website: <Link href={record.website} target=\"_blank\" rel=\"noreferrer\">Link</Link>\n                </Box>\n            )}\n        </>\n    ) : null;","import * as React from 'react';\nimport {\n    EditBase,\n    EditProps,\n    TextInput,\n    ReferenceInput,\n    AutocompleteInput,\n    BooleanInput,\n    FormWithRedirect,\n    Toolbar,\n    useEditContext,\n    SelectInput,\n} from 'react-admin';\nimport { Card, CardContent, Divider, Box } from '@material-ui/core';\nimport omit from 'lodash/omit';\n\nimport { Avatar } from './Avatar';\nimport { ProductFamilyAside } from './ProductFamilyAside';\nimport { ProductFamily } from '../types';\nimport { productFamilyCategories } from './productFamilyCategories';\n\nconst Spacer = () => <Box width={20} component=\"span\" />;\n\nconst ProductFamilyEditContent = () => {\n    const { record, loaded, save } = useEditContext<ProductFamily>();\n    if (!loaded || !record) return null;\n    return (\n        <Box mt={2} display=\"flex\">\n            <Box flex=\"1\">\n                <FormWithRedirect\n                    record={record}\n                    redirect=\"show\"\n                    save={save}\n                    render={formProps => (\n                        <Card>\n                            <CardContent>\n                                <Box>\n                                    <Box display=\"flex\">\n                                        <Box mr={2}>\n                                            <Avatar record={record} />\n                                        </Box>\n                                        <Box flex={1}>\n                                            <SelectInput\n                                                source=\"category\"\n                                                choices={productFamilyCategories}\n                                            />\n                                            <TextInput source=\"name\" fullWidth />\n                                            <TextInput source=\"website\" fullWidth />\n                                            <TextInput source=\"image\" fullWidth />\n                                            <TextInput \n                                                source=\"description\"\n                                                multiline\n                                                rows={3} \n                                                fullWidth \n                                            />\n                                        </Box>\n                                        \n                                    </Box>\n                                </Box>\n                            </CardContent>\n                            <Toolbar\n                                {...omit(formProps, [\n                                    // FIXME Not super user friendly way to remove warnings\n                                    'dirtyFields',\n                                    'dirtyFieldsSinceLastSubmit',\n                                    'dirtySinceLastSubmit',\n                                    'hasSubmitErrors',\n                                    'hasValidationErrors',\n                                    'initialValues',\n                                    'modifiedSinceLastSubmit',\n                                    'submitError',\n                                    'submitErrors',\n                                    'submitFailed',\n                                    'submitSucceeded',\n                                    'submitting',\n                                    'valid',\n                                ])}\n                            />\n                        </Card>\n                    )}\n                />\n            </Box>\n            <ProductFamilyAside record={record} link=\"show\" />\n        </Box>\n    );\n};\n\nexport const ProductFamilyEdit = (props: EditProps) => (\n    <EditBase {...props}>\n        <ProductFamilyEditContent />\n    </EditBase>\n);\n","import * as React from 'react';\nimport {\n    ShowBase,\n    ShowProps,\n    TextField,\n    ReferenceField,\n    ReferenceManyField,\n    useShowContext,\n    SelectField,\n    Pagination,\n} from 'react-admin';\nimport { Box, Card, CardContent, Typography } from '@material-ui/core';\n\nimport { Avatar } from './Avatar';\nimport { ProductFamilyAside } from './ProductFamilyAside';\nimport { LogoField } from '../companies/LogoField';\nimport { NotesIterator } from '../notes';\nimport { ProductFamily } from '../types';\nimport { ProductGridList } from '../products/ProductGridList';\nimport { productFamilyCategories } from './productFamilyCategories';\n\nexport const ProductFamilyShow = (props: ShowProps) => (\n    <ShowBase {...props}>\n        <ProductFamilyShowContent />\n    </ShowBase>\n);\n\nconst ProductFamilyShowContent = () => {\n    const { record, loaded } = useShowContext<ProductFamily>();\n    if (!loaded || !record) return null;\n    return (\n        <Box mt={2} display=\"flex\">\n            <Box flex=\"1\">\n                <Card>\n                    <CardContent>\n                        <Box display=\"flex\">\n                            <Avatar record={record} />\n                            <Box ml={2} flex=\"1\">\n                                <Typography variant=\"h5\">\n                                    {record.name}\n                                </Typography>\n                                <Typography variant=\"body2\">\n                                    {record.title} in{' '}\n                                    <SelectField\n                                        record={record}\n                                        source=\"category\"\n                                        choices={productFamilyCategories}\n                                    />\n                                </Typography>\n                            </Box>\n                        </Box>\n                        <Box mt={2} p={1}>\n                            <ReferenceManyField\n                                reference=\"products\"\n                                target=\"family_id\"\n                                label=\"Products\"\n                                pagination={<Pagination rowsPerPageOptions={[15, 25, 50, 100]} />}\n                                perPage={25}\n                            >\n                                <ProductGridList />\n                            </ReferenceManyField>\n                        </Box>\n                    </CardContent>\n                </Card>\n            </Box>\n            <ProductFamilyAside record={record} />\n        </Box>\n    );\n};\n","/* eslint-disable import/no-anonymous-default-export */\nimport { ProductFamilyList } from './ProductFamilyList';\nimport { ProductFamilyCreate } from './ProductFamilyCreate';\nimport { ProductFamilyEdit } from './ProductFamilyEdit';\nimport { ProductFamilyShow } from './ProductFamilyShow';\nimport CategoryIcon from '@material-ui/icons/Category';\n\nexport default {\n    list: ProductFamilyList,\n    create: ProductFamilyCreate,\n    edit: ProductFamilyEdit,\n    show: ProductFamilyShow,\n    icon: CategoryIcon,\n};\n","import * as React from 'react';\nimport { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport LabelIcon from '@material-ui/icons/Label';\nimport { makeStyles } from '@material-ui/core/styles';\nimport classnames from 'classnames';\nimport {\n    useTranslate,\n    DashboardMenuItem,\n    MenuItemLink,\n    MenuProps,\n    ReduxState,\n} from 'react-admin';\n\n\nimport SubMenu from './SubMenu';\nimport { AppState } from '../types';\n\nimport companies from '../companies';\nimport contacts from '../contacts';\nimport tasks from '../tasks';\nimport deals from '../deals';\nimport products from '../products';\nimport productFamilies from '../productFamilies';\n\n\n\ntype MenuName = 'menuCrm' | 'menuProduct' | 'menuCustomers';\n\nconst Menu = ({ dense = false }: MenuProps) => {\n    const [state, setState] = useState({\n        menuCrm: true,\n        menuProduct: true,\n        menuCustomers: true,\n    });\n    const translate = useTranslate();\n    const open = useSelector((state: ReduxState) => state.admin.ui.sidebarOpen);\n    useSelector((state: AppState) => state.theme); // force rerender on theme change\n    const classes = useStyles();\n\n    const handleToggle = (menu: MenuName) => {\n        setState(state => ({ ...state, [menu]: !state[menu] }));\n    };\n\n    return (\n        <div\n            className={classnames(classes.root, {\n                [classes.open]: open,\n                [classes.closed]: !open,\n            })}\n        >\n            {' '}\n            <DashboardMenuItem />\n            <SubMenu\n                handleToggle={() => handleToggle('menuCrm')}\n                isOpen={state.menuCrm}\n                name=\"CRM\"\n                icon={<companies.icon />}\n                dense={dense}\n            >\n                <MenuItemLink\n                    to={{\n                        pathname: '/companies',\n                        state: { _scrollToTop: true },\n                    }}\n                    primaryText=\"Companies\"\n                    leftIcon={<companies.icon />}\n                    dense={dense}\n                />\n                <MenuItemLink\n                    to={{\n                        pathname: '/contacts',\n                        state: { _scrollToTop: true },\n                    }}\n                    primaryText=\"Contacts\"\n                    leftIcon={<contacts.icon />}\n                    dense={dense}\n                />\n                <MenuItemLink\n                    to={{\n                        pathname: '/deals',\n                        state: { _scrollToTop: true },\n                    }}\n                    primaryText=\"Deals\"\n                    leftIcon={<deals.icon />}\n                    dense={dense}\n                />\n                <MenuItemLink\n                    to={{\n                        pathname: '/tasks',\n                        state: { _scrollToTop: true },\n                    }}\n                    primaryText=\"Taks\"\n                    leftIcon={<tasks.icon />}\n                    dense={dense}\n                />\n            </SubMenu>\n            <SubMenu\n                handleToggle={() => handleToggle('menuProduct')}\n                isOpen={state.menuProduct}\n                name=\"Products\"\n                icon={<products.icon />}\n                dense={dense}\n            >\n                <MenuItemLink\n                    to={{\n                        pathname: '/products',\n                        state: { _scrollToTop: true },\n                    }}\n                    primaryText=\"Products\"\n                    leftIcon={<products.icon />}\n                    dense={dense}\n                />\n                <MenuItemLink\n                    to={{\n                        pathname: '/productFamilies',\n                        state: { _scrollToTop: true },\n                    }}\n                    primaryText=\"Families\"\n                    leftIcon={<productFamilies.icon />}\n                    dense={dense}\n                />\n            </SubMenu>\n        </div>\n    );\n};\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n    },\n    open: {\n        width: 200,\n    },\n    closed: {\n        width: 55,\n    },\n}));\n\nexport default Menu;\n","export const darkTheme = {\n    palette: {\n        primary: {\n            main: '#90caf9',\n        },\n        secondary: {\n            main: '#FBBA72',\n        },\n        type: 'dark' as 'dark', // Switching the dark mode on is a single property value change.\n    },\n    sidebar: {\n        width: 200,\n    },\n    overrides: {\n        MuiAppBar: {\n            colorSecondary: {\n                color: '#ffffffb3',\n                backgroundColor: '#616161e6',\n            },\n        },\n        MuiButtonBase: {\n            root: {\n                '&:hover:active::after': {\n                    // recreate a static ripple color\n                    // use the currentColor to make it work both for outlined and contained buttons\n                    // but to dim the background without dimming the text,\n                    // put another element on top with a limited opacity\n                    content: '\"\"',\n                    display: 'block',\n                    width: '100%',\n                    height: '100%',\n                    position: 'absolute',\n                    top: 0,\n                    right: 0,\n                    backgroundColor: 'currentColor',\n                    opacity: 0.3,\n                    borderRadius: 'inherit',\n                },\n            },\n        },\n    },\n    props: {\n        MuiButtonBase: {\n            // disable ripple for perf reasons\n            disableRipple: true,\n        },\n    },\n};\n\nexport const lightTheme = {\n    palette: {\n        primary: {\n            main: '#4f3cc9',\n        },\n        secondary: {\n            light: '#5f5fc4',\n            main: '#283593',\n            dark: '#001064',\n            contrastText: '#fff',\n        },\n        background: {\n            default: '#fcfcfe',\n        },\n        type: 'light' as 'light',\n    },\n    shape: {\n        borderRadius: 10,\n    },\n    sidebar: {\n        width: 200,\n    },\n    overrides: {\n        RaMenuItemLink: {\n            root: {\n                borderLeft: '3px solid #fff',\n            },\n            active: {\n                borderLeft: '3px solid #4f3cc9',\n            },\n        },\n        MuiPaper: {\n            elevation1: {\n                boxShadow: 'none',\n            },\n            root: {\n                border: '1px solid #e0e0e3',\n                backgroundClip: 'padding-box',\n            },\n        },\n        MuiButton: {\n            contained: {\n                backgroundColor: '#fff',\n                color: '#4f3cc9',\n                boxShadow: 'none',\n            },\n        },\n        MuiButtonBase: {\n            root: {\n                '&:hover:active::after': {\n                    // recreate a static ripple color\n                    // use the currentColor to make it work both for outlined and contained buttons\n                    // but to dim the background without dimming the text,\n                    // put another element on top with a limited opacity\n                    content: '\"\"',\n                    display: 'block',\n                    width: '100%',\n                    height: '100%',\n                    position: 'absolute',\n                    top: 0,\n                    right: 0,\n                    backgroundColor: 'currentColor',\n                    opacity: 0.3,\n                    borderRadius: 'inherit',\n                },\n            },\n        },\n        MuiAppBar: {\n            colorSecondary: {\n                color: '#808080',\n                backgroundColor: '#fff',\n            },\n        },\n        MuiLinearProgress: {\n            colorPrimary: {\n                backgroundColor: '#f5f5f5',\n            },\n            barColorPrimary: {\n                backgroundColor: '#d7d7d7',\n            },\n        },\n        MuiFilledInput: {\n            root: {\n                backgroundColor: 'rgba(0, 0, 0, 0.04)',\n                '&$disabled': {\n                    backgroundColor: 'rgba(0, 0, 0, 0.04)',\n                },\n            },\n        },\n        MuiSnackbarContent: {\n            root: {\n                border: 'none',\n            },\n        },\n    },\n    props: {\n        MuiButtonBase: {\n            // disable ripple for perf reasons\n            disableRipple: true,\n        },\n    },\n};\n","import * as React from 'react';\n\n\nimport { \n    Notification, \n    NotificationProps,\n} from 'react-admin';\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(theme => ({\n\n}));\n\nconst NotificationContainer = (props: any) => {\n    const classes = useStyles();\n    return (\n        <Notification {...props} autoHideDuration={5000} />\n    )\n}\n\nexport default NotificationContainer;","import * as React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Layout, LayoutProps } from 'react-admin';\nimport AppBar from './AppBar';\nimport Menu from './Menu';\nimport { darkTheme, lightTheme } from './themes';\nimport { AppState } from '../types';\nimport NotificationContainer from '../notifications/NotificationContainer';\n\nexport default (props: LayoutProps) => {\n    const theme = useSelector((state: AppState) =>\n        state.theme === 'dark' ? darkTheme : lightTheme\n    );\n\n    return (\n        <Layout \n            {...props} \n            appBar={AppBar} \n            menu={Menu} \n            theme={theme} \n            notification={NotificationContainer}\n        />\n    );\n};\n","import * as React from 'react';\nimport { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Field, withTypes } from 'react-final-form';\nimport { useLocation, Link as RouterLink  } from 'react-router-dom';\n\nimport {\n    Avatar,\n    Button,\n    Card,\n    CardActions,\n    CircularProgress,\n    TextField,\n    Link,\n    Typography,\n} from '@material-ui/core';\nimport { createTheme, makeStyles } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\nimport LockIcon from '@material-ui/icons/Lock';\nimport { Notification, useTranslate, useLogin, useNotify } from 'react-admin';\n\nimport { lightTheme } from './themes';\n\nconst useStyles = makeStyles(theme => ({\n    main: {\n        display: 'flex',\n        flexDirection: 'column',\n        minHeight: '100vh',\n        alignItems: 'center',\n        justifyContent: 'center',\n        backgroundImage: 'radial-gradient(circle at 50% 50%, #313264 0%, #00023b 50%, #00023b 100%)',\n        backgroundRepeat: 'no-repeat',\n        backgroundSize: 'cover',\n    },\n    card: {\n        minWidth: 300,\n        // marginTop: '6em',\n    },\n    avatar: {\n        margin: '1em',\n        display: 'flex',\n        justifyContent: 'center',\n    },\n    icon: {\n        backgroundColor: theme.palette.secondary.main,\n    },\n    hint: {\n        marginTop: '1em',\n        display: 'flex',\n        justifyContent: 'center',\n        color: theme.palette.grey[500],\n    },\n    form: {\n        padding: '0 1em 1em 1em',\n    },\n    input: {\n        marginTop: '1em',\n    },\n    actions: {\n        padding: '0 1em 1em 1em',\n        display: 'flex',\n        flexDirection: 'column',\n    },\n}));\n\nconst renderInput = ({\n    meta: { touched, error } = { touched: false, error: undefined },\n    input: { ...inputProps },\n    ...props\n}) => (\n    <TextField\n        error={!!(touched && error)}\n        helperText={touched && error}\n        {...inputProps}\n        {...props}\n        fullWidth\n    />\n);\n\ninterface FormValues {\n    username?: string;\n    password?: string;\n}\n\nconst { Form } = withTypes<FormValues>();\n\nconst Login = () => {\n    const [loading, setLoading] = useState(false);\n    const translate = useTranslate();\n    const classes = useStyles();\n    const notify = useNotify();\n    const login = useLogin();\n    const location = useLocation<{ nextPathname: string } | null>();\n\n    const handleSubmit = async (auth: FormValues) => {\n        setLoading(true);\n        try{\n            const response = await login(auth, location.state ? location.state.nextPathname : '/');\n        } catch (error: any) {\n            setLoading(false);\n            notify(error.message, 'warning');\n        }\n    };\n\n    const validate = ({\n        username,\n        password,\n    }: FormValues) => {\n        const errors = { \n            username: !username ? translate('ra.validation.required') : undefined, \n            password: !password ? translate('ra.validation.required') : undefined,\n        };\n        return errors;\n    };\n\n    return (\n        <Form\n            onSubmit={handleSubmit}\n            validate={validate}\n            render={({ handleSubmit }) => (\n                <form onSubmit={handleSubmit} noValidate>\n                    <div className={classes.main}>\n                        <Card className={classes.card}>\n                            <div className={classes.avatar}>\n                                <Avatar className={classes.icon}>\n                                    <LockIcon />\n                                </Avatar>\n                            </div>\n                            <div className={classes.hint}>\n                                Wecome to Assistor.\n                            </div>\n                            <div className={classes.form}>\n                                <div className={classes.input}>\n                                    <Field\n                                        autoFocus\n                                        name=\"username\"\n                                        // @ts-ignore\n                                        component={renderInput}\n                                        label={translate('ra.auth.username')}\n                                        disabled={loading}\n                                    />\n                                </div>\n                                <div className={classes.input}>\n                                    <Field\n                                        name=\"password\"\n                                        // @ts-ignore\n                                        component={renderInput}\n                                        label={translate('ra.auth.password')}\n                                        type=\"password\"\n                                        disabled={loading}\n                                    />\n                                </div>\n                            </div>\n                            <CardActions className={classes.actions}>\n                                <Button\n                                    variant=\"contained\"\n                                    type=\"submit\"\n                                    color=\"primary\"\n                                    disabled={loading}\n                                    fullWidth\n                                >\n                                    {loading && (\n                                        <CircularProgress\n                                            size={25}\n                                            thickness={2}\n                                        />\n                                    )}\n                                    {translate('ra.auth.sign_in')}\n                                </Button>\n                                <Typography variant=\"body2\">Or</Typography>\n                                <Link\n                                    color=\"textSecondary\"\n                                    component={RouterLink}\n                                    to=\"/register\"\n                                    variant=\"body1\"\n                                >\n                                    Register\n                                </Link>\n                            </CardActions>\n                        </Card>\n                        <Notification />\n                    </div>\n                </form>\n            )}\n        />\n    );\n};\n\nLogin.propTypes = {\n    authProvider: PropTypes.func,\n    previousRoute: PropTypes.string,\n};\n\n// We need to put the ThemeProvider decoration in another component\n// Because otherwise the useStyles() hook used in Login won't get\n// the right theme\nconst LoginWithTheme = (props: any) => (\n    <ThemeProvider theme={createTheme(lightTheme)}>\n        <Login {...props} />\n    </ThemeProvider>\n);\n\nexport default LoginWithTheme;\n","import * as React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { Card, Box, Link } from '@material-ui/core';\nimport ContactsIcon from '@material-ui/icons/Contacts';\nimport { useGetList, SimpleList, useGetIdentity } from 'react-admin';\nimport { formatDistance } from 'date-fns';\n\nimport { Avatar } from '../contacts/Avatar';\nimport { Contact } from '../types';\n\nexport const HotContacts = () => {\n    const { identity } = useGetIdentity();\n    const {\n        data: contactData,\n        ids: contactIds,\n        total: contactTotal,\n        loaded: contactsLoaded,\n    } = useGetList<Contact>(\n        'contacts',\n        { page: 1, perPage: 10 },\n        { field: 'last_seen', order: 'DESC' },\n        { status: 'hot', sales_id: identity?.id },\n        { enabled: Number.isInteger(identity?.id) }\n    );\n    return (\n        <>\n            <Box display=\"flex\" alignItems=\"center\" marginBottom=\"1em\">\n                <Box ml={2} mr={2} display=\"flex\">\n                    <ContactsIcon color=\"disabled\" fontSize=\"large\" />\n                </Box>\n                <Link\n                    underline=\"none\"\n                    variant=\"h5\"\n                    color=\"textSecondary\"\n                    component={RouterLink}\n                    to=\"/contacts\"\n                >\n                    Hot contacts\n                </Link>\n            </Box>\n            <Card>\n                <SimpleList<Contact>\n                    basePath=\"/contacts\"\n                    linkType=\"show\"\n                    ids={contactIds}\n                    data={contactData}\n                    total={contactTotal}\n                    loaded={contactsLoaded}\n                    primaryText={contact =>\n                        `${contact.first_name} ${contact.last_name}`\n                    }\n                    secondaryText={contact =>\n                        formatDistance(\n                            new Date(contact.last_seen),\n                            new Date(),\n                            {\n                                addSuffix: true,\n                            }\n                        )\n                    }\n                    leftAvatar={contact => <Avatar record={contact} />}\n                />\n            </Card>\n        </>\n    );\n};\n","import * as React from 'react';\nimport { Card, CardContent, Typography, Box } from '@material-ui/core';\nimport NoteIcon from '@material-ui/icons/Note';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {\n    useGetList,\n    useGetIdentity,\n    ReferenceField,\n    TextField,\n    FunctionField,\n} from 'react-admin';\nimport { formatDistance } from 'date-fns';\nimport ReactMarkdown from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\n\n\nimport { Contact as ContactType } from '../types';\n\nconst useStyles = makeStyles(theme => ({\n    note: {\n        marginBottom: theme.spacing(2),\n    },\n    noteText: {\n        backgroundColor: theme.palette.grey[200],\n        padding: theme.spacing(1),\n        borderRadius: 10,\n    },\n    noteTextText: {\n        display: '-webkit-box',\n        '-webkit-line-clamp': 3,\n        '-webkit-box-orient': 'vertical',\n        overflow: 'hidden',\n    },\n}));\n\nexport const LatestNotes = () => {\n    const classes = useStyles();\n    const { identity } = useGetIdentity();\n    const {\n        data: contactNotesData,\n        ids: contactNotesIds,\n        loaded: contactNotesLoaded,\n    } = useGetList(\n        'contactNotes',\n        { page: 1, perPage: 5 },\n        { field: 'date', order: 'DESC' },\n        { sales_id: identity?.id },\n        { enabled: Number.isInteger(identity?.id) }\n    );\n    const {\n        data: dealNotesData,\n        ids: dealNotesIds,\n        loaded: dealNotesLoaded,\n    } = useGetList(\n        'dealNotes',\n        { page: 1, perPage: 5 },\n        { field: 'date', order: 'DESC' },\n        { sales_id: identity?.id },\n        { enabled: Number.isInteger(identity?.id) }\n    );\n    const {\n        data: companyNotesData,\n        ids: companyNotesIds,\n        loaded: companyNotesLoaded,\n    } = useGetList(\n        'companyNotes',\n        { page: 1, perPage: 5 },\n        { field: 'date', order: 'DESC' },\n        { sales_id: identity?.id },\n        { enabled: Number.isInteger(identity?.id) }\n    );\n    if (!contactNotesLoaded || !dealNotesLoaded || !companyNotesLoaded) {\n        return null;\n    }\n    // TypeScript guards\n    if (\n        !contactNotesIds ||\n        !contactNotesData ||\n        !dealNotesIds ||\n        !dealNotesData ||\n        !companyNotesIds ||\n        !companyNotesData\n    ) {\n        return null;\n    }\n\n    const allNotes = ([] as any[])\n        .concat(\n            contactNotesIds.map(id => ({\n                ...contactNotesData[id],\n                type: 'contactNote',\n            })),\n            dealNotesIds.map(id => ({\n                ...dealNotesData[id], \n                type: 'dealNote' \n            })),\n            companyNotesIds.map(id => ({\n                ...companyNotesData[id], \n                type: 'companyNote' \n            })),\n        )\n        .sort((a, b) => new Date(b.date).valueOf() - new Date(a.date).valueOf())\n        .slice(0, 5);\n\n    return (\n        <>\n            <Box display=\"flex\" alignItems=\"center\" marginBottom=\"1em\">\n                <Box ml={2} mr={2} display=\"flex\">\n                    <NoteIcon color=\"disabled\" fontSize=\"large\" />\n                </Box>\n                <Typography variant=\"h5\" color=\"textSecondary\">\n                    My Latest Notes\n                </Typography>\n            </Box>\n            <Card>\n                <CardContent>\n                    {allNotes.map(note => (\n                        <div\n                            id={`${note.type}_${note.id}`}\n                            key={`${note.type}_${note.id}`}\n                            className={classes.note}\n                        >\n                            <Typography color=\"textSecondary\" gutterBottom>\n                                on{' '}\n                                <NoteSource note={note} />\n                                , added{' '}\n                                {formatDistance(\n                                    new Date(note.date),\n                                    new Date(),\n                                    {\n                                        addSuffix: true,\n                                    }\n                                )}\n                            </Typography>\n                            <div className={classes.noteText}>\n                                <ReactMarkdown children={note.text} remarkPlugins={[remarkGfm]} />\n                            </div>\n                        </div>\n                    ))}\n                </CardContent>\n            </Card>\n        </>\n    );\n};\n\nconst NoteSource = ({ note }: any) => {\n    if (note.type === 'dealNote'){\n        return <Deal note={note} />;\n    }\n    else if (note.type === 'contactNote') {\n        return <Contact note={note} />;\n    }\n    else if (note.type === 'companyNote') {\n        return <Company note={note} />;\n    }\n    return null;\n};\n\nconst Deal = ({ note }: any) => (\n    <>\n        Deal{' '}\n        <ReferenceField\n            record={note}\n            source=\"deal_id\"\n            reference=\"deals\"\n            basePath=\"/deals\"\n            link=\"show\"\n        >\n            <TextField source=\"name\" variant=\"body1\" />\n        </ReferenceField>\n    </>\n);\n\nconst Contact = ({ note }: any) => (\n    <>\n        Contact{' '}\n        <ReferenceField\n            record={note}\n            source=\"contact_id\"\n            reference=\"contacts\"\n            basePath=\"/contacts\"\n            link=\"show\"\n        >\n            <FunctionField<ContactType>\n                variant=\"body1\"\n                render={contact =>\n                    contact ? `${contact.first_name} ${contact.last_name}` : ''\n                }\n            />\n        </ReferenceField>\n    </>\n);\n\nconst Company = ({ note }: any) => (\n    <>\n        Company{' '}\n        <ReferenceField\n            record={note}\n            source=\"company_id\"\n            reference=\"companies\"\n            basePath=\"/companies\"\n            link=\"show\"\n        >\n            <TextField source=\"name\" variant=\"body1\" />\n        </ReferenceField>\n    </>\n);\n","import React, { useState, memo } from \"react\";\nimport { \n    ComposableMap, \n    Geographies, \n    Geography, \n    ZoomableGroup,\n    Marker,\n    Annotation,\n} from 'react-simple-maps';\nimport { scaleQuantile } from 'd3-scale';\nimport { max } from 'd3-array';\nimport { geoCentroid } from \"d3-geo\";\nimport {\n    FilterList,\n    FilterLiveSearch,\n    FilterListItem,\n    useGetIdentity,\n    useGetList,\n} from 'react-admin';\nimport ReactTooltip from \"react-tooltip\";\n\nimport { Country } from '../types';\n\nconst geoUrl =\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nconst Map = memo(({setTooltipContent}: any) => {\n    const { data, ids, loaded } = useGetList<Country>(\n        'countries',\n        { perPage: 1000, page: 1 }\n    );\n    if (!loaded) return null;\n\n    const colorScale = scaleQuantile<string>()\n        .domain([0, max(ids.map(id => data[id].nb_companies))])\n        .range([\n            \"#e1f5fe\",\n            \"#b3e5fc\",\n            \"#81d4fa\",\n            \"#4fc3f7\",\n            \"#29b6f6\",\n            \"#03a9f4\",\n            \"#039be5\",\n            \"#0288d1\",\n            \"#0277bd\"\n        ]);\n\n    return (\n        <ComposableMap\n            data-tip=\"\"\n            projection=\"geoAzimuthalEqualArea\"\n            projectionConfig={{\n                rotate: [-25.0, -50.0, 0],\n                scale: 750\n            }}\n        >\n            <ZoomableGroup\n                center={[0, 0]}\n                zoom={1}\n            >\n                <Geographies geography={geoUrl}>\n                    {({ geographies }) => (\n                        <>\n                            {geographies\n                            .map(geo => {\n                                const { ISO_A3 } = geo.properties;\n                                const cur = ids.find(id => data[id].iso3 === ISO_A3);\n                                return (\n                                    <Geography \n                                            key={geo.rsmKey} \n                                            geography={geo} \n                                            fill={cur ? colorScale(data[cur].nb_companies) : \"#D6D6DA\"}\n                                            stroke=\"#EAEAEC\"\n                                            onMouseEnter={() => {\n                                                const { NAME, POP_EST } = geo.properties;\n                                                const nb_companies = cur ? data[cur].nb_companies : 0;\n                                                setTooltipContent(`${NAME} - ${nb_companies}`);\n                                            }}\n                                            onMouseLeave={() => {\n                                                setTooltipContent(\"\");\n                                            }}\n                                        />\n                                );\n                            })}\n                            {/* {geographies.map(geo => {\n                                const centroid = geoCentroid(geo);\n                                const { ISO_A3 } = geo.properties;\n                                const cur = ids.find(id => data[id].iso3 === ISO_A3);\n                                return (\n                                    <g key={geo.rsmKey + \"-name\"}>\n                                        {cur &&\n                                            <Marker coordinates={centroid}>\n                                                <text y=\"2\" fontSize={9} textAnchor=\"middle\">\n                                                {data[cur].nicename}\n                                                </text>\n                                            </Marker>\n                                        }\n                                    </g>\n                                );\n                            })} */}\n                        </>\n                    )}\n                </Geographies>\n            </ZoomableGroup>\n        </ComposableMap>\n    );\n});\n\nexport const CompaniesMap = () => {\n    const [content, setContent] = useState(\"\");\n\n    return (\n        <div>\n            <Map setTooltipContent={setContent} />\n            <ReactTooltip>{content}</ReactTooltip>\n        </div>\n    );\n}","import * as React from 'react';\nimport { Box, Grid } from '@material-ui/core';\n\nimport { Welcome } from './Welcome';\nimport { DealsChart } from './DealsChart';\nimport { HotContacts } from './HotContacts';\nimport { LatestNotes } from './LatestNotes';\nimport { DealsPipeline } from './DealsPipeline';\nimport { CompaniesMap } from './CompaniesMap';\n\nexport const Dashboard = () => {\n    return (\n        <>\n            <Grid container spacing={1}>\n                <Grid item xs={12} sm={8}>\n                    <CompaniesMap />\n                </Grid>\n                <Grid item xs={12} sm={4}>\n                    <HotContacts />\n                </Grid>\n                <Grid item xs={12}>\n                    <LatestNotes />\n                </Grid>\n            </Grid>\n        </>\n    );\n};\n","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { Field, Form } from 'react-final-form';\nimport { useLocation, Link as RouterLink  } from 'react-router-dom';\nimport {\n    Button,\n    CardActions,\n    CircularProgress,\n    TextField,\n    Grid,\n    CardContent,\n    Typography,\n    Link,\n    Container,\n} from '@material-ui/core';\nimport { Theme } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { \n    useTranslate, \n    useNotify, \n    useLogin, \n    useSafeSetState, \n    useRedirect,\n    useAuthProvider,\n} from 'react-admin';\nimport axios from 'axios';\n\n\nconst baseURL = \"/auth\";\n\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    form: {\n        padding: '0 1em 1em 1em',\n    },\n    input: {\n        marginTop: '1em',\n    },\n    button: {\n        width: '100%',\n    },\n    icon: {\n        marginRight: theme.spacing(1),\n    },\n    actions: {\n        padding: '0 1em 1em 1em',\n        display: 'flex',\n        flexDirection: 'column',\n    },\n}));\n\nconst Input = ({\n    meta: { touched, error }, // eslint-disable-line react/prop-types\n    input: inputProps, // eslint-disable-line react/prop-types\n    ...props\n}: {\n    meta: any;\n    input: any;\n}) => (\n    <TextField\n        error={!!(touched && error)}\n        helperText={touched && error}\n        {...inputProps}\n        {...props}\n        fullWidth\n    />\n);\n\ninterface FormValues {\n    first_name: string;\n    last_name: string;\n    email: string;\n    username: string;\n    password: string;\n    confirm: string;\n}\n\nconst RegisterForm = ({ redirectTo }:\n    {redirectTo?: string | undefined;}) => {\n    const authProvider = useAuthProvider();\n    const [loading, setLoading] = useSafeSetState(false);\n    const translate = useTranslate();\n    const login = useLogin();\n    const notify = useNotify();\n    const redirect = useRedirect();\n    const classes = useStyles();\n\n    const validate = ({ \n        first_name,\n        last_name,\n        email,\n        username, \n        password, \n        confirm \n    }: FormValues) => {\n        const errors = { \n            first_name: !first_name ? translate('ra.validation.required') : undefined, \n            last_name: !last_name ? translate('ra.validation.required') : undefined, \n            email: !email ? translate('ra.validation.required') : undefined, \n            username: !username ? translate('ra.validation.required') : undefined, \n            password: !password ? translate('ra.validation.required') : undefined, \n            confirm: password !== confirm ? 'Confirmation should match password': undefined\n        };\n        return errors;\n    };\n\n    interface ResponseType {\n        message: string;\n    }\n\n    const submit = async ({ \n        first_name,\n        last_name,\n        email,\n        username, \n        password,\n    }: FormValues) => {\n        setLoading(true);\n        try{\n            const response = await authProvider.register({ \n                    first_name,\n                    last_name,\n                    email,\n                    username, \n                    password\n                });\n        \n            setLoading(false)\n            login({ username, password }, redirectTo)\n        } catch (error: any) {\n            setLoading(false);\n            notify(error.message, 'warning');\n        }\n    };\n\n    return (\n        <Form\n            onSubmit={submit}\n            validate={validate}\n            render={({ handleSubmit }) => (\n                <form className={classes.form} onSubmit={handleSubmit} noValidate>\n                    <CardContent>\n                        <Container maxWidth=\"xs\">\n                        <Grid container spacing={2} >\n                            <Grid item xs={12} sm={6}>\n                                <div className={classes.input}>\n                                    <Field\n                                        autoFocus\n                                        id=\"first_name\"\n                                        name=\"first_name\"\n                                        component={Input}\n                                        label=\"First Name\"\n                                        disabled={loading}\n                                        required\n                                    />\n                                </div>\n                            </Grid>\n                            <Grid item xs={12} sm={6}>\n                                <div className={classes.input}>\n                                    <Field\n                                        autoFocus\n                                        id=\"last_name\"\n                                        name=\"last_name\"\n                                        component={Input}\n                                        label=\"Last Name\"\n                                        disabled={loading}\n                                        required\n                                    />\n                                </div>\n                            </Grid>\n                            <Grid item xs={12}>\n                                <div className={classes.input}>\n                                    <Field\n                                        autoFocus\n                                        id=\"email\"\n                                        name=\"email\"\n                                        component={Input}\n                                        label=\"Email Address\"\n                                        disabled={loading}\n                                        required\n                                    />\n                                </div>\n                            </Grid>\n                            <Grid item xs={12}>\n                                <div className={classes.input}>\n                                    <Field\n                                        autoFocus\n                                        id=\"username\"\n                                        name=\"username\"\n                                        component={Input}\n                                        label={translate('ra.auth.username')}\n                                        disabled={loading}\n                                        required\n                                    />\n                                </div>\n                            </Grid>\n                            <Grid item xs={12}>\n                                <div className={classes.input}>\n                                    <Field\n                                        id=\"password\"\n                                        name=\"password\"\n                                        component={Input}\n                                        label={translate('ra.auth.password')}\n                                        type=\"password\"\n                                        disabled={loading}\n                                        autoComplete=\"current-password\"\n                                        required\n                                    />\n                                </div>\n                            </Grid>\n                            <Grid item xs={12}>\n                                <div className={classes.input}>\n                                    <Field\n                                        id=\"confirm\"\n                                        name=\"confirm\"\n                                        component={Input}\n                                        label=\"Confirm Password\"\n                                        type=\"password\"\n                                        disabled={loading}\n                                        autoComplete=\"current-password\"\n                                        required\n                                    />\n                                </div>\n                            </Grid>\n                        </Grid>\n                    </Container>\n                    </CardContent>\n                    <CardActions className={classes.actions}>\n                        <Button\n                            variant=\"contained\"\n                            type=\"submit\"\n                            color=\"primary\"\n                            disabled={loading}\n                            className={classes.button}\n                            fullWidth\n                        >\n                            {loading && (\n                                <CircularProgress\n                                    size={25}\n                                    thickness={2}\n                                />\n                            )}\n                            Register\n                        </Button>\n                        <Typography variant=\"body2\">Or</Typography>\n                        <Link\n                            color=\"textSecondary\"\n                            component={RouterLink}\n                            to=\"/login\"\n                            variant=\"body1\"\n                        >\n                            Login\n                        </Link>\n                    </CardActions>\n                </form>\n            )}\n        />\n    );\n};\n\nRegisterForm.propTypes = {\n    redirectTo: PropTypes.string,\n};\n\nexport default RegisterForm;","import React, { ReactNode, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { \n    Card, \n    CardContent, \n    Theme, \n    Avatar,\n    Grid,\n    Link,\n} from '@material-ui/core';\nimport {\n    Notification,\n} from 'react-admin';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { createTheme, makeStyles } from '@material-ui/core/styles';\nimport classnames from 'classnames';\nimport { lightTheme } from '../layout/themes';\n\nimport RegisterForm from './RegisterForm';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n        main: {\n            display: 'flex',\n            flexDirection: 'column',\n            minHeight: '100vh',\n            // height: '1px',\n            alignItems: 'center',\n            justifyContent: 'center',\n            backgroundRepeat: 'no-repeat',\n            backgroundSize: 'cover',\n            backgroundImage:\n                'radial-gradient(circle at 50% 50%, #313264 0%, #00023b 50%, #00023b 100%)',\n        },\n        card: {\n            minWidth: 300,\n            // marginTop: '6em',\n        },\n        avatar: {\n            margin: '1em',\n            display: 'flex',\n            justifyContent: 'center',\n        },\n        icon: {\n            backgroundColor: theme.palette.secondary.main,\n        },\n        hint: {\n            marginTop: '1em',\n            display: 'flex',\n            justifyContent: 'center',\n            color: theme.palette.grey[500],\n        },\n    }),\n    { name: 'Register' }\n);\n\nconst Register = () => {\n    const classes = useStyles();\n    return (\n            <div className={classes.main}>\n                <Card className={classes.card}>\n                    <div className={classes.avatar}>\n                        <Avatar className={classes.icon}>\n                            <ExitToAppIcon />\n                        </Avatar>\n                    </div>\n                    <div className={classes.hint}>\n                                Register to Assistor.\n                            </div>\n                    <RegisterForm />\n                </Card>\n                <Notification />\n            </div>\n    );\n}\n\nconst RegisterWithTheme = (props: any) => (\n    <ThemeProvider theme={createTheme(lightTheme)}>\n        <Register {...props} />\n    </ThemeProvider>\n);\n\nexport default RegisterWithTheme;","import { ThemeName } from '../types';\n\nexport const CHANGE_THEME = 'CHANGE_THEME';\n\nexport const changeTheme = (theme: ThemeName) => ({\n    type: CHANGE_THEME,\n    payload: theme,\n});","import * as React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport { useTranslate, useLocale, useSetLocale, Title } from 'react-admin';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { changeTheme } from './actions';\nimport { AppState } from '../types';\n\nconst useStyles = makeStyles({\n    label: { width: '10em', display: 'inline-block' },\n    button: { margin: '1em' },\n});\n\nconst Configuration = () => {\n    const translate = useTranslate();\n    const locale = useLocale();\n    const setLocale = useSetLocale();\n    const classes = useStyles();\n    const theme = useSelector((state: AppState) => state.theme);\n    const dispatch = useDispatch();\n    return (\n        <Card>\n            <Title title={translate('app.configuration')} />\n            <CardContent>\n                <div className={classes.label}>\n                    {translate('app.theme.name')}\n                </div>\n                <Button\n                    variant=\"contained\"\n                    className={classes.button}\n                    color={theme === 'light' ? 'primary' : 'default'}\n                    onClick={() => dispatch(changeTheme('light'))}\n                >\n                    {translate('app.theme.light')}\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    className={classes.button}\n                    color={theme === 'dark' ? 'primary' : 'default'}\n                    onClick={() => dispatch(changeTheme('dark'))}\n                >\n                    {translate('app.theme.dark')}\n                </Button>\n            </CardContent>\n            <CardContent>\n                <div className={classes.label}>{translate('pos.language')}</div>\n                <Button\n                    variant=\"contained\"\n                    className={classes.button}\n                    color={locale === 'en' ? 'primary' : 'default'}\n                    onClick={() => setLocale('en')}\n                >\n                    en\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    className={classes.button}\n                    color={locale === 'fr' ? 'primary' : 'default'}\n                    onClick={() => setLocale('fr')}\n                >\n                    fr\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    className={classes.button}\n                    color={locale === 'ja' ? 'primary' : 'default'}\n                    onClick={() => setLocale('ja')}\n                >\n                    ja\n                </Button>\n            </CardContent>\n        </Card>\n    );\n};\n\nexport default Configuration;","import * as React from \"react\";\nimport { RouteWithoutLayout } from 'react-admin';\nimport { Route } from 'react-router-dom';\nimport Register from './auth/RegisterPage';\nimport Configuration from './configuration/Configuration';\n\nexport const customRoutes = [\n    <RouteWithoutLayout exact path=\"/register\" component={Register} />,\n    <Route exact path=\"/configuration\" render={() => <Configuration />} />,\n];","import { Reducer } from 'redux';\nimport { CHANGE_THEME, changeTheme } from './configuration/actions';\nimport { ThemeName } from './types';\n\ntype State = ThemeName;\ntype Action =\n    | ReturnType<typeof changeTheme>\n    | { type: 'OTHER_ACTION'; payload?: any };\n\nconst themeReducer: Reducer<State, Action> = (\n    previousState = 'light',\n    action\n) => {\n    if (action.type === CHANGE_THEME) {\n        return action.payload;\n    }\n    return previousState;\n};\n\nexport default themeReducer;","import { TranslationMessages } from 'react-admin';\nimport englishMessages from 'ra-language-english';\n\nconst customEnglishMessages: TranslationMessages = {\n    ...englishMessages,\n\n};\n\nexport default customEnglishMessages;","import * as React from 'react';\nimport { Admin, Resource, ListGuesser, EditGuesser, ShowGuesser, defaultTheme } from 'react-admin';\nimport {\n    unstable_createMuiStrictModeTheme,\n    createTheme,\n} from '@material-ui/core/styles';\nimport polyglotI18nProvider from 'ra-i18n-polyglot';\n\nimport { dataProvider } from './dataProvider';\nimport { authProvider } from './authProvider';\nimport { Login, Layout } from './layout';\nimport contacts from './contacts';\nimport companies from './companies';\nimport products from './products';\nimport tasks from './tasks';\nimport productfamiliess from './productFamilies';\nimport deals from './deals';\nimport { Dashboard } from './dashboard/Dashboard';\nimport { customRoutes } from './customRoutes';\nimport themeReducer from './themeReducer';\n// import Login from './Login'\nimport productFamilies from './productFamilies';\nimport englishMessages from './i18n/en';\n\n// FIXME MUI bug https://github.com/mui-org/material-ui/issues/13394\nconst theme =\n    process.env.NODE_ENV !== 'production'\n        ? unstable_createMuiStrictModeTheme(defaultTheme)\n        : createTheme(defaultTheme);\n\nconst i18nProvider = polyglotI18nProvider(locale => {\n    if (locale === 'fr') {\n        return import('./i18n/fr').then(messages => messages.default);\n    }\n    \n    if (locale === 'ja') {\n        return import('./i18n/ja').then(messages => messages.default);\n    }\n\n    // Always fallback on english\n    return englishMessages;\n}, 'en');\n\nconst App = () => (\n    <Admin\n        customRoutes={customRoutes}\n        dataProvider={dataProvider}\n        authProvider={authProvider}\n        loginPage={Login}\n        layout={Layout}\n        dashboard={Dashboard}\n        customReducers={{ theme: themeReducer }}\n        i18nProvider={i18nProvider}\n        disableTelemetry\n    >\n        <Resource name=\"deals\" {...deals} />\n        <Resource name=\"contacts\" {...contacts} />\n        <Resource name=\"companies\" {...companies} />\n        <Resource name=\"products\" {...products} />\n        <Resource name=\"productProperties\" />\n        <Resource name=\"propertyTypes\" />\n        <Resource name=\"contactNotes\" />\n        <Resource name=\"companyNotes\" />\n        <Resource name=\"productNotes\" />\n        <Resource name=\"dealNotes\" />\n        <Resource name=\"productFamilies\" {...productFamilies} />\n        <Resource name=\"tasks\" {...tasks} />\n        <Resource name=\"sales\" list={ListGuesser} />\n        <Resource name=\"tags\" list={ListGuesser} />\n        <Resource name=\"countries\" list={ListGuesser} />\n    </Admin>\n);\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import { CssBaseline } from '@material-ui/core';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <CssBaseline />\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}